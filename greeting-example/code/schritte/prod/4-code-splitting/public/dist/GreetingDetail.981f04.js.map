{"version":3,"sources":["webpack:///./src/useInput.tsx","webpack:///./src/GreetingDetail.tsx"],"names":["useInput","placeholder","initialValue","_a","external_React_default","a","useState","value","setValue","name","toLowerCase","onChange","event","currentTarget","GreetingDetail","props","initialName","nameInput","resetName","_b","initialGreeting","greetingInput","resetGreeting","inputRef","useRef","saveDisabled","createElement","__assign","ref","onClick","current","focus","disabled","onSave","greeting"],"mappings":"mHAoBe,SAASA,EAASC,EAAqBC,GAC9C,IAAAC,EAAAC,EAAAC,EAAAC,SAAAJ,GAAA,IAACK,EAAAJ,EAAA,GAAOK,EAAAL,EAAA,GAMd,MAAO,CACL,CACEF,YAAWA,EACXQ,KAAMR,EAAYS,cAClBC,SAAU,SAACC,GACT,OAAAJ,EAASI,EAAMC,cAAcN,QAC/BA,MAAKA,GAVT,WACEC,EAAS,+PCbE,SAASM,EAAeC,GAC/B,IAAAZ,EAAAH,EAAA,OAAAe,EAAAC,aAACC,EAAAd,EAAA,GAAWe,EAAAf,EAAA,GACZgB,EAAAnB,EAAA,WAAAe,EAAAK,iBAACC,EAAAF,EAAA,GAAeG,EAAAH,EAAA,GAEhBI,EAAWnB,EAAAC,EAAMmB,OAAyB,MAE1CC,IAAiBR,EAAUV,OAASc,EAAcd,OAkBxD,OACEH,EAAAC,EAAAqB,cAAA,WACEtB,EAAAC,EAAAqB,cAAA,QAAAC,EAAA,GAAWV,EAAS,CAAEW,IAAKL,KAC3BnB,EAAAC,EAAAqB,cAAA,QAAAC,EAAA,GAAWN,IAEXjB,EAAAC,EAAAqB,cAAA,UAAQG,QArBZ,WACEX,IACAI,IAEIC,EAASO,SACXP,EAASO,QAAQC,UAgBK,SACtB3B,EAAAC,EAAAqB,cAAA,UAAQM,SAAUP,EAAcI,QAbpC,WACEd,EAAMkB,OAAO,CACXxB,KAAMQ,EAAUV,MAChB2B,SAAUb,EAAcd,UAUqB","file":"GreetingDetail.981f04.js","sourcesContent":["import React from \"react\";\n/**\n * Aufgaben:\n * 1. Placeholder vorbelegen, davon das 'name' Attribute ableiten\n * 2. initial Value vorbelegen mit \"\", falls nicht gesetzt\n * 3. Setzen des Wertes und auf Veränderungen reagieren\n * 4. Von außen 'reset-bar' sein\n *\n */\n\ntype UseInputResult = [\n  {\n    value: string;\n    placeholder: string;\n    onChange(event: React.SyntheticEvent<HTMLInputElement>): void;\n    name: string;\n  },\n  () => void\n];\n\nexport default function useInput(placeholder: string, initialValue?: string): UseInputResult {\n  const [value, setValue] = React.useState(initialValue || \"\");\n\n  function reset() {\n    setValue(\"\");\n  }\n\n  return [\n    {\n      placeholder,\n      name: placeholder.toLowerCase(),\n      onChange: (event: React.SyntheticEvent<HTMLInputElement>) =>\n        setValue(event.currentTarget.value),\n      value\n    },\n    reset\n  ];\n}\n","import React from \"react\";\nimport useInput from \"./useInput\";\nimport { NewGreeting } from \"./types\";\n\ntype GreetingDetailProps = {\n  initialName?: string;\n  initialGreeting?: string;\n\n  onSave(newGreeting: NewGreeting): void;\n};\n\nexport default function GreetingDetail(props: GreetingDetailProps) {\n  const [nameInput, resetName] = useInput(\"Name\", props.initialName);\n  const [greetingInput, resetGreeting] = useInput(\"Greeting\", props.initialGreeting);\n\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  const saveDisabled = !(nameInput.value && greetingInput.value);\n\n  function reset() {\n    resetName();\n    resetGreeting();\n\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }\n\n  function save() {\n    props.onSave({\n      name: nameInput.value,\n      greeting: greetingInput.value\n    });\n  }\n\n  return (\n    <div>\n      <input {...nameInput} ref={inputRef} />\n      <input {...greetingInput} />\n\n      <button onClick={reset}>Clear</button>\n      <button disabled={saveDisabled} onClick={save}>\n        Save\n      </button>\n    </div>\n  );\n}\n"],"sourceRoot":""}