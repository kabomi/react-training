!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/dist",n(n.s=132)}([function(t,e,n){"use strict";t.exports=n(319)},function(t,e,n){var r=n(2),i=n(8),o=n(15),a=n(12),u=n(18),l=function(t,e,n){var c,s,f,d,p=t&l.F,h=t&l.G,v=t&l.S,g=t&l.P,m=t&l.B,y=h?r:v?r[e]||(r[e]={}):(r[e]||{}).prototype,b=h?i:i[e]||(i[e]={}),x=b.prototype||(b.prototype={});for(c in h&&(n=e),n)f=((s=!p&&y&&void 0!==y[c])?y:n)[c],d=m&&s?u(f,r):g&&"function"==typeof f?u(Function.call,f):f,y&&a(y,c,f,t&l.U),b[c]!=f&&o(b,c,d),g&&x[c]!=f&&(x[c]=f)};r.core=i,l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,t.exports=l},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(5);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(51)("wks"),i=n(31),o=n(2).Symbol,a="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=a&&o[t]||(a?o:i)("Symbol."+t))}).store=r},function(t,e,n){var r=n(20),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,e){var n=t.exports={version:"2.6.6"};"number"==typeof __e&&(__e=n)},function(t,e,n){t.exports=!n(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(4),i=n(96),o=n(28),a=Object.defineProperty;e.f=n(9)?Object.defineProperty:function(t,e,n){if(r(t),e=o(e,!0),r(n),i)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(25);t.exports=function(t){return Object(r(t))}},function(t,e,n){var r=n(2),i=n(15),o=n(14),a=n(31)("src"),u=n(137),l=(""+u).split("toString");n(8).inspectSource=function(t){return u.call(t)},(t.exports=function(t,e,n,u){var c="function"==typeof n;c&&(o(n,"name")||i(n,"name",e)),t[e]!==n&&(c&&(o(n,a)||i(n,a,t[e]?""+t[e]:l.join(String(e)))),t===r?t[e]=n:u?t[e]?t[e]=n:i(t,e,n):(delete t[e],i(t,e,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||u.call(this)})},function(t,e,n){var r=n(1),i=n(3),o=n(25),a=/"/g,u=function(t,e,n,r){var i=String(o(t)),u="<"+e;return""!==n&&(u+=" "+n+'="'+String(r).replace(a,"&quot;")+'"'),u+">"+i+"</"+e+">"};t.exports=function(t,e){var n={};n[t]=e(u),r(r.P+r.F*i(function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}),"String",n)}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(10),i=n(30);t.exports=n(9)?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(47),i=n(25);t.exports=function(t){return r(i(t))}},function(t,e,n){"use strict";var r=n(3);t.exports=function(t,e){return!!t&&r(function(){e?t.call(null,function(){},1):t.call(null)})}},function(t,e,n){var r=n(19);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(48),i=n(30),o=n(16),a=n(28),u=n(14),l=n(96),c=Object.getOwnPropertyDescriptor;e.f=n(9)?c:function(t,e){if(t=o(t),e=a(e,!0),l)try{return c(t,e)}catch(t){}if(u(t,e))return i(!r.f.call(t,e),t[e])}},function(t,e,n){var r=n(1),i=n(8),o=n(3);t.exports=function(t,e){var n=(i.Object||{})[t]||Object[t],a={};a[t]=e(n),r(r.S+r.F*o(function(){n(1)}),"Object",a)}},function(t,e,n){var r=n(18),i=n(47),o=n(11),a=n(7),u=n(112);t.exports=function(t,e){var n=1==t,l=2==t,c=3==t,s=4==t,f=6==t,d=5==t||f,p=e||u;return function(e,u,h){for(var v,g,m=o(e),y=i(m),b=r(u,h,3),x=a(y.length),w=0,k=n?p(e,x):l?p(e,0):void 0;x>w;w++)if((d||w in y)&&(g=b(v=y[w],w,m),t))if(n)k[w]=g;else if(g)switch(t){case 3:return!0;case 5:return v;case 6:return w;case 2:k.push(v)}else if(s)return!1;return f?-1:c||s?s:k}}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){"use strict";if(n(9)){var r=n(32),i=n(2),o=n(3),a=n(1),u=n(62),l=n(88),c=n(18),s=n(45),f=n(30),d=n(15),p=n(46),h=n(20),v=n(7),g=n(123),m=n(34),y=n(28),b=n(14),x=n(49),w=n(5),k=n(11),M=n(80),S=n(35),E=n(37),_=n(36).f,C=n(82),T=n(31),A=n(6),P=n(23),N=n(52),O=n(50),F=n(84),L=n(43),D=n(55),R=n(44),I=n(83),j=n(114),z=n(10),W=n(21),B=z.f,U=W.f,V=i.RangeError,H=i.TypeError,q=i.Uint8Array,Y=Array.prototype,G=l.ArrayBuffer,$=l.DataView,X=P(0),K=P(2),Z=P(3),Q=P(4),J=P(5),tt=P(6),et=N(!0),nt=N(!1),rt=F.values,it=F.keys,ot=F.entries,at=Y.lastIndexOf,ut=Y.reduce,lt=Y.reduceRight,ct=Y.join,st=Y.sort,ft=Y.slice,dt=Y.toString,pt=Y.toLocaleString,ht=A("iterator"),vt=A("toStringTag"),gt=T("typed_constructor"),mt=T("def_constructor"),yt=u.CONSTR,bt=u.TYPED,xt=u.VIEW,wt=P(1,function(t,e){return _t(O(t,t[mt]),e)}),kt=o(function(){return 1===new q(new Uint16Array([1]).buffer)[0]}),Mt=!!q&&!!q.prototype.set&&o(function(){new q(1).set({})}),St=function(t,e){var n=h(t);if(n<0||n%e)throw V("Wrong offset!");return n},Et=function(t){if(w(t)&&bt in t)return t;throw H(t+" is not a typed array!")},_t=function(t,e){if(!(w(t)&&gt in t))throw H("It is not a typed array constructor!");return new t(e)},Ct=function(t,e){return Tt(O(t,t[mt]),e)},Tt=function(t,e){for(var n=0,r=e.length,i=_t(t,r);r>n;)i[n]=e[n++];return i},At=function(t,e,n){B(t,e,{get:function(){return this._d[n]}})},Pt=function(t){var e,n,r,i,o,a,u=k(t),l=arguments.length,s=l>1?arguments[1]:void 0,f=void 0!==s,d=C(u);if(null!=d&&!M(d)){for(a=d.call(u),r=[],e=0;!(o=a.next()).done;e++)r.push(o.value);u=r}for(f&&l>2&&(s=c(s,arguments[2],2)),e=0,n=v(u.length),i=_t(this,n);n>e;e++)i[e]=f?s(u[e],e):u[e];return i},Nt=function(){for(var t=0,e=arguments.length,n=_t(this,e);e>t;)n[t]=arguments[t++];return n},Ot=!!q&&o(function(){pt.call(new q(1))}),Ft=function(){return pt.apply(Ot?ft.call(Et(this)):Et(this),arguments)},Lt={copyWithin:function(t,e){return j.call(Et(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return Q(Et(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return I.apply(Et(this),arguments)},filter:function(t){return Ct(this,K(Et(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return J(Et(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Et(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){X(Et(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return nt(Et(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(Et(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return ct.apply(Et(this),arguments)},lastIndexOf:function(t){return at.apply(Et(this),arguments)},map:function(t){return wt(Et(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ut.apply(Et(this),arguments)},reduceRight:function(t){return lt.apply(Et(this),arguments)},reverse:function(){for(var t,e=Et(this).length,n=Math.floor(e/2),r=0;r<n;)t=this[r],this[r++]=this[--e],this[e]=t;return this},some:function(t){return Z(Et(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return st.call(Et(this),t)},subarray:function(t,e){var n=Et(this),r=n.length,i=m(t,r);return new(O(n,n[mt]))(n.buffer,n.byteOffset+i*n.BYTES_PER_ELEMENT,v((void 0===e?r:m(e,r))-i))}},Dt=function(t,e){return Ct(this,ft.call(Et(this),t,e))},Rt=function(t){Et(this);var e=St(arguments[1],1),n=this.length,r=k(t),i=v(r.length),o=0;if(i+e>n)throw V("Wrong length!");for(;o<i;)this[e+o]=r[o++]},It={entries:function(){return ot.call(Et(this))},keys:function(){return it.call(Et(this))},values:function(){return rt.call(Et(this))}},jt=function(t,e){return w(t)&&t[bt]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},zt=function(t,e){return jt(t,e=y(e,!0))?f(2,t[e]):U(t,e)},Wt=function(t,e,n){return!(jt(t,e=y(e,!0))&&w(n)&&b(n,"value"))||b(n,"get")||b(n,"set")||n.configurable||b(n,"writable")&&!n.writable||b(n,"enumerable")&&!n.enumerable?B(t,e,n):(t[e]=n.value,t)};yt||(W.f=zt,z.f=Wt),a(a.S+a.F*!yt,"Object",{getOwnPropertyDescriptor:zt,defineProperty:Wt}),o(function(){dt.call({})})&&(dt=pt=function(){return ct.call(this)});var Bt=p({},Lt);p(Bt,It),d(Bt,ht,It.values),p(Bt,{slice:Dt,set:Rt,constructor:function(){},toString:dt,toLocaleString:Ft}),At(Bt,"buffer","b"),At(Bt,"byteOffset","o"),At(Bt,"byteLength","l"),At(Bt,"length","e"),B(Bt,vt,{get:function(){return this[bt]}}),t.exports=function(t,e,n,l){var c=t+((l=!!l)?"Clamped":"")+"Array",f="get"+t,p="set"+t,h=i[c],m=h||{},y=h&&E(h),b=!h||!u.ABV,k={},M=h&&h.prototype,C=function(t,n){B(t,n,{get:function(){return function(t,n){var r=t._d;return r.v[f](n*e+r.o,kt)}(this,n)},set:function(t){return function(t,n,r){var i=t._d;l&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),i.v[p](n*e+i.o,r,kt)}(this,n,t)},enumerable:!0})};b?(h=n(function(t,n,r,i){s(t,h,c,"_d");var o,a,u,l,f=0,p=0;if(w(n)){if(!(n instanceof G||"ArrayBuffer"==(l=x(n))||"SharedArrayBuffer"==l))return bt in n?Tt(h,n):Pt.call(h,n);o=n,p=St(r,e);var m=n.byteLength;if(void 0===i){if(m%e)throw V("Wrong length!");if((a=m-p)<0)throw V("Wrong length!")}else if((a=v(i)*e)+p>m)throw V("Wrong length!");u=a/e}else u=g(n),o=new G(a=u*e);for(d(t,"_d",{b:o,o:p,l:a,e:u,v:new $(o)});f<u;)C(t,f++)}),M=h.prototype=S(Bt),d(M,"constructor",h)):o(function(){h(1)})&&o(function(){new h(-1)})&&D(function(t){new h,new h(null),new h(1.5),new h(t)},!0)||(h=n(function(t,n,r,i){var o;return s(t,h,c),w(n)?n instanceof G||"ArrayBuffer"==(o=x(n))||"SharedArrayBuffer"==o?void 0!==i?new m(n,St(r,e),i):void 0!==r?new m(n,St(r,e)):new m(n):bt in n?Tt(h,n):Pt.call(h,n):new m(g(n))}),X(y!==Function.prototype?_(m).concat(_(y)):_(m),function(t){t in h||d(h,t,m[t])}),h.prototype=M,r||(M.constructor=h));var T=M[ht],A=!!T&&("values"==T.name||null==T.name),P=It.values;d(h,gt,!0),d(M,bt,c),d(M,xt,!0),d(M,mt,h),(l?new h(1)[vt]==c:vt in M)||B(M,vt,{get:function(){return c}}),k[c]=h,a(a.G+a.W+a.F*(h!=m),k),a(a.S,c,{BYTES_PER_ELEMENT:e}),a(a.S+a.F*o(function(){m.of.call(h,1)}),c,{from:Pt,of:Nt}),"BYTES_PER_ELEMENT"in M||d(M,"BYTES_PER_ELEMENT",e),a(a.P,c,Lt),R(c),a(a.P+a.F*Mt,c,{set:Rt}),a(a.P+a.F*!A,c,It),r||M.toString==dt||(M.toString=dt),a(a.P+a.F*o(function(){new h(1).slice()}),c,{slice:Dt}),a(a.P+a.F*(o(function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()})||!o(function(){M.toLocaleString.call([1,2])})),c,{toLocaleString:Ft}),L[c]=A?T:P,r||A||d(M,ht,P)}}else t.exports=function(){}},function(t,e,n){"use strict";t.exports=function(t,e,n,r,i,o,a,u){if(!t){var l;if(void 0===e)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,i,o,a,u],s=0;(l=new Error(e.replace(/%s/g,function(){return c[s++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(t,e,n){var r=n(5);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r=n(31)("meta"),i=n(5),o=n(14),a=n(10).f,u=0,l=Object.isExtensible||function(){return!0},c=!n(3)(function(){return l(Object.preventExtensions({}))}),s=function(t){a(t,r,{value:{i:"O"+ ++u,w:{}}})},f=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!l(t))return"F";if(!e)return"E";s(t)}return t[r].i},getWeak:function(t,e){if(!o(t,r)){if(!l(t))return!0;if(!e)return!1;s(t)}return t[r].w},onFreeze:function(t){return c&&f.NEED&&l(t)&&!o(t,r)&&s(t),t}}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e){t.exports=!1},function(t,e,n){var r=n(98),i=n(67);t.exports=Object.keys||function(t){return r(t,i)}},function(t,e,n){var r=n(20),i=Math.max,o=Math.min;t.exports=function(t,e){return(t=r(t))<0?i(t+e,0):o(t,e)}},function(t,e,n){var r=n(4),i=n(99),o=n(67),a=n(66)("IE_PROTO"),u=function(){},l=function(){var t,e=n(64)("iframe"),r=o.length;for(e.style.display="none",n(68).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),l=t.F;r--;)delete l.prototype[o[r]];return l()};t.exports=Object.create||function(t,e){var n;return null!==t?(u.prototype=r(t),n=new u,u.prototype=null,n[a]=t):n=l(),void 0===e?n:i(n,e)}},function(t,e,n){var r=n(98),i=n(67).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,e,n){var r=n(14),i=n(11),o=n(66)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,e,n){var r=n(6)("unscopables"),i=Array.prototype;null==i[r]&&n(15)(i,r,{}),t.exports=function(t){i[r][t]=!0}},function(t,e,n){var r=n(5);t.exports=function(t,e){if(!r(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e,n){t.exports=n(323)()},function(t,e,n){var r=n(10).f,i=n(14),o=n(6)("toStringTag");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},function(t,e,n){var r=n(1),i=n(25),o=n(3),a=n(70),u="["+a+"]",l=RegExp("^"+u+u+"*"),c=RegExp(u+u+"*$"),s=function(t,e,n){var i={},u=o(function(){return!!a[t]()||"​"!="​"[t]()}),l=i[t]=u?e(f):a[t];n&&(i[n]=l),r(r.P+r.F*u,"String",i)},f=s.trim=function(t,e){return t=String(i(t)),1&e&&(t=t.replace(l,"")),2&e&&(t=t.replace(c,"")),t};t.exports=s},function(t,e){t.exports={}},function(t,e,n){"use strict";var r=n(2),i=n(10),o=n(9),a=n(6)("species");t.exports=function(t){var e=r[t];o&&e&&!e[a]&&i.f(e,a,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t}},function(t,e,n){var r=n(12);t.exports=function(t,e,n){for(var i in e)r(t,i,e[i],n);return t}},function(t,e,n){var r=n(24);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){var r=n(24),i=n(6)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:o?r(e):"Object"==(a=r(e))&&"function"==typeof e.callee?"Arguments":a}},function(t,e,n){var r=n(4),i=n(19),o=n(6)("species");t.exports=function(t,e){var n,a=r(t).constructor;return void 0===a||null==(n=r(a)[o])?e:i(n)}},function(t,e,n){var r=n(8),i=n(2),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(32)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e,n){var r=n(16),i=n(7),o=n(34);t.exports=function(t){return function(e,n,a){var u,l=r(e),c=i(l.length),s=o(a,c);if(t&&n!=n){for(;c>s;)if((u=l[s++])!=u)return!0}else for(;c>s;s++)if((t||s in l)&&l[s]===n)return t||s||0;return!t&&-1}}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(24);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(6)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var o=[7],a=o[r]();a.next=function(){return{done:n=!0}},o[r]=function(){return a},t(o)}catch(t){}return n}},function(t,e,n){"use strict";var r=n(4);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,n){"use strict";var r=n(49),i=RegExp.prototype.exec;t.exports=function(t,e){var n=t.exec;if("function"==typeof n){var o=n.call(t,e);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,e)}},function(t,e,n){"use strict";n(116);var r=n(12),i=n(15),o=n(3),a=n(25),u=n(6),l=n(85),c=u("species"),s=!o(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),f=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();t.exports=function(t,e,n){var d=u(t),p=!o(function(){var e={};return e[d]=function(){return 7},7!=""[t](e)}),h=p?!o(function(){var e=!1,n=/a/;return n.exec=function(){return e=!0,null},"split"===t&&(n.constructor={},n.constructor[c]=function(){return n}),n[d](""),!e}):void 0;if(!p||!h||"replace"===t&&!s||"split"===t&&!f){var v=/./[d],g=n(a,d,""[t],function(t,e,n,r,i){return e.exec===l?p&&!i?{done:!0,value:v.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}}),m=g[0],y=g[1];r(String.prototype,t,m),i(RegExp.prototype,d,2==e?function(t,e){return y.call(t,this,e)}:function(t){return y.call(t,this)})}}},function(t,e,n){var r=n(18),i=n(111),o=n(80),a=n(4),u=n(7),l=n(82),c={},s={};(e=t.exports=function(t,e,n,f,d){var p,h,v,g,m=d?function(){return t}:l(t),y=r(n,f,e?2:1),b=0;if("function"!=typeof m)throw TypeError(t+" is not iterable!");if(o(m)){for(p=u(t.length);p>b;b++)if((g=e?y(a(h=t[b])[0],h[1]):y(t[b]))===c||g===s)return g}else for(v=m.call(t);!(h=v.next()).done;)if((g=i(v,y,h.value,e))===c||g===s)return g}).BREAK=c,e.RETURN=s},function(t,e,n){var r=n(2).navigator;t.exports=r&&r.userAgent||""},function(t,e,n){"use strict";var r=n(2),i=n(1),o=n(12),a=n(46),u=n(29),l=n(59),c=n(45),s=n(5),f=n(3),d=n(55),p=n(41),h=n(71);t.exports=function(t,e,n,v,g,m){var y=r[t],b=y,x=g?"set":"add",w=b&&b.prototype,k={},M=function(t){var e=w[t];o(w,t,"delete"==t?function(t){return!(m&&!s(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(m&&!s(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return m&&!s(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,n){return e.call(this,0===t?0:t,n),this})};if("function"==typeof b&&(m||w.forEach&&!f(function(){(new b).entries().next()}))){var S=new b,E=S[x](m?{}:-0,1)!=S,_=f(function(){S.has(1)}),C=d(function(t){new b(t)}),T=!m&&f(function(){for(var t=new b,e=5;e--;)t[x](e,e);return!t.has(-0)});C||((b=e(function(e,n){c(e,b,t);var r=h(new y,e,b);return null!=n&&l(n,g,r[x],r),r})).prototype=w,w.constructor=b),(_||T)&&(M("delete"),M("has"),g&&M("get")),(T||E)&&M(x),m&&w.clear&&delete w.clear}else b=v.getConstructor(e,t,g,x),a(b.prototype,n),u.NEED=!0;return p(b,t),k[t]=b,i(i.G+i.W+i.F*(b!=y),k),m||v.setStrong(b,t,g),b}},function(t,e,n){for(var r,i=n(2),o=n(15),a=n(31),u=a("typed_array"),l=a("view"),c=!(!i.ArrayBuffer||!i.DataView),s=c,f=0,d="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=i[d[f++]])?(o(r.prototype,u,!0),o(r.prototype,l,!0)):s=!1;t.exports={ABV:c,CONSTR:s,TYPED:u,VIEW:l}},function(t,e,n){"use strict";!function t(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(t){console.error(t)}}(),t.exports=n(320)},function(t,e,n){var r=n(5),i=n(2).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,e,n){e.f=n(6)},function(t,e,n){var r=n(51)("keys"),i=n(31);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(2).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(5),i=n(4),o=function(t,e){if(i(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{(r=n(18)(Function.call,n(21).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return o(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:o}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,n){var r=n(5),i=n(69).set;t.exports=function(t,e,n){var o,a=e.constructor;return a!==n&&"function"==typeof a&&(o=a.prototype)!==n.prototype&&r(o)&&i&&i(t,o),t}},function(t,e,n){"use strict";var r=n(20),i=n(25);t.exports=function(t){var e=String(i(this)),n="",o=r(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(e+=e))1&o&&(n+=e);return n}},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e){var n=Math.expm1;t.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:n},function(t,e,n){var r=n(20),i=n(25);t.exports=function(t){return function(e,n){var o,a,u=String(i(e)),l=r(n),c=u.length;return l<0||l>=c?t?"":void 0:(o=u.charCodeAt(l))<55296||o>56319||l+1===c||(a=u.charCodeAt(l+1))<56320||a>57343?t?u.charAt(l):o:t?u.slice(l,l+2):a-56320+(o-55296<<10)+65536}}},function(t,e,n){"use strict";var r=n(32),i=n(1),o=n(12),a=n(15),u=n(43),l=n(110),c=n(41),s=n(37),f=n(6)("iterator"),d=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,n,h,v,g,m){l(n,e,h);var y,b,x,w=function(t){if(!d&&t in E)return E[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},k=e+" Iterator",M="values"==v,S=!1,E=t.prototype,_=E[f]||E["@@iterator"]||v&&E[v],C=_||w(v),T=v?M?w("entries"):C:void 0,A="Array"==e&&E.entries||_;if(A&&(x=s(A.call(new t)))!==Object.prototype&&x.next&&(c(x,k,!0),r||"function"==typeof x[f]||a(x,f,p)),M&&_&&"values"!==_.name&&(S=!0,C=function(){return _.call(this)}),r&&!m||!d&&!S&&E[f]||a(E,f,C),u[e]=C,u[k]=p,v)if(y={values:M?C:w("values"),keys:g?C:w("keys"),entries:T},m)for(b in y)b in E||o(E,b,y[b]);else i(i.P+i.F*(d||S),e,y);return y}},function(t,e,n){var r=n(78),i=n(25);t.exports=function(t,e,n){if(r(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(i(t))}},function(t,e,n){var r=n(5),i=n(24),o=n(6)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==i(t))}},function(t,e,n){var r=n(6)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,n){var r=n(43),i=n(6)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,e,n){"use strict";var r=n(10),i=n(30);t.exports=function(t,e,n){e in t?r.f(t,e,i(0,n)):t[e]=n}},function(t,e,n){var r=n(49),i=n(6)("iterator"),o=n(43);t.exports=n(8).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,e,n){"use strict";var r=n(11),i=n(34),o=n(7);t.exports=function(t){for(var e=r(this),n=o(e.length),a=arguments.length,u=i(a>1?arguments[1]:void 0,n),l=a>2?arguments[2]:void 0,c=void 0===l?n:i(l,n);c>u;)e[u++]=t;return e}},function(t,e,n){"use strict";var r=n(38),i=n(115),o=n(43),a=n(16);t.exports=n(76)(Array,"Array",function(t,e){this._t=a(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,e,n){"use strict";var r,i,o=n(56),a=RegExp.prototype.exec,u=String.prototype.replace,l=a,c=(r=/a/,i=/b*/g,a.call(r,"a"),a.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),s=void 0!==/()??/.exec("")[1];(c||s)&&(l=function(t){var e,n,r,i,l=this;return s&&(n=new RegExp("^"+l.source+"$(?!\\s)",o.call(l))),c&&(e=l.lastIndex),r=a.call(l,t),c&&r&&(l.lastIndex=l.global?r.index+r[0].length:e),s&&r&&r.length>1&&u.call(r[0],n,function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)}),r}),t.exports=l},function(t,e,n){"use strict";var r=n(75)(!0);t.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},function(t,e,n){var r,i,o,a=n(18),u=n(104),l=n(68),c=n(64),s=n(2),f=s.process,d=s.setImmediate,p=s.clearImmediate,h=s.MessageChannel,v=s.Dispatch,g=0,m={},y=function(){var t=+this;if(m.hasOwnProperty(t)){var e=m[t];delete m[t],e()}},b=function(t){y.call(t.data)};d&&p||(d=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return m[++g]=function(){u("function"==typeof t?t:Function(t),e)},r(g),g},p=function(t){delete m[t]},"process"==n(24)(f)?r=function(t){f.nextTick(a(y,t,1))}:v&&v.now?r=function(t){v.now(a(y,t,1))}:h?(o=(i=new h).port2,i.port1.onmessage=b,r=a(o.postMessage,o,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(r=function(t){s.postMessage(t+"","*")},s.addEventListener("message",b,!1)):r="onreadystatechange"in c("script")?function(t){l.appendChild(c("script")).onreadystatechange=function(){l.removeChild(this),y.call(t)}}:function(t){setTimeout(a(y,t,1),0)}),t.exports={set:d,clear:p}},function(t,e,n){"use strict";var r=n(2),i=n(9),o=n(32),a=n(62),u=n(15),l=n(46),c=n(3),s=n(45),f=n(20),d=n(7),p=n(123),h=n(36).f,v=n(10).f,g=n(83),m=n(41),y="prototype",b="Wrong index!",x=r.ArrayBuffer,w=r.DataView,k=r.Math,M=r.RangeError,S=r.Infinity,E=x,_=k.abs,C=k.pow,T=k.floor,A=k.log,P=k.LN2,N=i?"_b":"buffer",O=i?"_l":"byteLength",F=i?"_o":"byteOffset";function L(t,e,n){var r,i,o,a=new Array(n),u=8*n-e-1,l=(1<<u)-1,c=l>>1,s=23===e?C(2,-24)-C(2,-77):0,f=0,d=t<0||0===t&&1/t<0?1:0;for((t=_(t))!=t||t===S?(i=t!=t?1:0,r=l):(r=T(A(t)/P),t*(o=C(2,-r))<1&&(r--,o*=2),(t+=r+c>=1?s/o:s*C(2,1-c))*o>=2&&(r++,o/=2),r+c>=l?(i=0,r=l):r+c>=1?(i=(t*o-1)*C(2,e),r+=c):(i=t*C(2,c-1)*C(2,e),r=0));e>=8;a[f++]=255&i,i/=256,e-=8);for(r=r<<e|i,u+=e;u>0;a[f++]=255&r,r/=256,u-=8);return a[--f]|=128*d,a}function D(t,e,n){var r,i=8*n-e-1,o=(1<<i)-1,a=o>>1,u=i-7,l=n-1,c=t[l--],s=127&c;for(c>>=7;u>0;s=256*s+t[l],l--,u-=8);for(r=s&(1<<-u)-1,s>>=-u,u+=e;u>0;r=256*r+t[l],l--,u-=8);if(0===s)s=1-a;else{if(s===o)return r?NaN:c?-S:S;r+=C(2,e),s-=a}return(c?-1:1)*r*C(2,s-e)}function R(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function I(t){return[255&t]}function j(t){return[255&t,t>>8&255]}function z(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function W(t){return L(t,52,8)}function B(t){return L(t,23,4)}function U(t,e,n){v(t[y],e,{get:function(){return this[n]}})}function V(t,e,n,r){var i=p(+n);if(i+e>t[O])throw M(b);var o=t[N]._b,a=i+t[F],u=o.slice(a,a+e);return r?u:u.reverse()}function H(t,e,n,r,i,o){var a=p(+n);if(a+e>t[O])throw M(b);for(var u=t[N]._b,l=a+t[F],c=r(+i),s=0;s<e;s++)u[l+s]=c[o?s:e-s-1]}if(a.ABV){if(!c(function(){x(1)})||!c(function(){new x(-1)})||c(function(){return new x,new x(1.5),new x(NaN),"ArrayBuffer"!=x.name})){for(var q,Y=(x=function(t){return s(this,x),new E(p(t))})[y]=E[y],G=h(E),$=0;G.length>$;)(q=G[$++])in x||u(x,q,E[q]);o||(Y.constructor=x)}var X=new w(new x(2)),K=w[y].setInt8;X.setInt8(0,2147483648),X.setInt8(1,2147483649),!X.getInt8(0)&&X.getInt8(1)||l(w[y],{setInt8:function(t,e){K.call(this,t,e<<24>>24)},setUint8:function(t,e){K.call(this,t,e<<24>>24)}},!0)}else x=function(t){s(this,x,"ArrayBuffer");var e=p(t);this._b=g.call(new Array(e),0),this[O]=e},w=function(t,e,n){s(this,w,"DataView"),s(t,x,"DataView");var r=t[O],i=f(e);if(i<0||i>r)throw M("Wrong offset!");if(i+(n=void 0===n?r-i:d(n))>r)throw M("Wrong length!");this[N]=t,this[F]=i,this[O]=n},i&&(U(x,"byteLength","_l"),U(w,"buffer","_b"),U(w,"byteLength","_l"),U(w,"byteOffset","_o")),l(w[y],{getInt8:function(t){return V(this,1,t)[0]<<24>>24},getUint8:function(t){return V(this,1,t)[0]},getInt16:function(t){var e=V(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=V(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return R(V(this,4,t,arguments[1]))},getUint32:function(t){return R(V(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return D(V(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return D(V(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){H(this,1,t,I,e)},setUint8:function(t,e){H(this,1,t,I,e)},setInt16:function(t,e){H(this,2,t,j,e,arguments[2])},setUint16:function(t,e){H(this,2,t,j,e,arguments[2])},setInt32:function(t,e){H(this,4,t,z,e,arguments[2])},setUint32:function(t,e){H(this,4,t,z,e,arguments[2])},setFloat32:function(t,e){H(this,4,t,B,e,arguments[2])},setFloat64:function(t,e){H(this,8,t,W,e,arguments[2])}});m(x,"ArrayBuffer"),m(w,"DataView"),u(w[y],a.VIEW,!0),e.ArrayBuffer=x,e.DataView=w},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){t.exports=!n(128)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){var r,i;!function(){var o={version:"3.5.17"},a=[].slice,u=function(t){return a.call(t)},l=this.document;function c(t){return t&&(t.ownerDocument||t.document||t).documentElement}function s(t){return t&&(t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView)}if(l)try{u(l.documentElement.childNodes)[0].nodeType}catch(t){u=function(t){for(var e=t.length,n=new Array(e);e--;)n[e]=t[e];return n}}if(Date.now||(Date.now=function(){return+new Date}),l)try{l.createElement("DIV").style.setProperty("opacity",0,"")}catch(t){var f=this.Element.prototype,d=f.setAttribute,p=f.setAttributeNS,h=this.CSSStyleDeclaration.prototype,v=h.setProperty;f.setAttribute=function(t,e){d.call(this,t,e+"")},f.setAttributeNS=function(t,e,n){p.call(this,t,e,n+"")},h.setProperty=function(t,e,n){v.call(this,t,e+"",n)}}function g(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function m(t){return null===t?NaN:+t}function y(t){return!isNaN(t)}function b(t){return{left:function(e,n,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)<0?r=o+1:i=o}return r},right:function(e,n,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)>0?i=o:r=o+1}return r}}}o.ascending=g,o.descending=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},o.min=function(t,e){var n,r,i=-1,o=t.length;if(1===arguments.length){for(;++i<o;)if(null!=(r=t[i])&&r>=r){n=r;break}for(;++i<o;)null!=(r=t[i])&&n>r&&(n=r)}else{for(;++i<o;)if(null!=(r=e.call(t,t[i],i))&&r>=r){n=r;break}for(;++i<o;)null!=(r=e.call(t,t[i],i))&&n>r&&(n=r)}return n},o.max=function(t,e){var n,r,i=-1,o=t.length;if(1===arguments.length){for(;++i<o;)if(null!=(r=t[i])&&r>=r){n=r;break}for(;++i<o;)null!=(r=t[i])&&r>n&&(n=r)}else{for(;++i<o;)if(null!=(r=e.call(t,t[i],i))&&r>=r){n=r;break}for(;++i<o;)null!=(r=e.call(t,t[i],i))&&r>n&&(n=r)}return n},o.extent=function(t,e){var n,r,i,o=-1,a=t.length;if(1===arguments.length){for(;++o<a;)if(null!=(r=t[o])&&r>=r){n=i=r;break}for(;++o<a;)null!=(r=t[o])&&(n>r&&(n=r),i<r&&(i=r))}else{for(;++o<a;)if(null!=(r=e.call(t,t[o],o))&&r>=r){n=i=r;break}for(;++o<a;)null!=(r=e.call(t,t[o],o))&&(n>r&&(n=r),i<r&&(i=r))}return[n,i]},o.sum=function(t,e){var n,r=0,i=t.length,o=-1;if(1===arguments.length)for(;++o<i;)y(n=+t[o])&&(r+=n);else for(;++o<i;)y(n=+e.call(t,t[o],o))&&(r+=n);return r},o.mean=function(t,e){var n,r=0,i=t.length,o=-1,a=i;if(1===arguments.length)for(;++o<i;)y(n=m(t[o]))?r+=n:--a;else for(;++o<i;)y(n=m(e.call(t,t[o],o)))?r+=n:--a;if(a)return r/a},o.quantile=function(t,e){var n=(t.length-1)*e+1,r=Math.floor(n),i=+t[r-1],o=n-r;return o?i+o*(t[r]-i):i},o.median=function(t,e){var n,r=[],i=t.length,a=-1;if(1===arguments.length)for(;++a<i;)y(n=m(t[a]))&&r.push(n);else for(;++a<i;)y(n=m(e.call(t,t[a],a)))&&r.push(n);if(r.length)return o.quantile(r.sort(g),.5)},o.variance=function(t,e){var n,r,i=t.length,o=0,a=0,u=-1,l=0;if(1===arguments.length)for(;++u<i;)y(n=m(t[u]))&&(a+=(r=n-o)*(n-(o+=r/++l)));else for(;++u<i;)y(n=m(e.call(t,t[u],u)))&&(a+=(r=n-o)*(n-(o+=r/++l)));if(l>1)return a/(l-1)},o.deviation=function(){var t=o.variance.apply(this,arguments);return t?Math.sqrt(t):t};var x=b(g);function w(t){return t.length}o.bisectLeft=x.left,o.bisect=o.bisectRight=x.right,o.bisector=function(t){return b(1===t.length?function(e,n){return g(t(e),n)}:t)},o.shuffle=function(t,e,n){(o=arguments.length)<3&&(n=t.length,o<2&&(e=0));for(var r,i,o=n-e;o;)i=Math.random()*o--|0,r=t[o+e],t[o+e]=t[i+e],t[i+e]=r;return t},o.permute=function(t,e){for(var n=e.length,r=new Array(n);n--;)r[n]=t[e[n]];return r},o.pairs=function(t){for(var e=0,n=t.length-1,r=t[0],i=new Array(n<0?0:n);e<n;)i[e]=[r,r=t[++e]];return i},o.transpose=function(t){if(!(i=t.length))return[];for(var e=-1,n=o.min(t,w),r=new Array(n);++e<n;)for(var i,a=-1,u=r[e]=new Array(i);++a<i;)u[a]=t[a][e];return r},o.zip=function(){return o.transpose(arguments)},o.keys=function(t){var e=[];for(var n in t)e.push(n);return e},o.values=function(t){var e=[];for(var n in t)e.push(t[n]);return e},o.entries=function(t){var e=[];for(var n in t)e.push({key:n,value:t[n]});return e},o.merge=function(t){for(var e,n,r,i=t.length,o=-1,a=0;++o<i;)a+=t[o].length;for(n=new Array(a);--i>=0;)for(e=(r=t[i]).length;--e>=0;)n[--a]=r[e];return n};var k=Math.abs;function M(t,e){for(var n in e)Object.defineProperty(t.prototype,n,{value:e[n],enumerable:!1})}function S(){this._=Object.create(null)}o.range=function(t,e,n){if(arguments.length<3&&(n=1,arguments.length<2&&(e=t,t=0)),(e-t)/n==1/0)throw new Error("infinite range");var r,i=[],o=function(t){var e=1;for(;t*e%1;)e*=10;return e}(k(n)),a=-1;if(t*=o,e*=o,(n*=o)<0)for(;(r=t+n*++a)>e;)i.push(r/o);else for(;(r=t+n*++a)<e;)i.push(r/o);return i},o.map=function(t,e){var n=new S;if(t instanceof S)t.forEach(function(t,e){n.set(t,e)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(1===arguments.length)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e.call(t,r=t[i],i),r)}else for(var a in t)n.set(a,t[a]);return n};var E="__proto__",_="\0";function C(t){return(t+="")===E||t[0]===_?_+t:t}function T(t){return(t+="")[0]===_?t.slice(1):t}function A(t){return C(t)in this._}function P(t){return(t=C(t))in this._&&delete this._[t]}function N(){var t=[];for(var e in this._)t.push(T(e));return t}function O(){var t=0;for(var e in this._)++t;return t}function F(){for(var t in this._)return!1;return!0}function L(){this._=Object.create(null)}function D(t){return t}function R(t,e,n){return function(){var r=n.apply(e,arguments);return r===e?t:r}}function I(t,e){if(e in t)return e;e=e.charAt(0).toUpperCase()+e.slice(1);for(var n=0,r=j.length;n<r;++n){var i=j[n]+e;if(i in t)return i}}M(S,{has:A,get:function(t){return this._[C(t)]},set:function(t,e){return this._[C(t)]=e},remove:P,keys:N,values:function(){var t=[];for(var e in this._)t.push(this._[e]);return t},entries:function(){var t=[];for(var e in this._)t.push({key:T(e),value:this._[e]});return t},size:O,empty:F,forEach:function(t){for(var e in this._)t.call(this,T(e),this._[e])}}),o.nest=function(){var t,e,n={},r=[],i=[];function a(i,o,u){if(u>=r.length)return e?e.call(n,o):t?o.sort(t):o;for(var l,c,s,f,d=-1,p=o.length,h=r[u++],v=new S;++d<p;)(f=v.get(l=h(c=o[d])))?f.push(c):v.set(l,[c]);return i?(c=i(),s=function(t,e){c.set(t,a(i,e,u))}):(c={},s=function(t,e){c[t]=a(i,e,u)}),v.forEach(s),c}return n.map=function(t,e){return a(e,t,0)},n.entries=function(t){return function t(e,n){if(n>=r.length)return e;var o=[],a=i[n++];return e.forEach(function(e,r){o.push({key:e,values:t(r,n)})}),a?o.sort(function(t,e){return a(t.key,e.key)}):o}(a(o.map,t,0),0)},n.key=function(t){return r.push(t),n},n.sortKeys=function(t){return i[r.length-1]=t,n},n.sortValues=function(e){return t=e,n},n.rollup=function(t){return e=t,n},n},o.set=function(t){var e=new L;if(t)for(var n=0,r=t.length;n<r;++n)e.add(t[n]);return e},M(L,{has:A,add:function(t){return this._[C(t+="")]=!0,t},remove:P,values:N,size:O,empty:F,forEach:function(t){for(var e in this._)t.call(this,T(e))}}),o.behavior={},o.rebind=function(t,e){for(var n,r=1,i=arguments.length;++r<i;)t[n=arguments[r]]=R(t,e,e[n]);return t};var j=["webkit","ms","moz","Moz","o","O"];function z(){}function W(){}function B(t){var e=[],n=new S;function r(){for(var n,r=e,i=-1,o=r.length;++i<o;)(n=r[i].on)&&n.apply(this,arguments);return t}return r.on=function(r,i){var o,a=n.get(r);return arguments.length<2?a&&a.on:(a&&(a.on=null,e=e.slice(0,o=e.indexOf(a)).concat(e.slice(o+1)),n.remove(r)),i&&e.push(n.set(r,{on:i})),t)},r}function U(){o.event.preventDefault()}function V(){for(var t,e=o.event;t=e.sourceEvent;)e=t;return e}function H(t){for(var e=new W,n=0,r=arguments.length;++n<r;)e[arguments[n]]=B(e);return e.of=function(n,r){return function(i){try{var a=i.sourceEvent=o.event;i.target=t,o.event=i,e[i.type].apply(n,r)}finally{o.event=a}}},e}o.dispatch=function(){for(var t=new W,e=-1,n=arguments.length;++e<n;)t[arguments[e]]=B(t);return t},W.prototype.on=function(t,e){var n=t.indexOf("."),r="";if(n>=0&&(r=t.slice(n+1),t=t.slice(0,n)),t)return arguments.length<2?this[t].on(r):this[t].on(r,e);if(2===arguments.length){if(null==e)for(t in this)this.hasOwnProperty(t)&&this[t].on(r,null);return this}},o.event=null,o.requote=function(t){return t.replace(q,"\\$&")};var q=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,Y={}.__proto__?function(t,e){t.__proto__=e}:function(t,e){for(var n in e)t[n]=e[n]};function G(t){return Y(t,Z),t}var $=function(t,e){return e.querySelector(t)},X=function(t,e){return e.querySelectorAll(t)},K=function(t,e){var n=t.matches||t[I(t,"matchesSelector")];return(K=function(t,e){return n.call(t,e)})(t,e)};"function"==typeof Sizzle&&($=function(t,e){return Sizzle(t,e)[0]||null},X=Sizzle,K=Sizzle.matchesSelector),o.selection=function(){return o.select(l.documentElement)};var Z=o.selection.prototype=[];function Q(t){return"function"==typeof t?t:function(){return $(t,this)}}function J(t){return"function"==typeof t?t:function(){return X(t,this)}}Z.select=function(t){var e,n,r,i,o=[];t=Q(t);for(var a=-1,u=this.length;++a<u;){o.push(e=[]),e.parentNode=(r=this[a]).parentNode;for(var l=-1,c=r.length;++l<c;)(i=r[l])?(e.push(n=t.call(i,i.__data__,l,a)),n&&"__data__"in i&&(n.__data__=i.__data__)):e.push(null)}return G(o)},Z.selectAll=function(t){var e,n,r=[];t=J(t);for(var i=-1,o=this.length;++i<o;)for(var a=this[i],l=-1,c=a.length;++l<c;)(n=a[l])&&(r.push(e=u(t.call(n,n.__data__,l,i))),e.parentNode=n);return G(r)};var tt="http://www.w3.org/1999/xhtml",et={svg:"http://www.w3.org/2000/svg",xhtml:tt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function nt(t,e){return t=o.ns.qualify(t),null==e?t.local?function(){this.removeAttributeNS(t.space,t.local)}:function(){this.removeAttribute(t)}:"function"==typeof e?t.local?function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}:function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}:t.local?function(){this.setAttributeNS(t.space,t.local,e)}:function(){this.setAttribute(t,e)}}function rt(t){return t.trim().replace(/\s+/g," ")}function it(t){return new RegExp("(?:^|\\s+)"+o.requote(t)+"(?:\\s+|$)","g")}function ot(t){return(t+"").trim().split(/^|\s+/)}function at(t,e){var n=(t=ot(t).map(ut)).length;return"function"==typeof e?function(){for(var r=-1,i=e.apply(this,arguments);++r<n;)t[r](this,i)}:function(){for(var r=-1;++r<n;)t[r](this,e)}}function ut(t){var e=it(t);return function(n,r){if(i=n.classList)return r?i.add(t):i.remove(t);var i=n.getAttribute("class")||"";r?(e.lastIndex=0,e.test(i)||n.setAttribute("class",rt(i+" "+t))):n.setAttribute("class",rt(i.replace(e," ")))}}function lt(t,e,n){return null==e?function(){this.style.removeProperty(t)}:"function"==typeof e?function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}:function(){this.style.setProperty(t,e,n)}}function ct(t,e){return null==e?function(){delete this[t]}:"function"==typeof e?function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}:function(){this[t]=e}}function st(t){return"function"==typeof t?t:(t=o.ns.qualify(t)).local?function(){return this.ownerDocument.createElementNS(t.space,t.local)}:function(){var e=this.ownerDocument,n=this.namespaceURI;return n===tt&&e.documentElement.namespaceURI===tt?e.createElement(t):e.createElementNS(n,t)}}function ft(){var t=this.parentNode;t&&t.removeChild(this)}function dt(t){return{__data__:t}}function pt(t){return function(){return K(this,t)}}function ht(t,e){for(var n=0,r=t.length;n<r;n++)for(var i,o=t[n],a=0,u=o.length;a<u;a++)(i=o[a])&&e(i,a,n);return t}function vt(t){return Y(t,gt),t}o.ns={prefix:et,qualify:function(t){var e=t.indexOf(":"),n=t;return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),et.hasOwnProperty(n)?{space:et[n],local:t}:t}},Z.attr=function(t,e){if(arguments.length<2){if("string"==typeof t){var n=this.node();return(t=o.ns.qualify(t)).local?n.getAttributeNS(t.space,t.local):n.getAttribute(t)}for(e in t)this.each(nt(e,t[e]));return this}return this.each(nt(t,e))},Z.classed=function(t,e){if(arguments.length<2){if("string"==typeof t){var n=this.node(),r=(t=ot(t)).length,i=-1;if(e=n.classList){for(;++i<r;)if(!e.contains(t[i]))return!1}else for(e=n.getAttribute("class");++i<r;)if(!it(t[i]).test(e))return!1;return!0}for(e in t)this.each(at(e,t[e]));return this}return this.each(at(t,e))},Z.style=function(t,e,n){var r=arguments.length;if(r<3){if("string"!=typeof t){for(n in r<2&&(e=""),t)this.each(lt(n,t[n],e));return this}if(r<2){var i=this.node();return s(i).getComputedStyle(i,null).getPropertyValue(t)}n=""}return this.each(lt(t,e,n))},Z.property=function(t,e){if(arguments.length<2){if("string"==typeof t)return this.node()[t];for(e in t)this.each(ct(e,t[e]));return this}return this.each(ct(t,e))},Z.text=function(t){return arguments.length?this.each("function"==typeof t?function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}:null==t?function(){this.textContent=""}:function(){this.textContent=t}):this.node().textContent},Z.html=function(t){return arguments.length?this.each("function"==typeof t?function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}:null==t?function(){this.innerHTML=""}:function(){this.innerHTML=t}):this.node().innerHTML},Z.append=function(t){return t=st(t),this.select(function(){return this.appendChild(t.apply(this,arguments))})},Z.insert=function(t,e){return t=st(t),e=Q(e),this.select(function(){return this.insertBefore(t.apply(this,arguments),e.apply(this,arguments)||null)})},Z.remove=function(){return this.each(ft)},Z.data=function(t,e){var n,r,i=-1,o=this.length;if(!arguments.length){for(t=new Array(o=(n=this[0]).length);++i<o;)(r=n[i])&&(t[i]=r.__data__);return t}function a(t,n){var r,i,o,a=t.length,s=n.length,f=Math.min(a,s),d=new Array(s),p=new Array(s),h=new Array(a);if(e){var v,g=new S,m=new Array(a);for(r=-1;++r<a;)(i=t[r])&&(g.has(v=e.call(i,i.__data__,r))?h[r]=i:g.set(v,i),m[r]=v);for(r=-1;++r<s;)(i=g.get(v=e.call(n,o=n[r],r)))?!0!==i&&(d[r]=i,i.__data__=o):p[r]=dt(o),g.set(v,!0);for(r=-1;++r<a;)r in m&&!0!==g.get(m[r])&&(h[r]=t[r])}else{for(r=-1;++r<f;)i=t[r],o=n[r],i?(i.__data__=o,d[r]=i):p[r]=dt(o);for(;r<s;++r)p[r]=dt(n[r]);for(;r<a;++r)h[r]=t[r]}p.update=d,p.parentNode=d.parentNode=h.parentNode=t.parentNode,u.push(p),l.push(d),c.push(h)}var u=vt([]),l=G([]),c=G([]);if("function"==typeof t)for(;++i<o;)a(n=this[i],t.call(n,n.parentNode.__data__,i));else for(;++i<o;)a(n=this[i],t);return l.enter=function(){return u},l.exit=function(){return c},l},Z.datum=function(t){return arguments.length?this.property("__data__",t):this.property("__data__")},Z.filter=function(t){var e,n,r,i=[];"function"!=typeof t&&(t=pt(t));for(var o=0,a=this.length;o<a;o++){i.push(e=[]),e.parentNode=(n=this[o]).parentNode;for(var u=0,l=n.length;u<l;u++)(r=n[u])&&t.call(r,r.__data__,u,o)&&e.push(r)}return G(i)},Z.order=function(){for(var t=-1,e=this.length;++t<e;)for(var n,r=this[t],i=r.length-1,o=r[i];--i>=0;)(n=r[i])&&(o&&o!==n.nextSibling&&o.parentNode.insertBefore(n,o),o=n);return this},Z.sort=function(t){t=function(t){arguments.length||(t=g);return function(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}}.apply(this,arguments);for(var e=-1,n=this.length;++e<n;)this[e].sort(t);return this.order()},Z.each=function(t){return ht(this,function(e,n,r){t.call(e,e.__data__,n,r)})},Z.call=function(t){var e=u(arguments);return t.apply(e[0]=this,e),this},Z.empty=function(){return!this.node()},Z.node=function(){for(var t=0,e=this.length;t<e;t++)for(var n=this[t],r=0,i=n.length;r<i;r++){var o=n[r];if(o)return o}return null},Z.size=function(){var t=0;return ht(this,function(){++t}),t};var gt=[];function mt(t,e,n){var r="__on"+t,i=t.indexOf("."),a=bt;i>0&&(t=t.slice(0,i));var l=yt.get(t);function c(){var e=this[r];e&&(this.removeEventListener(t,e,e.$),delete this[r])}return l&&(t=l,a=xt),i?e?function(){var i=a(e,u(arguments));c.call(this),this.addEventListener(t,this[r]=i,i.$=n),i._=e}:c:e?z:function(){var e,n=new RegExp("^__on([^.]+)"+o.requote(t)+"$");for(var r in this)if(e=r.match(n)){var i=this[r];this.removeEventListener(e[1],i,i.$),delete this[r]}}}o.selection.enter=vt,o.selection.enter.prototype=gt,gt.append=Z.append,gt.empty=Z.empty,gt.node=Z.node,gt.call=Z.call,gt.size=Z.size,gt.select=function(t){for(var e,n,r,i,o,a=[],u=-1,l=this.length;++u<l;){r=(i=this[u]).update,a.push(e=[]),e.parentNode=i.parentNode;for(var c=-1,s=i.length;++c<s;)(o=i[c])?(e.push(r[c]=n=t.call(i.parentNode,o.__data__,c,u)),n.__data__=o.__data__):e.push(null)}return G(a)},gt.insert=function(t,e){var n,r,i;return arguments.length<2&&(n=this,e=function(t,e,o){var a,u=n[o].update,l=u.length;for(o!=i&&(i=o,r=0),e>=r&&(r=e+1);!(a=u[r])&&++r<l;);return a}),Z.insert.call(this,t,e)},o.select=function(t){var e;return"string"==typeof t?(e=[$(t,l)]).parentNode=l.documentElement:(e=[t]).parentNode=c(t),G([e])},o.selectAll=function(t){var e;return"string"==typeof t?(e=u(X(t,l))).parentNode=l.documentElement:(e=u(t)).parentNode=null,G([e])},Z.on=function(t,e,n){var r=arguments.length;if(r<3){if("string"!=typeof t){for(n in r<2&&(e=!1),t)this.each(mt(n,t[n],e));return this}if(r<2)return(r=this.node()["__on"+t])&&r._;n=!1}return this.each(mt(t,e,n))};var yt=o.map({mouseenter:"mouseover",mouseleave:"mouseout"});function bt(t,e){return function(n){var r=o.event;o.event=n,e[0]=this.__data__;try{t.apply(this,e)}finally{o.event=r}}}function xt(t,e){var n=bt(t,e);return function(t){var e=t.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||n.call(this,t)}}l&&yt.forEach(function(t){"on"+t in l&&yt.remove(t)});var wt,kt=0;function Mt(t){var e=".dragsuppress-"+ ++kt,n="click"+e,r=o.select(s(t)).on("touchmove"+e,U).on("dragstart"+e,U).on("selectstart"+e,U);if(null==wt&&(wt=!("onselectstart"in t)&&I(t.style,"userSelect")),wt){var i=c(t).style,a=i[wt];i[wt]="none"}return function(t){if(r.on(e,null),wt&&(i[wt]=a),t){var o=function(){r.on(n,null)};r.on(n,function(){U(),o()},!0),setTimeout(o,0)}}}o.mouse=function(t){return Et(t,V())};var St=this.navigator&&/WebKit/.test(this.navigator.userAgent)?-1:0;function Et(t,e){e.changedTouches&&(e=e.changedTouches[0]);var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();if(St<0){var i=s(t);if(i.scrollX||i.scrollY){var a=(n=o.select("body").append("svg").style({position:"absolute",top:0,left:0,margin:0,padding:0,border:"none"},"important"))[0][0].getScreenCTM();St=!(a.f||a.e),n.remove()}}return St?(r.x=e.pageX,r.y=e.pageY):(r.x=e.clientX,r.y=e.clientY),[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var u=t.getBoundingClientRect();return[e.clientX-u.left-t.clientLeft,e.clientY-u.top-t.clientTop]}function _t(){return o.event.changedTouches[0].identifier}o.touch=function(t,e,n){if(arguments.length<3&&(n=e,e=V().changedTouches),e)for(var r,i=0,o=e.length;i<o;++i)if((r=e[i]).identifier===n)return Et(t,r)},o.behavior.drag=function(){var t=H(i,"drag","dragstart","dragend"),e=null,n=a(z,o.mouse,s,"mousemove","mouseup"),r=a(_t,o.touch,D,"touchmove","touchend");function i(){this.on("mousedown.drag",n).on("touchstart.drag",r)}function a(n,r,i,a,u){return function(){var l,c=o.event.target.correspondingElement||o.event.target,s=this.parentNode,f=t.of(this,arguments),d=0,p=n(),h=".drag"+(null==p?"":"-"+p),v=o.select(i(c)).on(a+h,function(){var t,e,n=r(s,p);if(!n)return;t=n[0]-m[0],e=n[1]-m[1],d|=t|e,m=n,f({type:"drag",x:n[0]+l[0],y:n[1]+l[1],dx:t,dy:e})}).on(u+h,function(){if(!r(s,p))return;v.on(a+h,null).on(u+h,null),g(d),f({type:"dragend"})}),g=Mt(c),m=r(s,p);l=e?[(l=e.apply(this,arguments)).x-m[0],l.y-m[1]]:[0,0],f({type:"dragstart"})}}return i.origin=function(t){return arguments.length?(e=t,i):e},o.rebind(i,t,"on")},o.touches=function(t,e){return arguments.length<2&&(e=V().touches),e?u(e).map(function(e){var n=Et(t,e);return n.identifier=e.identifier,n}):[]};var Ct=1e-6,Tt=Ct*Ct,At=Math.PI,Pt=2*At,Nt=Pt-Ct,Ot=At/2,Ft=At/180,Lt=180/At;function Dt(t){return t>0?1:t<0?-1:0}function Rt(t,e,n){return(e[0]-t[0])*(n[1]-t[1])-(e[1]-t[1])*(n[0]-t[0])}function It(t){return t>1?0:t<-1?At:Math.acos(t)}function jt(t){return t>1?Ot:t<-1?-Ot:Math.asin(t)}function zt(t){return((t=Math.exp(t))+1/t)/2}function Wt(t){return(t=Math.sin(t/2))*t}var Bt=Math.SQRT2;o.interpolateZoom=function(t,e){var n,r,i=t[0],o=t[1],a=t[2],u=e[0],l=e[1],c=e[2],s=u-i,f=l-o,d=s*s+f*f;if(d<Tt)r=Math.log(c/a)/Bt,n=function(t){return[i+t*s,o+t*f,a*Math.exp(Bt*t*r)]};else{var p=Math.sqrt(d),h=(c*c-a*a+4*d)/(2*a*2*p),v=(c*c-a*a-4*d)/(2*c*2*p),g=Math.log(Math.sqrt(h*h+1)-h),m=Math.log(Math.sqrt(v*v+1)-v);r=(m-g)/Bt,n=function(t){var e,n=t*r,u=zt(g),l=a/(2*p)*(u*(e=Bt*n+g,((e=Math.exp(2*e))-1)/(e+1))-function(t){return((t=Math.exp(t))-1/t)/2}(g));return[i+l*s,o+l*f,a*u/zt(Bt*n+g)]}}return n.duration=1e3*r,n},o.behavior.zoom=function(){var t,e,n,r,i,a,u,c,f,d={x:0,y:0,k:1},p=[960,500],h=Ht,v=250,g=0,m="mousedown.zoom",y="mousemove.zoom",b="mouseup.zoom",x="touchstart.zoom",w=H(k,"zoomstart","zoom","zoomend");function k(t){t.on(m,N).on(Vt+".zoom",F).on("dblclick.zoom",L).on(x,O)}function M(t){return[(t[0]-d.x)/d.k,(t[1]-d.y)/d.k]}function S(t){d.k=Math.max(h[0],Math.min(h[1],t))}function E(t,e){e=function(t){return[t[0]*d.k+d.x,t[1]*d.k+d.y]}(e),d.x+=t[0]-e[0],d.y+=t[1]-e[1]}function _(t,n,r,i){t.__chart__={x:d.x,y:d.y,k:d.k},S(Math.pow(2,i)),E(e=n,r),t=o.select(t),v>0&&(t=t.transition().duration(v)),t.call(k.event)}function C(){u&&u.domain(a.range().map(function(t){return(t-d.x)/d.k}).map(a.invert)),f&&f.domain(c.range().map(function(t){return(t-d.y)/d.k}).map(c.invert))}function T(t){g++||t({type:"zoomstart"})}function A(t){C(),t({type:"zoom",scale:d.k,translate:[d.x,d.y]})}function P(t){--g||(t({type:"zoomend"}),e=null)}function N(){var t=this,e=w.of(t,arguments),n=0,r=o.select(s(t)).on(y,function(){n=1,E(o.mouse(t),i),A(e)}).on(b,function(){r.on(y,null).on(b,null),a(n),P(e)}),i=M(o.mouse(t)),a=Mt(t);mu.call(t),T(e)}function O(){var t,e=this,n=w.of(e,arguments),r={},a=0,u=".zoom-"+o.event.changedTouches[0].identifier,l="touchmove"+u,c="touchend"+u,s=[],f=o.select(e),p=Mt(e);function h(){var n=o.touches(e);return t=d.k,n.forEach(function(t){t.identifier in r&&(r[t.identifier]=M(t))}),n}function v(){var t=o.event.target;o.select(t).on(l,g).on(c,y),s.push(t);for(var n=o.event.changedTouches,u=0,f=n.length;u<f;++u)r[n[u].identifier]=null;var p=h(),v=Date.now();if(1===p.length){if(v-i<500){var m=p[0];_(e,m,r[m.identifier],Math.floor(Math.log(d.k)/Math.LN2)+1),U()}i=v}else if(p.length>1){m=p[0];var b=p[1],x=m[0]-b[0],w=m[1]-b[1];a=x*x+w*w}}function g(){var u,l,c,s,f=o.touches(e);mu.call(e);for(var d=0,p=f.length;d<p;++d,s=null)if(c=f[d],s=r[c.identifier]){if(l)break;u=c,l=s}if(s){var h=(h=c[0]-u[0])*h+(h=c[1]-u[1])*h,v=a&&Math.sqrt(h/a);u=[(u[0]+c[0])/2,(u[1]+c[1])/2],l=[(l[0]+s[0])/2,(l[1]+s[1])/2],S(v*t)}i=null,E(u,l),A(n)}function y(){if(o.event.touches.length){for(var t=o.event.changedTouches,e=0,i=t.length;e<i;++e)delete r[t[e].identifier];for(var a in r)return void h()}o.selectAll(s).on(u,null),f.on(m,N).on(x,O),p(),P(n)}v(),T(n),f.on(m,null).on(x,v)}function F(){var i=w.of(this,arguments);r?clearTimeout(r):(mu.call(this),t=M(e=n||o.mouse(this)),T(i)),r=setTimeout(function(){r=null,P(i)},50),U(),S(Math.pow(2,.002*Ut())*d.k),E(e,t),A(i)}function L(){var t=o.mouse(this),e=Math.log(d.k)/Math.LN2;_(this,t,M(t),o.event.shiftKey?Math.ceil(e)-1:Math.floor(e)+1)}return Vt||(Vt="onwheel"in l?(Ut=function(){return-o.event.deltaY*(o.event.deltaMode?120:1)},"wheel"):"onmousewheel"in l?(Ut=function(){return o.event.wheelDelta},"mousewheel"):(Ut=function(){return-o.event.detail},"MozMousePixelScroll")),k.event=function(t){t.each(function(){var t=w.of(this,arguments),n=d;xu?o.select(this).transition().each("start.zoom",function(){d=this.__chart__||{x:0,y:0,k:1},T(t)}).tween("zoom:zoom",function(){var r=p[0],i=p[1],a=e?e[0]:r/2,u=e?e[1]:i/2,l=o.interpolateZoom([(a-d.x)/d.k,(u-d.y)/d.k,r/d.k],[(a-n.x)/n.k,(u-n.y)/n.k,r/n.k]);return function(e){var n=l(e),i=r/n[2];this.__chart__=d={x:a-n[0]*i,y:u-n[1]*i,k:i},A(t)}}).each("interrupt.zoom",function(){P(t)}).each("end.zoom",function(){P(t)}):(this.__chart__=d,T(t),A(t),P(t))})},k.translate=function(t){return arguments.length?(d={x:+t[0],y:+t[1],k:d.k},C(),k):[d.x,d.y]},k.scale=function(t){return arguments.length?(d={x:d.x,y:d.y,k:null},S(+t),C(),k):d.k},k.scaleExtent=function(t){return arguments.length?(h=null==t?Ht:[+t[0],+t[1]],k):h},k.center=function(t){return arguments.length?(n=t&&[+t[0],+t[1]],k):n},k.size=function(t){return arguments.length?(p=t&&[+t[0],+t[1]],k):p},k.duration=function(t){return arguments.length?(v=+t,k):v},k.x=function(t){return arguments.length?(u=t,a=t.copy(),d={x:0,y:0,k:1},k):u},k.y=function(t){return arguments.length?(f=t,c=t.copy(),d={x:0,y:0,k:1},k):f},o.rebind(k,w,"on")};var Ut,Vt,Ht=[0,1/0];function qt(){}function Yt(t,e,n){return this instanceof Yt?(this.h=+t,this.s=+e,void(this.l=+n)):arguments.length<2?t instanceof Yt?new Yt(t.h,t.s,t.l):he(""+t,ve,Yt):new Yt(t,e,n)}o.color=qt,qt.prototype.toString=function(){return this.rgb()+""},o.hsl=Yt;var Gt=Yt.prototype=new qt;function $t(t,e,n){var r,i;function o(t){return Math.round(255*function(t){return t>360?t-=360:t<0&&(t+=360),t<60?r+(i-r)*t/60:t<180?i:t<240?r+(i-r)*(240-t)/60:r}(t))}return t=isNaN(t)?0:(t%=360)<0?t+360:t,e=isNaN(e)?0:e<0?0:e>1?1:e,r=2*(n=n<0?0:n>1?1:n)-(i=n<=.5?n*(1+e):n+e-n*e),new ce(o(t+120),o(t),o(t-120))}function Xt(t,e,n){return this instanceof Xt?(this.h=+t,this.c=+e,void(this.l=+n)):arguments.length<2?t instanceof Xt?new Xt(t.h,t.c,t.l):oe(t instanceof Qt?t.l:(t=ge((t=o.rgb(t)).r,t.g,t.b)).l,t.a,t.b):new Xt(t,e,n)}Gt.brighter=function(t){return t=Math.pow(.7,arguments.length?t:1),new Yt(this.h,this.s,this.l/t)},Gt.darker=function(t){return t=Math.pow(.7,arguments.length?t:1),new Yt(this.h,this.s,t*this.l)},Gt.rgb=function(){return $t(this.h,this.s,this.l)},o.hcl=Xt;var Kt=Xt.prototype=new qt;function Zt(t,e,n){return isNaN(t)&&(t=0),isNaN(e)&&(e=0),new Qt(n,Math.cos(t*=Ft)*e,Math.sin(t)*e)}function Qt(t,e,n){return this instanceof Qt?(this.l=+t,this.a=+e,void(this.b=+n)):arguments.length<2?t instanceof Qt?new Qt(t.l,t.a,t.b):t instanceof Xt?Zt(t.h,t.c,t.l):ge((t=ce(t)).r,t.g,t.b):new Qt(t,e,n)}Kt.brighter=function(t){return new Xt(this.h,this.c,Math.min(100,this.l+Jt*(arguments.length?t:1)))},Kt.darker=function(t){return new Xt(this.h,this.c,Math.max(0,this.l-Jt*(arguments.length?t:1)))},Kt.rgb=function(){return Zt(this.h,this.c,this.l).rgb()},o.lab=Qt;var Jt=18,te=.95047,ee=1,ne=1.08883,re=Qt.prototype=new qt;function ie(t,e,n){var r=(t+16)/116,i=r+e/500,o=r-n/200;return new ce(le(3.2404542*(i=ae(i)*te)-1.5371385*(r=ae(r)*ee)-.4985314*(o=ae(o)*ne)),le(-.969266*i+1.8760108*r+.041556*o),le(.0556434*i-.2040259*r+1.0572252*o))}function oe(t,e,n){return t>0?new Xt(Math.atan2(n,e)*Lt,Math.sqrt(e*e+n*n),t):new Xt(NaN,NaN,t)}function ae(t){return t>.206893034?t*t*t:(t-4/29)/7.787037}function ue(t){return t>.008856?Math.pow(t,1/3):7.787037*t+4/29}function le(t){return Math.round(255*(t<=.00304?12.92*t:1.055*Math.pow(t,1/2.4)-.055))}function ce(t,e,n){return this instanceof ce?(this.r=~~t,this.g=~~e,void(this.b=~~n)):arguments.length<2?t instanceof ce?new ce(t.r,t.g,t.b):he(""+t,ce,$t):new ce(t,e,n)}function se(t){return new ce(t>>16,t>>8&255,255&t)}function fe(t){return se(t)+""}re.brighter=function(t){return new Qt(Math.min(100,this.l+Jt*(arguments.length?t:1)),this.a,this.b)},re.darker=function(t){return new Qt(Math.max(0,this.l-Jt*(arguments.length?t:1)),this.a,this.b)},re.rgb=function(){return ie(this.l,this.a,this.b)},o.rgb=ce;var de=ce.prototype=new qt;function pe(t){return t<16?"0"+Math.max(0,t).toString(16):Math.min(255,t).toString(16)}function he(t,e,n){var r,i,o,a=0,u=0,l=0;if(r=/([a-z]+)\((.*)\)/.exec(t=t.toLowerCase()))switch(i=r[2].split(","),r[1]){case"hsl":return n(parseFloat(i[0]),parseFloat(i[1])/100,parseFloat(i[2])/100);case"rgb":return e(ye(i[0]),ye(i[1]),ye(i[2]))}return(o=be.get(t))?e(o.r,o.g,o.b):(null==t||"#"!==t.charAt(0)||isNaN(o=parseInt(t.slice(1),16))||(4===t.length?(a=(3840&o)>>4,a|=a>>4,u=240&o,u|=u>>4,l=15&o,l|=l<<4):7===t.length&&(a=(16711680&o)>>16,u=(65280&o)>>8,l=255&o)),e(a,u,l))}function ve(t,e,n){var r,i,o=Math.min(t/=255,e/=255,n/=255),a=Math.max(t,e,n),u=a-o,l=(a+o)/2;return u?(i=l<.5?u/(a+o):u/(2-a-o),r=t==a?(e-n)/u+(e<n?6:0):e==a?(n-t)/u+2:(t-e)/u+4,r*=60):(r=NaN,i=l>0&&l<1?0:r),new Yt(r,i,l)}function ge(t,e,n){var r=ue((.4124564*(t=me(t))+.3575761*(e=me(e))+.1804375*(n=me(n)))/te),i=ue((.2126729*t+.7151522*e+.072175*n)/ee);return Qt(116*i-16,500*(r-i),200*(i-ue((.0193339*t+.119192*e+.9503041*n)/ne)))}function me(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function ye(t){var e=parseFloat(t);return"%"===t.charAt(t.length-1)?Math.round(2.55*e):e}de.brighter=function(t){t=Math.pow(.7,arguments.length?t:1);var e=this.r,n=this.g,r=this.b,i=30;return e||n||r?(e&&e<i&&(e=i),n&&n<i&&(n=i),r&&r<i&&(r=i),new ce(Math.min(255,e/t),Math.min(255,n/t),Math.min(255,r/t))):new ce(i,i,i)},de.darker=function(t){return new ce((t=Math.pow(.7,arguments.length?t:1))*this.r,t*this.g,t*this.b)},de.hsl=function(){return ve(this.r,this.g,this.b)},de.toString=function(){return"#"+pe(this.r)+pe(this.g)+pe(this.b)};var be=o.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});function xe(t){return"function"==typeof t?t:function(){return t}}function we(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=null),ke(e,n,t,r)}}function ke(t,e,n,r){var i={},a=o.dispatch("beforesend","progress","load","error"),l={},c=new XMLHttpRequest,s=null;function f(){var t,e=c.status;if(!e&&function(t){var e=t.responseType;return e&&"text"!==e?t.response:t.responseText}(c)||e>=200&&e<300||304===e){try{t=n.call(i,c)}catch(t){return void a.error.call(i,t)}a.load.call(i,t)}else a.error.call(i,c)}return!this.XDomainRequest||"withCredentials"in c||!/^(http(s)?:)?\/\//.test(t)||(c=new XDomainRequest),"onload"in c?c.onload=c.onerror=f:c.onreadystatechange=function(){c.readyState>3&&f()},c.onprogress=function(t){var e=o.event;o.event=t;try{a.progress.call(i,c)}finally{o.event=e}},i.header=function(t,e){return t=(t+"").toLowerCase(),arguments.length<2?l[t]:(null==e?delete l[t]:l[t]=e+"",i)},i.mimeType=function(t){return arguments.length?(e=null==t?null:t+"",i):e},i.responseType=function(t){return arguments.length?(s=t,i):s},i.response=function(t){return n=t,i},["get","post"].forEach(function(t){i[t]=function(){return i.send.apply(i,[t].concat(u(arguments)))}}),i.send=function(n,r,o){if(2===arguments.length&&"function"==typeof r&&(o=r,r=null),c.open(n,t,!0),null==e||"accept"in l||(l.accept=e+",*/*"),c.setRequestHeader)for(var u in l)c.setRequestHeader(u,l[u]);return null!=e&&c.overrideMimeType&&c.overrideMimeType(e),null!=s&&(c.responseType=s),null!=o&&i.on("error",o).on("load",function(t){o(null,t)}),a.beforesend.call(i,c),c.send(null==r?null:r),i},i.abort=function(){return c.abort(),i},o.rebind(i,a,"on"),null==r?i:i.get(function(t){return 1===t.length?function(e,n){t(null==e?n:null)}:t}(r))}be.forEach(function(t,e){be.set(t,se(e))}),o.functor=xe,o.xhr=we(D),o.dsv=function(t,e){var n=new RegExp('["'+t+"\n]"),r=t.charCodeAt(0);function i(t,n,r){arguments.length<3&&(r=n,n=null);var i=ke(t,e,null==n?o:a(n),r);return i.row=function(t){return arguments.length?i.response(null==(n=t)?o:a(t)):n},i}function o(t){return i.parse(t.responseText)}function a(t){return function(e){return i.parse(e.responseText,t)}}function u(e){return e.map(l).join(t)}function l(t){return n.test(t)?'"'+t.replace(/\"/g,'""')+'"':t}return i.parse=function(t,e){var n;return i.parseRows(t,function(t,r){if(n)return n(t,r-1);var i=new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}");n=e?function(t,n){return e(i(t),n)}:i})},i.parseRows=function(t,e){var n,i,o={},a={},u=[],l=t.length,c=0,s=0;function f(){if(c>=l)return a;if(i)return i=!1,o;var e=c;if(34===t.charCodeAt(e)){for(var n=e;n++<l;)if(34===t.charCodeAt(n)){if(34!==t.charCodeAt(n+1))break;++n}return c=n+2,13===(u=t.charCodeAt(n+1))?(i=!0,10===t.charCodeAt(n+2)&&++c):10===u&&(i=!0),t.slice(e+1,n).replace(/""/g,'"')}for(;c<l;){var u,s=1;if(10===(u=t.charCodeAt(c++)))i=!0;else if(13===u)i=!0,10===t.charCodeAt(c)&&(++c,++s);else if(u!==r)continue;return t.slice(e,c-s)}return t.slice(e)}for(;(n=f())!==a;){for(var d=[];n!==o&&n!==a;)d.push(n),n=f();e&&null==(d=e(d,s++))||u.push(d)}return u},i.format=function(e){if(Array.isArray(e[0]))return i.formatRows(e);var n=new L,r=[];return e.forEach(function(t){for(var e in t)n.has(e)||r.push(n.add(e))}),[r.map(l).join(t)].concat(e.map(function(e){return r.map(function(t){return l(e[t])}).join(t)})).join("\n")},i.formatRows=function(t){return t.map(u).join("\n")},i},o.csv=o.dsv(",","text/csv"),o.tsv=o.dsv("\t","text/tab-separated-values");var Me,Se,Ee,_e,Ce=this[I(this,"requestAnimationFrame")]||function(t){setTimeout(t,17)};function Te(t,e,n){var r=arguments.length;r<2&&(e=0),r<3&&(n=Date.now());var i={c:t,t:n+e,n:null};return Se?Se.n=i:Me=i,Se=i,Ee||(_e=clearTimeout(_e),Ee=1,Ce(Ae)),i}function Ae(){var t=Pe(),e=Ne()-t;e>24?(isFinite(e)&&(clearTimeout(_e),_e=setTimeout(Ae,e)),Ee=0):(Ee=1,Ce(Ae))}function Pe(){for(var t=Date.now(),e=Me;e;)t>=e.t&&e.c(t-e.t)&&(e.c=null),e=e.n;return t}function Ne(){for(var t,e=Me,n=1/0;e;)e.c?(e.t<n&&(n=e.t),e=(t=e).n):e=t?t.n=e.n:Me=e.n;return Se=t,n}function Oe(t,e){return e-(t?Math.ceil(Math.log(t)/Math.LN10):1)}o.timer=function(){Te.apply(this,arguments)},o.timer.flush=function(){Pe(),Ne()},o.round=function(t,e){return e?Math.round(t*(e=Math.pow(10,e)))/e:Math.round(t)};var Fe=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"].map(function(t,e){var n=Math.pow(10,3*k(8-e));return{scale:e>8?function(t){return t/n}:function(t){return t*n},symbol:t}});function Le(t){var e=t.decimal,n=t.thousands,r=t.grouping,i=t.currency,a=r&&n?function(t,e){for(var i=t.length,o=[],a=0,u=r[0],l=0;i>0&&u>0&&(l+u+1>e&&(u=Math.max(1,e-l)),o.push(t.substring(i-=u,i+u)),!((l+=u+1)>e));)u=r[a=(a+1)%r.length];return o.reverse().join(n)}:D;return function(t){var n=De.exec(t),r=n[1]||" ",u=n[2]||">",l=n[3]||"-",c=n[4]||"",s=n[5],f=+n[6],d=n[7],p=n[8],h=n[9],v=1,g="",m="",y=!1,b=!0;switch(p&&(p=+p.substring(1)),(s||"0"===r&&"="===u)&&(s=r="0",u="="),h){case"n":d=!0,h="g";break;case"%":v=100,m="%",h="f";break;case"p":v=100,m="%",h="r";break;case"b":case"o":case"x":case"X":"#"===c&&(g="0"+h.toLowerCase());case"c":b=!1;case"d":y=!0,p=0;break;case"s":v=-1,h="r"}"$"===c&&(g=i[0],m=i[1]),"r"!=h||p||(h="g"),null!=p&&("g"==h?p=Math.max(1,Math.min(21,p)):"e"!=h&&"f"!=h||(p=Math.max(0,Math.min(20,p)))),h=Re.get(h)||Ie;var x=s&&d;return function(t){var n=m;if(y&&t%1)return"";var i=t<0||0===t&&1/t<0?(t=-t,"-"):"-"===l?"":l;if(v<0){var c=o.formatPrefix(t,p);t=c.scale(t),n=c.symbol+m}else t*=v;var w,k,M=(t=h(t,p)).lastIndexOf(".");if(M<0){var S=b?t.lastIndexOf("e"):-1;S<0?(w=t,k=""):(w=t.substring(0,S),k=t.substring(S))}else w=t.substring(0,M),k=e+t.substring(M+1);!s&&d&&(w=a(w,1/0));var E=g.length+w.length+k.length+(x?0:i.length),_=E<f?new Array(E=f-E+1).join(r):"";return x&&(w=a(_+w,_.length?f-k.length:1/0)),i+=g,t=w+k,("<"===u?i+t+_:">"===u?_+i+t:"^"===u?_.substring(0,E>>=1)+i+t+_.substring(E):i+(x?t:_+t))+n}}}o.formatPrefix=function(t,e){var n=0;return(t=+t)&&(t<0&&(t*=-1),e&&(t=o.round(t,Oe(t,e))),n=1+Math.floor(1e-12+Math.log(t)/Math.LN10),n=Math.max(-24,Math.min(24,3*Math.floor((n-1)/3)))),Fe[8+n/3]};var De=/(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i,Re=o.map({b:function(t){return t.toString(2)},c:function(t){return String.fromCharCode(t)},o:function(t){return t.toString(8)},x:function(t){return t.toString(16)},X:function(t){return t.toString(16).toUpperCase()},g:function(t,e){return t.toPrecision(e)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},r:function(t,e){return(t=o.round(t,Oe(t,e))).toFixed(Math.max(0,Math.min(20,Oe(t*(1+1e-15),e))))}});function Ie(t){return t+""}var je=o.time={},ze=Date;function We(){this._=new Date(arguments.length>1?Date.UTC.apply(this,arguments):arguments[0])}We.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){Be.setUTCDate.apply(this._,arguments)},setDay:function(){Be.setUTCDay.apply(this._,arguments)},setFullYear:function(){Be.setUTCFullYear.apply(this._,arguments)},setHours:function(){Be.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){Be.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){Be.setUTCMinutes.apply(this._,arguments)},setMonth:function(){Be.setUTCMonth.apply(this._,arguments)},setSeconds:function(){Be.setUTCSeconds.apply(this._,arguments)},setTime:function(){Be.setTime.apply(this._,arguments)}};var Be=Date.prototype;function Ue(t,e,n){function r(e){var n=t(e),r=o(n,1);return e-n<r-e?n:r}function i(n){return e(n=t(new ze(n-1)),1),n}function o(t,n){return e(t=new ze(+t),n),t}function a(t,r,o){var a=i(t),u=[];if(o>1)for(;a<r;)n(a)%o||u.push(new Date(+a)),e(a,1);else for(;a<r;)u.push(new Date(+a)),e(a,1);return u}t.floor=t,t.round=r,t.ceil=i,t.offset=o,t.range=a;var u=t.utc=Ve(t);return u.floor=u,u.round=Ve(r),u.ceil=Ve(i),u.offset=Ve(o),u.range=function(t,e,n){try{ze=We;var r=new We;return r._=t,a(r,e,n)}finally{ze=Date}},t}function Ve(t){return function(e,n){try{ze=We;var r=new We;return r._=e,t(r,n)._}finally{ze=Date}}}function He(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,a=t.days,u=t.shortDays,l=t.months,c=t.shortMonths;function s(t){var e=t.length;function n(n){for(var r,i,o,a=[],u=-1,l=0;++u<e;)37===t.charCodeAt(u)&&(a.push(t.slice(l,u)),null!=(i=qe[r=t.charAt(++u)])&&(r=t.charAt(++u)),(o=w[r])&&(r=o(n,null==i?"e"===r?" ":"0":i)),a.push(r),l=u+1);return a.push(t.slice(l,u)),a.join("")}return n.parse=function(e){var n={y:1900,m:0,d:1,H:0,M:0,S:0,L:0,Z:null};if(f(n,t,e,0)!=e.length)return null;"p"in n&&(n.H=n.H%12+12*n.p);var r=null!=n.Z&&ze!==We,i=new(r?We:ze);return"j"in n?i.setFullYear(n.y,0,n.j):"W"in n||"U"in n?("w"in n||(n.w="W"in n?1:0),i.setFullYear(n.y,0,1),i.setFullYear(n.y,0,"W"in n?(n.w+6)%7+7*n.W-(i.getDay()+5)%7:n.w+7*n.U-(i.getDay()+6)%7)):i.setFullYear(n.y,n.m,n.d),i.setHours(n.H+(n.Z/100|0),n.M+n.Z%100,n.S,n.L),r?i._:i},n.toString=function(){return t},n}function f(t,e,n,r){for(var i,o,a,u=0,l=e.length,c=n.length;u<l;){if(r>=c)return-1;if(37===(i=e.charCodeAt(u++))){if(a=e.charAt(u++),!(o=k[a in qe?e.charAt(u++):a])||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}s.utc=function(t){var e=s(t);function n(t){try{var n=new(ze=We);return n._=t,e(n)}finally{ze=Date}}return n.parse=function(t){try{ze=We;var n=e.parse(t);return n&&n._}finally{ze=Date}},n.toString=e.toString,n},s.multi=s.utc.multi=pn;var d=o.map(),p=Xe(a),h=Ke(a),v=Xe(u),g=Ke(u),m=Xe(l),y=Ke(l),b=Xe(c),x=Ke(c);i.forEach(function(t,e){d.set(t.toLowerCase(),e)});var w={a:function(t){return u[t.getDay()]},A:function(t){return a[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return l[t.getMonth()]},c:s(e),d:function(t,e){return $e(t.getDate(),e,2)},e:function(t,e){return $e(t.getDate(),e,2)},H:function(t,e){return $e(t.getHours(),e,2)},I:function(t,e){return $e(t.getHours()%12||12,e,2)},j:function(t,e){return $e(1+je.dayOfYear(t),e,3)},L:function(t,e){return $e(t.getMilliseconds(),e,3)},m:function(t,e){return $e(t.getMonth()+1,e,2)},M:function(t,e){return $e(t.getMinutes(),e,2)},p:function(t){return i[+(t.getHours()>=12)]},S:function(t,e){return $e(t.getSeconds(),e,2)},U:function(t,e){return $e(je.sundayOfYear(t),e,2)},w:function(t){return t.getDay()},W:function(t,e){return $e(je.mondayOfYear(t),e,2)},x:s(n),X:s(r),y:function(t,e){return $e(t.getFullYear()%100,e,2)},Y:function(t,e){return $e(t.getFullYear()%1e4,e,4)},Z:fn,"%":function(){return"%"}},k={a:function(t,e,n){v.lastIndex=0;var r=v.exec(e.slice(n));return r?(t.w=g.get(r[0].toLowerCase()),n+r[0].length):-1},A:function(t,e,n){p.lastIndex=0;var r=p.exec(e.slice(n));return r?(t.w=h.get(r[0].toLowerCase()),n+r[0].length):-1},b:function(t,e,n){b.lastIndex=0;var r=b.exec(e.slice(n));return r?(t.m=x.get(r[0].toLowerCase()),n+r[0].length):-1},B:function(t,e,n){m.lastIndex=0;var r=m.exec(e.slice(n));return r?(t.m=y.get(r[0].toLowerCase()),n+r[0].length):-1},c:function(t,e,n){return f(t,w.c.toString(),e,n)},d:on,e:on,H:un,I:un,j:an,L:sn,m:rn,M:ln,p:function(t,e,n){var r=d.get(e.slice(n,n+=2).toLowerCase());return null==r?-1:(t.p=r,n)},S:cn,U:Qe,w:Ze,W:Je,x:function(t,e,n){return f(t,w.x.toString(),e,n)},X:function(t,e,n){return f(t,w.X.toString(),e,n)},y:en,Y:tn,Z:nn,"%":dn};return s}je.year=Ue(function(t){return(t=je.day(t)).setMonth(0,1),t},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t){return t.getFullYear()}),je.years=je.year.range,je.years.utc=je.year.utc.range,je.day=Ue(function(t){var e=new ze(2e3,0);return e.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),e},function(t,e){t.setDate(t.getDate()+e)},function(t){return t.getDate()-1}),je.days=je.day.range,je.days.utc=je.day.utc.range,je.dayOfYear=function(t){var e=je.year(t);return Math.floor((t-e-6e4*(t.getTimezoneOffset()-e.getTimezoneOffset()))/864e5)},["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].forEach(function(t,e){e=7-e;var n=je[t]=Ue(function(t){return(t=je.day(t)).setDate(t.getDate()-(t.getDay()+e)%7),t},function(t,e){t.setDate(t.getDate()+7*Math.floor(e))},function(t){var n=je.year(t).getDay();return Math.floor((je.dayOfYear(t)+(n+e)%7)/7)-(n!==e)});je[t+"s"]=n.range,je[t+"s"].utc=n.utc.range,je[t+"OfYear"]=function(t){var n=je.year(t).getDay();return Math.floor((je.dayOfYear(t)+(n+e)%7)/7)}}),je.week=je.sunday,je.weeks=je.sunday.range,je.weeks.utc=je.sunday.utc.range,je.weekOfYear=je.sundayOfYear;var qe={"-":"",_:" ",0:"0"},Ye=/^\s*\d+/,Ge=/^%/;function $e(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function Xe(t){return new RegExp("^(?:"+t.map(o.requote).join("|")+")","i")}function Ke(t){for(var e=new S,n=-1,r=t.length;++n<r;)e.set(t[n].toLowerCase(),n);return e}function Ze(t,e,n){Ye.lastIndex=0;var r=Ye.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Qe(t,e,n){Ye.lastIndex=0;var r=Ye.exec(e.slice(n));return r?(t.U=+r[0],n+r[0].length):-1}function Je(t,e,n){Ye.lastIndex=0;var r=Ye.exec(e.slice(n));return r?(t.W=+r[0],n+r[0].length):-1}function tn(t,e,n){Ye.lastIndex=0;var r=Ye.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function en(t,e,n){Ye.lastIndex=0;var r,i=Ye.exec(e.slice(n,n+2));return i?(t.y=(r=+i[0])+(r>68?1900:2e3),n+i[0].length):-1}function nn(t,e,n){return/^[+-]\d{4}$/.test(e=e.slice(n,n+5))?(t.Z=-e,n+5):-1}function rn(t,e,n){Ye.lastIndex=0;var r=Ye.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function on(t,e,n){Ye.lastIndex=0;var r=Ye.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function an(t,e,n){Ye.lastIndex=0;var r=Ye.exec(e.slice(n,n+3));return r?(t.j=+r[0],n+r[0].length):-1}function un(t,e,n){Ye.lastIndex=0;var r=Ye.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function ln(t,e,n){Ye.lastIndex=0;var r=Ye.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function cn(t,e,n){Ye.lastIndex=0;var r=Ye.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function sn(t,e,n){Ye.lastIndex=0;var r=Ye.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function fn(t){var e=t.getTimezoneOffset(),n=e>0?"-":"+",r=k(e)/60|0,i=k(e)%60;return n+$e(r,"0",2)+$e(i,"0",2)}function dn(t,e,n){Ge.lastIndex=0;var r=Ge.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function pn(t){for(var e=t.length,n=-1;++n<e;)t[n][0]=this(t[n][0]);return function(e){for(var n=0,r=t[n];!r[1](e);)r=t[++n];return r[0](e)}}o.locale=function(t){return{numberFormat:Le(t),timeFormat:He(t)}};var hn=o.locale({decimal:".",thousands:",",grouping:[3],currency:["$",""],dateTime:"%a %b %e %X %Y",date:"%m/%d/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});function vn(){}o.format=hn.numberFormat,o.geo={},vn.prototype={s:0,t:0,add:function(t){mn(t,this.t,gn),mn(gn.s,this.s,this),this.s?this.t+=gn.t:this.s=gn.t},reset:function(){this.s=this.t=0},valueOf:function(){return this.s}};var gn=new vn;function mn(t,e,n){var r=n.s=t+e,i=r-t,o=r-i;n.t=t-o+(e-i)}function yn(t,e){t&&xn.hasOwnProperty(t.type)&&xn[t.type](t,e)}o.geo.stream=function(t,e){t&&bn.hasOwnProperty(t.type)?bn[t.type](t,e):yn(t,e)};var bn={Feature:function(t,e){yn(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,i=n.length;++r<i;)yn(n[r].geometry,e)}},xn={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)t=n[r],e.point(t[0],t[1],t[2])},LineString:function(t,e){wn(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)wn(n[r],e,0)},Polygon:function(t,e){kn(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)kn(n[r],e)},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,i=n.length;++r<i;)yn(n[r],e)}};function wn(t,e,n){var r,i=-1,o=t.length-n;for(e.lineStart();++i<o;)r=t[i],e.point(r[0],r[1],r[2]);e.lineEnd()}function kn(t,e){var n=-1,r=t.length;for(e.polygonStart();++n<r;)wn(t[n],e,1);e.polygonEnd()}o.geo.area=function(t){return Mn=0,o.geo.stream(t,Rn),Mn};var Mn,Sn,En,_n,Cn,Tn,An,Pn,Nn,On,Fn,Ln,Dn=new vn,Rn={sphere:function(){Mn+=4*At},point:z,lineStart:z,lineEnd:z,polygonStart:function(){Dn.reset(),Rn.lineStart=In},polygonEnd:function(){var t=2*Dn;Mn+=t<0?4*At+t:t,Rn.lineStart=Rn.lineEnd=Rn.point=z}};function In(){var t,e,n,r,i;function o(t,e){e=e*Ft/2+At/4;var o=(t*=Ft)-n,a=o>=0?1:-1,u=a*o,l=Math.cos(e),c=Math.sin(e),s=i*c,f=r*l+s*Math.cos(u),d=s*a*Math.sin(u);Dn.add(Math.atan2(d,f)),n=t,r=l,i=c}Rn.point=function(a,u){Rn.point=o,n=(t=a)*Ft,r=Math.cos(u=(e=u)*Ft/2+At/4),i=Math.sin(u)},Rn.lineEnd=function(){o(t,e)}}function jn(t){var e=t[0],n=t[1],r=Math.cos(n);return[r*Math.cos(e),r*Math.sin(e),Math.sin(n)]}function zn(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function Wn(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function Bn(t,e){t[0]+=e[0],t[1]+=e[1],t[2]+=e[2]}function Un(t,e){return[t[0]*e,t[1]*e,t[2]*e]}function Vn(t){var e=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}function Hn(t){return[Math.atan2(t[1],t[0]),jt(t[2])]}function qn(t,e){return k(t[0]-e[0])<Ct&&k(t[1]-e[1])<Ct}o.geo.bounds=function(){var t,e,n,r,i,a,u,l,c,s,f,d={point:p,lineStart:v,lineEnd:g,polygonStart:function(){d.point=m,d.lineStart=y,d.lineEnd=b,c=0,Rn.polygonStart()},polygonEnd:function(){Rn.polygonEnd(),d.point=p,d.lineStart=v,d.lineEnd=g,Dn<0?(t=-(n=180),e=-(r=90)):c>Ct?r=90:c<-Ct&&(e=-90),f[0]=t,f[1]=n}};function p(i,o){s.push(f=[t=i,n=i]),o<e&&(e=o),o>r&&(r=o)}function h(o,a){var u=jn([o*Ft,a*Ft]);if(l){var c=Wn(l,u),s=Wn([c[1],-c[0],0],c);Vn(s),s=Hn(s);var f=o-i,d=f>0?1:-1,h=s[0]*Lt*d,v=k(f)>180;if(v^(d*i<h&&h<d*o))(g=s[1]*Lt)>r&&(r=g);else if(v^(d*i<(h=(h+360)%360-180)&&h<d*o)){var g;(g=-s[1]*Lt)<e&&(e=g)}else a<e&&(e=a),a>r&&(r=a);v?o<i?x(t,o)>x(t,n)&&(n=o):x(o,n)>x(t,n)&&(t=o):n>=t?(o<t&&(t=o),o>n&&(n=o)):o>i?x(t,o)>x(t,n)&&(n=o):x(o,n)>x(t,n)&&(t=o)}else p(o,a);l=u,i=o}function v(){d.point=h}function g(){f[0]=t,f[1]=n,d.point=p,l=null}function m(t,e){if(l){var n=t-i;c+=k(n)>180?n+(n>0?360:-360):n}else a=t,u=e;Rn.point(t,e),h(t,e)}function y(){Rn.lineStart()}function b(){m(a,u),Rn.lineEnd(),k(c)>Ct&&(t=-(n=180)),f[0]=t,f[1]=n,l=null}function x(t,e){return(e-=t)<0?e+360:e}function w(t,e){return t[0]-e[0]}function M(t,e){return e[0]<=e[1]?e[0]<=t&&t<=e[1]:t<e[0]||e[1]<t}return function(i){if(r=n=-(t=e=1/0),s=[],o.geo.stream(i,d),c=s.length){s.sort(w);for(var a=1,u=[v=s[0]];a<c;++a)M((p=s[a])[0],v)||M(p[1],v)?(x(v[0],p[1])>x(v[0],v[1])&&(v[1]=p[1]),x(p[0],v[1])>x(v[0],v[1])&&(v[0]=p[0])):u.push(v=p);for(var l,c,p,h=-1/0,v=(a=0,u[c=u.length-1]);a<=c;v=p,++a)p=u[a],(l=x(v[1],p[0]))>h&&(h=l,t=p[0],n=v[1])}return s=f=null,t===1/0||e===1/0?[[NaN,NaN],[NaN,NaN]]:[[t,e],[n,r]]}}(),o.geo.centroid=function(t){Sn=En=_n=Cn=Tn=An=Pn=Nn=On=Fn=Ln=0,o.geo.stream(t,Yn);var e=On,n=Fn,r=Ln,i=e*e+n*n+r*r;return i<Tt&&(e=An,n=Pn,r=Nn,En<Ct&&(e=_n,n=Cn,r=Tn),(i=e*e+n*n+r*r)<Tt)?[NaN,NaN]:[Math.atan2(n,e)*Lt,jt(r/Math.sqrt(i))*Lt]};var Yn={sphere:z,point:Gn,lineStart:Xn,lineEnd:Kn,polygonStart:function(){Yn.lineStart=Zn},polygonEnd:function(){Yn.lineStart=Xn}};function Gn(t,e){t*=Ft;var n=Math.cos(e*=Ft);$n(n*Math.cos(t),n*Math.sin(t),Math.sin(e))}function $n(t,e,n){_n+=(t-_n)/++Sn,Cn+=(e-Cn)/Sn,Tn+=(n-Tn)/Sn}function Xn(){var t,e,n;function r(r,i){r*=Ft;var o=Math.cos(i*=Ft),a=o*Math.cos(r),u=o*Math.sin(r),l=Math.sin(i),c=Math.atan2(Math.sqrt((c=e*l-n*u)*c+(c=n*a-t*l)*c+(c=t*u-e*a)*c),t*a+e*u+n*l);En+=c,An+=c*(t+(t=a)),Pn+=c*(e+(e=u)),Nn+=c*(n+(n=l)),$n(t,e,n)}Yn.point=function(i,o){i*=Ft;var a=Math.cos(o*=Ft);t=a*Math.cos(i),e=a*Math.sin(i),n=Math.sin(o),Yn.point=r,$n(t,e,n)}}function Kn(){Yn.point=Gn}function Zn(){var t,e,n,r,i;function o(t,e){t*=Ft;var o=Math.cos(e*=Ft),a=o*Math.cos(t),u=o*Math.sin(t),l=Math.sin(e),c=r*l-i*u,s=i*a-n*l,f=n*u-r*a,d=Math.sqrt(c*c+s*s+f*f),p=n*a+r*u+i*l,h=d&&-It(p)/d,v=Math.atan2(d,p);On+=h*c,Fn+=h*s,Ln+=h*f,En+=v,An+=v*(n+(n=a)),Pn+=v*(r+(r=u)),Nn+=v*(i+(i=l)),$n(n,r,i)}Yn.point=function(a,u){t=a,e=u,Yn.point=o,a*=Ft;var l=Math.cos(u*=Ft);n=l*Math.cos(a),r=l*Math.sin(a),i=Math.sin(u),$n(n,r,i)},Yn.lineEnd=function(){o(t,e),Yn.lineEnd=Kn,Yn.point=Gn}}function Qn(t,e){function n(n,r){return n=t(n,r),e(n[0],n[1])}return t.invert&&e.invert&&(n.invert=function(n,r){return(n=e.invert(n,r))&&t.invert(n[0],n[1])}),n}function Jn(){return!0}function tr(t,e,n,r,i){var o=[],a=[];if(t.forEach(function(t){if(!((e=t.length-1)<=0)){var e,n=t[0],r=t[e];if(qn(n,r)){i.lineStart();for(var u=0;u<e;++u)i.point((n=t[u])[0],n[1]);i.lineEnd()}else{var l=new nr(n,t,null,!0),c=new nr(n,null,l,!1);l.o=c,o.push(l),a.push(c),l=new nr(r,t,null,!1),c=new nr(r,null,l,!0),l.o=c,o.push(l),a.push(c)}}}),a.sort(e),er(o),er(a),o.length){for(var u=0,l=n,c=a.length;u<c;++u)a[u].e=l=!l;for(var s,f,d=o[0];;){for(var p=d,h=!0;p.v;)if((p=p.n)===d)return;s=p.z,i.lineStart();do{if(p.v=p.o.v=!0,p.e){if(h)for(u=0,c=s.length;u<c;++u)i.point((f=s[u])[0],f[1]);else r(p.x,p.n.x,1,i);p=p.n}else{if(h)for(u=(s=p.p.z).length-1;u>=0;--u)i.point((f=s[u])[0],f[1]);else r(p.x,p.p.x,-1,i);p=p.p}s=(p=p.o).z,h=!h}while(!p.v);i.lineEnd()}}}function er(t){if(e=t.length){for(var e,n,r=0,i=t[0];++r<e;)i.n=n=t[r],n.p=i,i=n;i.n=n=t[0],n.p=i}}function nr(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}function rr(t,e,n,r){return function(i,a){var u,l=e(a),c=i.invert(r[0],r[1]),s={point:f,lineStart:p,lineEnd:h,polygonStart:function(){s.point=x,s.lineStart=w,s.lineEnd=k,u=[],v=[]},polygonEnd:function(){s.point=f,s.lineStart=p,s.lineEnd=h,u=o.merge(u);var t=function(t,e){var n=t[0],r=t[1],i=[Math.sin(n),-Math.cos(n),0],o=0,a=0;Dn.reset();for(var u=0,l=e.length;u<l;++u){var c=e[u],s=c.length;if(s)for(var f=c[0],d=f[0],p=f[1]/2+At/4,h=Math.sin(p),v=Math.cos(p),g=1;;){g===s&&(g=0);var m=(t=c[g])[0],y=t[1]/2+At/4,b=Math.sin(y),x=Math.cos(y),w=m-d,k=w>=0?1:-1,M=k*w,S=M>At,E=h*b;if(Dn.add(Math.atan2(E*k*Math.sin(M),v*x+E*Math.cos(M))),o+=S?w+k*Pt:w,S^d>=n^m>=n){var _=Wn(jn(f),jn(t));Vn(_);var C=Wn(i,_);Vn(C);var T=(S^w>=0?-1:1)*jt(C[2]);(r>T||r===T&&(_[0]||_[1]))&&(a+=S^w>=0?1:-1)}if(!g++)break;d=m,h=b,v=x,f=t}}return(o<-Ct||o<Ct&&Dn<-Ct)^1&a}(c,v);u.length?(b||(a.polygonStart(),b=!0),tr(u,ar,t,n,a)):t&&(b||(a.polygonStart(),b=!0),a.lineStart(),n(null,null,1,a),a.lineEnd()),b&&(a.polygonEnd(),b=!1),u=v=null},sphere:function(){a.polygonStart(),a.lineStart(),n(null,null,1,a),a.lineEnd(),a.polygonEnd()}};function f(e,n){var r=i(e,n);t(e=r[0],n=r[1])&&a.point(e,n)}function d(t,e){var n=i(t,e);l.point(n[0],n[1])}function p(){s.point=d,l.lineStart()}function h(){s.point=f,l.lineEnd()}var v,g,m=or(),y=e(m),b=!1;function x(t,e){g.push([t,e]);var n=i(t,e);y.point(n[0],n[1])}function w(){y.lineStart(),g=[]}function k(){x(g[0][0],g[0][1]),y.lineEnd();var t,e=y.clean(),n=m.buffer(),r=n.length;if(g.pop(),v.push(g),g=null,r)if(1&e){var i,o=-1;if((r=(t=n[0]).length-1)>0){for(b||(a.polygonStart(),b=!0),a.lineStart();++o<r;)a.point((i=t[o])[0],i[1]);a.lineEnd()}}else r>1&&2&e&&n.push(n.pop().concat(n.shift())),u.push(n.filter(ir))}return s}}function ir(t){return t.length>1}function or(){var t,e=[];return{lineStart:function(){e.push(t=[])},point:function(e,n){t.push([e,n])},lineEnd:z,buffer:function(){var n=e;return e=[],t=null,n},rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))}}}function ar(t,e){return((t=t.x)[0]<0?t[1]-Ot-Ct:Ot-t[1])-((e=e.x)[0]<0?e[1]-Ot-Ct:Ot-e[1])}var ur=rr(Jn,function(t){var e,n=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(o,a){var u=o>0?At:-At,l=k(o-n);k(l-At)<Ct?(t.point(n,r=(r+a)/2>0?Ot:-Ot),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),t.point(o,r),e=0):i!==u&&l>=At&&(k(n-i)<Ct&&(n-=i*Ct),k(o-u)<Ct&&(o-=u*Ct),r=function(t,e,n,r){var i,o,a=Math.sin(t-n);return k(a)>Ct?Math.atan((Math.sin(e)*(o=Math.cos(r))*Math.sin(n)-Math.sin(r)*(i=Math.cos(e))*Math.sin(t))/(i*o*a)):(e+r)/2}(n,r,o,a),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),e=0),t.point(n=o,r=a),i=u},lineEnd:function(){t.lineEnd(),n=r=NaN},clean:function(){return 2-e}}},function(t,e,n,r){var i;if(null==t)i=n*Ot,r.point(-At,i),r.point(0,i),r.point(At,i),r.point(At,0),r.point(At,-i),r.point(0,-i),r.point(-At,-i),r.point(-At,0),r.point(-At,i);else if(k(t[0]-e[0])>Ct){var o=t[0]<e[0]?At:-At;i=n*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(e[0],e[1])},[-At,-At/2]);function lr(t,e,n,r){return function(i){var o,a=i.a,u=i.b,l=a.x,c=a.y,s=0,f=1,d=u.x-l,p=u.y-c;if(o=t-l,d||!(o>0)){if(o/=d,d<0){if(o<s)return;o<f&&(f=o)}else if(d>0){if(o>f)return;o>s&&(s=o)}if(o=n-l,d||!(o<0)){if(o/=d,d<0){if(o>f)return;o>s&&(s=o)}else if(d>0){if(o<s)return;o<f&&(f=o)}if(o=e-c,p||!(o>0)){if(o/=p,p<0){if(o<s)return;o<f&&(f=o)}else if(p>0){if(o>f)return;o>s&&(s=o)}if(o=r-c,p||!(o<0)){if(o/=p,p<0){if(o>f)return;o>s&&(s=o)}else if(p>0){if(o<s)return;o<f&&(f=o)}return s>0&&(i.a={x:l+s*d,y:c+s*p}),f<1&&(i.b={x:l+f*d,y:c+f*p}),i}}}}}}var cr=1e9;function sr(t,e,n,r){return function(l){var c,s,f,d,p,h,v,g,m,y,b,x=l,w=or(),k=lr(t,e,n,r),M={point:_,lineStart:function(){M.point=C,s&&s.push(f=[]);y=!0,m=!1,v=g=NaN},lineEnd:function(){c&&(C(d,p),h&&m&&w.rejoin(),c.push(w.buffer()));M.point=_,m&&l.lineEnd()},polygonStart:function(){l=w,c=[],s=[],b=!0},polygonEnd:function(){l=x,c=o.merge(c);var e=function(t){for(var e=0,n=s.length,r=t[1],i=0;i<n;++i)for(var o,a=1,u=s[i],l=u.length,c=u[0];a<l;++a)o=u[a],c[1]<=r?o[1]>r&&Rt(c,o,t)>0&&++e:o[1]<=r&&Rt(c,o,t)<0&&--e,c=o;return 0!==e}([t,r]),n=b&&e,i=c.length;(n||i)&&(l.polygonStart(),n&&(l.lineStart(),S(null,null,1,l),l.lineEnd()),i&&tr(c,a,e,S,l),l.polygonEnd()),c=s=f=null}};function S(o,a,l,c){var s=0,f=0;if(null==o||(s=i(o,l))!==(f=i(a,l))||u(o,a)<0^l>0)do{c.point(0===s||3===s?t:n,s>1?r:e)}while((s=(s+l+4)%4)!==f);else c.point(a[0],a[1])}function E(i,o){return t<=i&&i<=n&&e<=o&&o<=r}function _(t,e){E(t,e)&&l.point(t,e)}function C(t,e){var n=E(t=Math.max(-cr,Math.min(cr,t)),e=Math.max(-cr,Math.min(cr,e)));if(s&&f.push([t,e]),y)d=t,p=e,h=n,y=!1,n&&(l.lineStart(),l.point(t,e));else if(n&&m)l.point(t,e);else{var r={a:{x:v,y:g},b:{x:t,y:e}};k(r)?(m||(l.lineStart(),l.point(r.a.x,r.a.y)),l.point(r.b.x,r.b.y),n||l.lineEnd(),b=!1):n&&(l.lineStart(),l.point(t,e),b=!1)}v=t,g=e,m=n}return M};function i(r,i){return k(r[0]-t)<Ct?i>0?0:3:k(r[0]-n)<Ct?i>0?2:1:k(r[1]-e)<Ct?i>0?1:0:i>0?3:2}function a(t,e){return u(t.x,e.x)}function u(t,e){var n=i(t,1),r=i(e,1);return n!==r?n-r:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}}function fr(t){var e=0,n=At/3,r=Dr(t),i=r(e,n);return i.parallels=function(t){return arguments.length?r(e=t[0]*At/180,n=t[1]*At/180):[e/At*180,n/At*180]},i}function dr(t,e){var n=Math.sin(t),r=(n+Math.sin(e))/2,i=1+n*(2*r-n),o=Math.sqrt(i)/r;function a(t,e){var n=Math.sqrt(i-2*r*Math.sin(e))/r;return[n*Math.sin(t*=r),o-n*Math.cos(t)]}return a.invert=function(t,e){var n=o-e;return[Math.atan2(t,n)/r,jt((i-(t*t+n*n)*r*r)/(2*r))]},a}o.geo.clipExtent=function(){var t,e,n,r,i,o,a={stream:function(t){return i&&(i.valid=!1),(i=o(t)).valid=!0,i},extent:function(u){return arguments.length?(o=sr(t=+u[0][0],e=+u[0][1],n=+u[1][0],r=+u[1][1]),i&&(i.valid=!1,i=null),a):[[t,e],[n,r]]}};return a.extent([[0,0],[960,500]])},(o.geo.conicEqualArea=function(){return fr(dr)}).raw=dr,o.geo.albers=function(){return o.geo.conicEqualArea().rotate([96,0]).center([-.6,38.7]).parallels([29.5,45.5]).scale(1070)},o.geo.albersUsa=function(){var t,e,n,r,i=o.geo.albers(),a=o.geo.conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),u=o.geo.conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),l={point:function(e,n){t=[e,n]}};function c(i){var o=i[0],a=i[1];return t=null,e(o,a),t||(n(o,a),t)||r(o,a),t}return c.invert=function(t){var e=i.scale(),n=i.translate(),r=(t[0]-n[0])/e,o=(t[1]-n[1])/e;return(o>=.12&&o<.234&&r>=-.425&&r<-.214?a:o>=.166&&o<.234&&r>=-.214&&r<-.115?u:i).invert(t)},c.stream=function(t){var e=i.stream(t),n=a.stream(t),r=u.stream(t);return{point:function(t,i){e.point(t,i),n.point(t,i),r.point(t,i)},sphere:function(){e.sphere(),n.sphere(),r.sphere()},lineStart:function(){e.lineStart(),n.lineStart(),r.lineStart()},lineEnd:function(){e.lineEnd(),n.lineEnd(),r.lineEnd()},polygonStart:function(){e.polygonStart(),n.polygonStart(),r.polygonStart()},polygonEnd:function(){e.polygonEnd(),n.polygonEnd(),r.polygonEnd()}}},c.precision=function(t){return arguments.length?(i.precision(t),a.precision(t),u.precision(t),c):i.precision()},c.scale=function(t){return arguments.length?(i.scale(t),a.scale(.35*t),u.scale(t),c.translate(i.translate())):i.scale()},c.translate=function(t){if(!arguments.length)return i.translate();var o=i.scale(),s=+t[0],f=+t[1];return e=i.translate(t).clipExtent([[s-.455*o,f-.238*o],[s+.455*o,f+.238*o]]).stream(l).point,n=a.translate([s-.307*o,f+.201*o]).clipExtent([[s-.425*o+Ct,f+.12*o+Ct],[s-.214*o-Ct,f+.234*o-Ct]]).stream(l).point,r=u.translate([s-.205*o,f+.212*o]).clipExtent([[s-.214*o+Ct,f+.166*o+Ct],[s-.115*o-Ct,f+.234*o-Ct]]).stream(l).point,c},c.scale(1070)};var pr,hr,vr,gr,mr,yr,br={point:z,lineStart:z,lineEnd:z,polygonStart:function(){hr=0,br.lineStart=xr},polygonEnd:function(){br.lineStart=br.lineEnd=br.point=z,pr+=k(hr/2)}};function xr(){var t,e,n,r;function i(t,e){hr+=r*t-n*e,n=t,r=e}br.point=function(o,a){br.point=i,t=n=o,e=r=a},br.lineEnd=function(){i(t,e)}}var wr={point:function(t,e){t<vr&&(vr=t);t>mr&&(mr=t);e<gr&&(gr=e);e>yr&&(yr=e)},lineStart:z,lineEnd:z,polygonStart:z,polygonEnd:z};function kr(){var t=Mr(4.5),e=[],n={point:r,lineStart:function(){n.point=i},lineEnd:a,polygonStart:function(){n.lineEnd=u},polygonEnd:function(){n.lineEnd=a,n.point=r},pointRadius:function(e){return t=Mr(e),n},result:function(){if(e.length){var t=e.join("");return e=[],t}}};function r(n,r){e.push("M",n,",",r,t)}function i(t,r){e.push("M",t,",",r),n.point=o}function o(t,n){e.push("L",t,",",n)}function a(){n.point=r}function u(){e.push("Z")}return n}function Mr(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}var Sr,Er={point:_r,lineStart:Cr,lineEnd:Tr,polygonStart:function(){Er.lineStart=Ar},polygonEnd:function(){Er.point=_r,Er.lineStart=Cr,Er.lineEnd=Tr}};function _r(t,e){_n+=t,Cn+=e,++Tn}function Cr(){var t,e;function n(n,r){var i=n-t,o=r-e,a=Math.sqrt(i*i+o*o);An+=a*(t+n)/2,Pn+=a*(e+r)/2,Nn+=a,_r(t=n,e=r)}Er.point=function(r,i){Er.point=n,_r(t=r,e=i)}}function Tr(){Er.point=_r}function Ar(){var t,e,n,r;function i(t,e){var i=t-n,o=e-r,a=Math.sqrt(i*i+o*o);An+=a*(n+t)/2,Pn+=a*(r+e)/2,Nn+=a,On+=(a=r*t-n*e)*(n+t),Fn+=a*(r+e),Ln+=3*a,_r(n=t,r=e)}Er.point=function(o,a){Er.point=i,_r(t=n=o,e=r=a)},Er.lineEnd=function(){i(t,e)}}function Pr(t){var e=4.5,n={point:r,lineStart:function(){n.point=i},lineEnd:a,polygonStart:function(){n.lineEnd=u},polygonEnd:function(){n.lineEnd=a,n.point=r},pointRadius:function(t){return e=t,n},result:z};function r(n,r){t.moveTo(n+e,r),t.arc(n,r,e,0,Pt)}function i(e,r){t.moveTo(e,r),n.point=o}function o(e,n){t.lineTo(e,n)}function a(){n.point=r}function u(){t.closePath()}return n}function Nr(t){var e=.5,n=Math.cos(30*Ft),r=16;function i(e){return(r?function(e){var n,i,a,u,l,c,s,f,d,p,h,v,g={point:m,lineStart:y,lineEnd:x,polygonStart:function(){e.polygonStart(),g.lineStart=w},polygonEnd:function(){e.polygonEnd(),g.lineStart=y}};function m(n,r){n=t(n,r),e.point(n[0],n[1])}function y(){f=NaN,g.point=b,e.lineStart()}function b(n,i){var a=jn([n,i]),u=t(n,i);o(f,d,s,p,h,v,f=u[0],d=u[1],s=n,p=a[0],h=a[1],v=a[2],r,e),e.point(f,d)}function x(){g.point=m,e.lineEnd()}function w(){y(),g.point=k,g.lineEnd=M}function k(t,e){b(n=t,e),i=f,a=d,u=p,l=h,c=v,g.point=b}function M(){o(f,d,s,p,h,v,i,a,n,u,l,c,r,e),g.lineEnd=x,x()}return g}:function(e){return Fr(e,function(n,r){n=t(n,r),e.point(n[0],n[1])})})(e)}function o(r,i,a,u,l,c,s,f,d,p,h,v,g,m){var y=s-r,b=f-i,x=y*y+b*b;if(x>4*e&&g--){var w=u+p,M=l+h,S=c+v,E=Math.sqrt(w*w+M*M+S*S),_=Math.asin(S/=E),C=k(k(S)-1)<Ct||k(a-d)<Ct?(a+d)/2:Math.atan2(M,w),T=t(C,_),A=T[0],P=T[1],N=A-r,O=P-i,F=b*N-y*O;(F*F/x>e||k((y*N+b*O)/x-.5)>.3||u*p+l*h+c*v<n)&&(o(r,i,a,u,l,c,A,P,C,w/=E,M/=E,S,g,m),m.point(A,P),o(A,P,C,w,M,S,s,f,d,p,h,v,g,m))}}return i.precision=function(t){return arguments.length?(r=(e=t*t)>0&&16,i):Math.sqrt(e)},i}function Or(t){this.stream=t}function Fr(t,e){return{point:e,sphere:function(){t.sphere()},lineStart:function(){t.lineStart()},lineEnd:function(){t.lineEnd()},polygonStart:function(){t.polygonStart()},polygonEnd:function(){t.polygonEnd()}}}function Lr(t){return Dr(function(){return t})()}function Dr(t){var e,n,r,i,a,u,l=Nr(function(t,n){return[(t=e(t,n))[0]*c+i,a-t[1]*c]}),c=150,s=480,f=250,d=0,p=0,h=0,v=0,g=0,m=ur,y=D,b=null,x=null;function w(t){return[(t=r(t[0]*Ft,t[1]*Ft))[0]*c+i,a-t[1]*c]}function M(t){return(t=r.invert((t[0]-i)/c,(a-t[1])/c))&&[t[0]*Lt,t[1]*Lt]}function S(){r=Qn(n=zr(h,v,g),e);var t=e(d,p);return i=s-t[0]*c,a=f+t[1]*c,E()}function E(){return u&&(u.valid=!1,u=null),w}return w.stream=function(t){return u&&(u.valid=!1),(u=Rr(m(n,l(y(t))))).valid=!0,u},w.clipAngle=function(t){return arguments.length?(m=null==t?(b=t,ur):function(t){var e=Math.cos(t),n=e>0,r=k(e)>Ct;return rr(i,function(t){var e,u,l,c,s;return{lineStart:function(){c=l=!1,s=1},point:function(f,d){var p,h=[f,d],v=i(f,d),g=n?v?0:a(f,d):v?a(f+(f<0?At:-At),d):0;if(!e&&(c=l=v)&&t.lineStart(),v!==l&&(p=o(e,h),(qn(e,p)||qn(h,p))&&(h[0]+=Ct,h[1]+=Ct,v=i(h[0],h[1]))),v!==l)s=0,v?(t.lineStart(),p=o(h,e),t.point(p[0],p[1])):(p=o(e,h),t.point(p[0],p[1]),t.lineEnd()),e=p;else if(r&&e&&n^v){var m;g&u||!(m=o(h,e,!0))||(s=0,n?(t.lineStart(),t.point(m[0][0],m[0][1]),t.point(m[1][0],m[1][1]),t.lineEnd()):(t.point(m[1][0],m[1][1]),t.lineEnd(),t.lineStart(),t.point(m[0][0],m[0][1])))}!v||e&&qn(e,h)||t.point(h[0],h[1]),e=h,l=v,u=g},lineEnd:function(){l&&t.lineEnd(),e=null},clean:function(){return s|(c&&l)<<1}}},Vr(t,6*Ft),n?[0,-t]:[-At,t-At]);function i(t,n){return Math.cos(t)*Math.cos(n)>e}function o(t,n,r){var i=[1,0,0],o=Wn(jn(t),jn(n)),a=zn(o,o),u=o[0],l=a-u*u;if(!l)return!r&&t;var c=e*a/l,s=-e*u/l,f=Wn(i,o),d=Un(i,c);Bn(d,Un(o,s));var p=f,h=zn(d,p),v=zn(p,p),g=h*h-v*(zn(d,d)-1);if(!(g<0)){var m=Math.sqrt(g),y=Un(p,(-h-m)/v);if(Bn(y,d),y=Hn(y),!r)return y;var b,x=t[0],w=n[0],M=t[1],S=n[1];w<x&&(b=x,x=w,w=b);var E=w-x,_=k(E-At)<Ct;if(!_&&S<M&&(b=M,M=S,S=b),_||E<Ct?_?M+S>0^y[1]<(k(y[0]-x)<Ct?M:S):M<=y[1]&&y[1]<=S:E>At^(x<=y[0]&&y[0]<=w)){var C=Un(p,(-h+m)/v);return Bn(C,d),[y,Hn(C)]}}}function a(e,r){var i=n?t:At-t,o=0;return e<-i?o|=1:e>i&&(o|=2),r<-i?o|=4:r>i&&(o|=8),o}}((b=+t)*Ft),E()):b},w.clipExtent=function(t){return arguments.length?(x=t,y=t?sr(t[0][0],t[0][1],t[1][0],t[1][1]):D,E()):x},w.scale=function(t){return arguments.length?(c=+t,S()):c},w.translate=function(t){return arguments.length?(s=+t[0],f=+t[1],S()):[s,f]},w.center=function(t){return arguments.length?(d=t[0]%360*Ft,p=t[1]%360*Ft,S()):[d*Lt,p*Lt]},w.rotate=function(t){return arguments.length?(h=t[0]%360*Ft,v=t[1]%360*Ft,g=t.length>2?t[2]%360*Ft:0,S()):[h*Lt,v*Lt,g*Lt]},o.rebind(w,l,"precision"),function(){return e=t.apply(this,arguments),w.invert=e.invert&&M,S()}}function Rr(t){return Fr(t,function(e,n){t.point(e*Ft,n*Ft)})}function Ir(t,e){return[t,e]}function jr(t,e){return[t>At?t-Pt:t<-At?t+Pt:t,e]}function zr(t,e,n){return t?e||n?Qn(Br(t),Ur(e,n)):Br(t):e||n?Ur(e,n):jr}function Wr(t){return function(e,n){return[(e+=t)>At?e-Pt:e<-At?e+Pt:e,n]}}function Br(t){var e=Wr(t);return e.invert=Wr(-t),e}function Ur(t,e){var n=Math.cos(t),r=Math.sin(t),i=Math.cos(e),o=Math.sin(e);function a(t,e){var a=Math.cos(e),u=Math.cos(t)*a,l=Math.sin(t)*a,c=Math.sin(e),s=c*n+u*r;return[Math.atan2(l*i-s*o,u*n-c*r),jt(s*i+l*o)]}return a.invert=function(t,e){var a=Math.cos(e),u=Math.cos(t)*a,l=Math.sin(t)*a,c=Math.sin(e),s=c*i-l*o;return[Math.atan2(l*i+c*o,u*n+s*r),jt(s*n-u*r)]},a}function Vr(t,e){var n=Math.cos(t),r=Math.sin(t);return function(i,o,a,u){var l=a*e;null!=i?(i=Hr(n,i),o=Hr(n,o),(a>0?i<o:i>o)&&(i+=a*Pt)):(i=t+a*Pt,o=t-.5*l);for(var c,s=i;a>0?s>o:s<o;s-=l)u.point((c=Hn([n,-r*Math.cos(s),-r*Math.sin(s)]))[0],c[1])}}function Hr(t,e){var n=jn(e);n[0]-=t,Vn(n);var r=It(-n[1]);return((-n[2]<0?-r:r)+2*Math.PI-Ct)%(2*Math.PI)}function qr(t,e,n){var r=o.range(t,e-Ct,n).concat(e);return function(t){return r.map(function(e){return[t,e]})}}function Yr(t,e,n){var r=o.range(t,e-Ct,n).concat(e);return function(t){return r.map(function(e){return[e,t]})}}function Gr(t){return t.source}function $r(t){return t.target}o.geo.path=function(){var t,e,n,r,i,a=4.5;function u(t){return t&&("function"==typeof a&&r.pointRadius(+a.apply(this,arguments)),i&&i.valid||(i=n(r)),o.geo.stream(t,i)),r.result()}function l(){return i=null,u}return u.area=function(t){return pr=0,o.geo.stream(t,n(br)),pr},u.centroid=function(t){return _n=Cn=Tn=An=Pn=Nn=On=Fn=Ln=0,o.geo.stream(t,n(Er)),Ln?[On/Ln,Fn/Ln]:Nn?[An/Nn,Pn/Nn]:Tn?[_n/Tn,Cn/Tn]:[NaN,NaN]},u.bounds=function(t){return mr=yr=-(vr=gr=1/0),o.geo.stream(t,n(wr)),[[vr,gr],[mr,yr]]},u.projection=function(e){return arguments.length?(n=(t=e)?e.stream||(r=e,i=Nr(function(t,e){return r([t*Lt,e*Lt])}),function(t){return Rr(i(t))}):D,l()):t;var r,i},u.context=function(t){return arguments.length?(r=null==(e=t)?new kr:new Pr(t),"function"!=typeof a&&r.pointRadius(a),l()):e},u.pointRadius=function(t){return arguments.length?(a="function"==typeof t?t:(r.pointRadius(+t),+t),u):a},u.projection(o.geo.albersUsa()).context(null)},o.geo.transform=function(t){return{stream:function(e){var n=new Or(e);for(var r in t)n[r]=t[r];return n}}},Or.prototype={point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}},o.geo.projection=Lr,o.geo.projectionMutator=Dr,(o.geo.equirectangular=function(){return Lr(Ir)}).raw=Ir.invert=Ir,o.geo.rotation=function(t){function e(e){return(e=t(e[0]*Ft,e[1]*Ft))[0]*=Lt,e[1]*=Lt,e}return t=zr(t[0]%360*Ft,t[1]*Ft,t.length>2?t[2]*Ft:0),e.invert=function(e){return(e=t.invert(e[0]*Ft,e[1]*Ft))[0]*=Lt,e[1]*=Lt,e},e},jr.invert=Ir,o.geo.circle=function(){var t,e,n=[0,0],r=6;function i(){var t="function"==typeof n?n.apply(this,arguments):n,r=zr(-t[0]*Ft,-t[1]*Ft,0).invert,i=[];return e(null,null,1,{point:function(t,e){i.push(t=r(t,e)),t[0]*=Lt,t[1]*=Lt}}),{type:"Polygon",coordinates:[i]}}return i.origin=function(t){return arguments.length?(n=t,i):n},i.angle=function(n){return arguments.length?(e=Vr((t=+n)*Ft,r*Ft),i):t},i.precision=function(n){return arguments.length?(e=Vr(t*Ft,(r=+n)*Ft),i):r},i.angle(90)},o.geo.distance=function(t,e){var n,r=(e[0]-t[0])*Ft,i=t[1]*Ft,o=e[1]*Ft,a=Math.sin(r),u=Math.cos(r),l=Math.sin(i),c=Math.cos(i),s=Math.sin(o),f=Math.cos(o);return Math.atan2(Math.sqrt((n=f*a)*n+(n=c*s-l*f*u)*n),l*s+c*f*u)},o.geo.graticule=function(){var t,e,n,r,i,a,u,l,c,s,f,d,p=10,h=p,v=90,g=360,m=2.5;function y(){return{type:"MultiLineString",coordinates:b()}}function b(){return o.range(Math.ceil(r/v)*v,n,v).map(f).concat(o.range(Math.ceil(l/g)*g,u,g).map(d)).concat(o.range(Math.ceil(e/p)*p,t,p).filter(function(t){return k(t%v)>Ct}).map(c)).concat(o.range(Math.ceil(a/h)*h,i,h).filter(function(t){return k(t%g)>Ct}).map(s))}return y.lines=function(){return b().map(function(t){return{type:"LineString",coordinates:t}})},y.outline=function(){return{type:"Polygon",coordinates:[f(r).concat(d(u).slice(1),f(n).reverse().slice(1),d(l).reverse().slice(1))]}},y.extent=function(t){return arguments.length?y.majorExtent(t).minorExtent(t):y.minorExtent()},y.majorExtent=function(t){return arguments.length?(r=+t[0][0],n=+t[1][0],l=+t[0][1],u=+t[1][1],r>n&&(t=r,r=n,n=t),l>u&&(t=l,l=u,u=t),y.precision(m)):[[r,l],[n,u]]},y.minorExtent=function(n){return arguments.length?(e=+n[0][0],t=+n[1][0],a=+n[0][1],i=+n[1][1],e>t&&(n=e,e=t,t=n),a>i&&(n=a,a=i,i=n),y.precision(m)):[[e,a],[t,i]]},y.step=function(t){return arguments.length?y.majorStep(t).minorStep(t):y.minorStep()},y.majorStep=function(t){return arguments.length?(v=+t[0],g=+t[1],y):[v,g]},y.minorStep=function(t){return arguments.length?(p=+t[0],h=+t[1],y):[p,h]},y.precision=function(o){return arguments.length?(m=+o,c=qr(a,i,90),s=Yr(e,t,m),f=qr(l,u,90),d=Yr(r,n,m),y):m},y.majorExtent([[-180,-90+Ct],[180,90-Ct]]).minorExtent([[-180,-80-Ct],[180,80+Ct]])},o.geo.greatArc=function(){var t,e,n=Gr,r=$r;function i(){return{type:"LineString",coordinates:[t||n.apply(this,arguments),e||r.apply(this,arguments)]}}return i.distance=function(){return o.geo.distance(t||n.apply(this,arguments),e||r.apply(this,arguments))},i.source=function(e){return arguments.length?(n=e,t="function"==typeof e?null:e,i):n},i.target=function(t){return arguments.length?(r=t,e="function"==typeof t?null:t,i):r},i.precision=function(){return arguments.length?i:0},i},o.geo.interpolate=function(t,e){return n=t[0]*Ft,r=t[1]*Ft,i=e[0]*Ft,o=e[1]*Ft,a=Math.cos(r),u=Math.sin(r),l=Math.cos(o),c=Math.sin(o),s=a*Math.cos(n),f=a*Math.sin(n),d=l*Math.cos(i),p=l*Math.sin(i),h=2*Math.asin(Math.sqrt(Wt(o-r)+a*l*Wt(i-n))),v=1/Math.sin(h),(g=h?function(t){var e=Math.sin(t*=h)*v,n=Math.sin(h-t)*v,r=n*s+e*d,i=n*f+e*p,o=n*u+e*c;return[Math.atan2(i,r)*Lt,Math.atan2(o,Math.sqrt(r*r+i*i))*Lt]}:function(){return[n*Lt,r*Lt]}).distance=h,g;var n,r,i,o,a,u,l,c,s,f,d,p,h,v,g},o.geo.length=function(t){return Sr=0,o.geo.stream(t,Xr),Sr};var Xr={sphere:z,point:z,lineStart:function(){var t,e,n;function r(r,i){var o=Math.sin(i*=Ft),a=Math.cos(i),u=k((r*=Ft)-t),l=Math.cos(u);Sr+=Math.atan2(Math.sqrt((u=a*Math.sin(u))*u+(u=n*o-e*a*l)*u),e*o+n*a*l),t=r,e=o,n=a}Xr.point=function(i,o){t=i*Ft,e=Math.sin(o*=Ft),n=Math.cos(o),Xr.point=r},Xr.lineEnd=function(){Xr.point=Xr.lineEnd=z}},lineEnd:z,polygonStart:z,polygonEnd:z};function Kr(t,e){function n(e,n){var r=Math.cos(e),i=Math.cos(n),o=t(r*i);return[o*i*Math.sin(e),o*Math.sin(n)]}return n.invert=function(t,n){var r=Math.sqrt(t*t+n*n),i=e(r),o=Math.sin(i),a=Math.cos(i);return[Math.atan2(t*o,r*a),Math.asin(r&&n*o/r)]},n}var Zr=Kr(function(t){return Math.sqrt(2/(1+t))},function(t){return 2*Math.asin(t/2)});(o.geo.azimuthalEqualArea=function(){return Lr(Zr)}).raw=Zr;var Qr=Kr(function(t){var e=Math.acos(t);return e&&e/Math.sin(e)},D);function Jr(t,e){var n=Math.cos(t),r=function(t){return Math.tan(At/4+t/2)},i=t===e?Math.sin(t):Math.log(n/Math.cos(e))/Math.log(r(e)/r(t)),o=n*Math.pow(r(t),i)/i;if(!i)return ni;function a(t,e){o>0?e<-Ot+Ct&&(e=-Ot+Ct):e>Ot-Ct&&(e=Ot-Ct);var n=o/Math.pow(r(e),i);return[n*Math.sin(i*t),o-n*Math.cos(i*t)]}return a.invert=function(t,e){var n=o-e,r=Dt(i)*Math.sqrt(t*t+n*n);return[Math.atan2(t,n)/i,2*Math.atan(Math.pow(o/r,1/i))-Ot]},a}function ti(t,e){var n=Math.cos(t),r=t===e?Math.sin(t):(n-Math.cos(e))/(e-t),i=n/r+t;if(k(r)<Ct)return Ir;function o(t,e){var n=i-e;return[n*Math.sin(r*t),i-n*Math.cos(r*t)]}return o.invert=function(t,e){var n=i-e;return[Math.atan2(t,n)/r,i-Dt(r)*Math.sqrt(t*t+n*n)]},o}(o.geo.azimuthalEquidistant=function(){return Lr(Qr)}).raw=Qr,(o.geo.conicConformal=function(){return fr(Jr)}).raw=Jr,(o.geo.conicEquidistant=function(){return fr(ti)}).raw=ti;var ei=Kr(function(t){return 1/t},Math.atan);function ni(t,e){return[t,Math.log(Math.tan(At/4+e/2))]}function ri(t){var e,n=Lr(t),r=n.scale,i=n.translate,o=n.clipExtent;return n.scale=function(){var t=r.apply(n,arguments);return t===n?e?n.clipExtent(null):n:t},n.translate=function(){var t=i.apply(n,arguments);return t===n?e?n.clipExtent(null):n:t},n.clipExtent=function(t){var a=o.apply(n,arguments);if(a===n){if(e=null==t){var u=At*r(),l=i();o([[l[0]-u,l[1]-u],[l[0]+u,l[1]+u]])}}else e&&(a=null);return a},n.clipExtent(null)}(o.geo.gnomonic=function(){return Lr(ei)}).raw=ei,ni.invert=function(t,e){return[t,2*Math.atan(Math.exp(e))-Ot]},(o.geo.mercator=function(){return ri(ni)}).raw=ni;var ii=Kr(function(){return 1},Math.asin);(o.geo.orthographic=function(){return Lr(ii)}).raw=ii;var oi=Kr(function(t){return 1/(1+t)},function(t){return 2*Math.atan(t)});function ai(t,e){return[Math.log(Math.tan(At/4+e/2)),-t]}function ui(t){return t[0]}function li(t){return t[1]}function ci(t){for(var e=t.length,n=[0,1],r=2,i=2;i<e;i++){for(;r>1&&Rt(t[n[r-2]],t[n[r-1]],t[i])<=0;)--r;n[r++]=i}return n.slice(0,r)}function si(t,e){return t[0]-e[0]||t[1]-e[1]}(o.geo.stereographic=function(){return Lr(oi)}).raw=oi,ai.invert=function(t,e){return[-e,2*Math.atan(Math.exp(t))-Ot]},(o.geo.transverseMercator=function(){var t=ri(ai),e=t.center,n=t.rotate;return t.center=function(t){return t?e([-t[1],t[0]]):[(t=e())[1],-t[0]]},t.rotate=function(t){return t?n([t[0],t[1],t.length>2?t[2]+90:90]):[(t=n())[0],t[1],t[2]-90]},n([0,0,90])}).raw=ai,o.geom={},o.geom.hull=function(t){var e=ui,n=li;if(arguments.length)return r(t);function r(t){if(t.length<3)return[];var r,i=xe(e),o=xe(n),a=t.length,u=[],l=[];for(r=0;r<a;r++)u.push([+i.call(this,t[r],r),+o.call(this,t[r],r),r]);for(u.sort(si),r=0;r<a;r++)l.push([u[r][0],-u[r][1]]);var c=ci(u),s=ci(l),f=s[0]===c[0],d=s[s.length-1]===c[c.length-1],p=[];for(r=c.length-1;r>=0;--r)p.push(t[u[c[r]][2]]);for(r=+f;r<s.length-d;++r)p.push(t[u[s[r]][2]]);return p}return r.x=function(t){return arguments.length?(e=t,r):e},r.y=function(t){return arguments.length?(n=t,r):n},r},o.geom.polygon=function(t){return Y(t,fi),t};var fi=o.geom.polygon.prototype=[];function di(t,e,n){return(n[0]-e[0])*(t[1]-e[1])<(n[1]-e[1])*(t[0]-e[0])}function pi(t,e,n,r){var i=t[0],o=n[0],a=e[0]-i,u=r[0]-o,l=t[1],c=n[1],s=e[1]-l,f=r[1]-c,d=(u*(l-c)-f*(i-o))/(f*a-u*s);return[i+d*a,l+d*s]}function hi(t){var e=t[0],n=t[t.length-1];return!(e[0]-n[0]||e[1]-n[1])}fi.area=function(){for(var t,e=-1,n=this.length,r=this[n-1],i=0;++e<n;)t=r,r=this[e],i+=t[1]*r[0]-t[0]*r[1];return.5*i},fi.centroid=function(t){var e,n,r=-1,i=this.length,o=0,a=0,u=this[i-1];for(arguments.length||(t=-1/(6*this.area()));++r<i;)e=u,u=this[r],n=e[0]*u[1]-u[0]*e[1],o+=(e[0]+u[0])*n,a+=(e[1]+u[1])*n;return[o*t,a*t]},fi.clip=function(t){for(var e,n,r,i,o,a,u=hi(t),l=-1,c=this.length-hi(this),s=this[c-1];++l<c;){for(e=t.slice(),t.length=0,i=this[l],o=e[(r=e.length-u)-1],n=-1;++n<r;)di(a=e[n],s,i)?(di(o,s,i)||t.push(pi(o,a,s,i)),t.push(a)):di(o,s,i)&&t.push(pi(o,a,s,i)),o=a;u&&t.push(t[0]),s=i}return t};var vi,gi,mi,yi,bi,xi=[],wi=[];function ki(){Wi(this),this.edge=this.site=this.circle=null}function Mi(t){var e=xi.pop()||new ki;return e.site=t,e}function Si(t){Fi(t),mi.remove(t),xi.push(t),Wi(t)}function Ei(t){var e=t.circle,n=e.x,r=e.cy,i={x:n,y:r},o=t.P,a=t.N,u=[t];Si(t);for(var l=o;l.circle&&k(n-l.circle.x)<Ct&&k(r-l.circle.cy)<Ct;)o=l.P,u.unshift(l),Si(l),l=o;u.unshift(l),Fi(l);for(var c=a;c.circle&&k(n-c.circle.x)<Ct&&k(r-c.circle.cy)<Ct;)a=c.N,u.push(c),Si(c),c=a;u.push(c),Fi(c);var s,f=u.length;for(s=1;s<f;++s)c=u[s],l=u[s-1],Ii(c.edge,l.site,c.site,i);l=u[0],(c=u[f-1]).edge=Ri(l.site,c.site,null,i),Oi(l),Oi(c)}function _i(t){for(var e,n,r,i,o=t.x,a=t.y,u=mi._;u;)if((r=Ci(u,a)-o)>Ct)u=u.L;else{if(!((i=o-Ti(u,a))>Ct)){r>-Ct?(e=u.P,n=u):i>-Ct?(e=u,n=u.N):e=n=u;break}if(!u.R){e=u;break}u=u.R}var l=Mi(t);if(mi.insert(e,l),e||n){if(e===n)return Fi(e),n=Mi(e.site),mi.insert(l,n),l.edge=n.edge=Ri(e.site,l.site),Oi(e),void Oi(n);if(n){Fi(e),Fi(n);var c=e.site,s=c.x,f=c.y,d=t.x-s,p=t.y-f,h=n.site,v=h.x-s,g=h.y-f,m=2*(d*g-p*v),y=d*d+p*p,b=v*v+g*g,x={x:(g*y-p*b)/m+s,y:(d*b-v*y)/m+f};Ii(n.edge,c,h,x),l.edge=Ri(c,t,null,x),n.edge=Ri(t,h,null,x),Oi(e),Oi(n)}else l.edge=Ri(e.site,l.site)}}function Ci(t,e){var n=t.site,r=n.x,i=n.y,o=i-e;if(!o)return r;var a=t.P;if(!a)return-1/0;var u=(n=a.site).x,l=n.y,c=l-e;if(!c)return u;var s=u-r,f=1/o-1/c,d=s/c;return f?(-d+Math.sqrt(d*d-2*f*(s*s/(-2*c)-l+c/2+i-o/2)))/f+r:(r+u)/2}function Ti(t,e){var n=t.N;if(n)return Ci(n,e);var r=t.site;return r.y===e?r.x:1/0}function Ai(t){this.site=t,this.edges=[]}function Pi(t,e){return e.angle-t.angle}function Ni(){Wi(this),this.x=this.y=this.arc=this.site=this.cy=null}function Oi(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var a=i.x,u=i.y,l=r.x-a,c=r.y-u,s=o.x-a,f=2*(l*(g=o.y-u)-c*s);if(!(f>=-Tt)){var d=l*l+c*c,p=s*s+g*g,h=(g*d-c*p)/f,v=(l*p-s*d)/f,g=v+u,m=wi.pop()||new Ni;m.arc=t,m.site=i,m.x=h+a,m.y=g+Math.sqrt(h*h+v*v),m.cy=g,t.circle=m;for(var y=null,b=bi._;b;)if(m.y<b.y||m.y===b.y&&m.x<=b.x){if(!b.L){y=b.P;break}b=b.L}else{if(!b.R){y=b;break}b=b.R}bi.insert(y,m),y||(yi=m)}}}}function Fi(t){var e=t.circle;e&&(e.P||(yi=e.N),bi.remove(e),wi.push(e),Wi(e),t.circle=null)}function Li(t,e){var n=t.b;if(n)return!0;var r,i,o=t.a,a=e[0][0],u=e[1][0],l=e[0][1],c=e[1][1],s=t.l,f=t.r,d=s.x,p=s.y,h=f.x,v=f.y,g=(d+h)/2,m=(p+v)/2;if(v===p){if(g<a||g>=u)return;if(d>h){if(o){if(o.y>=c)return}else o={x:g,y:l};n={x:g,y:c}}else{if(o){if(o.y<l)return}else o={x:g,y:c};n={x:g,y:l}}}else if(i=m-(r=(d-h)/(v-p))*g,r<-1||r>1)if(d>h){if(o){if(o.y>=c)return}else o={x:(l-i)/r,y:l};n={x:(c-i)/r,y:c}}else{if(o){if(o.y<l)return}else o={x:(c-i)/r,y:c};n={x:(l-i)/r,y:l}}else if(p<v){if(o){if(o.x>=u)return}else o={x:a,y:r*a+i};n={x:u,y:r*u+i}}else{if(o){if(o.x<a)return}else o={x:u,y:r*u+i};n={x:a,y:r*a+i}}return t.a=o,t.b=n,!0}function Di(t,e){this.l=t,this.r=e,this.a=this.b=null}function Ri(t,e,n,r){var i=new Di(t,e);return vi.push(i),n&&Ii(i,t,e,n),r&&Ii(i,e,t,r),gi[t.i].edges.push(new ji(i,t,e)),gi[e.i].edges.push(new ji(i,e,t)),i}function Ii(t,e,n,r){t.a||t.b?t.l===n?t.b=r:t.a=r:(t.a=r,t.l=e,t.r=n)}function ji(t,e,n){var r=t.a,i=t.b;this.edge=t,this.site=e,this.angle=n?Math.atan2(n.y-e.y,n.x-e.x):t.l===e?Math.atan2(i.x-r.x,r.y-i.y):Math.atan2(r.x-i.x,i.y-r.y)}function zi(){this._=null}function Wi(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Bi(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function Ui(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Vi(t){for(;t.L;)t=t.L;return t}function Hi(t,e){var n,r,i,o=t.sort(qi).pop();for(vi=[],gi=new Array(t.length),mi=new zi,bi=new zi;;)if(i=yi,o&&(!i||o.y<i.y||o.y===i.y&&o.x<i.x))o.x===n&&o.y===r||(gi[o.i]=new Ai(o),_i(o),n=o.x,r=o.y),o=t.pop();else{if(!i)break;Ei(i.arc)}e&&(function(t){for(var e,n=vi,r=lr(t[0][0],t[0][1],t[1][0],t[1][1]),i=n.length;i--;)(!Li(e=n[i],t)||!r(e)||k(e.a.x-e.b.x)<Ct&&k(e.a.y-e.b.y)<Ct)&&(e.a=e.b=null,n.splice(i,1))}(e),function(t){for(var e,n,r,i,o,a,u,l,c,s,f=t[0][0],d=t[1][0],p=t[0][1],h=t[1][1],v=gi,g=v.length;g--;)if((o=v[g])&&o.prepare())for(l=(u=o.edges).length,a=0;a<l;)r=(s=u[a].end()).x,i=s.y,e=(c=u[++a%l].start()).x,n=c.y,(k(r-e)>Ct||k(i-n)>Ct)&&(u.splice(a,0,new ji((m=o.site,y=s,b=k(r-f)<Ct&&h-i>Ct?{x:f,y:k(e-f)<Ct?n:h}:k(i-h)<Ct&&d-r>Ct?{x:k(n-h)<Ct?e:d,y:h}:k(r-d)<Ct&&i-p>Ct?{x:d,y:k(e-d)<Ct?n:p}:k(i-p)<Ct&&r-f>Ct?{x:k(n-p)<Ct?e:f,y:p}:null,x=void 0,x=new Di(m,null),x.a=y,x.b=b,vi.push(x),x),o.site,null)),++l);var m,y,b,x}(e));var a={cells:gi,edges:vi};return mi=bi=vi=gi=null,a}function qi(t,e){return e.y-t.y||e.x-t.x}Ai.prototype.prepare=function(){for(var t,e=this.edges,n=e.length;n--;)(t=e[n].edge).b&&t.a||e.splice(n,1);return e.sort(Pi),e.length},ji.prototype={start:function(){return this.edge.l===this.site?this.edge.a:this.edge.b},end:function(){return this.edge.l===this.site?this.edge.b:this.edge.a}},zi.prototype={insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=Vi(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(Bi(this,n),n=(t=n).U),n.C=!1,r.C=!0,Ui(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(Ui(this,n),n=(t=n).U),n.C=!1,r.C=!0,Bi(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,a=t.R;if(n=o?a?Vi(a):o:a,i?i.L===t?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=a,a.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((e=i.R).C&&(e.C=!1,i.C=!0,Bi(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,Ui(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,Bi(this,i),t=this._;break}}else if((e=i.L).C&&(e.C=!1,i.C=!0,Ui(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,Bi(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,Ui(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}},o.geom.voronoi=function(t){var e=ui,n=li,r=e,i=n,o=Yi;if(t)return a(t);function a(t){var e=new Array(t.length),n=o[0][0],r=o[0][1],i=o[1][0],a=o[1][1];return Hi(u(t),o).cells.forEach(function(o,u){var l=o.edges,c=o.site;(e[u]=l.length?l.map(function(t){var e=t.start();return[e.x,e.y]}):c.x>=n&&c.x<=i&&c.y>=r&&c.y<=a?[[n,a],[i,a],[i,r],[n,r]]:[]).point=t[u]}),e}function u(t){return t.map(function(t,e){return{x:Math.round(r(t,e)/Ct)*Ct,y:Math.round(i(t,e)/Ct)*Ct,i:e}})}return a.links=function(t){return Hi(u(t)).edges.filter(function(t){return t.l&&t.r}).map(function(e){return{source:t[e.l.i],target:t[e.r.i]}})},a.triangles=function(t){var e=[];return Hi(u(t)).cells.forEach(function(n,r){for(var i,o,a,u,l=n.site,c=n.edges.sort(Pi),s=-1,f=c.length,d=c[f-1].edge,p=d.l===l?d.r:d.l;++s<f;)d,i=p,p=(d=c[s].edge).l===l?d.r:d.l,r<i.i&&r<p.i&&(a=i,u=p,((o=l).x-u.x)*(a.y-o.y)-(o.x-a.x)*(u.y-o.y)<0)&&e.push([t[r],t[i.i],t[p.i]])}),e},a.x=function(t){return arguments.length?(r=xe(e=t),a):e},a.y=function(t){return arguments.length?(i=xe(n=t),a):n},a.clipExtent=function(t){return arguments.length?(o=null==t?Yi:t,a):o===Yi?null:o},a.size=function(t){return arguments.length?a.clipExtent(t&&[[0,0],t]):o===Yi?null:o&&o[1]},a};var Yi=[[-1e6,-1e6],[1e6,1e6]];function Gi(t){return t.x}function $i(t){return t.y}function Xi(t,e){t=o.rgb(t),e=o.rgb(e);var n=t.r,r=t.g,i=t.b,a=e.r-n,u=e.g-r,l=e.b-i;return function(t){return"#"+pe(Math.round(n+a*t))+pe(Math.round(r+u*t))+pe(Math.round(i+l*t))}}function Ki(t,e){var n,r={},i={};for(n in t)n in e?r[n]=eo(t[n],e[n]):i[n]=t[n];for(n in e)n in t||(i[n]=e[n]);return function(t){for(n in r)i[n]=r[n](t);return i}}function Zi(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function Qi(t,e){var n,r,i,o=Ji.lastIndex=to.lastIndex=0,a=-1,u=[],l=[];for(t+="",e+="";(n=Ji.exec(t))&&(r=to.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(n=n[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,l.push({i:a,x:Zi(n,r)})),o=to.lastIndex;return o<e.length&&(i=e.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?l[0]?(e=l[0].x,function(t){return e(t)+""}):function(){return e}:(e=l.length,function(t){for(var n,r=0;r<e;++r)u[(n=l[r]).i]=n.x(t);return u.join("")})}o.geom.delaunay=function(t){return o.geom.voronoi().triangles(t)},o.geom.quadtree=function(t,e,n,r,i){var o,a=ui,u=li;if(o=arguments.length)return a=Gi,u=$i,3===o&&(i=n,r=e,n=e=0),l(t);function l(t){var l,c,s,f,d,p,h,v,g,m=xe(a),y=xe(u);if(null!=e)p=e,h=n,v=r,g=i;else if(v=g=-(p=h=1/0),c=[],s=[],d=t.length,o)for(f=0;f<d;++f)(l=t[f]).x<p&&(p=l.x),l.y<h&&(h=l.y),l.x>v&&(v=l.x),l.y>g&&(g=l.y),c.push(l.x),s.push(l.y);else for(f=0;f<d;++f){var b=+m(l=t[f],f),x=+y(l,f);b<p&&(p=b),x<h&&(h=x),b>v&&(v=b),x>g&&(g=x),c.push(b),s.push(x)}var w=v-p,M=g-h;function S(t,e,n,r,i,o,a,u){if(!isNaN(n)&&!isNaN(r))if(t.leaf){var l=t.x,c=t.y;if(null!=l)if(k(l-n)+k(c-r)<.01)E(t,e,n,r,i,o,a,u);else{var s=t.point;t.x=t.y=t.point=null,E(t,s,l,c,i,o,a,u),E(t,e,n,r,i,o,a,u)}else t.x=n,t.y=r,t.point=e}else E(t,e,n,r,i,o,a,u)}function E(t,e,n,r,i,o,a,u){var l=.5*(i+a),c=.5*(o+u),s=n>=l,f=r>=c,d=f<<1|s;t.leaf=!1,s?i=l:a=l,f?o=c:u=c,S(t=t.nodes[d]||(t.nodes[d]={leaf:!0,nodes:[],point:null,x:null,y:null}),e,n,r,i,o,a,u)}w>M?g=h+w:v=p+M;var _={leaf:!0,nodes:[],point:null,x:null,y:null,add:function(t){S(_,t,+m(t,++f),+y(t,f),p,h,v,g)}};if(_.visit=function(t){!function t(e,n,r,i,o,a){if(!e(n,r,i,o,a)){var u=.5*(r+o),l=.5*(i+a),c=n.nodes;c[0]&&t(e,c[0],r,i,u,l),c[1]&&t(e,c[1],u,i,o,l),c[2]&&t(e,c[2],r,l,u,a),c[3]&&t(e,c[3],u,l,o,a)}}(t,_,p,h,v,g)},_.find=function(t){return function(t,e,n,r,i,o,a){var u,l=1/0;return function t(c,s,f,d,p){if(!(s>o||f>a||d<r||p<i)){if(h=c.point){var h,v=e-c.x,g=n-c.y,m=v*v+g*g;if(m<l){var y=Math.sqrt(l=m);r=e-y,i=n-y,o=e+y,a=n+y,u=h}}for(var b=c.nodes,x=.5*(s+d),w=.5*(f+p),k=(n>=w)<<1|e>=x,M=k+4;k<M;++k)if(c=b[3&k])switch(3&k){case 0:t(c,s,f,x,w);break;case 1:t(c,x,f,d,w);break;case 2:t(c,s,w,x,p);break;case 3:t(c,x,w,d,p)}}}(t,r,i,o,a),u}(_,t[0],t[1],p,h,v,g)},f=-1,null==e){for(;++f<d;)S(_,t[f],c[f],s[f],p,h,v,g);--f}else t.forEach(_.add);return c=s=t=l=null,_}return l.x=function(t){return arguments.length?(a=t,l):a},l.y=function(t){return arguments.length?(u=t,l):u},l.extent=function(t){return arguments.length?(null==t?e=n=r=i=null:(e=+t[0][0],n=+t[0][1],r=+t[1][0],i=+t[1][1]),l):null==e?null:[[e,n],[r,i]]},l.size=function(t){return arguments.length?(null==t?e=n=r=i=null:(e=n=0,r=+t[0],i=+t[1]),l):null==e?null:[r-e,i-n]},l},o.interpolateRgb=Xi,o.interpolateObject=Ki,o.interpolateNumber=Zi,o.interpolateString=Qi;var Ji=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,to=new RegExp(Ji.source,"g");function eo(t,e){for(var n,r=o.interpolators.length;--r>=0&&!(n=o.interpolators[r](t,e)););return n}function no(t,e){var n,r=[],i=[],o=t.length,a=e.length,u=Math.min(t.length,e.length);for(n=0;n<u;++n)r.push(eo(t[n],e[n]));for(;n<o;++n)i[n]=t[n];for(;n<a;++n)i[n]=e[n];return function(t){for(n=0;n<u;++n)i[n]=r[n](t);return i}}o.interpolate=eo,o.interpolators=[function(t,e){var n=typeof e;return("string"===n?be.has(e.toLowerCase())||/^(#|rgb\(|hsl\()/i.test(e)?Xi:Qi:e instanceof qt?Xi:Array.isArray(e)?no:"object"===n&&isNaN(e)?Ki:Zi)(t,e)}],o.interpolateArray=no;var ro=function(){return D},io=o.map({linear:ro,poly:function(t){return function(e){return Math.pow(e,t)}},quad:function(){return lo},cubic:function(){return co},sin:function(){return fo},exp:function(){return po},circle:function(){return ho},elastic:function(t,e){var n;arguments.length<2&&(e=.45);arguments.length?n=e/Pt*Math.asin(1/t):(t=1,n=e/4);return function(r){return 1+t*Math.pow(2,-10*r)*Math.sin((r-n)*Pt/e)}},back:function(t){t||(t=1.70158);return function(e){return e*e*((t+1)*e-t)}},bounce:function(){return vo}}),oo=o.map({in:D,out:ao,"in-out":uo,"out-in":function(t){return uo(ao(t))}});function ao(t){return function(e){return 1-t(1-e)}}function uo(t){return function(e){return.5*(e<.5?t(2*e):2-t(2-2*e))}}function lo(t){return t*t}function co(t){return t*t*t}function so(t){if(t<=0)return 0;if(t>=1)return 1;var e=t*t,n=e*t;return 4*(t<.5?n:3*(t-e)+n-.75)}function fo(t){return 1-Math.cos(t*Ot)}function po(t){return Math.pow(2,10*(t-1))}function ho(t){return 1-Math.sqrt(1-t*t)}function vo(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}function go(t,e){return e-=t,function(n){return Math.round(t+e*n)}}function mo(t){var e,n,r,i=[t.a,t.b],o=[t.c,t.d],a=bo(i),u=yo(i,o),l=bo(((e=o)[0]+=(r=-u)*(n=i)[0],e[1]+=r*n[1],e))||0;i[0]*o[1]<o[0]*i[1]&&(i[0]*=-1,i[1]*=-1,a*=-1,u*=-1),this.rotate=(a?Math.atan2(i[1],i[0]):Math.atan2(-o[0],o[1]))*Lt,this.translate=[t.e,t.f],this.scale=[a,l],this.skew=l?Math.atan2(u,l)*Lt:0}function yo(t,e){return t[0]*e[0]+t[1]*e[1]}function bo(t){var e=Math.sqrt(yo(t,t));return e&&(t[0]/=e,t[1]/=e),e}o.ease=function(t){var e,n=t.indexOf("-"),r=n>=0?t.slice(0,n):t,i=n>=0?t.slice(n+1):"in";return r=io.get(r)||ro,i=oo.get(i)||D,e=i(r.apply(null,a.call(arguments,1))),function(t){return t<=0?0:t>=1?1:e(t)}},o.interpolateHcl=function(t,e){t=o.hcl(t),e=o.hcl(e);var n=t.h,r=t.c,i=t.l,a=e.h-n,u=e.c-r,l=e.l-i;isNaN(u)&&(u=0,r=isNaN(r)?e.c:r);isNaN(a)?(a=0,n=isNaN(n)?e.h:n):a>180?a-=360:a<-180&&(a+=360);return function(t){return Zt(n+a*t,r+u*t,i+l*t)+""}},o.interpolateHsl=function(t,e){t=o.hsl(t),e=o.hsl(e);var n=t.h,r=t.s,i=t.l,a=e.h-n,u=e.s-r,l=e.l-i;isNaN(u)&&(u=0,r=isNaN(r)?e.s:r);isNaN(a)?(a=0,n=isNaN(n)?e.h:n):a>180?a-=360:a<-180&&(a+=360);return function(t){return $t(n+a*t,r+u*t,i+l*t)+""}},o.interpolateLab=function(t,e){t=o.lab(t),e=o.lab(e);var n=t.l,r=t.a,i=t.b,a=e.l-n,u=e.a-r,l=e.b-i;return function(t){return ie(n+a*t,r+u*t,i+l*t)+""}},o.interpolateRound=go,o.transform=function(t){var e=l.createElementNS(o.ns.prefix.svg,"g");return(o.transform=function(t){if(null!=t){e.setAttribute("transform",t);var n=e.transform.baseVal.consolidate()}return new mo(n?n.matrix:xo)})(t)},mo.prototype.toString=function(){return"translate("+this.translate+")rotate("+this.rotate+")skewX("+this.skew+")scale("+this.scale+")"};var xo={a:1,b:0,c:0,d:1,e:0,f:0};function wo(t){return t.length?t.pop()+",":""}function ko(t,e){var n=[],r=[];return t=o.transform(t),e=o.transform(e),function(t,e,n,r){if(t[0]!==e[0]||t[1]!==e[1]){var i=n.push("translate(",null,",",null,")");r.push({i:i-4,x:Zi(t[0],e[0])},{i:i-2,x:Zi(t[1],e[1])})}else(e[0]||e[1])&&n.push("translate("+e+")")}(t.translate,e.translate,n,r),function(t,e,n,r){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),r.push({i:n.push(wo(n)+"rotate(",null,")")-2,x:Zi(t,e)})):e&&n.push(wo(n)+"rotate("+e+")")}(t.rotate,e.rotate,n,r),function(t,e,n,r){t!==e?r.push({i:n.push(wo(n)+"skewX(",null,")")-2,x:Zi(t,e)}):e&&n.push(wo(n)+"skewX("+e+")")}(t.skew,e.skew,n,r),function(t,e,n,r){if(t[0]!==e[0]||t[1]!==e[1]){var i=n.push(wo(n)+"scale(",null,",",null,")");r.push({i:i-4,x:Zi(t[0],e[0])},{i:i-2,x:Zi(t[1],e[1])})}else 1===e[0]&&1===e[1]||n.push(wo(n)+"scale("+e+")")}(t.scale,e.scale,n,r),t=e=null,function(t){for(var e,i=-1,o=r.length;++i<o;)n[(e=r[i]).i]=e.x(t);return n.join("")}}function Mo(t,e){return e=(e-=t=+t)||1/e,function(n){return(n-t)/e}}function So(t,e){return e=(e-=t=+t)||1/e,function(n){return Math.max(0,Math.min(1,(n-t)/e))}}function Eo(t){for(var e=t.source,n=t.target,r=function(t,e){if(t===e)return t;var n=_o(t),r=_o(e),i=n.pop(),o=r.pop(),a=null;for(;i===o;)a=i,i=n.pop(),o=r.pop();return a}(e,n),i=[e];e!==r;)e=e.parent,i.push(e);for(var o=i.length;n!==r;)i.splice(o,0,n),n=n.parent;return i}function _o(t){for(var e=[],n=t.parent;null!=n;)e.push(t),t=n,n=n.parent;return e.push(t),e}function Co(t){t.fixed|=2}function To(t){t.fixed&=-7}function Ao(t){t.fixed|=4,t.px=t.x,t.py=t.y}function Po(t){t.fixed&=-5}o.interpolateTransform=ko,o.layout={},o.layout.bundle=function(){return function(t){for(var e=[],n=-1,r=t.length;++n<r;)e.push(Eo(t[n]));return e}},o.layout.chord=function(){var t,e,n,r,i,a,u,l={},c=0;function s(){var l,s,d,p,h,v={},g=[],m=o.range(r),y=[];for(t=[],e=[],l=0,p=-1;++p<r;){for(s=0,h=-1;++h<r;)s+=n[p][h];g.push(s),y.push(o.range(r)),l+=s}for(i&&m.sort(function(t,e){return i(g[t],g[e])}),a&&y.forEach(function(t,e){t.sort(function(t,r){return a(n[e][t],n[e][r])})}),l=(Pt-c*r)/l,s=0,p=-1;++p<r;){for(d=s,h=-1;++h<r;){var b=m[p],x=y[b][h],w=n[b][x],k=s,M=s+=w*l;v[b+"-"+x]={index:b,subindex:x,startAngle:k,endAngle:M,value:w}}e[b]={index:b,startAngle:d,endAngle:s,value:g[b]},s+=c}for(p=-1;++p<r;)for(h=p-1;++h<r;){var S=v[p+"-"+h],E=v[h+"-"+p];(S.value||E.value)&&t.push(S.value<E.value?{source:E,target:S}:{source:S,target:E})}u&&f()}function f(){t.sort(function(t,e){return u((t.source.value+t.target.value)/2,(e.source.value+e.target.value)/2)})}return l.matrix=function(i){return arguments.length?(r=(n=i)&&n.length,t=e=null,l):n},l.padding=function(n){return arguments.length?(c=n,t=e=null,l):c},l.sortGroups=function(n){return arguments.length?(i=n,t=e=null,l):i},l.sortSubgroups=function(e){return arguments.length?(a=e,t=null,l):a},l.sortChords=function(e){return arguments.length?(u=e,t&&f(),l):u},l.chords=function(){return t||s(),t},l.groups=function(){return e||s(),e},l},o.layout.force=function(){var t,e,n,r,i,a,u={},l=o.dispatch("start","tick","end"),c=[1,1],s=.9,f=No,d=Oo,p=-30,h=Fo,v=.1,g=.64,m=[],y=[];function b(t){return function(e,n,r,i){if(e.point!==t){var o=e.cx-t.x,a=e.cy-t.y,u=i-n,l=o*o+a*a;if(u*u/g<l){if(l<h){var c=e.charge/l;t.px-=o*c,t.py-=a*c}return!0}if(e.point&&l&&l<h){c=e.pointCharge/l;t.px-=o*c,t.py-=a*c}}return!e.charge}}function x(t){t.px=o.event.x,t.py=o.event.y,u.resume()}return u.tick=function(){if((n*=.99)<.005)return t=null,l.end({type:"end",alpha:n=0}),!0;var e,u,f,d,h,g,x,w,k,M=m.length,S=y.length;for(u=0;u<S;++u)d=(f=y[u]).source,(g=(w=(h=f.target).x-d.x)*w+(k=h.y-d.y)*k)&&(w*=g=n*i[u]*((g=Math.sqrt(g))-r[u])/g,k*=g,h.x-=w*(x=d.weight+h.weight?d.weight/(d.weight+h.weight):.5),h.y-=k*x,d.x+=w*(x=1-x),d.y+=k*x);if((x=n*v)&&(w=c[0]/2,k=c[1]/2,u=-1,x))for(;++u<M;)(f=m[u]).x+=(w-f.x)*x,f.y+=(k-f.y)*x;if(p)for(!function t(e,n,r){var i=0,o=0;e.charge=0;if(!e.leaf)for(var a,u=e.nodes,l=u.length,c=-1;++c<l;)null!=(a=u[c])&&(t(a,n,r),e.charge+=a.charge,i+=a.charge*a.cx,o+=a.charge*a.cy);if(e.point){e.leaf||(e.point.x+=Math.random()-.5,e.point.y+=Math.random()-.5);var s=n*r[e.point.index];e.charge+=e.pointCharge=s,i+=s*e.point.x,o+=s*e.point.y}e.cx=i/e.charge;e.cy=o/e.charge}(e=o.geom.quadtree(m),n,a),u=-1;++u<M;)(f=m[u]).fixed||e.visit(b(f));for(u=-1;++u<M;)(f=m[u]).fixed?(f.x=f.px,f.y=f.py):(f.x-=(f.px-(f.px=f.x))*s,f.y-=(f.py-(f.py=f.y))*s);l.tick({type:"tick",alpha:n})},u.nodes=function(t){return arguments.length?(m=t,u):m},u.links=function(t){return arguments.length?(y=t,u):y},u.size=function(t){return arguments.length?(c=t,u):c},u.linkDistance=function(t){return arguments.length?(f="function"==typeof t?t:+t,u):f},u.distance=u.linkDistance,u.linkStrength=function(t){return arguments.length?(d="function"==typeof t?t:+t,u):d},u.friction=function(t){return arguments.length?(s=+t,u):s},u.charge=function(t){return arguments.length?(p="function"==typeof t?t:+t,u):p},u.chargeDistance=function(t){return arguments.length?(h=t*t,u):Math.sqrt(h)},u.gravity=function(t){return arguments.length?(v=+t,u):v},u.theta=function(t){return arguments.length?(g=t*t,u):Math.sqrt(g)},u.alpha=function(e){return arguments.length?(e=+e,n?e>0?n=e:(t.c=null,t.t=NaN,t=null,l.end({type:"end",alpha:n=0})):e>0&&(l.start({type:"start",alpha:n=e}),t=Te(u.tick)),u):n},u.start=function(){var t,e,n,o=m.length,l=y.length,s=c[0],h=c[1];for(t=0;t<o;++t)(n=m[t]).index=t,n.weight=0;for(t=0;t<l;++t)"number"==typeof(n=y[t]).source&&(n.source=m[n.source]),"number"==typeof n.target&&(n.target=m[n.target]),++n.source.weight,++n.target.weight;for(t=0;t<o;++t)n=m[t],isNaN(n.x)&&(n.x=v("x",s)),isNaN(n.y)&&(n.y=v("y",h)),isNaN(n.px)&&(n.px=n.x),isNaN(n.py)&&(n.py=n.y);if(r=[],"function"==typeof f)for(t=0;t<l;++t)r[t]=+f.call(this,y[t],t);else for(t=0;t<l;++t)r[t]=f;if(i=[],"function"==typeof d)for(t=0;t<l;++t)i[t]=+d.call(this,y[t],t);else for(t=0;t<l;++t)i[t]=d;if(a=[],"function"==typeof p)for(t=0;t<o;++t)a[t]=+p.call(this,m[t],t);else for(t=0;t<o;++t)a[t]=p;function v(n,r){if(!e){for(e=new Array(o),c=0;c<o;++c)e[c]=[];for(c=0;c<l;++c){var i=y[c];e[i.source.index].push(i.target),e[i.target.index].push(i.source)}}for(var a,u=e[t],c=-1,s=u.length;++c<s;)if(!isNaN(a=u[c][n]))return a;return Math.random()*r}return u.resume()},u.resume=function(){return u.alpha(.1)},u.stop=function(){return u.alpha(0)},u.drag=function(){if(e||(e=o.behavior.drag().origin(D).on("dragstart.force",Co).on("drag.force",x).on("dragend.force",To)),!arguments.length)return e;this.on("mouseover.force",Ao).on("mouseout.force",Po).call(e)},o.rebind(u,l,"on")};var No=20,Oo=1,Fo=1/0;function Lo(t,e){return o.rebind(t,e,"sort","children","value"),t.nodes=t,t.links=Wo,t}function Do(t,e){for(var n=[t];null!=(t=n.pop());)if(e(t),(i=t.children)&&(r=i.length))for(var r,i;--r>=0;)n.push(i[r])}function Ro(t,e){for(var n=[t],r=[];null!=(t=n.pop());)if(r.push(t),(o=t.children)&&(i=o.length))for(var i,o,a=-1;++a<i;)n.push(o[a]);for(;null!=(t=r.pop());)e(t)}function Io(t){return t.children}function jo(t){return t.value}function zo(t,e){return e.value-t.value}function Wo(t){return o.merge(t.map(function(t){return(t.children||[]).map(function(e){return{source:t,target:e}})}))}o.layout.hierarchy=function(){var t=zo,e=Io,n=jo;function r(i){var o,a=[i],u=[];for(i.depth=0;null!=(o=a.pop());)if(u.push(o),(c=e.call(r,o,o.depth))&&(l=c.length)){for(var l,c,s;--l>=0;)a.push(s=c[l]),s.parent=o,s.depth=o.depth+1;n&&(o.value=0),o.children=c}else n&&(o.value=+n.call(r,o,o.depth)||0),delete o.children;return Ro(i,function(e){var r,i;t&&(r=e.children)&&r.sort(t),n&&(i=e.parent)&&(i.value+=e.value)}),u}return r.sort=function(e){return arguments.length?(t=e,r):t},r.children=function(t){return arguments.length?(e=t,r):e},r.value=function(t){return arguments.length?(n=t,r):n},r.revalue=function(t){return n&&(Do(t,function(t){t.children&&(t.value=0)}),Ro(t,function(t){var e;t.children||(t.value=+n.call(r,t,t.depth)||0),(e=t.parent)&&(e.value+=t.value)})),t},r},o.layout.partition=function(){var t=o.layout.hierarchy(),e=[1,1];function n(n,r){var i=t.call(this,n,r);return function t(e,n,r,i){var o=e.children;if(e.x=n,e.y=e.depth*i,e.dx=r,e.dy=i,o&&(a=o.length)){var a,u,l,c=-1;for(r=e.value?r/e.value:0;++c<a;)t(u=o[c],n,l=u.value*r,i),n+=l}}(i[0],0,e[0],e[1]/function t(e){var n=e.children,r=0;if(n&&(i=n.length))for(var i,o=-1;++o<i;)r=Math.max(r,t(n[o]));return 1+r}(i[0])),i}return n.size=function(t){return arguments.length?(e=t,n):e},Lo(n,t)},o.layout.pie=function(){var t=Number,e=Bo,n=0,r=Pt,i=0;function a(u){var l,c=u.length,s=u.map(function(e,n){return+t.call(a,e,n)}),f=+("function"==typeof n?n.apply(this,arguments):n),d=("function"==typeof r?r.apply(this,arguments):r)-f,p=Math.min(Math.abs(d)/c,+("function"==typeof i?i.apply(this,arguments):i)),h=p*(d<0?-1:1),v=o.sum(s),g=v?(d-c*h)/v:0,m=o.range(c),y=[];return null!=e&&m.sort(e===Bo?function(t,e){return s[e]-s[t]}:function(t,n){return e(u[t],u[n])}),m.forEach(function(t){y[t]={data:u[t],value:l=s[t],startAngle:f,endAngle:f+=l*g+h,padAngle:p}}),y}return a.value=function(e){return arguments.length?(t=e,a):t},a.sort=function(t){return arguments.length?(e=t,a):e},a.startAngle=function(t){return arguments.length?(n=t,a):n},a.endAngle=function(t){return arguments.length?(r=t,a):r},a.padAngle=function(t){return arguments.length?(i=t,a):i},a};var Bo={};function Uo(t){return t.x}function Vo(t){return t.y}function Ho(t,e,n){t.y0=e,t.y=n}o.layout.stack=function(){var t=D,e=Go,n=$o,r=Ho,i=Uo,a=Vo;function u(l,c){if(!(p=l.length))return l;var s=l.map(function(e,n){return t.call(u,e,n)}),f=s.map(function(t){return t.map(function(t,e){return[i.call(u,t,e),a.call(u,t,e)]})}),d=e.call(u,f,c);s=o.permute(s,d),f=o.permute(f,d);var p,h,v,g,m=n.call(u,f,c),y=s[0].length;for(v=0;v<y;++v)for(r.call(u,s[0][v],g=m[v],f[0][v][1]),h=1;h<p;++h)r.call(u,s[h][v],g+=f[h-1][v][1],f[h][v][1]);return l}return u.values=function(e){return arguments.length?(t=e,u):t},u.order=function(t){return arguments.length?(e="function"==typeof t?t:qo.get(t)||Go,u):e},u.offset=function(t){return arguments.length?(n="function"==typeof t?t:Yo.get(t)||$o,u):n},u.x=function(t){return arguments.length?(i=t,u):i},u.y=function(t){return arguments.length?(a=t,u):a},u.out=function(t){return arguments.length?(r=t,u):r},u};var qo=o.map({"inside-out":function(t){var e,n,r=t.length,i=t.map(Xo),a=t.map(Ko),u=o.range(r).sort(function(t,e){return i[t]-i[e]}),l=0,c=0,s=[],f=[];for(e=0;e<r;++e)n=u[e],l<c?(l+=a[n],s.push(n)):(c+=a[n],f.push(n));return f.reverse().concat(s)},reverse:function(t){return o.range(t.length).reverse()},default:Go}),Yo=o.map({silhouette:function(t){var e,n,r,i=t.length,o=t[0].length,a=[],u=0,l=[];for(n=0;n<o;++n){for(e=0,r=0;e<i;e++)r+=t[e][n][1];r>u&&(u=r),a.push(r)}for(n=0;n<o;++n)l[n]=(u-a[n])/2;return l},wiggle:function(t){var e,n,r,i,o,a,u,l,c,s=t.length,f=t[0],d=f.length,p=[];for(p[0]=l=c=0,n=1;n<d;++n){for(e=0,i=0;e<s;++e)i+=t[e][n][1];for(e=0,o=0,u=f[n][0]-f[n-1][0];e<s;++e){for(r=0,a=(t[e][n][1]-t[e][n-1][1])/(2*u);r<e;++r)a+=(t[r][n][1]-t[r][n-1][1])/u;o+=a*t[e][n][1]}p[n]=l-=i?o/i*u:0,l<c&&(c=l)}for(n=0;n<d;++n)p[n]-=c;return p},expand:function(t){var e,n,r,i=t.length,o=t[0].length,a=1/i,u=[];for(n=0;n<o;++n){for(e=0,r=0;e<i;e++)r+=t[e][n][1];if(r)for(e=0;e<i;e++)t[e][n][1]/=r;else for(e=0;e<i;e++)t[e][n][1]=a}for(n=0;n<o;++n)u[n]=0;return u},zero:$o});function Go(t){return o.range(t.length)}function $o(t){for(var e=-1,n=t[0].length,r=[];++e<n;)r[e]=0;return r}function Xo(t){for(var e,n=1,r=0,i=t[0][1],o=t.length;n<o;++n)(e=t[n][1])>i&&(r=n,i=e);return r}function Ko(t){return t.reduce(Zo,0)}function Zo(t,e){return t+e[1]}function Qo(t,e){return Jo(t,Math.ceil(Math.log(e.length)/Math.LN2+1))}function Jo(t,e){for(var n=-1,r=+t[0],i=(t[1]-r)/e,o=[];++n<=e;)o[n]=i*n+r;return o}function ta(t){return[o.min(t),o.max(t)]}function ea(t,e){return t.value-e.value}function na(t,e){var n=t._pack_next;t._pack_next=e,e._pack_prev=t,e._pack_next=n,n._pack_prev=e}function ra(t,e){t._pack_next=e,e._pack_prev=t}function ia(t,e){var n=e.x-t.x,r=e.y-t.y,i=t.r+e.r;return.999*i*i>n*n+r*r}function oa(t){if((e=t.children)&&(l=e.length)){var e,n,r,i,o,a,u,l,c=1/0,s=-1/0,f=1/0,d=-1/0;if(e.forEach(aa),(n=e[0]).x=-n.r,n.y=0,b(n),l>1&&((r=e[1]).x=r.r,r.y=0,b(r),l>2))for(la(n,r,i=e[2]),b(i),na(n,i),n._pack_prev=i,na(i,r),r=n._pack_next,o=3;o<l;o++){la(n,r,i=e[o]);var p=0,h=1,v=1;for(a=r._pack_next;a!==r;a=a._pack_next,h++)if(ia(a,i)){p=1;break}if(1==p)for(u=n._pack_prev;u!==a._pack_prev&&!ia(u,i);u=u._pack_prev,v++);p?(h<v||h==v&&r.r<n.r?ra(n,r=a):ra(n=u,r),o--):(na(n,i),r=i,b(i))}var g=(c+s)/2,m=(f+d)/2,y=0;for(o=0;o<l;o++)(i=e[o]).x-=g,i.y-=m,y=Math.max(y,i.r+Math.sqrt(i.x*i.x+i.y*i.y));t.r=y,e.forEach(ua)}function b(t){c=Math.min(t.x-t.r,c),s=Math.max(t.x+t.r,s),f=Math.min(t.y-t.r,f),d=Math.max(t.y+t.r,d)}}function aa(t){t._pack_next=t._pack_prev=t}function ua(t){delete t._pack_next,delete t._pack_prev}function la(t,e,n){var r=t.r+n.r,i=e.x-t.x,o=e.y-t.y;if(r&&(i||o)){var a=e.r+n.r,u=i*i+o*o,l=.5+((r*=r)-(a*=a))/(2*u),c=Math.sqrt(Math.max(0,2*a*(r+u)-(r-=u)*r-a*a))/(2*u);n.x=t.x+l*i+c*o,n.y=t.y+l*o-c*i}else n.x=t.x+r,n.y=t.y}function ca(t,e){return t.parent==e.parent?1:2}function sa(t){var e=t.children;return e.length?e[0]:t.t}function fa(t){var e,n=t.children;return(e=n.length)?n[e-1]:t.t}function da(t,e,n){var r=n/(e.i-t.i);e.c-=r,e.s+=n,t.c+=r,e.z+=n,e.m+=n}function pa(t,e,n){return t.a.parent===e.parent?t.a:n}function ha(t){return{x:t.x,y:t.y,dx:t.dx,dy:t.dy}}function va(t,e){var n=t.x+e[3],r=t.y+e[0],i=t.dx-e[1]-e[3],o=t.dy-e[0]-e[2];return i<0&&(n+=i/2,i=0),o<0&&(r+=o/2,o=0),{x:n,y:r,dx:i,dy:o}}function ga(t){var e=t[0],n=t[t.length-1];return e<n?[e,n]:[n,e]}function ma(t){return t.rangeExtent?t.rangeExtent():ga(t.range())}function ya(t,e,n,r){var i=n(t[0],t[1]),o=r(e[0],e[1]);return function(t){return o(i(t))}}function ba(t,e){var n,r=0,i=t.length-1,o=t[r],a=t[i];return a<o&&(n=r,r=i,i=n,n=o,o=a,a=n),t[r]=e.floor(o),t[i]=e.ceil(a),t}function xa(t){return t?{floor:function(e){return Math.floor(e/t)*t},ceil:function(e){return Math.ceil(e/t)*t}}:wa}o.layout.histogram=function(){var t=!0,e=Number,n=ta,r=Qo;function i(i,a){for(var u,l,c=[],s=i.map(e,this),f=n.call(this,s,a),d=r.call(this,f,s,a),p=(a=-1,s.length),h=d.length-1,v=t?1:1/p;++a<h;)(u=c[a]=[]).dx=d[a+1]-(u.x=d[a]),u.y=0;if(h>0)for(a=-1;++a<p;)(l=s[a])>=f[0]&&l<=f[1]&&((u=c[o.bisect(d,l,1,h)-1]).y+=v,u.push(i[a]));return c}return i.value=function(t){return arguments.length?(e=t,i):e},i.range=function(t){return arguments.length?(n=xe(t),i):n},i.bins=function(t){return arguments.length?(r="number"==typeof t?function(e){return Jo(e,t)}:xe(t),i):r},i.frequency=function(e){return arguments.length?(t=!!e,i):t},i},o.layout.pack=function(){var t,e=o.layout.hierarchy().sort(ea),n=0,r=[1,1];function i(i,o){var a=e.call(this,i,o),u=a[0],l=r[0],c=r[1],s=null==t?Math.sqrt:"function"==typeof t?t:function(){return t};if(u.x=u.y=0,Ro(u,function(t){t.r=+s(t.value)}),Ro(u,oa),n){var f=n*(t?1:Math.max(2*u.r/l,2*u.r/c))/2;Ro(u,function(t){t.r+=f}),Ro(u,oa),Ro(u,function(t){t.r-=f})}return function t(e,n,r,i){var o=e.children;e.x=n+=i*e.x;e.y=r+=i*e.y;e.r*=i;if(o)for(var a=-1,u=o.length;++a<u;)t(o[a],n,r,i)}(u,l/2,c/2,t?1:1/Math.max(2*u.r/l,2*u.r/c)),a}return i.size=function(t){return arguments.length?(r=t,i):r},i.radius=function(e){return arguments.length?(t=null==e||"function"==typeof e?e:+e,i):t},i.padding=function(t){return arguments.length?(n=+t,i):n},Lo(i,e)},o.layout.tree=function(){var t=o.layout.hierarchy().sort(null).value(null),e=ca,n=[1,1],r=null;function i(i,o){var c=t.call(this,i,o),s=c[0],f=function(t){var e,n={A:null,children:[t]},r=[n];for(;null!=(e=r.pop());)for(var i,o=e.children,a=0,u=o.length;a<u;++a)r.push((o[a]=i={_:o[a],parent:e,children:(i=o[a].children)&&i.slice()||[],A:null,a:null,z:0,m:0,c:0,s:0,t:null,i:a}).a=i);return n.children[0]}(s);if(Ro(f,a),f.parent.m=-f.z,Do(f,u),r)Do(s,l);else{var d=s,p=s,h=s;Do(s,function(t){t.x<d.x&&(d=t),t.x>p.x&&(p=t),t.depth>h.depth&&(h=t)});var v=e(d,p)/2-d.x,g=n[0]/(p.x+e(p,d)/2+v),m=n[1]/(h.depth||1);Do(s,function(t){t.x=(t.x+v)*g,t.y=t.depth*m})}return c}function a(t){var n=t.children,r=t.parent.children,i=t.i?r[t.i-1]:null;if(n.length){!function(t){var e,n=0,r=0,i=t.children,o=i.length;for(;--o>=0;)(e=i[o]).z+=n,e.m+=n,n+=e.s+(r+=e.c)}(t);var o=(n[0].z+n[n.length-1].z)/2;i?(t.z=i.z+e(t._,i._),t.m=t.z-o):t.z=o}else i&&(t.z=i.z+e(t._,i._));t.parent.A=function(t,n,r){if(n){for(var i,o=t,a=t,u=n,l=o.parent.children[0],c=o.m,s=a.m,f=u.m,d=l.m;u=fa(u),o=sa(o),u&&o;)l=sa(l),(a=fa(a)).a=t,(i=u.z+f-o.z-c+e(u._,o._))>0&&(da(pa(u,t,r),t,i),c+=i,s+=i),f+=u.m,c+=o.m,d+=l.m,s+=a.m;u&&!fa(a)&&(a.t=u,a.m+=f-s),o&&!sa(l)&&(l.t=o,l.m+=c-d,r=t)}return r}(t,i,t.parent.A||r[0])}function u(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function l(t){t.x*=n[0],t.y=t.depth*n[1]}return i.separation=function(t){return arguments.length?(e=t,i):e},i.size=function(t){return arguments.length?(r=null==(n=t)?l:null,i):r?null:n},i.nodeSize=function(t){return arguments.length?(r=null==(n=t)?null:l,i):r?n:null},Lo(i,t)},o.layout.cluster=function(){var t=o.layout.hierarchy().sort(null).value(null),e=ca,n=[1,1],r=!1;function i(i,a){var u,l=t.call(this,i,a),c=l[0],s=0;Ro(c,function(t){var n=t.children;n&&n.length?(t.x=function(t){return t.reduce(function(t,e){return t+e.x},0)/t.length}(n),t.y=function(t){return 1+o.max(t,function(t){return t.y})}(n)):(t.x=u?s+=e(t,u):0,t.y=0,u=t)});var f=function t(e){var n=e.children;return n&&n.length?t(n[0]):e}(c),d=function t(e){var n,r=e.children;return r&&(n=r.length)?t(r[n-1]):e}(c),p=f.x-e(f,d)/2,h=d.x+e(d,f)/2;return Ro(c,r?function(t){t.x=(t.x-c.x)*n[0],t.y=(c.y-t.y)*n[1]}:function(t){t.x=(t.x-p)/(h-p)*n[0],t.y=(1-(c.y?t.y/c.y:1))*n[1]}),l}return i.separation=function(t){return arguments.length?(e=t,i):e},i.size=function(t){return arguments.length?(r=null==(n=t),i):r?null:n},i.nodeSize=function(t){return arguments.length?(r=null!=(n=t),i):r?n:null},Lo(i,t)},o.layout.treemap=function(){var t,e=o.layout.hierarchy(),n=Math.round,r=[1,1],i=null,a=ha,u=!1,l="squarify",c=.5*(1+Math.sqrt(5));function s(t,e){for(var n,r,i=-1,o=t.length;++i<o;)r=(n=t[i]).value*(e<0?0:e),n.area=isNaN(r)||r<=0?0:r}function f(t){var e=t.children;if(e&&e.length){var n,r,i,o=a(t),u=[],c=e.slice(),d=1/0,v="slice"===l?o.dx:"dice"===l?o.dy:"slice-dice"===l?1&t.depth?o.dy:o.dx:Math.min(o.dx,o.dy);for(s(c,o.dx*o.dy/t.value),u.area=0;(i=c.length)>0;)u.push(n=c[i-1]),u.area+=n.area,"squarify"!==l||(r=p(u,v))<=d?(c.pop(),d=r):(u.area-=u.pop().area,h(u,v,o,!1),v=Math.min(o.dx,o.dy),u.length=u.area=0,d=1/0);u.length&&(h(u,v,o,!0),u.length=u.area=0),e.forEach(f)}}function d(t){var e=t.children;if(e&&e.length){var n,r=a(t),i=e.slice(),o=[];for(s(i,r.dx*r.dy/t.value),o.area=0;n=i.pop();)o.push(n),o.area+=n.area,null!=n.z&&(h(o,n.z?r.dx:r.dy,r,!i.length),o.length=o.area=0);e.forEach(d)}}function p(t,e){for(var n,r=t.area,i=0,o=1/0,a=-1,u=t.length;++a<u;)(n=t[a].area)&&(n<o&&(o=n),n>i&&(i=n));return e*=e,(r*=r)?Math.max(e*i*c/r,r/(e*o*c)):1/0}function h(t,e,r,i){var o,a=-1,u=t.length,l=r.x,c=r.y,s=e?n(t.area/e):0;if(e==r.dx){for((i||s>r.dy)&&(s=r.dy);++a<u;)(o=t[a]).x=l,o.y=c,o.dy=s,l+=o.dx=Math.min(r.x+r.dx-l,s?n(o.area/s):0);o.z=!0,o.dx+=r.x+r.dx-l,r.y+=s,r.dy-=s}else{for((i||s>r.dx)&&(s=r.dx);++a<u;)(o=t[a]).x=l,o.y=c,o.dx=s,c+=o.dy=Math.min(r.y+r.dy-c,s?n(o.area/s):0);o.z=!1,o.dy+=r.y+r.dy-c,r.x+=s,r.dx-=s}}function v(n){var i=t||e(n),o=i[0];return o.x=o.y=0,o.value?(o.dx=r[0],o.dy=r[1]):o.dx=o.dy=0,t&&e.revalue(o),s([o],o.dx*o.dy/o.value),(t?d:f)(o),u&&(t=i),i}return v.size=function(t){return arguments.length?(r=t,v):r},v.padding=function(t){if(!arguments.length)return i;function e(e){return va(e,t)}var n;return a=null==(i=t)?ha:"function"==(n=typeof t)?function(e){var n=t.call(v,e,e.depth);return null==n?ha(e):va(e,"number"==typeof n?[n,n,n,n]:n)}:"number"===n?(t=[t,t,t,t],e):e,v},v.round=function(t){return arguments.length?(n=t?Math.round:Number,v):n!=Number},v.sticky=function(e){return arguments.length?(u=e,t=null,v):u},v.ratio=function(t){return arguments.length?(c=t,v):c},v.mode=function(t){return arguments.length?(l=t+"",v):l},Lo(v,e)},o.random={normal:function(t,e){var n=arguments.length;return n<2&&(e=1),n<1&&(t=0),function(){var n,r,i;do{i=(n=2*Math.random()-1)*n+(r=2*Math.random()-1)*r}while(!i||i>1);return t+e*n*Math.sqrt(-2*Math.log(i)/i)}},logNormal:function(){var t=o.random.normal.apply(o,arguments);return function(){return Math.exp(t())}},bates:function(t){var e=o.random.irwinHall(t);return function(){return e()/t}},irwinHall:function(t){return function(){for(var e=0,n=0;n<t;n++)e+=Math.random();return e}}},o.scale={};var wa={floor:D,ceil:D};function ka(t,e,n,r){var i=[],a=[],u=0,l=Math.min(t.length,e.length)-1;for(t[l]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++u<=l;)i.push(n(t[u-1],t[u])),a.push(r(e[u-1],e[u]));return function(e){var n=o.bisect(t,e,1,l)-1;return a[n](i[n](e))}}function Ma(t,e){return o.rebind(t,e,"range","rangeRound","interpolate","clamp")}function Sa(t,e){return ba(t,xa(Ea(t,e)[2])),ba(t,xa(Ea(t,e)[2])),t}function Ea(t,e){null==e&&(e=10);var n=ga(t),r=n[1]-n[0],i=Math.pow(10,Math.floor(Math.log(r/e)/Math.LN10)),o=e/r*i;return o<=.15?i*=10:o<=.35?i*=5:o<=.75&&(i*=2),n[0]=Math.ceil(n[0]/i)*i,n[1]=Math.floor(n[1]/i)*i+.5*i,n[2]=i,n}function _a(t,e){return o.range.apply(o,Ea(t,e))}function Ca(t,e,n){var r=Ea(t,e);if(n){var i=De.exec(n);if(i.shift(),"s"===i[8]){var a=o.formatPrefix(Math.max(k(r[0]),k(r[1])));return i[7]||(i[7]="."+Aa(a.scale(r[2]))),i[8]="f",n=o.format(i.join("")),function(t){return n(a.scale(t))+a.symbol}}i[7]||(i[7]="."+function(t,e){var n=Aa(e[2]);return t in Ta?Math.abs(n-Aa(Math.max(k(e[0]),k(e[1]))))+ +("e"!==t):n-2*("%"===t)}(i[8],r)),n=i.join("")}else n=",."+Aa(r[2])+"f";return o.format(n)}o.scale.linear=function(){return function t(e,n,r,i){var o,a;function u(){var t=Math.min(e.length,n.length)>2?ka:ya,u=i?So:Mo;return o=t(e,n,u,r),a=t(n,e,u,eo),l}function l(t){return o(t)}l.invert=function(t){return a(t)};l.domain=function(t){return arguments.length?(e=t.map(Number),u()):e};l.range=function(t){return arguments.length?(n=t,u()):n};l.rangeRound=function(t){return l.range(t).interpolate(go)};l.clamp=function(t){return arguments.length?(i=t,u()):i};l.interpolate=function(t){return arguments.length?(r=t,u()):r};l.ticks=function(t){return _a(e,t)};l.tickFormat=function(t,n){return Ca(e,t,n)};l.nice=function(t){return Sa(e,t),u()};l.copy=function(){return t(e,n,r,i)};return u()}([0,1],[0,1],eo,!1)};var Ta={s:1,g:1,p:1,r:1,e:1};function Aa(t){return-Math.floor(Math.log(t)/Math.LN10+.01)}o.scale.log=function(){return function t(e,n,r,i){function a(t){return(r?Math.log(t<0?0:t):-Math.log(t>0?0:-t))/Math.log(n)}function u(t){return r?Math.pow(n,t):-Math.pow(n,-t)}function l(t){return e(a(t))}l.invert=function(t){return u(e.invert(t))};l.domain=function(t){return arguments.length?(r=t[0]>=0,e.domain((i=t.map(Number)).map(a)),l):i};l.base=function(t){return arguments.length?(n=+t,e.domain(i.map(a)),l):n};l.nice=function(){var t=ba(i.map(a),r?Math:Na);return e.domain(t),i=t.map(u),l};l.ticks=function(){var t=ga(i),e=[],o=t[0],l=t[1],c=Math.floor(a(o)),s=Math.ceil(a(l)),f=n%1?2:n;if(isFinite(s-c)){if(r){for(;c<s;c++)for(var d=1;d<f;d++)e.push(u(c)*d);e.push(u(c))}else for(e.push(u(c));c++<s;)for(var d=f-1;d>0;d--)e.push(u(c)*d);for(c=0;e[c]<o;c++);for(s=e.length;e[s-1]>l;s--);e=e.slice(c,s)}return e};l.tickFormat=function(t,e){if(!arguments.length)return Pa;arguments.length<2?e=Pa:"function"!=typeof e&&(e=o.format(e));var r=Math.max(1,n*t/l.ticks().length);return function(t){var i=t/u(Math.round(a(t)));return i*n<n-.5&&(i*=n),i<=r?e(t):""}};l.copy=function(){return t(e.copy(),n,r,i)};return Ma(l,e)}(o.scale.linear().domain([0,1]),10,!0,[1,10])};var Pa=o.format(".0e"),Na={floor:function(t){return-Math.ceil(-t)},ceil:function(t){return-Math.floor(-t)}};function Oa(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}o.scale.pow=function(){return function t(e,n,r){var i=Oa(n),o=Oa(1/n);function a(t){return e(i(t))}a.invert=function(t){return o(e.invert(t))};a.domain=function(t){return arguments.length?(e.domain((r=t.map(Number)).map(i)),a):r};a.ticks=function(t){return _a(r,t)};a.tickFormat=function(t,e){return Ca(r,t,e)};a.nice=function(t){return a.domain(Sa(r,t))};a.exponent=function(t){return arguments.length?(i=Oa(n=t),o=Oa(1/n),e.domain(r.map(i)),a):n};a.copy=function(){return t(e.copy(),n,r)};return Ma(a,e)}(o.scale.linear(),1,[0,1])},o.scale.sqrt=function(){return o.scale.pow().exponent(.5)},o.scale.ordinal=function(){return function t(e,n){var r,i,a;function u(t){return i[((r.get(t)||("range"===n.t?r.set(t,e.push(t)):NaN))-1)%i.length]}function l(t,n){return o.range(e.length).map(function(e){return t+n*e})}u.domain=function(t){if(!arguments.length)return e;e=[],r=new S;for(var i,o=-1,a=t.length;++o<a;)r.has(i=t[o])||r.set(i,e.push(i));return u[n.t].apply(u,n.a)};u.range=function(t){return arguments.length?(i=t,a=0,n={t:"range",a:arguments},u):i};u.rangePoints=function(t,r){arguments.length<2&&(r=0);var o=t[0],c=t[1],s=e.length<2?(o=(o+c)/2,0):(c-o)/(e.length-1+r);return i=l(o+s*r/2,s),a=0,n={t:"rangePoints",a:arguments},u};u.rangeRoundPoints=function(t,r){arguments.length<2&&(r=0);var o=t[0],c=t[1],s=e.length<2?(o=c=Math.round((o+c)/2),0):(c-o)/(e.length-1+r)|0;return i=l(o+Math.round(s*r/2+(c-o-(e.length-1+r)*s)/2),s),a=0,n={t:"rangeRoundPoints",a:arguments},u};u.rangeBands=function(t,r,o){arguments.length<2&&(r=0),arguments.length<3&&(o=r);var c=t[1]<t[0],s=t[c-0],f=t[1-c],d=(f-s)/(e.length-r+2*o);return i=l(s+d*o,d),c&&i.reverse(),a=d*(1-r),n={t:"rangeBands",a:arguments},u};u.rangeRoundBands=function(t,r,o){arguments.length<2&&(r=0),arguments.length<3&&(o=r);var c=t[1]<t[0],s=t[c-0],f=t[1-c],d=Math.floor((f-s)/(e.length-r+2*o));return i=l(s+Math.round((f-s-(e.length-r)*d)/2),d),c&&i.reverse(),a=Math.round(d*(1-r)),n={t:"rangeRoundBands",a:arguments},u};u.rangeBand=function(){return a};u.rangeExtent=function(){return ga(n.a[0])};u.copy=function(){return t(e,n)};return u.domain(e)}([],{t:"range",a:[[]]})},o.scale.category10=function(){return o.scale.ordinal().range(Fa)},o.scale.category20=function(){return o.scale.ordinal().range(La)},o.scale.category20b=function(){return o.scale.ordinal().range(Da)},o.scale.category20c=function(){return o.scale.ordinal().range(Ra)};var Fa=[2062260,16744206,2924588,14034728,9725885,9197131,14907330,8355711,12369186,1556175].map(fe),La=[2062260,11454440,16744206,16759672,2924588,10018698,14034728,16750742,9725885,12955861,9197131,12885140,14907330,16234194,8355711,13092807,12369186,14408589,1556175,10410725].map(fe),Da=[3750777,5395619,7040719,10264286,6519097,9216594,11915115,13556636,9202993,12426809,15186514,15190932,8666169,11356490,14049643,15177372,8077683,10834324,13528509,14589654].map(fe),Ra=[3244733,7057110,10406625,13032431,15095053,16616764,16625259,16634018,3253076,7652470,10607003,13101504,7695281,10394312,12369372,14342891,6513507,9868950,12434877,14277081].map(fe);function Ia(){return 0}o.scale.quantile=function(){return function t(e,n){var r;function i(){var t=0,i=n.length;for(r=[];++t<i;)r[t-1]=o.quantile(e,t/i);return a}function a(t){if(!isNaN(t=+t))return n[o.bisect(r,t)]}a.domain=function(t){return arguments.length?(e=t.map(m).filter(y).sort(g),i()):e};a.range=function(t){return arguments.length?(n=t,i()):n};a.quantiles=function(){return r};a.invertExtent=function(t){return(t=n.indexOf(t))<0?[NaN,NaN]:[t>0?r[t-1]:e[0],t<r.length?r[t]:e[e.length-1]]};a.copy=function(){return t(e,n)};return i()}([],[])},o.scale.quantize=function(){return function t(e,n,r){var i,o;function a(t){return r[Math.max(0,Math.min(o,Math.floor(i*(t-e))))]}function u(){return i=r.length/(n-e),o=r.length-1,a}a.domain=function(t){return arguments.length?(e=+t[0],n=+t[t.length-1],u()):[e,n]};a.range=function(t){return arguments.length?(r=t,u()):r};a.invertExtent=function(t){return[t=(t=r.indexOf(t))<0?NaN:t/i+e,t+1/i]};a.copy=function(){return t(e,n,r)};return u()}(0,1,[0,1])},o.scale.threshold=function(){return function t(e,n){function r(t){if(t<=t)return n[o.bisect(e,t)]}r.domain=function(t){return arguments.length?(e=t,r):e};r.range=function(t){return arguments.length?(n=t,r):n};r.invertExtent=function(t){return t=n.indexOf(t),[e[t-1],e[t]]};r.copy=function(){return t(e,n)};return r}([.5],[0,1])},o.scale.identity=function(){return function t(e){function n(t){return+t}n.invert=n;n.domain=n.range=function(t){return arguments.length?(e=t.map(n),n):e};n.ticks=function(t){return _a(e,t)};n.tickFormat=function(t,n){return Ca(e,t,n)};n.copy=function(){return t(e)};return n}([0,1])},o.svg={},o.svg.arc=function(){var t=za,e=Wa,n=Ia,r=ja,i=Ba,o=Ua,a=Va;function u(){var u=Math.max(0,+t.apply(this,arguments)),c=Math.max(0,+e.apply(this,arguments)),s=i.apply(this,arguments)-Ot,f=o.apply(this,arguments)-Ot,d=Math.abs(f-s),p=s>f?0:1;if(c<u&&(h=c,c=u,u=h),d>=Nt)return l(c,p)+(u?l(u,1-p):"")+"Z";var h,v,g,m,y,b,x,w,k,M,S,E,_=0,C=0,T=[];if((m=(+a.apply(this,arguments)||0)/2)&&(g=r===ja?Math.sqrt(u*u+c*c):+r.apply(this,arguments),p||(C*=-1),c&&(C=jt(g/c*Math.sin(m))),u&&(_=jt(g/u*Math.sin(m)))),c){y=c*Math.cos(s+C),b=c*Math.sin(s+C),x=c*Math.cos(f-C),w=c*Math.sin(f-C);var A=Math.abs(f-s-2*C)<=At?0:1;if(C&&Ha(y,b,x,w)===p^A){var P=(s+f)/2;y=c*Math.cos(P),b=c*Math.sin(P),x=w=null}}else y=b=0;if(u){k=u*Math.cos(f-_),M=u*Math.sin(f-_),S=u*Math.cos(s+_),E=u*Math.sin(s+_);var N=Math.abs(s-f+2*_)<=At?0:1;if(_&&Ha(k,M,S,E)===1-p^N){var O=(s+f)/2;k=u*Math.cos(O),M=u*Math.sin(O),S=E=null}}else k=M=0;if(d>Ct&&(h=Math.min(Math.abs(c-u)/2,+n.apply(this,arguments)))>.001){v=u<c^p?0:1;var F=h,L=h;if(d<At){var D=null==S?[k,M]:null==x?[y,b]:pi([y,b],[S,E],[x,w],[k,M]),R=y-D[0],I=b-D[1],j=x-D[0],z=w-D[1],W=1/Math.sin(Math.acos((R*j+I*z)/(Math.sqrt(R*R+I*I)*Math.sqrt(j*j+z*z)))/2),B=Math.sqrt(D[0]*D[0]+D[1]*D[1]);L=Math.min(h,(u-B)/(W-1)),F=Math.min(h,(c-B)/(W+1))}if(null!=x){var U=qa(null==S?[k,M]:[S,E],[y,b],c,F,p),V=qa([x,w],[k,M],c,F,p);h===F?T.push("M",U[0],"A",F,",",F," 0 0,",v," ",U[1],"A",c,",",c," 0 ",1-p^Ha(U[1][0],U[1][1],V[1][0],V[1][1]),",",p," ",V[1],"A",F,",",F," 0 0,",v," ",V[0]):T.push("M",U[0],"A",F,",",F," 0 1,",v," ",V[0])}else T.push("M",y,",",b);if(null!=S){var H=qa([y,b],[S,E],u,-L,p),q=qa([k,M],null==x?[y,b]:[x,w],u,-L,p);h===L?T.push("L",q[0],"A",L,",",L," 0 0,",v," ",q[1],"A",u,",",u," 0 ",p^Ha(q[1][0],q[1][1],H[1][0],H[1][1]),",",1-p," ",H[1],"A",L,",",L," 0 0,",v," ",H[0]):T.push("L",q[0],"A",L,",",L," 0 0,",v," ",H[0])}else T.push("L",k,",",M)}else T.push("M",y,",",b),null!=x&&T.push("A",c,",",c," 0 ",A,",",p," ",x,",",w),T.push("L",k,",",M),null!=S&&T.push("A",u,",",u," 0 ",N,",",1-p," ",S,",",E);return T.push("Z"),T.join("")}function l(t,e){return"M0,"+t+"A"+t+","+t+" 0 1,"+e+" 0,"+-t+"A"+t+","+t+" 0 1,"+e+" 0,"+t}return u.innerRadius=function(e){return arguments.length?(t=xe(e),u):t},u.outerRadius=function(t){return arguments.length?(e=xe(t),u):e},u.cornerRadius=function(t){return arguments.length?(n=xe(t),u):n},u.padRadius=function(t){return arguments.length?(r=t==ja?ja:xe(t),u):r},u.startAngle=function(t){return arguments.length?(i=xe(t),u):i},u.endAngle=function(t){return arguments.length?(o=xe(t),u):o},u.padAngle=function(t){return arguments.length?(a=xe(t),u):a},u.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-Ot;return[Math.cos(r)*n,Math.sin(r)*n]},u};var ja="auto";function za(t){return t.innerRadius}function Wa(t){return t.outerRadius}function Ba(t){return t.startAngle}function Ua(t){return t.endAngle}function Va(t){return t&&t.padAngle}function Ha(t,e,n,r){return(t-n)*e-(e-r)*t>0?0:1}function qa(t,e,n,r,i){var o=t[0]-e[0],a=t[1]-e[1],u=(i?r:-r)/Math.sqrt(o*o+a*a),l=u*a,c=-u*o,s=t[0]+l,f=t[1]+c,d=e[0]+l,p=e[1]+c,h=(s+d)/2,v=(f+p)/2,g=d-s,m=p-f,y=g*g+m*m,b=n-r,x=s*p-d*f,w=(m<0?-1:1)*Math.sqrt(Math.max(0,b*b*y-x*x)),k=(x*m-g*w)/y,M=(-x*g-m*w)/y,S=(x*m+g*w)/y,E=(-x*g+m*w)/y,_=k-h,C=M-v,T=S-h,A=E-v;return _*_+C*C>T*T+A*A&&(k=S,M=E),[[k-l,M-c],[k*n/b,M*n/b]]}function Ya(t){var e=ui,n=li,r=Jn,i=$a,o=i.key,a=.7;function u(o){var u,l=[],c=[],s=-1,f=o.length,d=xe(e),p=xe(n);function h(){l.push("M",i(t(c),a))}for(;++s<f;)r.call(this,u=o[s],s)?c.push([+d.call(this,u,s),+p.call(this,u,s)]):c.length&&(h(),c=[]);return c.length&&h(),l.length?l.join(""):null}return u.x=function(t){return arguments.length?(e=t,u):e},u.y=function(t){return arguments.length?(n=t,u):n},u.defined=function(t){return arguments.length?(r=t,u):r},u.interpolate=function(t){return arguments.length?(o="function"==typeof t?i=t:(i=Ga.get(t)||$a).key,u):o},u.tension=function(t){return arguments.length?(a=t,u):a},u}o.svg.line=function(){return Ya(D)};var Ga=o.map({linear:$a,"linear-closed":Xa,step:function(t){var e=0,n=t.length,r=t[0],i=[r[0],",",r[1]];for(;++e<n;)i.push("H",(r[0]+(r=t[e])[0])/2,"V",r[1]);n>1&&i.push("H",r[0]);return i.join("")},"step-before":Ka,"step-after":Za,basis:tu,"basis-open":function(t){if(t.length<4)return $a(t);var e,n=[],r=-1,i=t.length,o=[0],a=[0];for(;++r<3;)e=t[r],o.push(e[0]),a.push(e[1]);n.push(eu(iu,o)+","+eu(iu,a)),--r;for(;++r<i;)e=t[r],o.shift(),o.push(e[0]),a.shift(),a.push(e[1]),ou(n,o,a);return n.join("")},"basis-closed":function(t){var e,n,r=-1,i=t.length,o=i+4,a=[],u=[];for(;++r<4;)n=t[r%i],a.push(n[0]),u.push(n[1]);e=[eu(iu,a),",",eu(iu,u)],--r;for(;++r<o;)n=t[r%i],a.shift(),a.push(n[0]),u.shift(),u.push(n[1]),ou(e,a,u);return e.join("")},bundle:function(t,e){var n=t.length-1;if(n)for(var r,i,o=t[0][0],a=t[0][1],u=t[n][0]-o,l=t[n][1]-a,c=-1;++c<=n;)r=t[c],i=c/n,r[0]=e*r[0]+(1-e)*(o+i*u),r[1]=e*r[1]+(1-e)*(a+i*l);return tu(t)},cardinal:function(t,e){return t.length<3?$a(t):t[0]+Qa(t,Ja(t,e))},"cardinal-open":function(t,e){return t.length<4?$a(t):t[1]+Qa(t.slice(1,-1),Ja(t,e))},"cardinal-closed":function(t,e){return t.length<3?Xa(t):t[0]+Qa((t.push(t[0]),t),Ja([t[t.length-2]].concat(t,[t[1]]),e))},monotone:function(t){return t.length<3?$a(t):t[0]+Qa(t,function(t){var e,n,r,i,o=[],a=function(t){var e=0,n=t.length-1,r=[],i=t[0],o=t[1],a=r[0]=au(i,o);for(;++e<n;)r[e]=(a+(a=au(i=o,o=t[e+1])))/2;return r[e]=a,r}(t),u=-1,l=t.length-1;for(;++u<l;)e=au(t[u],t[u+1]),k(e)<Ct?a[u]=a[u+1]=0:(n=a[u]/e,r=a[u+1]/e,(i=n*n+r*r)>9&&(i=3*e/Math.sqrt(i),a[u]=i*n,a[u+1]=i*r));u=-1;for(;++u<=l;)i=(t[Math.min(l,u+1)][0]-t[Math.max(0,u-1)][0])/(6*(1+a[u]*a[u])),o.push([i||0,a[u]*i||0]);return o}(t))}});function $a(t){return t.length>1?t.join("L"):t+"Z"}function Xa(t){return t.join("L")+"Z"}function Ka(t){for(var e=0,n=t.length,r=t[0],i=[r[0],",",r[1]];++e<n;)i.push("V",(r=t[e])[1],"H",r[0]);return i.join("")}function Za(t){for(var e=0,n=t.length,r=t[0],i=[r[0],",",r[1]];++e<n;)i.push("H",(r=t[e])[0],"V",r[1]);return i.join("")}function Qa(t,e){if(e.length<1||t.length!=e.length&&t.length!=e.length+2)return $a(t);var n=t.length!=e.length,r="",i=t[0],o=t[1],a=e[0],u=a,l=1;if(n&&(r+="Q"+(o[0]-2*a[0]/3)+","+(o[1]-2*a[1]/3)+","+o[0]+","+o[1],i=t[1],l=2),e.length>1){u=e[1],o=t[l],l++,r+="C"+(i[0]+a[0])+","+(i[1]+a[1])+","+(o[0]-u[0])+","+(o[1]-u[1])+","+o[0]+","+o[1];for(var c=2;c<e.length;c++,l++)o=t[l],u=e[c],r+="S"+(o[0]-u[0])+","+(o[1]-u[1])+","+o[0]+","+o[1]}if(n){var s=t[l];r+="Q"+(o[0]+2*u[0]/3)+","+(o[1]+2*u[1]/3)+","+s[0]+","+s[1]}return r}function Ja(t,e){for(var n,r=[],i=(1-e)/2,o=t[0],a=t[1],u=1,l=t.length;++u<l;)n=o,o=a,a=t[u],r.push([i*(a[0]-n[0]),i*(a[1]-n[1])]);return r}function tu(t){if(t.length<3)return $a(t);var e=1,n=t.length,r=t[0],i=r[0],o=r[1],a=[i,i,i,(r=t[1])[0]],u=[o,o,o,r[1]],l=[i,",",o,"L",eu(iu,a),",",eu(iu,u)];for(t.push(t[n-1]);++e<=n;)r=t[e],a.shift(),a.push(r[0]),u.shift(),u.push(r[1]),ou(l,a,u);return t.pop(),l.push("L",r),l.join("")}function eu(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}Ga.forEach(function(t,e){e.key=t,e.closed=/-closed$/.test(t)});var nu=[0,2/3,1/3,0],ru=[0,1/3,2/3,0],iu=[0,1/6,2/3,1/6];function ou(t,e,n){t.push("C",eu(nu,e),",",eu(nu,n),",",eu(ru,e),",",eu(ru,n),",",eu(iu,e),",",eu(iu,n))}function au(t,e){return(e[1]-t[1])/(e[0]-t[0])}function uu(t){for(var e,n,r,i=-1,o=t.length;++i<o;)n=(e=t[i])[0],r=e[1]-Ot,e[0]=n*Math.cos(r),e[1]=n*Math.sin(r);return t}function lu(t){var e=ui,n=ui,r=0,i=li,o=Jn,a=$a,u=a.key,l=a,c="L",s=.7;function f(u){var f,d,p,h=[],v=[],g=[],m=-1,y=u.length,b=xe(e),x=xe(r),w=e===n?function(){return d}:xe(n),k=r===i?function(){return p}:xe(i);function M(){h.push("M",a(t(g),s),c,l(t(v.reverse()),s),"Z")}for(;++m<y;)o.call(this,f=u[m],m)?(v.push([d=+b.call(this,f,m),p=+x.call(this,f,m)]),g.push([+w.call(this,f,m),+k.call(this,f,m)])):v.length&&(M(),v=[],g=[]);return v.length&&M(),h.length?h.join(""):null}return f.x=function(t){return arguments.length?(e=n=t,f):n},f.x0=function(t){return arguments.length?(e=t,f):e},f.x1=function(t){return arguments.length?(n=t,f):n},f.y=function(t){return arguments.length?(r=i=t,f):i},f.y0=function(t){return arguments.length?(r=t,f):r},f.y1=function(t){return arguments.length?(i=t,f):i},f.defined=function(t){return arguments.length?(o=t,f):o},f.interpolate=function(t){return arguments.length?(u="function"==typeof t?a=t:(a=Ga.get(t)||$a).key,l=a.reverse||a,c=a.closed?"M":"L",f):u},f.tension=function(t){return arguments.length?(s=t,f):s},f}function cu(t){return t.radius}function su(t){return[t.x,t.y]}function fu(){return 64}function du(){return"circle"}function pu(t){var e=Math.sqrt(t/At);return"M0,"+e+"A"+e+","+e+" 0 1,1 0,"+-e+"A"+e+","+e+" 0 1,1 0,"+e+"Z"}o.svg.line.radial=function(){var t=Ya(uu);return t.radius=t.x,delete t.x,t.angle=t.y,delete t.y,t},Ka.reverse=Za,Za.reverse=Ka,o.svg.area=function(){return lu(D)},o.svg.area.radial=function(){var t=lu(uu);return t.radius=t.x,delete t.x,t.innerRadius=t.x0,delete t.x0,t.outerRadius=t.x1,delete t.x1,t.angle=t.y,delete t.y,t.startAngle=t.y0,delete t.y0,t.endAngle=t.y1,delete t.y1,t},o.svg.chord=function(){var t=Gr,e=$r,n=cu,r=Ba,i=Ua;function o(n,r){var i,o,c=a(this,t,n,r),s=a(this,e,n,r);return"M"+c.p0+u(c.r,c.p1,c.a1-c.a0)+(o=s,(i=c).a0==o.a0&&i.a1==o.a1?l(c.r,c.p1,c.r,c.p0):l(c.r,c.p1,s.r,s.p0)+u(s.r,s.p1,s.a1-s.a0)+l(s.r,s.p1,c.r,c.p0))+"Z"}function a(t,e,o,a){var u=e.call(t,o,a),l=n.call(t,u,a),c=r.call(t,u,a)-Ot,s=i.call(t,u,a)-Ot;return{r:l,a0:c,a1:s,p0:[l*Math.cos(c),l*Math.sin(c)],p1:[l*Math.cos(s),l*Math.sin(s)]}}function u(t,e,n){return"A"+t+","+t+" 0 "+ +(n>At)+",1 "+e}function l(t,e,n,r){return"Q 0,0 "+r}return o.radius=function(t){return arguments.length?(n=xe(t),o):n},o.source=function(e){return arguments.length?(t=xe(e),o):t},o.target=function(t){return arguments.length?(e=xe(t),o):e},o.startAngle=function(t){return arguments.length?(r=xe(t),o):r},o.endAngle=function(t){return arguments.length?(i=xe(t),o):i},o},o.svg.diagonal=function(){var t=Gr,e=$r,n=su;function r(r,i){var o=t.call(this,r,i),a=e.call(this,r,i),u=(o.y+a.y)/2,l=[o,{x:o.x,y:u},{x:a.x,y:u},a];return"M"+(l=l.map(n))[0]+"C"+l[1]+" "+l[2]+" "+l[3]}return r.source=function(e){return arguments.length?(t=xe(e),r):t},r.target=function(t){return arguments.length?(e=xe(t),r):e},r.projection=function(t){return arguments.length?(n=t,r):n},r},o.svg.diagonal.radial=function(){var t=o.svg.diagonal(),e=su,n=t.projection;return t.projection=function(t){return arguments.length?n(function(t){return function(){var e=t.apply(this,arguments),n=e[0],r=e[1]-Ot;return[n*Math.cos(r),n*Math.sin(r)]}}(e=t)):e},t},o.svg.symbol=function(){var t=du,e=fu;function n(n,r){return(hu.get(t.call(this,n,r))||pu)(e.call(this,n,r))}return n.type=function(e){return arguments.length?(t=xe(e),n):t},n.size=function(t){return arguments.length?(e=xe(t),n):e},n};var hu=o.map({circle:pu,cross:function(t){var e=Math.sqrt(t/5)/2;return"M"+-3*e+","+-e+"H"+-e+"V"+-3*e+"H"+e+"V"+-e+"H"+3*e+"V"+e+"H"+e+"V"+3*e+"H"+-e+"V"+e+"H"+-3*e+"Z"},diamond:function(t){var e=Math.sqrt(t/(2*gu)),n=e*gu;return"M0,"+-e+"L"+n+",0 0,"+e+" "+-n+",0Z"},square:function(t){var e=Math.sqrt(t)/2;return"M"+-e+","+-e+"L"+e+","+-e+" "+e+","+e+" "+-e+","+e+"Z"},"triangle-down":function(t){var e=Math.sqrt(t/vu),n=e*vu/2;return"M0,"+n+"L"+e+","+-n+" "+-e+","+-n+"Z"},"triangle-up":function(t){var e=Math.sqrt(t/vu),n=e*vu/2;return"M0,"+-n+"L"+e+","+n+" "+-e+","+n+"Z"}});o.svg.symbolTypes=hu.keys();var vu=Math.sqrt(3),gu=Math.tan(30*Ft);Z.transition=function(t){for(var e,n,r=xu||++Mu,i=_u(t),o=[],a=wu||{time:Date.now(),ease:so,delay:0,duration:250},u=-1,l=this.length;++u<l;){o.push(e=[]);for(var c=this[u],s=-1,f=c.length;++s<f;)(n=c[s])&&Cu(n,s,i,r,a),e.push(n)}return bu(o,i,r)},Z.interrupt=function(t){return this.each(null==t?mu:yu(_u(t)))};var mu=yu(_u());function yu(t){return function(){var e,n,r;(e=this[t])&&(r=e[n=e.active])&&(r.timer.c=null,r.timer.t=NaN,--e.count?delete e[n]:delete this[t],e.active+=.5,r.event&&r.event.interrupt.call(this,this.__data__,r.index))}}function bu(t,e,n){return Y(t,ku),t.namespace=e,t.id=n,t}var xu,wu,ku=[],Mu=0;function Su(t,e,n,r){var i=t.id,o=t.namespace;return ht(t,"function"==typeof n?function(t,a,u){t[o][i].tween.set(e,r(n.call(t,t.__data__,a,u)))}:(n=r(n),function(t){t[o][i].tween.set(e,n)}))}function Eu(t){return null==t&&(t=""),function(){this.textContent=t}}function _u(t){return null==t?"__transition__":"__transition_"+t+"__"}function Cu(t,e,n,r,i){var o,a,u,l,c,s=t[n]||(t[n]={active:0,count:0}),f=s[r];function d(n){var i=s.active,d=s[i];for(var h in d&&(d.timer.c=null,d.timer.t=NaN,--s.count,delete s[i],d.event&&d.event.interrupt.call(t,t.__data__,d.index)),s)if(+h<r){var v=s[h];v.timer.c=null,v.timer.t=NaN,--s.count,delete s[h]}a.c=p,Te(function(){return a.c&&p(n||1)&&(a.c=null,a.t=NaN),1},0,o),s.active=r,f.event&&f.event.start.call(t,t.__data__,e),c=[],f.tween.forEach(function(n,r){(r=r.call(t,t.__data__,e))&&c.push(r)}),l=f.ease,u=f.duration}function p(i){for(var o=i/u,a=l(o),d=c.length;d>0;)c[--d].call(t,a);if(o>=1)return f.event&&f.event.end.call(t,t.__data__,e),--s.count?delete s[r]:delete t[n],1}f||(o=i.time,a=Te(function(t){var e=f.delay;if(a.t=e+o,e<=t)return d(t-e);a.c=d},0,o),f=s[r]={tween:new S,time:o,timer:a,delay:i.delay,duration:i.duration,ease:i.ease,index:e},i=null,++s.count)}ku.call=Z.call,ku.empty=Z.empty,ku.node=Z.node,ku.size=Z.size,o.transition=function(t,e){return t&&t.transition?xu?t.transition(e):t:o.selection().transition(t)},o.transition.prototype=ku,ku.select=function(t){var e,n,r,i=this.id,o=this.namespace,a=[];t=Q(t);for(var u=-1,l=this.length;++u<l;){a.push(e=[]);for(var c=this[u],s=-1,f=c.length;++s<f;)(r=c[s])&&(n=t.call(r,r.__data__,s,u))?("__data__"in r&&(n.__data__=r.__data__),Cu(n,s,o,i,r[o][i]),e.push(n)):e.push(null)}return bu(a,o,i)},ku.selectAll=function(t){var e,n,r,i,o,a=this.id,u=this.namespace,l=[];t=J(t);for(var c=-1,s=this.length;++c<s;)for(var f=this[c],d=-1,p=f.length;++d<p;)if(r=f[d]){o=r[u][a],n=t.call(r,r.__data__,d,c),l.push(e=[]);for(var h=-1,v=n.length;++h<v;)(i=n[h])&&Cu(i,h,u,a,o),e.push(i)}return bu(l,u,a)},ku.filter=function(t){var e,n,r=[];"function"!=typeof t&&(t=pt(t));for(var i=0,o=this.length;i<o;i++){r.push(e=[]);for(var a,u=0,l=(a=this[i]).length;u<l;u++)(n=a[u])&&t.call(n,n.__data__,u,i)&&e.push(n)}return bu(r,this.namespace,this.id)},ku.tween=function(t,e){var n=this.id,r=this.namespace;return arguments.length<2?this.node()[r][n].tween.get(t):ht(this,null==e?function(e){e[r][n].tween.remove(t)}:function(i){i[r][n].tween.set(t,e)})},ku.attr=function(t,e){if(arguments.length<2){for(e in t)this.attr(e,t[e]);return this}var n="transform"==t?ko:eo,r=o.ns.qualify(t);function i(){this.removeAttribute(r)}function a(){this.removeAttributeNS(r.space,r.local)}return Su(this,"attr."+t,e,r.local?function(t){return null==t?a:(t+="",function(){var e,i=this.getAttributeNS(r.space,r.local);return i!==t&&(e=n(i,t),function(t){this.setAttributeNS(r.space,r.local,e(t))})})}:function(t){return null==t?i:(t+="",function(){var e,i=this.getAttribute(r);return i!==t&&(e=n(i,t),function(t){this.setAttribute(r,e(t))})})})},ku.attrTween=function(t,e){var n=o.ns.qualify(t);return this.tween("attr."+t,n.local?function(t,r){var i=e.call(this,t,r,this.getAttributeNS(n.space,n.local));return i&&function(t){this.setAttributeNS(n.space,n.local,i(t))}}:function(t,r){var i=e.call(this,t,r,this.getAttribute(n));return i&&function(t){this.setAttribute(n,i(t))}})},ku.style=function(t,e,n){var r=arguments.length;if(r<3){if("string"!=typeof t){for(n in r<2&&(e=""),t)this.style(n,t[n],e);return this}n=""}function i(){this.style.removeProperty(t)}return Su(this,"style."+t,e,function(e){return null==e?i:(e+="",function(){var r,i=s(this).getComputedStyle(this,null).getPropertyValue(t);return i!==e&&(r=eo(i,e),function(e){this.style.setProperty(t,r(e),n)})})})},ku.styleTween=function(t,e,n){return arguments.length<3&&(n=""),this.tween("style."+t,function(r,i){var o=e.call(this,r,i,s(this).getComputedStyle(this,null).getPropertyValue(t));return o&&function(e){this.style.setProperty(t,o(e),n)}})},ku.text=function(t){return Su(this,"text",t,Eu)},ku.remove=function(){var t=this.namespace;return this.each("end.transition",function(){var e;this[t].count<2&&(e=this.parentNode)&&e.removeChild(this)})},ku.ease=function(t){var e=this.id,n=this.namespace;return arguments.length<1?this.node()[n][e].ease:("function"!=typeof t&&(t=o.ease.apply(o,arguments)),ht(this,function(r){r[n][e].ease=t}))},ku.delay=function(t){var e=this.id,n=this.namespace;return arguments.length<1?this.node()[n][e].delay:ht(this,"function"==typeof t?function(r,i,o){r[n][e].delay=+t.call(r,r.__data__,i,o)}:(t=+t,function(r){r[n][e].delay=t}))},ku.duration=function(t){var e=this.id,n=this.namespace;return arguments.length<1?this.node()[n][e].duration:ht(this,"function"==typeof t?function(r,i,o){r[n][e].duration=Math.max(1,t.call(r,r.__data__,i,o))}:(t=Math.max(1,t),function(r){r[n][e].duration=t}))},ku.each=function(t,e){var n=this.id,r=this.namespace;if(arguments.length<2){var i=wu,a=xu;try{xu=n,ht(this,function(e,i,o){wu=e[r][n],t.call(e,e.__data__,i,o)})}finally{wu=i,xu=a}}else ht(this,function(i){var a=i[r][n];(a.event||(a.event=o.dispatch("start","end","interrupt"))).on(t,e)});return this},ku.transition=function(){for(var t,e,n,r=this.id,i=++Mu,o=this.namespace,a=[],u=0,l=this.length;u<l;u++){a.push(t=[]);for(var c,s=0,f=(c=this[u]).length;s<f;s++)(e=c[s])&&Cu(e,s,o,i,{time:(n=e[o][r]).time,ease:n.ease,delay:n.delay+n.duration,duration:n.duration}),t.push(e)}return bu(a,o,i)},o.svg.axis=function(){var t,e=o.scale.linear(),n=Tu,r=6,i=6,a=3,l=[10],c=null;function s(u){u.each(function(){var u,s=o.select(this),f=this.__chart__||e,d=this.__chart__=e.copy(),p=null==c?d.ticks?d.ticks.apply(d,l):d.domain():c,h=null==t?d.tickFormat?d.tickFormat.apply(d,l):D:t,v=s.selectAll(".tick").data(p,d),g=v.enter().insert("g",".domain").attr("class","tick").style("opacity",Ct),m=o.transition(v.exit()).style("opacity",Ct).remove(),y=o.transition(v.order()).style("opacity",1),b=Math.max(r,0)+a,x=ma(d),w=s.selectAll(".domain").data([0]),k=(w.enter().append("path").attr("class","domain"),o.transition(w));g.append("line"),g.append("text");var M,S,E,_,C=g.select("line"),T=y.select("line"),A=v.select("text").text(h),P=g.select("text"),N=y.select("text"),O="top"===n||"left"===n?-1:1;if("bottom"===n||"top"===n?(u=Pu,M="x",E="y",S="x2",_="y2",A.attr("dy",O<0?"0em":".71em").style("text-anchor","middle"),k.attr("d","M"+x[0]+","+O*i+"V0H"+x[1]+"V"+O*i)):(u=Nu,M="y",E="x",S="y2",_="x2",A.attr("dy",".32em").style("text-anchor",O<0?"end":"start"),k.attr("d","M"+O*i+","+x[0]+"H0V"+x[1]+"H"+O*i)),C.attr(_,O*r),P.attr(E,O*b),T.attr(S,0).attr(_,O*r),N.attr(M,0).attr(E,O*b),d.rangeBand){var F=d,L=F.rangeBand()/2;f=d=function(t){return F(t)+L}}else f.rangeBand?f=d:m.call(u,d,f);g.call(u,f,d),y.call(u,d,d)})}return s.scale=function(t){return arguments.length?(e=t,s):e},s.orient=function(t){return arguments.length?(n=t in Au?t+"":Tu,s):n},s.ticks=function(){return arguments.length?(l=u(arguments),s):l},s.tickValues=function(t){return arguments.length?(c=t,s):c},s.tickFormat=function(e){return arguments.length?(t=e,s):t},s.tickSize=function(t){var e=arguments.length;return e?(r=+t,i=+arguments[e-1],s):r},s.innerTickSize=function(t){return arguments.length?(r=+t,s):r},s.outerTickSize=function(t){return arguments.length?(i=+t,s):i},s.tickPadding=function(t){return arguments.length?(a=+t,s):a},s.tickSubdivide=function(){return arguments.length&&s},s};var Tu="bottom",Au={top:1,right:1,bottom:1,left:1};function Pu(t,e,n){t.attr("transform",function(t){var r=e(t);return"translate("+(isFinite(r)?r:n(t))+",0)"})}function Nu(t,e,n){t.attr("transform",function(t){var r=e(t);return"translate(0,"+(isFinite(r)?r:n(t))+")"})}o.svg.brush=function(){var t,e,n=H(d,"brushstart","brush","brushend"),r=null,i=null,a=[0,0],u=[0,0],l=!0,c=!0,f=Fu[0];function d(t){t.each(function(){var t=o.select(this).style("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush",g).on("touchstart.brush",g),e=t.selectAll(".background").data([0]);e.enter().append("rect").attr("class","background").style("visibility","hidden").style("cursor","crosshair"),t.selectAll(".extent").data([0]).enter().append("rect").attr("class","extent").style("cursor","move");var n=t.selectAll(".resize").data(f,D);n.exit().remove(),n.enter().append("g").attr("class",function(t){return"resize "+t}).style("cursor",function(t){return Ou[t]}).append("rect").attr("x",function(t){return/[ew]$/.test(t)?-3:null}).attr("y",function(t){return/^[ns]/.test(t)?-3:null}).attr("width",6).attr("height",6).style("visibility","hidden"),n.style("display",d.empty()?"none":null);var a,u=o.transition(t),l=o.transition(e);r&&(a=ma(r),l.attr("x",a[0]).attr("width",a[1]-a[0]),h(u)),i&&(a=ma(i),l.attr("y",a[0]).attr("height",a[1]-a[0]),v(u)),p(u)})}function p(t){t.selectAll(".resize").attr("transform",function(t){return"translate("+a[+/e$/.test(t)]+","+u[+/^s/.test(t)]+")"})}function h(t){t.select(".extent").attr("x",a[0]),t.selectAll(".extent,.n>rect,.s>rect").attr("width",a[1]-a[0])}function v(t){t.select(".extent").attr("y",u[0]),t.selectAll(".extent,.e>rect,.w>rect").attr("height",u[1]-u[0])}function g(){var f,g,m=this,y=o.select(o.event.target),b=n.of(m,arguments),x=o.select(m),w=y.datum(),k=!/^(n|s)$/.test(w)&&r,M=!/^(e|w)$/.test(w)&&i,S=y.classed("extent"),E=Mt(m),_=o.mouse(m),C=o.select(s(m)).on("keydown.brush",function(){32==o.event.keyCode&&(S||(f=null,_[0]-=a[1],_[1]-=u[1],S=2),U())}).on("keyup.brush",function(){32==o.event.keyCode&&2==S&&(_[0]+=a[1],_[1]+=u[1],S=0,U())});if(o.event.changedTouches?C.on("touchmove.brush",P).on("touchend.brush",O):C.on("mousemove.brush",P).on("mouseup.brush",O),x.interrupt().selectAll("*").interrupt(),S)_[0]=a[0]-_[0],_[1]=u[0]-_[1];else if(w){var T=+/w$/.test(w),A=+/^n/.test(w);g=[a[1-T]-_[0],u[1-A]-_[1]],_[0]=a[T],_[1]=u[A]}else o.event.altKey&&(f=_.slice());function P(){var t=o.mouse(m),e=!1;g&&(t[0]+=g[0],t[1]+=g[1]),S||(o.event.altKey?(f||(f=[(a[0]+a[1])/2,(u[0]+u[1])/2]),_[0]=a[+(t[0]<f[0])],_[1]=u[+(t[1]<f[1])]):f=null),k&&N(t,r,0)&&(h(x),e=!0),M&&N(t,i,1)&&(v(x),e=!0),e&&(p(x),b({type:"brush",mode:S?"move":"resize"}))}function N(n,r,i){var o,s,d=ma(r),p=d[0],h=d[1],v=_[i],g=i?u:a,m=g[1]-g[0];if(S&&(p-=v,h-=m+v),o=(i?c:l)?Math.max(p,Math.min(h,n[i])):n[i],S?s=(o+=v)+m:(f&&(v=Math.max(p,Math.min(h,2*f[i]-o))),v<o?(s=o,o=v):s=v),g[0]!=o||g[1]!=s)return i?e=null:t=null,g[0]=o,g[1]=s,!0}function O(){P(),x.style("pointer-events","all").selectAll(".resize").style("display",d.empty()?"none":null),o.select("body").style("cursor",null),C.on("mousemove.brush",null).on("mouseup.brush",null).on("touchmove.brush",null).on("touchend.brush",null).on("keydown.brush",null).on("keyup.brush",null),E(),b({type:"brushend"})}x.style("pointer-events","none").selectAll(".resize").style("display",null),o.select("body").style("cursor",y.style("cursor")),b({type:"brushstart"}),P()}return d.event=function(r){r.each(function(){var r=n.of(this,arguments),i={x:a,y:u,i:t,j:e},l=this.__chart__||i;this.__chart__=i,xu?o.select(this).transition().each("start.brush",function(){t=l.i,e=l.j,a=l.x,u=l.y,r({type:"brushstart"})}).tween("brush:brush",function(){var n=no(a,i.x),o=no(u,i.y);return t=e=null,function(t){a=i.x=n(t),u=i.y=o(t),r({type:"brush",mode:"resize"})}}).each("end.brush",function(){t=i.i,e=i.j,r({type:"brush",mode:"resize"}),r({type:"brushend"})}):(r({type:"brushstart"}),r({type:"brush",mode:"resize"}),r({type:"brushend"}))})},d.x=function(t){return arguments.length?(f=Fu[!(r=t)<<1|!i],d):r},d.y=function(t){return arguments.length?(f=Fu[!r<<1|!(i=t)],d):i},d.clamp=function(t){return arguments.length?(r&&i?(l=!!t[0],c=!!t[1]):r?l=!!t:i&&(c=!!t),d):r&&i?[l,c]:r?l:i?c:null},d.extent=function(n){var o,l,c,s,f;return arguments.length?(r&&(o=n[0],l=n[1],i&&(o=o[0],l=l[0]),t=[o,l],r.invert&&(o=r(o),l=r(l)),l<o&&(f=o,o=l,l=f),o==a[0]&&l==a[1]||(a=[o,l])),i&&(c=n[0],s=n[1],r&&(c=c[1],s=s[1]),e=[c,s],i.invert&&(c=i(c),s=i(s)),s<c&&(f=c,c=s,s=f),c==u[0]&&s==u[1]||(u=[c,s])),d):(r&&(t?(o=t[0],l=t[1]):(o=a[0],l=a[1],r.invert&&(o=r.invert(o),l=r.invert(l)),l<o&&(f=o,o=l,l=f))),i&&(e?(c=e[0],s=e[1]):(c=u[0],s=u[1],i.invert&&(c=i.invert(c),s=i.invert(s)),s<c&&(f=c,c=s,s=f))),r&&i?[[o,c],[l,s]]:r?[o,l]:i&&[c,s])},d.clear=function(){return d.empty()||(a=[0,0],u=[0,0],t=e=null),d},d.empty=function(){return!!r&&a[0]==a[1]||!!i&&u[0]==u[1]},o.rebind(d,n,"on")};var Ou={n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Fu=[["n","e","s","w","nw","ne","se","sw"],["e","w"],["n","s"],[]],Lu=je.format=hn.timeFormat,Du=Lu.utc,Ru=Du("%Y-%m-%dT%H:%M:%S.%LZ");function Iu(t){return t.toISOString()}function ju(t,e,n){function r(e){return t(e)}function i(t,n){var r=(t[1]-t[0])/n,i=o.bisect(Wu,r);return i==Wu.length?[e.year,Ea(t.map(function(t){return t/31536e6}),n)[2]]:i?e[r/Wu[i-1]<Wu[i]/r?i-1:i]:[Vu,Ea(t,n)[2]]}return r.invert=function(e){return zu(t.invert(e))},r.domain=function(e){return arguments.length?(t.domain(e),r):t.domain().map(zu)},r.nice=function(t,e){var n=r.domain(),o=ga(n),a=null==t?i(o,10):"number"==typeof t&&i(o,t);function u(n){return!isNaN(n)&&!t.range(n,zu(+n+1),e).length}return a&&(t=a[0],e=a[1]),r.domain(ba(n,e>1?{floor:function(e){for(;u(e=t.floor(e));)e=zu(e-1);return e},ceil:function(e){for(;u(e=t.ceil(e));)e=zu(+e+1);return e}}:t))},r.ticks=function(t,e){var n=ga(r.domain()),o=null==t?i(n,10):"number"==typeof t?i(n,t):!t.range&&[{range:t},e];return o&&(t=o[0],e=o[1]),t.range(n[0],zu(+n[1]+1),e<1?1:e)},r.tickFormat=function(){return n},r.copy=function(){return ju(t.copy(),e,n)},Ma(r,t)}function zu(t){return new Date(t)}Lu.iso=Date.prototype.toISOString&&+new Date("2000-01-01T00:00:00.000Z")?Iu:Ru,Iu.parse=function(t){var e=new Date(t);return isNaN(e)?null:e},Iu.toString=Ru.toString,je.second=Ue(function(t){return new ze(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(t.getTime()+1e3*Math.floor(e))},function(t){return t.getSeconds()}),je.seconds=je.second.range,je.seconds.utc=je.second.utc.range,je.minute=Ue(function(t){return new ze(6e4*Math.floor(t/6e4))},function(t,e){t.setTime(t.getTime()+6e4*Math.floor(e))},function(t){return t.getMinutes()}),je.minutes=je.minute.range,je.minutes.utc=je.minute.utc.range,je.hour=Ue(function(t){var e=t.getTimezoneOffset()/60;return new ze(36e5*(Math.floor(t/36e5-e)+e))},function(t,e){t.setTime(t.getTime()+36e5*Math.floor(e))},function(t){return t.getHours()}),je.hours=je.hour.range,je.hours.utc=je.hour.utc.range,je.month=Ue(function(t){return(t=je.day(t)).setDate(1),t},function(t,e){t.setMonth(t.getMonth()+e)},function(t){return t.getMonth()}),je.months=je.month.range,je.months.utc=je.month.utc.range;var Wu=[1e3,5e3,15e3,3e4,6e4,3e5,9e5,18e5,36e5,108e5,216e5,432e5,864e5,1728e5,6048e5,2592e6,7776e6,31536e6],Bu=[[je.second,1],[je.second,5],[je.second,15],[je.second,30],[je.minute,1],[je.minute,5],[je.minute,15],[je.minute,30],[je.hour,1],[je.hour,3],[je.hour,6],[je.hour,12],[je.day,1],[je.day,2],[je.week,1],[je.month,1],[je.month,3],[je.year,1]],Uu=Lu.multi([[".%L",function(t){return t.getMilliseconds()}],[":%S",function(t){return t.getSeconds()}],["%I:%M",function(t){return t.getMinutes()}],["%I %p",function(t){return t.getHours()}],["%a %d",function(t){return t.getDay()&&1!=t.getDate()}],["%b %d",function(t){return 1!=t.getDate()}],["%B",function(t){return t.getMonth()}],["%Y",Jn]]),Vu={range:function(t,e,n){return o.range(Math.ceil(t/n)*n,+e,n).map(zu)},floor:D,ceil:D};Bu.year=je.year,je.scale=function(){return ju(o.scale.linear(),Bu,Uu)};var Hu=Bu.map(function(t){return[t[0].utc,t[1]]}),qu=Du.multi([[".%L",function(t){return t.getUTCMilliseconds()}],[":%S",function(t){return t.getUTCSeconds()}],["%I:%M",function(t){return t.getUTCMinutes()}],["%I %p",function(t){return t.getUTCHours()}],["%a %d",function(t){return t.getUTCDay()&&1!=t.getUTCDate()}],["%b %d",function(t){return 1!=t.getUTCDate()}],["%B",function(t){return t.getUTCMonth()}],["%Y",Jn]]);function Yu(t){return JSON.parse(t.responseText)}function Gu(t){var e=l.createRange();return e.selectNode(l.body),e.createContextualFragment(t.responseText)}Hu.year=je.year.utc,je.scale.utc=function(){return ju(o.scale.linear(),Hu,qu)},o.text=we(function(t){return t.responseText}),o.json=function(t,e){return ke(t,"application/json",Yu,e)},o.html=function(t,e){return ke(t,"text/html",Gu,e)},o.xml=we(function(t){return t.responseXML}),this.d3=o,void 0===(i="function"==typeof(r=o)?r.call(e,n,e,t):r)||(t.exports=i)}()},function(t,e,n){"use strict";var r=n(325),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(t){return r.isMemo(t)?a:u[t.$$typeof]||i}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;t.exports=function t(e,n,r){if("string"!=typeof n){if(h){var i=p(n);i&&i!==h&&t(e,i,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=l(e),v=l(n),g=0;g<a.length;++g){var m=a[g];if(!(o[m]||r&&r[m]||v&&v[m]||u&&u[m])){var y=d(n,m);try{c(e,m,y)}catch(t){}}}return e}return e}},function(t,e,n){"use strict";(function(t,r){var i,o=n(131);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:r;var a=Object(o.a)(i);e.a=a}).call(this,n(328),n(329)(t))},function(t,e,n){var r;(r={dev:!1}).tooltip=r.tooltip||{},r.utils=r.utils||{},r.models=r.models||{},r.charts={},r.logs={},r.dom={},"undefined"==typeof d3&&(d3=n(92)),r.dispatch=d3.dispatch("render_start","render_end"),Function.prototype.bind||(Function.prototype.bind=function(t){if("function"!=typeof this)throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");var e=Array.prototype.slice.call(arguments,1),n=this,r=function(){},i=function(){return n.apply(this instanceof r&&t?this:t,e.concat(Array.prototype.slice.call(arguments)))};return r.prototype=this.prototype,i.prototype=new r,i}),r.dev&&(r.dispatch.on("render_start",function(t){r.logs.startTime=+new Date}),r.dispatch.on("render_end",function(t){r.logs.endTime=+new Date,r.logs.totalTime=r.logs.endTime-r.logs.startTime,r.log("total",r.logs.totalTime)})),r.log=function(){return r.dev&&window.console&&console.log&&console.log.apply?console.log.apply(console,arguments):r.dev&&window.console&&"function"==typeof console.log&&Function.prototype.bind&&Function.prototype.bind.call(console.log,console).apply(console,arguments),arguments[arguments.length-1]},r.deprecated=function(t,e){console&&console.warn&&console.warn("nvd3 warning: `"+t+"` has been deprecated. ",e||"")},r.render=function(t){t=t||1,r.render.active=!0,r.dispatch.render_start();var e=function(){for(var n,i,o=0;o<t&&(i=r.render.queue[o]);o++)n=i.generate(),typeof i.callback==typeof Function&&i.callback(n);r.render.queue.splice(0,o),r.render.queue.length?setTimeout(e):(r.dispatch.render_end(),r.render.active=!1)};setTimeout(e)},r.render.active=!1,r.render.queue=[],r.addGraph=function(t){typeof arguments[0]==typeof Function&&(t={generate:arguments[0],callback:arguments[1]}),r.render.queue.push(t),r.render.active||r.render()},t.exports=r,"undefined"!=typeof window&&(window.nv=r),r.dom.write=function(t){return void 0!==window.fastdom?fastdom.mutate(t):t()},r.dom.read=function(t){return void 0!==window.fastdom?fastdom.measure(t):t()},r.interactiveGuideline=function(){"use strict";var t={left:0,top:0},e=null,n=null,i=d3.scale.linear(),o=d3.dispatch("elementMousemove","elementMouseout","elementClick","elementDblclick","elementMouseDown","elementMouseUp"),a=!0,u=null,l=r.models.tooltip(),c=window.ActiveXObject;function s(f){f.each(function(f){var d=d3.select(this),p=e||960,h=n||400,v=d.selectAll("g.nv-wrap.nv-interactiveLineLayer").data([f]);function g(){var e=d3.event.clientX-this.getBoundingClientRect().left,n=d3.event.clientY-this.getBoundingClientRect().top,r=!0,a=!1;if(c&&(e=d3.event.offsetX,n=d3.event.offsetY,"svg"!==d3.event.target.tagName&&(r=!1),d3.event.target.className.baseVal.match("nv-legend")&&(a=!0)),r&&(e-=t.left,n-=t.top),"mouseout"===d3.event.type||e<0||n<0||e>p||n>h||d3.event.relatedTarget&&void 0===d3.event.relatedTarget.ownerSVGElement||a){if(c&&d3.event.relatedTarget&&void 0===d3.event.relatedTarget.ownerSVGElement&&(void 0===d3.event.relatedTarget.className||d3.event.relatedTarget.className.match(l.nvPointerEventsClass)))return;return o.elementMouseout({mouseX:e,mouseY:n}),s.renderGuideLine(null),void l.hidden(!0)}l.hidden(!1);var u=void 0;if("function"==typeof i.rangeBands){var f=d3.bisect(i.range(),e)-1;if(!(i.range()[f]+i.rangeBand()>=e))return o.elementMouseout({mouseX:e,mouseY:n}),s.renderGuideLine(null),void l.hidden(!0);u=i.domain()[d3.bisect(i.range(),e)-1]}else u=i.invert(e);o.elementMousemove({mouseX:e,mouseY:n,pointXValue:u}),"dblclick"===d3.event.type&&o.elementDblclick({mouseX:e,mouseY:n,pointXValue:u}),"click"===d3.event.type&&o.elementClick({mouseX:e,mouseY:n,pointXValue:u}),"mousedown"===d3.event.type&&o.elementMouseDown({mouseX:e,mouseY:n,pointXValue:u}),"mouseup"===d3.event.type&&o.elementMouseUp({mouseX:e,mouseY:n,pointXValue:u})}v.enter().append("g").attr("class"," nv-wrap nv-interactiveLineLayer").append("g").attr("class","nv-interactiveGuideLine"),u&&(u.on("touchmove",g).on("mousemove",g,!0).on("mouseout",g,!0).on("mousedown",g,!0).on("mouseup",g,!0).on("dblclick",g).on("click",g),s.guideLine=null,s.renderGuideLine=function(t){a&&(s.guideLine&&s.guideLine.attr("x1")===t||r.dom.write(function(){var e=v.select(".nv-interactiveGuideLine").selectAll("line").data(null!=t?[r.utils.NaNtoZero(t)]:[],String);e.enter().append("line").attr("class","nv-guideline").attr("x1",function(t){return t}).attr("x2",function(t){return t}).attr("y1",h).attr("y2",0),e.exit().remove()}))})})}return l.duration(0).hideDelay(0).hidden(!1),s.dispatch=o,s.tooltip=l,s.margin=function(e){return arguments.length?(t.top=void 0!==e.top?e.top:t.top,t.left=void 0!==e.left?e.left:t.left,s):t},s.width=function(t){return arguments.length?(e=t,s):e},s.height=function(t){return arguments.length?(n=t,s):n},s.xScale=function(t){return arguments.length?(i=t,s):i},s.showGuideLine=function(t){return arguments.length?(a=t,s):a},s.svgContainer=function(t){return arguments.length?(u=t,s):u},s},r.interactiveBisect=function(t,e,n){"use strict";if(!(t instanceof Array))return null;var r;r="function"!=typeof n?function(t){return t.x}:n;var i=d3.bisector(function(t,e){return r(t)-e}).left,o=d3.max([0,i(t,e)-1]),a=r(t[o]);if(void 0===a&&(a=o),a===e)return o;var u=d3.min([o+1,t.length-1]),l=r(t[u]);return void 0===l&&(l=u),Math.abs(l-e)>=Math.abs(a-e)?o:u},r.nearestValueIndex=function(t,e,n){"use strict";var r=1/0,i=null;return t.forEach(function(t,o){var a=Math.abs(e-t);null!=t&&a<=r&&a<n&&(r=a,i=o)}),i},r.models.tooltip=function(){"use strict";var t="nvtooltip-"+Math.floor(1e5*Math.random()),e=null,n="w",i=25,o=0,a=null,u=!0,l=200,c=null,s={left:null,top:null},f=!0,d=100,p=!0,h="nv-pointer-events-none",v=function(t,e,n){return t},g=function(t){return t},m=function(t,e){return t},y=function(t,e){if(null===t)return"";var n=d3.select(document.createElement("table"));p&&n.selectAll("thead").data([t]).enter().append("thead").append("tr").append("td").attr("colspan",3).append("strong").classed("x-value",!0).html(g(t.value));var r=n.selectAll("tbody").data([t]).enter().append("tbody").selectAll("tr").data(function(t){return t.series}).enter().append("tr").classed("highlight",function(t){return t.highlight});r.append("td").classed("legend-color-guide",!0).append("div").style("background-color",function(t){return t.color}),r.append("td").classed("key",!0).classed("total",function(t){return!!t.total}).html(function(t,e){return m(t.key,e)}),r.append("td").classed("value",!0).html(function(t,e){return v(t.value,e,t)}),r.filter(function(t,e){return void 0!==t.percent}).append("td").classed("percent",!0).html(function(t,e){return"("+d3.format("%")(t.percent)+")"}),r.selectAll("td").each(function(t){if(t.highlight){var e=d3.scale.linear().domain([0,1]).range(["#fff",t.color]);d3.select(this).style("border-bottom-color",e(.6)).style("border-top-color",e(.6))}});var i=n.node().outerHTML;return void 0!==t.footer&&(i+="<div class='footer'>"+t.footer+"</div>"),i},b=function(){var t={left:null!==d3.event?d3.event.clientX:0,top:null!==d3.event?d3.event.clientY:0};if("none"!=getComputedStyle(document.body).transform){var e=document.body.getBoundingClientRect();t.left-=e.left,t.top-=e.top}return t},x=function(t){if(t&&t.series){if(r.utils.isArray(t.series))return!0;if(r.utils.isObject(t.series))return t.series=[t.series],!0}return!1},w=function(){r.dom.read(function(){var t=b(),e=function(t){var e,r,o,a=c.node().offsetHeight,u=c.node().offsetWidth,l=document.documentElement.clientWidth,s=document.documentElement.clientHeight;switch(n){case"e":e=-u-i,r=-a/2,t.left+e<0&&(e=i),(o=t.top+r)<0&&(r-=o),(o=t.top+r+a)>s&&(r-=o-s);break;case"w":e=i,r=-a/2,t.left+e+u>l&&(e=-u-i),(o=t.top+r)<0&&(r-=o),(o=t.top+r+a)>s&&(r-=o-s);break;case"n":e=-u/2-5,r=i,t.top+r+a>s&&(r=-a-i),(o=t.left+e)<0&&(e-=o),(o=t.left+e+u)>l&&(e-=o-l);break;case"s":e=-u/2,r=-a-i,t.top+r<0&&(r=i),(o=t.left+e)<0&&(e-=o),(o=t.left+e+u)>l&&(e-=o-l);break;case"center":e=-u/2,r=-a/2;break;default:e=0,r=0}return{left:e,top:r}}(t),r=t.left+e.left,o=t.top+e.top;if(u)c.interrupt().transition().delay(l).duration(0).style("opacity",0);else{var a="translate("+s.left+"px, "+s.top+"px)",f="translate("+Math.round(r)+"px, "+Math.round(o)+"px)",p=d3.interpolateString(a,f),h=c.style("opacity")<.1;c.interrupt().transition().duration(h?0:d).styleTween("transform",function(t){return p},"important").styleTween("-webkit-transform",function(t){return p}).style("-ms-transform",f).style("opacity",1)}s.left=r,s.top=o})};function k(){if(f&&x(e))return r.dom.write(function(){c&&c.node()||((c=d3.select(document.body).select("#"+t).data([1])).enter().append("div").attr("class","nvtooltip "+(a||"xy-tooltip")).attr("id",t).style("top",0).style("left",0).style("opacity",0).style("position","fixed").selectAll("div, table, td, tr").classed(h,!0).classed(h,!0),c.exit().remove());var n=y(e,c.node());n&&(c.node().innerHTML=n),w()}),k}return k.nvPointerEventsClass=h,k.options=r.utils.optionsFunc.bind(k),k._options=Object.create({},{duration:{get:function(){return d},set:function(t){d=t}},gravity:{get:function(){return n},set:function(t){n=t}},distance:{get:function(){return i},set:function(t){i=t}},snapDistance:{get:function(){return o},set:function(t){o=t}},classes:{get:function(){return a},set:function(t){a=t}},enabled:{get:function(){return f},set:function(t){f=t}},hideDelay:{get:function(){return l},set:function(t){l=t}},contentGenerator:{get:function(){return y},set:function(t){y=t}},valueFormatter:{get:function(){return v},set:function(t){v=t}},headerFormatter:{get:function(){return g},set:function(t){g=t}},keyFormatter:{get:function(){return m},set:function(t){m=t}},headerEnabled:{get:function(){return p},set:function(t){p=t}},position:{get:function(){return b},set:function(t){b=t}},chartContainer:{get:function(){return document.body},set:function(t){r.deprecated("chartContainer","feature removed after 1.8.3")}},fixedTop:{get:function(){return null},set:function(t){r.deprecated("fixedTop","feature removed after 1.8.1")}},offset:{get:function(){return{left:0,top:0}},set:function(t){r.deprecated("offset","use chart.tooltip.distance() instead")}},hidden:{get:function(){return u},set:function(t){u!=t&&(u=!!t,k())}},data:{get:function(){return e},set:function(t){t.point&&(t.value=t.point.x,t.series=t.series||{},t.series.value=t.point.y,t.series.color=t.point.color||t.series.color),e=t}},node:{get:function(){return c.node()},set:function(t){}},id:{get:function(){return t},set:function(t){}}}),r.utils.initOptions(k),k},r.utils.windowSize=function(){var t={width:640,height:480};return window.innerWidth&&window.innerHeight?(t.width=window.innerWidth,t.height=window.innerHeight,t):"CSS1Compat"==document.compatMode&&document.documentElement&&document.documentElement.offsetWidth?(t.width=document.documentElement.offsetWidth,t.height=document.documentElement.offsetHeight,t):document.body&&document.body.offsetWidth?(t.width=document.body.offsetWidth,t.height=document.body.offsetHeight,t):t},r.utils.isArray=Array.isArray,r.utils.isObject=function(t){return null!==t&&"object"==typeof t},r.utils.isFunction=function(t){return"function"==typeof t},r.utils.isDate=function(t){return"[object Date]"===toString.call(t)},r.utils.isNumber=function(t){return!isNaN(t)&&"number"==typeof t},r.utils.windowResize=function(t){return window.addEventListener?window.addEventListener("resize",t):r.log("ERROR: Failed to bind to window.resize with: ",t),{callback:t,clear:function(){window.removeEventListener("resize",t)}}},r.utils.getColor=function(t){if(void 0===t)return r.utils.defaultColor();if(r.utils.isArray(t)){var e=d3.scale.ordinal().range(t);return function(t,n){var r=void 0===n?t:n;return t.color||e(r)}}return t},r.utils.defaultColor=function(){return r.utils.getColor(d3.scale.category20().range())},r.utils.customTheme=function(t,e,n){e=e||function(t){return t.key};var i=(n=n||d3.scale.category20().range()).length;return function(o,a){var u=e(o);return r.utils.isFunction(t[u])?t[u]():void 0!==t[u]?t[u]:(i||(i=n.length),n[i-=1])}},r.utils.pjax=function(t,e){var n=function(n){d3.html(n,function(n){var i=d3.select(e).node();i.parentNode.replaceChild(d3.select(n).select(e).node(),i),r.utils.pjax(t,e)})};d3.selectAll(t).on("click",function(){history.pushState(this.href,this.textContent,this.href),n(this.href),d3.event.preventDefault()}),d3.select(window).on("popstate",function(){d3.event.state&&n(d3.event.state)})},r.utils.calcApproxTextWidth=function(t){if(r.utils.isFunction(t.style)&&r.utils.isFunction(t.text)){var e=parseInt(t.style("font-size").replace("px",""),10),n=t.text().length;return r.utils.NaNtoZero(n*e*.5)}return 0},r.utils.NaNtoZero=function(t){return!r.utils.isNumber(t)||isNaN(t)||null===t||t===1/0||t===-1/0?0:t},d3.selection.prototype.watchTransition=function(t){var e=[this].concat([].slice.call(arguments,1));return t.transition.apply(t,e)},r.utils.renderWatch=function(t,e){if(!(this instanceof r.utils.renderWatch))return new r.utils.renderWatch(t,e);var n=void 0!==e?e:250,i=[],o=this;this.models=function(t){return(t=[].slice.call(arguments,0)).forEach(function(t){var e;t.__rendered=!1,(e=t).dispatch.on("renderEnd",function(t){e.__rendered=!0,o.renderEnd("model")}),i.indexOf(t)<0&&i.push(t)}),this},this.reset=function(t){void 0!==t&&(n=t),i=[]},this.transition=function(t,e,r){if(r=(e=arguments.length>1?[].slice.call(arguments,1):[]).length>1?e.pop():void 0!==n?n:250,t.__rendered=!1,i.indexOf(t)<0&&i.push(t),0===r)return t.__rendered=!0,t.delay=function(){return this},t.duration=function(){return this},t;0===t.length?t.__rendered=!0:t.every(function(t){return!t.length})?t.__rendered=!0:t.__rendered=!1;var a=0;return t.transition().duration(r).each(function(){++a}).each("end",function(n,r){0==--a&&(t.__rendered=!0,o.renderEnd.apply(this,e))})},this.renderEnd=function(){i.every(function(t){return t.__rendered})&&(i.forEach(function(t){t.__rendered=!1}),t.renderEnd.apply(this,arguments))}},r.utils.deepExtend=function(t){(arguments.length>1?[].slice.call(arguments,1):[]).forEach(function(e){for(var n in e){var i=r.utils.isArray(t[n]),o=r.utils.isObject(t[n]),a=r.utils.isObject(e[n]);o&&!i&&a?r.utils.deepExtend(t[n],e[n]):t[n]=e[n]}})},r.utils.state=function(){if(!(this instanceof r.utils.state))return new r.utils.state;var t={},e=function(){},n=function(){return{}},i=null;this.dispatch=d3.dispatch("change","set"),this.dispatch.on("set",function(t){e(t,!0)}),this.getter=function(t){return n=t,this},this.setter=function(t,n){return n||(n=function(){}),e=function(e,r){t(e),r&&n()},this},this.init=function(t){i=i||{},r.utils.deepExtend(i,t)},this.update=function(){i&&(e(i,!1),i=null),function(){var e=n();if(JSON.stringify(e)===JSON.stringify(t))return!1;for(var r in e)void 0===t[r]&&(t[r]={}),t[r]=e[r];return!0}.call(this)&&this.dispatch.change(t)}},r.utils.optionsFunc=function(t){return t&&d3.map(t).forEach(function(t,e){r.utils.isFunction(this[t])&&this[t](e)}.bind(this)),this},r.utils.calcTicksX=function(t,e){for(var n=1,i=0;i<e.length;i+=1){var o=e[i]&&e[i].values?e[i].values.length:0;n=o>n?o:n}return r.log("Requested number of ticks: ",t),r.log("Calculated max values to be: ",n),t=(t=t>n?t=n-1:t)<1?1:t,t=Math.floor(t),r.log("Calculating tick count as: ",t),t},r.utils.calcTicksY=function(t,e){return r.utils.calcTicksX(t,e)},r.utils.initOption=function(t,e){t._calls&&t._calls[e]?t[e]=t._calls[e]:(t[e]=function(n){return arguments.length?(t._overrides[e]=!0,t._options[e]=n,t):t._options[e]},t["_"+e]=function(n){return arguments.length?(t._overrides[e]||(t._options[e]=n),t):t._options[e]})},r.utils.initOptions=function(t){t._overrides=t._overrides||{};var e=Object.getOwnPropertyNames(t._options||{}),n=Object.getOwnPropertyNames(t._calls||{});for(var i in e=e.concat(n))r.utils.initOption(t,e[i])},r.utils.inheritOptionsD3=function(t,e,n){t._d3options=n.concat(t._d3options||[]),t._d3options=(t._d3options||[]).filter(function(t,e,n){return n.indexOf(t)===e}),n.unshift(e),n.unshift(t),d3.rebind.apply(this,n)},r.utils.arrayUnique=function(t){return t.sort().filter(function(e,n){return!n||e!=t[n-1]})},r.utils.symbolMap=d3.map(),r.utils.symbol=function(){var t,e=64;function n(n,i){var o=t.call(this,n,i),a=e.call(this,n,i);return-1!==d3.svg.symbolTypes.indexOf(o)?d3.svg.symbol().type(o).size(a)():r.utils.symbolMap.get(o)(a)}return n.type=function(e){return arguments.length?(t=d3.functor(e),n):t},n.size=function(t){return arguments.length?(e=d3.functor(t),n):e},n},r.utils.inheritOptions=function(t,e){var n=Object.getOwnPropertyNames(e._options||{}),i=Object.getOwnPropertyNames(e._calls||{}),o=e._inherited||[],a=e._d3options||[],u=n.concat(i).concat(o).concat(a);u.unshift(e),u.unshift(t),d3.rebind.apply(this,u),t._inherited=r.utils.arrayUnique(n.concat(i).concat(o).concat(n).concat(t._inherited||[])),t._d3options=r.utils.arrayUnique(a.concat(t._d3options||[]))},r.utils.initSVG=function(t){t.classed({"nvd3-svg":!0})},r.utils.sanitizeHeight=function(t,e){return t||parseInt(e.style("height"),10)||400},r.utils.sanitizeWidth=function(t,e){return t||parseInt(e.style("width"),10)||960},r.utils.availableHeight=function(t,e,n){return Math.max(0,r.utils.sanitizeHeight(t,e)-n.top-n.bottom)},r.utils.availableWidth=function(t,e,n){return Math.max(0,r.utils.sanitizeWidth(t,e)-n.left-n.right)},r.utils.noData=function(t,e){var n=t.options(),i=n.margin(),o=n.noData(),a=null==o?["No Data Available."]:[o],u=r.utils.availableHeight(null,e,i),l=r.utils.availableWidth(null,e,i),c=i.left+l/2,s=i.top+u/2;e.selectAll("g").remove();var f=e.selectAll(".nv-noData").data(a);f.enter().append("text").attr("class","nvd3 nv-noData").attr("dy","-.7em").style("text-anchor","middle"),f.attr("x",c).attr("y",s).text(function(t){return t})},r.utils.wrapTicks=function(t,e){t.each(function(){for(var t,n=d3.select(this),r=n.text().split(/\s+/).reverse(),i=[],o=0,a=n.attr("y"),u=parseFloat(n.attr("dy")),l=n.text(null).append("tspan").attr("x",0).attr("y",a).attr("dy",u+"em");t=r.pop();)i.push(t),l.text(i.join(" ")),l.node().getComputedTextLength()>e&&(i.pop(),l.text(i.join(" ")),i=[t],l=n.append("tspan").attr("x",0).attr("y",a).attr("dy",1.1*++o+u+"em").text(t))})},r.utils.arrayEquals=function(t,e){if(t===e)return!0;if(!t||!e)return!1;if(t.length!=e.length)return!1;for(var n=0,i=t.length;n<i;n++)if(t[n]instanceof Array&&e[n]instanceof Array){if(!r.arrayEquals(t[n],e[n]))return!1}else if(t[n]!=e[n])return!1;return!0},r.utils.pointIsInArc=function(t,e,n){var r=n.innerRadius()(e),i=n.outerRadius()(e),o=n.startAngle()(e),a=n.endAngle()(e),u=t.x*t.x+t.y*t.y,l=Math.atan2(t.x,-t.y);return l=l<0?l+2*Math.PI:l,r*r<=u&&u<=i*i&&o<=l&&l<=a},r.models.axis=function(){"use strict";var t,e,n=d3.svg.axis(),i=d3.scale.linear(),o={top:0,right:0,bottom:0,left:0},a=75,u=60,l=null,c=!0,s=0,f=!0,d=!1,p=!1,h=null,v=0,g=void 0,m=250,y=d3.dispatch("renderEnd");n.scale(i).orient("bottom").tickFormat(function(t){return t});var b=r.utils.renderWatch(y,m);function x(u){return b.reset(),u.each(function(u){var m=d3.select(this);r.utils.initSVG(m);var y=m.selectAll("g.nv-wrap.nv-axis").data([u]),x=(y.enter().append("g").attr("class","nvd3 nv-wrap nv-axis").append("g"),y.select("g"));null!==h?n.ticks(h):"top"!=n.orient()&&"bottom"!=n.orient()||n.ticks(Math.abs(i.range()[1]-i.range()[0])/100),x.watchTransition(b,"axis").call(n),e=e||n.scale();var w=n.tickFormat();null==w&&(w=e.tickFormat());var k,M,S,E=x.selectAll("text.nv-axislabel").data([l||null]);switch(E.exit().remove(),void 0!==g&&x.selectAll("g").select("text").style("font-size",g),n.orient()){case"top":E.enter().append("text").attr("class","nv-axislabel"),S=0,1===i.range().length?S=p?2*i.range()[0]+i.rangeBand():0:2===i.range().length?S=p?i.range()[0]+i.range()[1]+i.rangeBand():i.range()[1]:i.range().length>2&&(S=i.range()[i.range().length-1]+(i.range()[1]-i.range()[0])),E.attr("text-anchor","middle").attr("y",0).attr("x",S/2),c&&((M=y.selectAll("g.nv-axisMaxMin").data(i.domain())).enter().append("g").attr("class",function(t,e){return["nv-axisMaxMin","nv-axisMaxMin-x",0==e?"nv-axisMin-x":"nv-axisMax-x"].join(" ")}).append("text"),M.exit().remove(),M.attr("transform",function(t,e){return"translate("+r.utils.NaNtoZero(i(t))+",0)"}).select("text").attr("dy","-0.5em").attr("y",-n.tickPadding()).attr("text-anchor","middle").text(function(e,n){var r=(t||w)(e);return(""+r).match("NaN")?"":r}),M.watchTransition(b,"min-max top").attr("transform",function(t,e){return"translate("+r.utils.NaNtoZero(i.range()[e])+",0)"}));break;case"bottom":k=v+36;var _=30,C=0,T=x.selectAll("g").select("text"),A="";if(s%360){T.attr("transform",""),T.each(function(t,e){var n=this.getBoundingClientRect(),r=n.width;C=n.height,r>_&&(_=r)}),A="rotate("+s+" 0,"+(C/2+n.tickPadding())+")";var P=Math.abs(Math.sin(s*Math.PI/180));k=(P?P*_:_)+30,T.attr("transform",A).style("text-anchor",s%360>0?"start":"end")}else d?T.attr("transform",function(t,e){return"translate(0,"+(e%2==0?"0":"12")+")"}):T.attr("transform","translate(0,0)");E.enter().append("text").attr("class","nv-axislabel"),S=0,1===i.range().length?S=p?2*i.range()[0]+i.rangeBand():0:2===i.range().length?S=p?i.range()[0]+i.range()[1]+i.rangeBand():i.range()[1]:i.range().length>2&&(S=i.range()[i.range().length-1]+(i.range()[1]-i.range()[0])),E.attr("text-anchor","middle").attr("y",k).attr("x",S/2),c&&((M=y.selectAll("g.nv-axisMaxMin").data([i.domain()[0],i.domain()[i.domain().length-1]])).enter().append("g").attr("class",function(t,e){return["nv-axisMaxMin","nv-axisMaxMin-x",0==e?"nv-axisMin-x":"nv-axisMax-x"].join(" ")}).append("text"),M.exit().remove(),M.attr("transform",function(t,e){return"translate("+r.utils.NaNtoZero(i(t)+(p?i.rangeBand()/2:0))+",0)"}).select("text").attr("dy",".71em").attr("y",n.tickPadding()).attr("transform",A).style("text-anchor",s?s%360>0?"start":"end":"middle").text(function(e,n){var r=(t||w)(e);return(""+r).match("NaN")?"":r}),M.watchTransition(b,"min-max bottom").attr("transform",function(t,e){return"translate("+r.utils.NaNtoZero(i(t)+(p?i.rangeBand()/2:0))+",0)"}));break;case"right":E.enter().append("text").attr("class","nv-axislabel"),E.style("text-anchor",f?"middle":"begin").attr("transform",f?"rotate(90)":"").attr("y",f?12-Math.max(o.right,a)-(v||0):-10).attr("x",f?d3.max(i.range())/2:n.tickPadding()),c&&((M=y.selectAll("g.nv-axisMaxMin").data(i.domain())).enter().append("g").attr("class",function(t,e){return["nv-axisMaxMin","nv-axisMaxMin-y",0==e?"nv-axisMin-y":"nv-axisMax-y"].join(" ")}).append("text").style("opacity",0),M.exit().remove(),M.attr("transform",function(t,e){return"translate(0,"+r.utils.NaNtoZero(i(t))+")"}).select("text").attr("dy",".32em").attr("y",0).attr("x",n.tickPadding()).style("text-anchor","start").text(function(e,n){var r=(t||w)(e);return(""+r).match("NaN")?"":r}),M.watchTransition(b,"min-max right").attr("transform",function(t,e){return"translate(0,"+r.utils.NaNtoZero(i.range()[e])+")"}).select("text").style("opacity",1));break;case"left":E.enter().append("text").attr("class","nv-axislabel"),E.style("text-anchor",f?"middle":"end").attr("transform",f?"rotate(-90)":"").attr("y",f?25-Math.max(o.left,a)-(v||0):-10).attr("x",f?-d3.max(i.range())/2:-n.tickPadding()),c&&((M=y.selectAll("g.nv-axisMaxMin").data(i.domain())).enter().append("g").attr("class",function(t,e){return["nv-axisMaxMin","nv-axisMaxMin-y",0==e?"nv-axisMin-y":"nv-axisMax-y"].join(" ")}).append("text").style("opacity",0),M.exit().remove(),M.attr("transform",function(t,n){return"translate(0,"+r.utils.NaNtoZero(e(t))+")"}).select("text").attr("dy",".32em").attr("y",0).attr("x",-n.tickPadding()).attr("text-anchor","end").text(function(e,n){var r=(t||w)(e);return(""+r).match("NaN")?"":r}),M.watchTransition(b,"min-max right").attr("transform",function(t,e){return"translate(0,"+r.utils.NaNtoZero(i.range()[e])+")"}).select("text").style("opacity",1))}if(E.text(function(t){return t}),!c||"left"!==n.orient()&&"right"!==n.orient()||(x.selectAll("g").each(function(t,e){d3.select(this).select("text").attr("opacity",1),(i(t)<i.range()[1]+10||i(t)>i.range()[0]-10)&&((t>1e-10||t<-1e-10)&&d3.select(this).attr("opacity",0),d3.select(this).select("text").attr("opacity",0))}),i.domain()[0]==i.domain()[1]&&0==i.domain()[0]&&y.selectAll("g.nv-axisMaxMin").style("opacity",function(t,e){return e?0:1})),c&&("top"===n.orient()||"bottom"===n.orient())){var N=[];y.selectAll("g.nv-axisMaxMin").each(function(t,e){try{e?N.push(i(t)-this.getBoundingClientRect().width-4):N.push(i(t)+this.getBoundingClientRect().width+4)}catch(n){e?N.push(i(t)-4):N.push(i(t)+4)}}),x.selectAll("g").each(function(t,e){(i(t)<N[0]||i(t)>N[1])&&(t>1e-10||t<-1e-10?d3.select(this).remove():d3.select(this).select("text").remove())})}x.selectAll(".tick").filter(function(t){return!parseFloat(Math.round(1e5*t)/1e6)&&void 0!==t}).classed("zero",!0),e=i.copy()}),b.renderEnd("axis immediate"),x}return x.axis=n,x.dispatch=y,x.options=r.utils.optionsFunc.bind(x),x._options=Object.create({},{axisLabelDistance:{get:function(){return v},set:function(t){v=t}},staggerLabels:{get:function(){return d},set:function(t){d=t}},rotateLabels:{get:function(){return s},set:function(t){s=t}},rotateYLabel:{get:function(){return f},set:function(t){f=t}},showMaxMin:{get:function(){return c},set:function(t){c=t}},axisLabel:{get:function(){return l},set:function(t){l=t}},height:{get:function(){return u},set:function(t){u=t}},ticks:{get:function(){return h},set:function(t){h=t}},width:{get:function(){return a},set:function(t){a=t}},fontSize:{get:function(){return g},set:function(t){g=t}},tickFormatMaxMin:{get:function(){return t},set:function(e){t=e}},margin:{get:function(){return o},set:function(t){o.top=void 0!==t.top?t.top:o.top,o.right=void 0!==t.right?t.right:o.right,o.bottom=void 0!==t.bottom?t.bottom:o.bottom,o.left=void 0!==t.left?t.left:o.left}},duration:{get:function(){return m},set:function(t){m=t,b.reset(m)}},scale:{get:function(){return i},set:function(t){i=t,n.scale(i),p="function"==typeof i.rangeBands,r.utils.inheritOptionsD3(x,i,["domain","range","rangeBand","rangeBands"])}}}),r.utils.initOptions(x),r.utils.inheritOptionsD3(x,n,["orient","tickValues","tickSubdivide","tickSize","tickPadding","tickFormat"]),r.utils.inheritOptionsD3(x,i,["domain","range","rangeBand","rangeBands"]),x},r.models.boxPlot=function(){"use strict";var t,e,n,i,o,a,u={top:0,right:0,bottom:0,left:0},l=960,c=500,s=Math.floor(1e4*Math.random()),f=d3.scale.ordinal(),d=d3.scale.linear(),p=function(t){return t.label},h=function(t){return t.values.Q1},v=function(t){return t.values.Q2},g=function(t){return t.values.Q3},m=function(t){return t.values.whisker_low},y=function(t){return t.values.whisker_high},b=function(t){return t.color},x=function(t){return t.values.outliers},w=function(t,e,n){return t},k=function(t,e,n){return t},M=function(t,e,n){},S=r.utils.defaultColor(),E=null,_=d3.dispatch("elementMouseover","elementMouseout","elementMousemove","renderEnd"),C=250,T=null,A=r.utils.renderWatch(_,C);function P(s){return A.reset(),s.each(function(s){var P=l-u.left-u.right,N=c-u.top-u.bottom;E=d3.select(this),r.utils.initSVG(E),f.domain(t||s.map(function(t,e){return p(t,e)})).rangeBands(e||[0,P],.1);var O=[];if(!n){var F=[];s.forEach(function(t,e){var n=h(t),r=g(t),i=m(t),o=y(t),a=x(t);a&&a.forEach(function(t,e){F.push(w(t,e,void 0))}),i&&F.push(i),n&&F.push(n),r&&F.push(r),o&&F.push(o)}),O=[d3.min(F),d3.max(F)]}d.domain(n||O),d.range(i||[N,0]),o=o||f,a=a||d.copy().range([d(0),d(0)]);var L=E.selectAll("g.nv-wrap").data([s]);L.enter().append("g").attr("class","nvd3 nv-wrap"),L.attr("transform","translate("+u.left+","+u.top+")");var D=L.selectAll(".nv-boxplot").data(function(t){return t}),R=D.enter().append("g").style("stroke-opacity",1e-6).style("fill-opacity",1e-6);D.attr("class","nv-boxplot").attr("transform",function(t,e,n){return"translate("+(f(p(t,e))+.05*f.rangeBand())+", 0)"}).classed("hover",function(t){return t.hover}),D.watchTransition(A,"nv-boxplot: boxplots").style("stroke-opacity",1).style("fill-opacity",.75).delay(function(t,e){return e*C/s.length}).attr("transform",function(t,e){return"translate("+(f(p(t,e))+.05*f.rangeBand())+", 0)"}),D.exit().remove(),R.each(function(t,e){var n=d3.select(this);[m,y].forEach(function(r){if(void 0!==r(t)&&null!==r(t)){var i=r===m?"low":"high";n.append("line").style("stroke",b(t)||S(t,e)).attr("class","nv-boxplot-whisker nv-boxplot-"+i),n.append("line").style("stroke",b(t)||S(t,e)).attr("class","nv-boxplot-tick nv-boxplot-"+i)}})});var I=function(){return null===T?.9*f.rangeBand():Math.min(75,.9*f.rangeBand())},j=function(){return.45*f.rangeBand()-I()/2},z=function(){return.45*f.rangeBand()+I()/2};[m,y].forEach(function(t){var e=t===m?"low":"high",n=t===m?h:g;D.select("line.nv-boxplot-whisker.nv-boxplot-"+e).watchTransition(A,"nv-boxplot: boxplots").attr("x1",.45*f.rangeBand()).attr("y1",function(e,n){return d(t(e))}).attr("x2",.45*f.rangeBand()).attr("y2",function(t,e){return d(n(t))}),D.select("line.nv-boxplot-tick.nv-boxplot-"+e).watchTransition(A,"nv-boxplot: boxplots").attr("x1",j).attr("y1",function(e,n){return d(t(e))}).attr("x2",z).attr("y2",function(e,n){return d(t(e))})}),[m,y].forEach(function(t){var e=t===m?"low":"high";R.selectAll(".nv-boxplot-"+e).on("mouseover",function(e,n,r){d3.select(this).classed("hover",!0),_.elementMouseover({series:{key:t(e),color:b(e)||S(e,r)},e:d3.event})}).on("mouseout",function(e,n,r){d3.select(this).classed("hover",!1),_.elementMouseout({series:{key:t(e),color:b(e)||S(e,r)},e:d3.event})}).on("mousemove",function(t,e){_.elementMousemove({e:d3.event})})}),R.append("rect").attr("class","nv-boxplot-box").on("mouseover",function(t,e){d3.select(this).classed("hover",!0),_.elementMouseover({key:p(t),value:p(t),series:[{key:"Q3",value:g(t),color:b(t)||S(t,e)},{key:"Q2",value:v(t),color:b(t)||S(t,e)},{key:"Q1",value:h(t),color:b(t)||S(t,e)}],data:t,index:e,e:d3.event})}).on("mouseout",function(t,e){d3.select(this).classed("hover",!1),_.elementMouseout({key:p(t),value:p(t),series:[{key:"Q3",value:g(t),color:b(t)||S(t,e)},{key:"Q2",value:v(t),color:b(t)||S(t,e)},{key:"Q1",value:h(t),color:b(t)||S(t,e)}],data:t,index:e,e:d3.event})}).on("mousemove",function(t,e){_.elementMousemove({e:d3.event})}),D.select("rect.nv-boxplot-box").watchTransition(A,"nv-boxplot: boxes").attr("y",function(t,e){return d(g(t))}).attr("width",I).attr("x",j).attr("height",function(t,e){return Math.abs(d(g(t))-d(h(t)))||1}).style("fill",function(t,e){return b(t)||S(t,e)}).style("stroke",function(t,e){return b(t)||S(t,e)}),R.append("line").attr("class","nv-boxplot-median"),D.select("line.nv-boxplot-median").watchTransition(A,"nv-boxplot: boxplots line").attr("x1",j).attr("y1",function(t,e){return d(v(t))}).attr("x2",z).attr("y2",function(t,e){return d(v(t))});var W=D.selectAll(".nv-boxplot-outlier").data(function(t){return x(t)||[]});W.enter().append("circle").style("fill",function(t,e,n){return M(t,e,n)||S(t,n)}).style("stroke",function(t,e,n){return M(t,e,n)||S(t,n)}).style("z-index",9e3).on("mouseover",function(t,e,n){d3.select(this).classed("hover",!0),_.elementMouseover({series:{key:k(t,e,n),color:M(t,e,n)||S(t,n)},e:d3.event})}).on("mouseout",function(t,e,n){d3.select(this).classed("hover",!1),_.elementMouseout({series:{key:k(t,e,n),color:M(t,e,n)||S(t,n)},e:d3.event})}).on("mousemove",function(t,e){_.elementMousemove({e:d3.event})}),W.attr("class","nv-boxplot-outlier"),W.watchTransition(A,"nv-boxplot: nv-boxplot-outlier").attr("cx",.45*f.rangeBand()).attr("cy",function(t,e,n){return d(w(t,e,n))}).attr("r","3"),W.exit().remove(),o=f.copy(),a=d.copy()}),A.renderEnd("nv-boxplot immediate"),P}return P.dispatch=_,P.options=r.utils.optionsFunc.bind(P),P._options=Object.create({},{width:{get:function(){return l},set:function(t){l=t}},height:{get:function(){return c},set:function(t){c=t}},maxBoxWidth:{get:function(){return T},set:function(t){T=t}},x:{get:function(){return p},set:function(t){p=t}},q1:{get:function(){return h},set:function(t){h=t}},q2:{get:function(){return v},set:function(t){v=t}},q3:{get:function(){return g},set:function(t){g=t}},wl:{get:function(){return m},set:function(t){m=t}},wh:{get:function(){return y},set:function(t){y=t}},itemColor:{get:function(){return b},set:function(t){b=t}},outliers:{get:function(){return x},set:function(t){x=t}},outlierValue:{get:function(){return w},set:function(t){w=t}},outlierLabel:{get:function(){return k},set:function(t){k=t}},outlierColor:{get:function(){return M},set:function(t){M=t}},xScale:{get:function(){return f},set:function(t){f=t}},yScale:{get:function(){return d},set:function(t){d=t}},xDomain:{get:function(){return t},set:function(e){t=e}},yDomain:{get:function(){return n},set:function(t){n=t}},xRange:{get:function(){return e},set:function(t){e=t}},yRange:{get:function(){return i},set:function(t){i=t}},id:{get:function(){return s},set:function(t){s=t}},y:{get:function(){return console.warn("BoxPlot 'y' chart option is deprecated. Please use model overrides instead."),{}},set:function(t){console.warn("BoxPlot 'y' chart option is deprecated. Please use model overrides instead.")}},margin:{get:function(){return u},set:function(t){u.top=void 0!==t.top?t.top:u.top,u.right=void 0!==t.right?t.right:u.right,u.bottom=void 0!==t.bottom?t.bottom:u.bottom,u.left=void 0!==t.left?t.left:u.left}},color:{get:function(){return S},set:function(t){S=r.utils.getColor(t)}},duration:{get:function(){return C},set:function(t){C=t,A.reset(C)}}}),r.utils.initOptions(P),P},r.models.boxPlotChart=function(){"use strict";var t,e,n=r.models.boxPlot(),i=r.models.axis(),o=r.models.axis(),a={top:15,right:10,bottom:50,left:60},u=null,l=null,c=r.utils.getColor(),s=!0,f=!0,d=!1,p=!1,h=r.models.tooltip(),v="No Data Available.",g=d3.dispatch("beforeUpdate","renderEnd"),m=250;i.orient("bottom").showMaxMin(!1).tickFormat(function(t){return t}),o.orient(d?"right":"left").tickFormat(d3.format(",.1f")),h.duration(0);var y=r.utils.renderWatch(g,m);function b(c){return y.reset(),y.models(n),s&&y.models(i),f&&y.models(o),c.each(function(c){var h=d3.select(this);r.utils.initSVG(h);var y=(u||parseInt(h.style("width"))||960)-a.left-a.right,x=(l||parseInt(h.style("height"))||400)-a.top-a.bottom;if(b.update=function(){g.beforeUpdate(),h.transition().duration(m).call(b)},b.container=this,!c||!c.length){var w=h.selectAll(".nv-noData").data([v]);return w.enter().append("text").attr("class","nvd3 nv-noData").attr("dy","-.7em").style("text-anchor","middle"),w.attr("x",a.left+y/2).attr("y",a.top+x/2).text(function(t){return t}),b}h.selectAll(".nv-noData").remove(),t=n.xScale(),e=n.yScale().clamp(!0);var k=h.selectAll("g.nv-wrap.nv-boxPlotWithAxes").data([c]),M=k.enter().append("g").attr("class","nvd3 nv-wrap nv-boxPlotWithAxes").append("g"),S=M.append("defs"),E=k.select("g");if(M.append("g").attr("class","nv-x nv-axis"),M.append("g").attr("class","nv-y nv-axis").append("g").attr("class","nv-zeroLine").append("line"),M.append("g").attr("class","nv-barsWrap"),E.attr("transform","translate("+a.left+","+a.top+")"),d&&E.select(".nv-y.nv-axis").attr("transform","translate("+y+",0)"),n.width(y).height(x),E.select(".nv-barsWrap").datum(c.filter(function(t){return!t.disabled})).transition().call(n),S.append("clipPath").attr("id","nv-x-label-clip-"+n.id()).append("rect"),E.select("#nv-x-label-clip-"+n.id()+" rect").attr("width",t.rangeBand()*(p?2:1)).attr("height",16).attr("x",-t.rangeBand()/(p?1:2)),s){i.scale(t).ticks(r.utils.calcTicksX(y/100,c)).tickSize(-x,0),E.select(".nv-x.nv-axis").attr("transform","translate(0,"+e.range()[0]+")"),E.select(".nv-x.nv-axis").call(i);var _=E.select(".nv-x.nv-axis").selectAll("g");p&&_.selectAll("text").attr("transform",function(t,e,n){return"translate(0,"+(n%2==0?"5":"17")+")"})}f&&(o.scale(e).ticks(Math.floor(x/36)).tickSize(-y,0),E.select(".nv-y.nv-axis").call(o)),E.select(".nv-zeroLine line").attr("x1",0).attr("x2",y).attr("y1",e(0)).attr("y2",e(0))}),y.renderEnd("nv-boxplot chart immediate"),b}return n.dispatch.on("elementMouseover.tooltip",function(t){h.data(t).hidden(!1)}),n.dispatch.on("elementMouseout.tooltip",function(t){h.data(t).hidden(!0)}),n.dispatch.on("elementMousemove.tooltip",function(t){h()}),b.dispatch=g,b.boxplot=n,b.xAxis=i,b.yAxis=o,b.tooltip=h,b.options=r.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return u},set:function(t){u=t}},height:{get:function(){return l},set:function(t){l=t}},staggerLabels:{get:function(){return p},set:function(t){p=t}},showXAxis:{get:function(){return s},set:function(t){s=t}},showYAxis:{get:function(){return f},set:function(t){f=t}},tooltipContent:{get:function(){return h},set:function(t){h=t}},noData:{get:function(){return v},set:function(t){v=t}},margin:{get:function(){return a},set:function(t){a.top=void 0!==t.top?t.top:a.top,a.right=void 0!==t.right?t.right:a.right,a.bottom=void 0!==t.bottom?t.bottom:a.bottom,a.left=void 0!==t.left?t.left:a.left}},duration:{get:function(){return m},set:function(t){m=t,y.reset(m),n.duration(m),i.duration(m),o.duration(m)}},color:{get:function(){return c},set:function(t){c=r.utils.getColor(t),n.color(c)}},rightAlignYAxis:{get:function(){return d},set:function(t){d=t,o.orient(t?"right":"left")}}}),r.utils.inheritOptions(b,n),r.utils.initOptions(b),b},r.models.bullet=function(){"use strict";var t={top:0,right:0,bottom:0,left:0},e="left",n=!1,i=function(t){return t.ranges},o=function(t){return t.markers?t.markers:[]},a=function(t){return t.markerLines?t.markerLines:[0]},u=function(t){return t.measures},l=function(t){return t.rangeLabels?t.rangeLabels:[]},c=function(t){return t.markerLabels?t.markerLabels:[]},s=function(t){return t.markerLineLabels?t.markerLineLabels:[]},f=function(t){return t.measureLabels?t.measureLabels:[]},d=[0],p=380,h=30,v=null,g=null,m=r.utils.getColor(["#1f77b4"]),y=d3.dispatch("elementMouseover","elementMouseout","elementMousemove"),b=["Maximum","Mean","Minimum"],x=["Max","Avg","Min"],w=1e3;function k(t,e){var n=t.slice();t.sort(function(t,r){var i=n.indexOf(t),o=n.indexOf(r);return d3.descending(e[i],e[o])})}function M(e){return e.each(function(e,g){var M=p-t.left-t.right,S=h-t.top-t.bottom;v=d3.select(this),r.utils.initSVG(v);var E=i.call(this,e,g).slice(),_=o.call(this,e,g).slice(),C=a.call(this,e,g).slice(),T=u.call(this,e,g).slice(),A=l.call(this,e,g).slice(),P=c.call(this,e,g).slice(),N=s.call(this,e,g).slice(),O=f.call(this,e,g).slice();k(A,E),k(P,_),k(N,C),k(O,T),E.sort(d3.descending),_.sort(d3.descending),C.sort(d3.descending),T.sort(d3.descending);var F=d3.scale.linear().domain(d3.extent(d3.merge([d,E]))).range(n?[M,0]:[0,M]);this.__chart__||d3.scale.linear().domain([0,1/0]).range(F.range()),this.__chart__=F,d3.min(E),d3.max(E),E[1];for(var L=v.selectAll("g.nv-wrap.nv-bullet").data([e]),D=L.enter().append("g").attr("class","nvd3 nv-wrap nv-bullet").append("g"),R=L.select("g"),I=(g=0,E.length);g<I;g++){var j="nv-range nv-range"+g;g<=2&&(j=j+" nv-range"+x[g]),D.append("rect").attr("class",j)}D.append("rect").attr("class","nv-measure"),L.attr("transform","translate("+t.left+","+t.top+")");var z=function(t){return Math.abs(F(t)-F(0))},W=function(t){return F(t<0?t:0)};for(g=0,I=E.length;g<I;g++){var B=E[g];R.select("rect.nv-range"+g).datum(B).attr("height",S).transition().duration(w).attr("width",z(B)).attr("x",W(B))}R.select("rect.nv-measure").style("fill",m).attr("height",S/3).attr("y",S/3).on("mouseover",function(){y.elementMouseover({value:T[0],label:O[0]||"Current",color:d3.select(this).style("fill")})}).on("mousemove",function(){y.elementMousemove({value:T[0],label:O[0]||"Current",color:d3.select(this).style("fill")})}).on("mouseout",function(){y.elementMouseout({value:T[0],label:O[0]||"Current",color:d3.select(this).style("fill")})}).transition().duration(w).attr("width",T<0?F(0)-F(T[0]):F(T[0])-F(0)).attr("x",W(T));var U=S/6,V=_.map(function(t,e){return{value:t,label:P[e]}});D.selectAll("path.nv-markerTriangle").data(V).enter().append("path").attr("class","nv-markerTriangle").attr("d","M0,"+U+"L"+U+","+-U+" "+-U+","+-U+"Z").on("mouseover",function(t){y.elementMouseover({value:t.value,label:t.label||"Previous",color:d3.select(this).style("fill"),pos:[F(t.value),S/2]})}).on("mousemove",function(t){y.elementMousemove({value:t.value,label:t.label||"Previous",color:d3.select(this).style("fill")})}).on("mouseout",function(t,e){y.elementMouseout({value:t.value,label:t.label||"Previous",color:d3.select(this).style("fill")})}),R.selectAll("path.nv-markerTriangle").data(V).transition().duration(w).attr("transform",function(t){return"translate("+F(t.value)+","+S/2+")"});var H=C.map(function(t,e){return{value:t,label:N[e]}});D.selectAll("line.nv-markerLine").data(H).enter().append("line").attr("cursor","").attr("class","nv-markerLine").attr("x1",function(t){return F(t.value)}).attr("y1","2").attr("x2",function(t){return F(t.value)}).attr("y2",S-2).on("mouseover",function(t){y.elementMouseover({value:t.value,label:t.label||"Previous",color:d3.select(this).style("fill"),pos:[F(t.value),S/2]})}).on("mousemove",function(t){y.elementMousemove({value:t.value,label:t.label||"Previous",color:d3.select(this).style("fill")})}).on("mouseout",function(t,e){y.elementMouseout({value:t.value,label:t.label||"Previous",color:d3.select(this).style("fill")})}),R.selectAll("line.nv-markerLine").data(H).transition().duration(w).attr("x1",function(t){return F(t.value)}).attr("x2",function(t){return F(t.value)}),L.selectAll(".nv-range").on("mouseover",function(t,e){var n=A[e]||b[e];y.elementMouseover({value:t,label:n,color:d3.select(this).style("fill")})}).on("mousemove",function(){y.elementMousemove({value:T[0],label:O[0]||"Previous",color:d3.select(this).style("fill")})}).on("mouseout",function(t,e){var n=A[e]||b[e];y.elementMouseout({value:t,label:n,color:d3.select(this).style("fill")})})}),M}return M.dispatch=y,M.options=r.utils.optionsFunc.bind(M),M._options=Object.create({},{ranges:{get:function(){return i},set:function(t){i=t}},markers:{get:function(){return o},set:function(t){o=t}},measures:{get:function(){return u},set:function(t){u=t}},forceX:{get:function(){return d},set:function(t){d=t}},width:{get:function(){return p},set:function(t){p=t}},height:{get:function(){return h},set:function(t){h=t}},tickFormat:{get:function(){return g},set:function(t){g=t}},duration:{get:function(){return w},set:function(t){w=t}},margin:{get:function(){return t},set:function(e){t.top=void 0!==e.top?e.top:t.top,t.right=void 0!==e.right?e.right:t.right,t.bottom=void 0!==e.bottom?e.bottom:t.bottom,t.left=void 0!==e.left?e.left:t.left}},orient:{get:function(){return e},set:function(t){n="right"==(e=t)||"bottom"==e}},color:{get:function(){return m},set:function(t){m=r.utils.getColor(t)}}}),r.utils.initOptions(M),M},r.models.bulletChart=function(){"use strict";var t=r.models.bullet(),e=r.models.tooltip(),n="left",i=!1,o={top:5,right:40,bottom:20,left:120},a=function(t){return t.ranges},u=function(t){return t.markers?t.markers:[]},l=function(t){return t.measures},c=null,s=55,f=null,d=null,p=null,h=d3.dispatch();function v(e){return e.each(function(n,p){var h=d3.select(this);r.utils.initSVG(h);var g=r.utils.availableWidth(c,h,o),m=s-o.top-o.bottom;if(v.update=function(){v(e)},v.container=this,!n||!a.call(this,n,p))return r.utils.noData(v,h),v;h.selectAll(".nv-noData").remove();var y=a.call(this,n,p).slice().sort(d3.descending),b=u.call(this,n,p).slice().sort(d3.descending),x=l.call(this,n,p).slice().sort(d3.descending),w=h.selectAll("g.nv-wrap.nv-bulletChart").data([n]),k=w.enter().append("g").attr("class","nvd3 nv-wrap nv-bulletChart").append("g"),M=w.select("g");k.append("g").attr("class","nv-bulletWrap"),k.append("g").attr("class","nv-titles"),w.attr("transform","translate("+o.left+","+o.top+")");var S=d3.scale.linear().domain([0,Math.max(y[0],b[0]||0,x[0])]).range(i?[g,0]:[0,g]),E=this.__chart__||d3.scale.linear().domain([0,1/0]).range(S.range());this.__chart__=S;var _=k.select(".nv-titles").append("g").attr("text-anchor","end").attr("transform","translate(-6,"+(s-o.top-o.bottom)/2+")");_.append("text").attr("class","nv-title").text(function(t){return t.title}),_.append("text").attr("class","nv-subtitle").attr("dy","1em").text(function(t){return t.subtitle}),t.width(g).height(m);var C=M.select(".nv-bulletWrap");d3.transition(C).call(t);var T=f||S.tickFormat(g/100),A=M.selectAll("g.nv-tick").data(S.ticks(d||g/50),function(t){return this.textContent||T(t)}),P=A.enter().append("g").attr("class","nv-tick").attr("transform",function(t){return"translate("+E(t)+",0)"}).style("opacity",1e-6);P.append("line").attr("y1",m).attr("y2",7*m/6),P.append("text").attr("text-anchor","middle").attr("dy","1em").attr("y",7*m/6).text(T);var N=d3.transition(A).transition().duration(t.duration()).attr("transform",function(t){return"translate("+S(t)+",0)"}).style("opacity",1);N.select("line").attr("y1",m).attr("y2",7*m/6),N.select("text").attr("y",7*m/6),d3.transition(A.exit()).transition().duration(t.duration()).attr("transform",function(t){return"translate("+S(t)+",0)"}).style("opacity",1e-6).remove()}),d3.timer.flush(),v}return e.duration(0).headerEnabled(!1),t.dispatch.on("elementMouseover.tooltip",function(t){t.series={key:t.label,value:t.value,color:t.color},e.data(t).hidden(!1)}),t.dispatch.on("elementMouseout.tooltip",function(t){e.hidden(!0)}),t.dispatch.on("elementMousemove.tooltip",function(t){e()}),v.bullet=t,v.dispatch=h,v.tooltip=e,v.options=r.utils.optionsFunc.bind(v),v._options=Object.create({},{ranges:{get:function(){return a},set:function(t){a=t}},markers:{get:function(){return u},set:function(t){u=t}},measures:{get:function(){return l},set:function(t){l=t}},width:{get:function(){return c},set:function(t){c=t}},height:{get:function(){return s},set:function(t){s=t}},tickFormat:{get:function(){return f},set:function(t){f=t}},ticks:{get:function(){return d},set:function(t){d=t}},noData:{get:function(){return p},set:function(t){p=t}},margin:{get:function(){return o},set:function(t){o.top=void 0!==t.top?t.top:o.top,o.right=void 0!==t.right?t.right:o.right,o.bottom=void 0!==t.bottom?t.bottom:o.bottom,o.left=void 0!==t.left?t.left:o.left}},orient:{get:function(){return n},set:function(t){i="right"==(n=t)||"bottom"==n}}}),r.utils.inheritOptions(v,t),r.utils.initOptions(v),v},r.models.candlestickBar=function(){"use strict";var t,e,n,i,o,a={top:0,right:0,bottom:0,left:0},u=null,l=null,c=Math.floor(1e4*Math.random()),s=d3.scale.linear(),f=d3.scale.linear(),d=function(t){return t.x},p=function(t){return t.y},h=function(t){return t.open},v=function(t){return t.close},g=function(t){return t.high},m=function(t){return t.low},y=[],b=[],x=!1,w=!0,k=r.utils.defaultColor(),M=!1,S=d3.dispatch("stateChange","changeState","renderEnd","chartClick","elementClick","elementDblClick","elementMouseover","elementMouseout","elementMousemove");function E(k){return k.each(function(k){t=d3.select(this);var M=r.utils.availableWidth(u,t,a),E=r.utils.availableHeight(l,t,a);r.utils.initSVG(t);var _=M/k[0].values.length*.45;s.domain(e||d3.extent(k[0].values.map(d).concat(y))),x?s.range(i||[.5*M/k[0].values.length,M*(k[0].values.length-.5)/k[0].values.length]):s.range(i||[5+_/2,M-_/2-5]),f.domain(n||[d3.min(k[0].values.map(m).concat(b)),d3.max(k[0].values.map(g).concat(b))]).range(o||[E,0]),s.domain()[0]===s.domain()[1]&&(s.domain()[0]?s.domain([s.domain()[0]-.01*s.domain()[0],s.domain()[1]+.01*s.domain()[1]]):s.domain([-1,1])),f.domain()[0]===f.domain()[1]&&(f.domain()[0]?f.domain([f.domain()[0]+.01*f.domain()[0],f.domain()[1]-.01*f.domain()[1]]):f.domain([-1,1]));var C=d3.select(this).selectAll("g.nv-wrap.nv-candlestickBar").data([k[0].values]),T=C.enter().append("g").attr("class","nvd3 nv-wrap nv-candlestickBar"),A=T.append("defs"),P=T.append("g"),N=C.select("g");P.append("g").attr("class","nv-ticks"),C.attr("transform","translate("+a.left+","+a.top+")"),t.on("click",function(t,e){S.chartClick({data:t,index:e,pos:d3.event,id:c})}),A.append("clipPath").attr("id","nv-chart-clip-path-"+c).append("rect"),C.select("#nv-chart-clip-path-"+c+" rect").attr("width",M).attr("height",E),N.attr("clip-path",w?"url(#nv-chart-clip-path-"+c+")":"");var O=C.select(".nv-ticks").selectAll(".nv-tick").data(function(t){return t});O.exit().remove();var F=O.enter().append("g");O.attr("class",function(t,e,n){return(h(t,e)>v(t,e)?"nv-tick negative":"nv-tick positive")+" nv-tick-"+n+"-"+e}),F.append("line").attr("class","nv-candlestick-lines").attr("transform",function(t,e){return"translate("+s(d(t,e))+",0)"}).attr("x1",0).attr("y1",function(t,e){return f(g(t,e))}).attr("x2",0).attr("y2",function(t,e){return f(m(t,e))}),F.append("rect").attr("class","nv-candlestick-rects nv-bars").attr("transform",function(t,e){return"translate("+(s(d(t,e))-_/2)+","+(f(p(t,e))-(h(t,e)>v(t,e)?f(v(t,e))-f(h(t,e)):0))+")"}).attr("x",0).attr("y",0).attr("width",_).attr("height",function(t,e){var n=h(t,e),r=v(t,e);return n>r?f(r)-f(n):f(n)-f(r)}),O.select(".nv-candlestick-lines").transition().attr("transform",function(t,e){return"translate("+s(d(t,e))+",0)"}).attr("x1",0).attr("y1",function(t,e){return f(g(t,e))}).attr("x2",0).attr("y2",function(t,e){return f(m(t,e))}),O.select(".nv-candlestick-rects").transition().attr("transform",function(t,e){return"translate("+(s(d(t,e))-_/2)+","+(f(p(t,e))-(h(t,e)>v(t,e)?f(v(t,e))-f(h(t,e)):0))+")"}).attr("x",0).attr("y",0).attr("width",_).attr("height",function(t,e){var n=h(t,e),r=v(t,e);return n>r?f(r)-f(n):f(n)-f(r)})}),E}return E.highlightPoint=function(e,n){E.clearHighlights(),t.select(".nv-candlestickBar .nv-tick-0-"+e).classed("hover",n)},E.clearHighlights=function(){t.select(".nv-candlestickBar .nv-tick.hover").classed("hover",!1)},E.dispatch=S,E.options=r.utils.optionsFunc.bind(E),E._options=Object.create({},{width:{get:function(){return u},set:function(t){u=t}},height:{get:function(){return l},set:function(t){l=t}},xScale:{get:function(){return s},set:function(t){s=t}},yScale:{get:function(){return f},set:function(t){f=t}},xDomain:{get:function(){return e},set:function(t){e=t}},yDomain:{get:function(){return n},set:function(t){n=t}},xRange:{get:function(){return i},set:function(t){i=t}},yRange:{get:function(){return o},set:function(t){o=t}},forceX:{get:function(){return y},set:function(t){y=t}},forceY:{get:function(){return b},set:function(t){b=t}},padData:{get:function(){return x},set:function(t){x=t}},clipEdge:{get:function(){return w},set:function(t){w=t}},id:{get:function(){return c},set:function(t){c=t}},interactive:{get:function(){return M},set:function(t){M=t}},x:{get:function(){return d},set:function(t){d=t}},y:{get:function(){return p},set:function(t){p=t}},open:{get:function(){return h()},set:function(t){h=t}},close:{get:function(){return v()},set:function(t){v=t}},high:{get:function(){return g},set:function(t){g=t}},low:{get:function(){return m},set:function(t){m=t}},margin:{get:function(){return a},set:function(t){a.top=null!=t.top?t.top:a.top,a.right=null!=t.right?t.right:a.right,a.bottom=null!=t.bottom?t.bottom:a.bottom,a.left=null!=t.left?t.left:a.left}},color:{get:function(){return k},set:function(t){k=r.utils.getColor(t)}}}),r.utils.initOptions(E),E},r.models.cumulativeLineChart=function(){"use strict";var t,e,n=r.models.line(),i=r.models.axis(),o=r.models.axis(),a=r.models.legend(),u=r.models.legend(),l=r.interactiveGuideline(),c=r.models.tooltip(),s={top:30,right:30,bottom:50,left:60},f=null,d=r.utils.defaultColor(),p=null,h=null,v=!0,g=!0,m=!0,y=!1,b=!0,x=!1,w=!0,k=n.id(),M=r.utils.state(),S=null,E=null,_=function(t){return t.average},C=d3.dispatch("stateChange","changeState","renderEnd"),T=250,A=!1;M.index=0,M.rescaleY=w,i.orient("bottom").tickPadding(7),o.orient(y?"right":"left"),c.valueFormatter(function(t,e){return o.tickFormat()(t,e)}).headerFormatter(function(t,e){return i.tickFormat()(t,e)}),u.updateState(!1);var P,N=d3.scale.linear(),O={i:0,x:0},F=r.utils.renderWatch(C,T),L=function(t){return function(){return{active:t.map(function(t){return!t.disabled}),index:O.i,rescaleY:w}}},D=function(t){return function(e){void 0!==e.index&&(O.i=e.index),void 0!==e.rescaleY&&(w=e.rescaleY),void 0!==e.active&&t.forEach(function(t,n){t.disabled=!e.active[n]})}};function R(c){return F.reset(),F.models(n),g&&F.models(i),m&&F.models(o),c.each(function(c){var E=d3.select(this);r.utils.initSVG(E),E.classed("nv-chart-"+k,!0);var F,z=r.utils.availableWidth(p,E,s),W=r.utils.availableHeight(h,E,s);if(R.update=function(){0===T?E.call(R):E.transition().duration(T).call(R)},R.container=this,M.setter(D(c),R.update).getter(L(c)).update(),M.disabled=c.map(function(t){return!!t.disabled}),!S)for(F in S={},M)M[F]instanceof Array?S[F]=M[F].slice(0):S[F]=M[F];var B=d3.behavior.drag().on("dragstart",function(t,e){d3.select(R.container).style("cursor","ew-resize")}).on("drag",function(t,e){O.x=d3.event.x,O.i=Math.round(N.invert(O.x)),J()}).on("dragend",function(t,e){d3.select(R.container).style("cursor","auto"),M.index=O.i,C.stateChange(M)});if(!(c&&c.length&&c.filter(function(t){return t.values.length}).length))return r.utils.noData(R,E),R;E.selectAll(".nv-noData").remove(),t=n.xScale(),e=n.yScale(),N.domain([0,c[0].values.length-1]).range([0,z]).clamp(!0),c=function(t,e){return I||(I=n.y()),e.map(function(e,n){if(!e.values)return e;var r=e.values[t];if(null==r)return e;var i=I(r,t);return Math.abs(i)<1e-5&&!A?(e.tempDisabled=!0,e):(e.tempDisabled=!1,e.values=e.values.map(function(t,e){return t.display={y:(I(t,e)-i)/i},t}),e)})}(O.i,c),void 0===P&&(P=j(c)),w?n.yDomain(null):(n.yDomain(P),n.clipEdge(!0));var U=x?"none":"all",V=E.selectAll("g.nv-wrap.nv-cumulativeLine").data([c]),H=V.enter().append("g").attr("class","nvd3 nv-wrap nv-cumulativeLine").append("g"),q=V.select("g");if(H.append("g").attr("class","nv-interactive"),H.append("g").attr("class","nv-x nv-axis").style("pointer-events","none"),H.append("g").attr("class","nv-y nv-axis"),H.append("g").attr("class","nv-background"),H.append("g").attr("class","nv-linesWrap").style("pointer-events",U),H.append("g").attr("class","nv-avgLinesWrap").style("pointer-events","none"),H.append("g").attr("class","nv-legendWrap"),H.append("g").attr("class","nv-controlsWrap"),v?(a.width(z),q.select(".nv-legendWrap").datum(c).call(a),f||a.height()===s.top||(s.top=a.height(),W=r.utils.availableHeight(h,E,s)),q.select(".nv-legendWrap").attr("transform","translate(0,"+-s.top+")")):q.select(".nv-legendWrap").selectAll("*").remove(),b){var Y=[{key:"Re-scale y-axis",disabled:!w}];u.width(140).color(["#444","#444","#444"]).rightAlign(!1).margin({top:5,right:0,bottom:5,left:20}),q.select(".nv-controlsWrap").datum(Y).attr("transform","translate(0,"+-s.top+")").call(u)}else q.select(".nv-controlsWrap").selectAll("*").remove();V.attr("transform","translate("+s.left+","+s.top+")"),y&&q.select(".nv-y.nv-axis").attr("transform","translate("+z+",0)");var G=c.filter(function(t){return t.tempDisabled});V.select(".tempDisabled").remove(),G.length&&V.append("text").attr("class","tempDisabled").attr("x",z/2).attr("y","-.71em").style("text-anchor","end").text(G.map(function(t){return t.key}).join(", ")+" values cannot be calculated for this time period."),x&&(l.width(z).height(W).margin({left:s.left,top:s.top}).svgContainer(E).xScale(t),V.select(".nv-interactive").call(l)),H.select(".nv-background").append("rect"),q.select(".nv-background rect").attr("width",z).attr("height",W),n.y(function(t){return t.display.y}).width(z).height(W).color(c.map(function(t,e){return t.color||d(t,e)}).filter(function(t,e){return!c[e].disabled&&!c[e].tempDisabled}));var $=q.select(".nv-linesWrap").datum(c.filter(function(t){return!t.disabled&&!t.tempDisabled}));$.call(n),c.forEach(function(t,e){t.seriesIndex=e});var X=c.filter(function(t){return!t.disabled&&!!_(t)}),K=q.select(".nv-avgLinesWrap").selectAll("line").data(X,function(t){return t.key}),Z=function(t){var n=e(_(t));return n<0?0:n>W?W:n};K.enter().append("line").style("stroke-width",2).style("stroke-dasharray","10,10").style("stroke",function(t,e){return n.color()(t,t.seriesIndex)}).attr("x1",0).attr("x2",z).attr("y1",Z).attr("y2",Z),K.style("stroke-opacity",function(t){var n=e(_(t));return n<0||n>W?0:1}).attr("x1",0).attr("x2",z).attr("y1",Z).attr("y2",Z),K.exit().remove();var Q=$.selectAll(".nv-indexLine").data([O]);function J(){Q.data([O]);var t=R.duration();R.duration(0),R.update(),R.duration(t)}Q.enter().append("rect").attr("class","nv-indexLine").attr("width",3).attr("x",-2).attr("fill","red").attr("fill-opacity",.5).style("pointer-events","all").call(B),Q.attr("transform",function(t){return"translate("+N(t.i)+",0)"}).attr("height",W),g&&(i.scale(t)._ticks(r.utils.calcTicksX(z/70,c)).tickSize(-W,0),q.select(".nv-x.nv-axis").attr("transform","translate(0,"+e.range()[0]+")"),q.select(".nv-x.nv-axis").call(i)),m&&(o.scale(e)._ticks(r.utils.calcTicksY(W/36,c)).tickSize(-z,0),q.select(".nv-y.nv-axis").call(o)),q.select(".nv-background rect").on("click",function(){O.x=d3.mouse(this)[0],O.i=Math.round(N.invert(O.x)),M.index=O.i,C.stateChange(M),J()}),n.dispatch.on("elementClick",function(t){O.i=t.pointIndex,O.x=N(O.i),M.index=O.i,C.stateChange(M),J()}),u.dispatch.on("legendClick",function(t,e){t.disabled=!t.disabled,w=!t.disabled,M.rescaleY=w,w||(P=j(c)),C.stateChange(M),R.update()}),a.dispatch.on("stateChange",function(t){for(var e in t)M[e]=t[e];C.stateChange(M),R.update()}),l.dispatch.on("elementMousemove",function(t){n.clearHighlights();var e,a,u,s=[];if(c.filter(function(t,e){return t.seriesIndex=e,!(t.disabled||t.tempDisabled)}).forEach(function(i,o){a=r.interactiveBisect(i.values,t.pointXValue,R.x()),n.highlightPoint(o,a,!0);var l=i.values[a];void 0!==l&&(void 0===e&&(e=l),void 0===u&&(u=R.xScale()(R.x()(l,a))),s.push({key:i.key,value:R.y()(l,a),color:d(i,i.seriesIndex)}))}),s.length>2){var f=R.yScale().invert(t.mouseY),p=.03*Math.abs(R.yScale().domain()[0]-R.yScale().domain()[1]),h=r.nearestValueIndex(s.map(function(t){return t.value}),f,p);null!==h&&(s[h].highlight=!0)}var v=i.tickFormat()(R.x()(e,a),a);l.tooltip.valueFormatter(function(t,e){return o.tickFormat()(t)}).data({value:v,series:s})(),l.renderGuideLine(u)}),l.dispatch.on("elementMouseout",function(t){n.clearHighlights()}),C.on("changeState",function(t){void 0!==t.disabled&&(c.forEach(function(e,n){e.disabled=t.disabled[n]}),M.disabled=t.disabled),void 0!==t.index&&(O.i=t.index,O.x=N(O.i),M.index=t.index,Q.data([O])),void 0!==t.rescaleY&&(w=t.rescaleY),R.update()})}),F.renderEnd("cumulativeLineChart immediate"),R}n.dispatch.on("elementMouseover.tooltip",function(t){var e={x:R.x()(t.point),y:R.y()(t.point),color:t.point.color};t.point=e,c.data(t).hidden(!1)}),n.dispatch.on("elementMouseout.tooltip",function(t){c.hidden(!0)});var I=null;function j(t){var e=t.filter(function(t){return!(t.disabled||t.tempDisabled)}).map(function(t,e){return d3.extent(t.values,function(t){return t.display.y})});return[d3.min(e,function(t){return t[0]}),d3.max(e,function(t){return t[1]})]}return R.dispatch=C,R.lines=n,R.legend=a,R.controls=u,R.xAxis=i,R.yAxis=o,R.interactiveLayer=l,R.state=M,R.tooltip=c,R.options=r.utils.optionsFunc.bind(R),R._options=Object.create({},{width:{get:function(){return p},set:function(t){p=t}},height:{get:function(){return h},set:function(t){h=t}},showControls:{get:function(){return b},set:function(t){b=t}},showLegend:{get:function(){return v},set:function(t){v=t}},average:{get:function(){return _},set:function(t){_=t}},defaultState:{get:function(){return S},set:function(t){S=t}},noData:{get:function(){return E},set:function(t){E=t}},showXAxis:{get:function(){return g},set:function(t){g=t}},showYAxis:{get:function(){return m},set:function(t){m=t}},noErrorCheck:{get:function(){return A},set:function(t){A=t}},rescaleY:{get:function(){return w},set:function(t){w=t,R.state.rescaleY=t}},margin:{get:function(){return s},set:function(t){void 0!==t.top&&(s.top=t.top,f=t.top),s.right=void 0!==t.right?t.right:s.right,s.bottom=void 0!==t.bottom?t.bottom:s.bottom,s.left=void 0!==t.left?t.left:s.left}},color:{get:function(){return d},set:function(t){d=r.utils.getColor(t),a.color(d)}},useInteractiveGuideline:{get:function(){return x},set:function(t){x=t,!0===t&&(R.interactive(!1),R.useVoronoi(!1))}},rightAlignYAxis:{get:function(){return y},set:function(t){y=t,o.orient(t?"right":"left")}},duration:{get:function(){return T},set:function(t){T=t,n.duration(T),i.duration(T),o.duration(T),F.reset(T)}}}),r.utils.inheritOptions(R,n),r.utils.initOptions(R),R},r.models.discreteBar=function(){"use strict";var t,e,n,i,o,a,u,l={top:0,right:0,bottom:0,left:0},c=960,s=500,f=Math.floor(1e4*Math.random()),d=d3.scale.ordinal(),p=d3.scale.linear(),h=function(t){return t.x},v=function(t){return t.y},g=[0],m=r.utils.defaultColor(),y=!1,b=d3.format(",.2f"),x=d3.dispatch("chartClick","elementClick","elementDblClick","elementMouseover","elementMouseout","elementMousemove","renderEnd"),w="discreteBar",k=250,M=r.utils.renderWatch(x,k);function S(f){return M.reset(),f.each(function(f){var k=c-l.left-l.right,S=s-l.top-l.bottom;t=d3.select(this),r.utils.initSVG(t),f.forEach(function(t,e){t.values.forEach(function(t){t.series=e})});var E=e&&n?[]:f.map(function(t){return t.values.map(function(t,e){return{x:h(t,e),y:v(t,e),y0:t.y0}})});d.domain(e||d3.merge(E).map(function(t){return t.x})).rangeBands(i||[0,k],.1),p.domain(n||d3.extent(d3.merge(E).map(function(t){return t.y}).concat(g))),y?p.range(o||[S-(p.domain()[0]<0?12:0),p.domain()[1]>0?12:0]):p.range(o||[S,0]),a=a||d,u=u||p.copy().range([p(0),p(0)]);var _=t.selectAll("g.nv-wrap.nv-discretebar").data([f]),C=_.enter().append("g").attr("class","nvd3 nv-wrap nv-discretebar").append("g");_.select("g"),C.append("g").attr("class","nv-groups"),_.attr("transform","translate("+l.left+","+l.top+")");var T=_.select(".nv-groups").selectAll(".nv-group").data(function(t){return t},function(t){return t.key});T.enter().append("g").style("stroke-opacity",1e-6).style("fill-opacity",1e-6),T.exit().watchTransition(M,"discreteBar: exit groups").style("stroke-opacity",1e-6).style("fill-opacity",1e-6).remove(),T.attr("class",function(t,e){return"nv-group nv-series-"+e}).classed("hover",function(t){return t.hover}),T.watchTransition(M,"discreteBar: groups").style("stroke-opacity",1).style("fill-opacity",.75);var A=T.selectAll("g.nv-bar").data(function(t){return t.values});A.exit().remove();var P=A.enter().append("g").attr("transform",function(t,e,n){return"translate("+(d(h(t,e))+.05*d.rangeBand())+", "+p(0)+")"}).on("mouseover",function(t,e){d3.select(this).classed("hover",!0),x.elementMouseover({data:t,index:e,color:d3.select(this).style("fill")})}).on("mouseout",function(t,e){d3.select(this).classed("hover",!1),x.elementMouseout({data:t,index:e,color:d3.select(this).style("fill")})}).on("mousemove",function(t,e){x.elementMousemove({data:t,index:e,color:d3.select(this).style("fill")})}).on("click",function(t,e){x.elementClick({data:t,index:e,color:d3.select(this).style("fill"),event:d3.event,element:this}),d3.event.stopPropagation()}).on("dblclick",function(t,e){x.elementDblClick({data:t,index:e,color:d3.select(this).style("fill")}),d3.event.stopPropagation()});P.append("rect").attr("height",0).attr("width",.9*d.rangeBand()/f.length),y?(P.append("text").attr("text-anchor","middle"),A.select("text").text(function(t,e){return b(v(t,e))}).watchTransition(M,"discreteBar: bars text").attr("x",.9*d.rangeBand()/2).attr("y",function(t,e){return v(t,e)<0?p(v(t,e))-p(0)+12:-4})):A.selectAll("text").remove(),A.attr("class",function(t,e){return v(t,e)<0?"nv-bar negative":"nv-bar positive"}).style("fill",function(t,e){return t.color||m(t,e)}).style("stroke",function(t,e){return t.color||m(t,e)}).select("rect").attr("class",w).watchTransition(M,"discreteBar: bars rect").attr("width",.9*d.rangeBand()/f.length),A.watchTransition(M,"discreteBar: bars").attr("transform",function(t,e){return"translate("+(d(h(t,e))+.05*d.rangeBand())+", "+(v(t,e)<0?p(0):p(0)-p(v(t,e))<1?p(0)-1:p(v(t,e)))+")"}).select("rect").attr("height",function(t,e){return Math.max(Math.abs(p(v(t,e))-p(0)),1)}),a=d.copy(),u=p.copy()}),M.renderEnd("discreteBar immediate"),S}return S.dispatch=x,S.options=r.utils.optionsFunc.bind(S),S._options=Object.create({},{width:{get:function(){return c},set:function(t){c=t}},height:{get:function(){return s},set:function(t){s=t}},forceY:{get:function(){return g},set:function(t){g=t}},showValues:{get:function(){return y},set:function(t){y=t}},x:{get:function(){return h},set:function(t){h=t}},y:{get:function(){return v},set:function(t){v=t}},xScale:{get:function(){return d},set:function(t){d=t}},yScale:{get:function(){return p},set:function(t){p=t}},xDomain:{get:function(){return e},set:function(t){e=t}},yDomain:{get:function(){return n},set:function(t){n=t}},xRange:{get:function(){return i},set:function(t){i=t}},yRange:{get:function(){return o},set:function(t){o=t}},valueFormat:{get:function(){return b},set:function(t){b=t}},id:{get:function(){return f},set:function(t){f=t}},rectClass:{get:function(){return w},set:function(t){w=t}},margin:{get:function(){return l},set:function(t){l.top=void 0!==t.top?t.top:l.top,l.right=void 0!==t.right?t.right:l.right,l.bottom=void 0!==t.bottom?t.bottom:l.bottom,l.left=void 0!==t.left?t.left:l.left}},color:{get:function(){return m},set:function(t){m=r.utils.getColor(t)}},duration:{get:function(){return k},set:function(t){k=t,M.reset(k)}}}),r.utils.initOptions(S),S},r.models.discreteBarChart=function(){"use strict";var t,e,n=r.models.discreteBar(),i=r.models.axis(),o=r.models.axis(),a=r.models.legend(),u=r.models.tooltip(),l={top:15,right:10,bottom:50,left:60},c=null,s=null,f=null,d=r.utils.getColor(),p=!1,h=!0,v=!0,g=!1,m=!1,y=!1,b=0,x=null,w=d3.dispatch("beforeUpdate","renderEnd"),k=250;i.orient("bottom").showMaxMin(!1).tickFormat(function(t){return t}),o.orient(g?"right":"left").tickFormat(d3.format(",.1f")),u.duration(0).headerEnabled(!1).valueFormatter(function(t,e){return o.tickFormat()(t,e)}).keyFormatter(function(t,e){return i.tickFormat()(t,e)});var M=r.utils.renderWatch(w,k);function S(u){return M.reset(),M.models(n),h&&M.models(i),v&&M.models(o),u.each(function(u){var d=d3.select(this);r.utils.initSVG(d);var x=r.utils.availableWidth(s,d,l),M=r.utils.availableHeight(f,d,l);if(S.update=function(){w.beforeUpdate(),d.transition().duration(k).call(S)},S.container=this,!(u&&u.length&&u.filter(function(t){return t.values.length}).length))return r.utils.noData(S,d),S;d.selectAll(".nv-noData").remove(),t=n.xScale(),e=n.yScale().clamp(!0);var E=d.selectAll("g.nv-wrap.nv-discreteBarWithAxes").data([u]),_=E.enter().append("g").attr("class","nvd3 nv-wrap nv-discreteBarWithAxes").append("g"),C=_.append("defs"),T=E.select("g");if(_.append("g").attr("class","nv-x nv-axis"),_.append("g").attr("class","nv-y nv-axis").append("g").attr("class","nv-zeroLine").append("line"),_.append("g").attr("class","nv-barsWrap"),_.append("g").attr("class","nv-legendWrap"),T.attr("transform","translate("+l.left+","+l.top+")"),p?(a.width(x),T.select(".nv-legendWrap").datum(u).call(a),c||a.height()===l.top||(l.top=a.height(),M=r.utils.availableHeight(f,d,l)),E.select(".nv-legendWrap").attr("transform","translate(0,"+-l.top+")")):T.select(".nv-legendWrap").selectAll("*").remove(),g&&T.select(".nv-y.nv-axis").attr("transform","translate("+x+",0)"),n.width(x).height(M),T.select(".nv-barsWrap").datum(u.filter(function(t){return!t.disabled})).transition().call(n),C.append("clipPath").attr("id","nv-x-label-clip-"+n.id()).append("rect"),T.select("#nv-x-label-clip-"+n.id()+" rect").attr("width",t.rangeBand()*(m?2:1)).attr("height",16).attr("x",-t.rangeBand()/(m?1:2)),h){i.scale(t)._ticks(r.utils.calcTicksX(x/100,u)).tickSize(-M,0),T.select(".nv-x.nv-axis").attr("transform","translate(0,"+(e.range()[0]+(n.showValues()&&e.domain()[0]<0?16:0))+")"),T.select(".nv-x.nv-axis").call(i);var A=T.select(".nv-x.nv-axis").selectAll("g");m&&A.selectAll("text").attr("transform",function(t,e,n){return"translate(0,"+(n%2==0?"5":"17")+")"}),b&&A.selectAll(".tick text").attr("transform","rotate("+b+" 0,0)").style("text-anchor",b>0?"start":"end"),y&&T.selectAll(".tick text").call(r.utils.wrapTicks,S.xAxis.rangeBand())}v&&(o.scale(e)._ticks(r.utils.calcTicksY(M/36,u)).tickSize(-x,0),T.select(".nv-y.nv-axis").call(o)),T.select(".nv-zeroLine line").attr("x1",0).attr("x2",g?-x:x).attr("y1",e(0)).attr("y2",e(0))}),M.renderEnd("discreteBar chart immediate"),S}return n.dispatch.on("elementMouseover.tooltip",function(t){t.series={key:S.x()(t.data),value:S.y()(t.data),color:t.color},u.data(t).hidden(!1)}),n.dispatch.on("elementMouseout.tooltip",function(t){u.hidden(!0)}),n.dispatch.on("elementMousemove.tooltip",function(t){u()}),S.dispatch=w,S.discretebar=n,S.legend=a,S.xAxis=i,S.yAxis=o,S.tooltip=u,S.options=r.utils.optionsFunc.bind(S),S._options=Object.create({},{width:{get:function(){return s},set:function(t){s=t}},height:{get:function(){return f},set:function(t){f=t}},showLegend:{get:function(){return p},set:function(t){p=t}},staggerLabels:{get:function(){return m},set:function(t){m=t}},rotateLabels:{get:function(){return b},set:function(t){b=t}},wrapLabels:{get:function(){return y},set:function(t){y=!!t}},showXAxis:{get:function(){return h},set:function(t){h=t}},showYAxis:{get:function(){return v},set:function(t){v=t}},noData:{get:function(){return x},set:function(t){x=t}},margin:{get:function(){return l},set:function(t){void 0!==t.top&&(l.top=t.top,c=t.top),l.right=void 0!==t.right?t.right:l.right,l.bottom=void 0!==t.bottom?t.bottom:l.bottom,l.left=void 0!==t.left?t.left:l.left}},duration:{get:function(){return k},set:function(t){k=t,M.reset(k),n.duration(k),i.duration(k),o.duration(k)}},color:{get:function(){return d},set:function(t){d=r.utils.getColor(t),n.color(d),a.color(d)}},rightAlignYAxis:{get:function(){return g},set:function(t){g=t,o.orient(t?"right":"left")}}}),r.utils.inheritOptions(S,n),r.utils.initOptions(S),S},r.models.distribution=function(){"use strict";var t,e={top:0,right:0,bottom:0,left:0},n=400,i=8,o="x",a=function(t){return t[o]},u=r.utils.defaultColor(),l=d3.scale.linear(),c=250,s=d3.dispatch("renderEnd"),f=r.utils.renderWatch(s,c);function d(n){return f.reset(),n.each(function(n){"x"===o?(e.left,e.right):(e.top,e.bottom);var c="x"==o?"y":"x",s=d3.select(this);r.utils.initSVG(s),t=t||l;var d=s.selectAll("g.nv-distribution").data([n]),p=(d.enter().append("g").attr("class","nvd3 nv-distribution").append("g"),d.select("g"));d.attr("transform","translate("+e.left+","+e.top+")");var h=p.selectAll("g.nv-dist").data(function(t){return t},function(t){return t.key});h.enter().append("g"),h.attr("class",function(t,e){return"nv-dist nv-series-"+e}).style("stroke",function(t,e){return u(t,e)});var v=h.selectAll("line.nv-dist"+o).data(function(t){return t.values});v.enter().append("line").attr(o+"1",function(e,n){return t(a(e,n))}).attr(o+"2",function(e,n){return t(a(e,n))}),f.transition(h.exit().selectAll("line.nv-dist"+o),"dist exit").attr(o+"1",function(t,e){return l(a(t,e))}).attr(o+"2",function(t,e){return l(a(t,e))}).style("stroke-opacity",0).remove(),v.attr("class",function(t,e){return"nv-dist"+o+" nv-dist"+o+"-"+e}).attr(c+"1",0).attr(c+"2",i),f.transition(v,"dist").attr(o+"1",function(t,e){return l(a(t,e))}).attr(o+"2",function(t,e){return l(a(t,e))}),t=l.copy()}),f.renderEnd("distribution immediate"),d}return d.options=r.utils.optionsFunc.bind(d),d.dispatch=s,d.margin=function(t){return arguments.length?(e.top=void 0!==t.top?t.top:e.top,e.right=void 0!==t.right?t.right:e.right,e.bottom=void 0!==t.bottom?t.bottom:e.bottom,e.left=void 0!==t.left?t.left:e.left,d):e},d.width=function(t){return arguments.length?(n=t,d):n},d.axis=function(t){return arguments.length?(o=t,d):o},d.size=function(t){return arguments.length?(i=t,d):i},d.getData=function(t){return arguments.length?(a=d3.functor(t),d):a},d.scale=function(t){return arguments.length?(l=t,d):l},d.color=function(t){return arguments.length?(u=r.utils.getColor(t),d):u},d.duration=function(t){return arguments.length?(c=t,f.reset(c),d):c},d},r.models.focus=function(t){"use strict";t=t||r.models.line();var e,n,i=r.models.axis(),o=r.models.axis(),a=d3.svg.brush(),u={top:10,right:0,bottom:30,left:0},l=r.utils.defaultColor(),c=null,s=70,f=!0,d=!1,p=!1,h=null,v=250,g=d3.dispatch("brush","onBrush","renderEnd"),m=!0;t.interactive(!1),t.pointActive(function(t){return!1});var y=r.utils.renderWatch(g,v);function b(x){return y.reset(),y.models(t),f&&y.models(i),d&&y.models(o),x.each(function(y){var x=d3.select(this);r.utils.initSVG(x);var w=r.utils.availableWidth(c,x,u),k=s-u.top-u.bottom;b.update=function(){0===v?x.call(b):x.transition().duration(v).call(b)},b.container=this,e=t.xScale(),n=t.yScale();var M=x.selectAll("g.nv-focus").data([y]),S=M.enter().append("g").attr("class","nvd3 nv-focus").append("g"),E=M.select("g");M.attr("transform","translate("+u.left+","+u.top+")"),S.append("g").attr("class","nv-background").append("rect"),S.append("g").attr("class","nv-x nv-axis"),S.append("g").attr("class","nv-y nv-axis"),S.append("g").attr("class","nv-contentWrap"),S.append("g").attr("class","nv-brushBackground"),S.append("g").attr("class","nv-x nv-brush"),p&&E.select(".nv-y.nv-axis").attr("transform","translate("+w+",0)"),E.select(".nv-background rect").attr("width",w).attr("height",k),t.width(w).height(k).color(y.map(function(t,e){return t.color||l(t,e)}).filter(function(t,e){return!y[e].disabled}));var _=E.select(".nv-contentWrap").datum(y.filter(function(t){return!t.disabled}));d3.transition(_).call(t),a.x(e).on("brush",function(){P(m)}),a.on("brushend",function(){m||g.onBrush(a.empty()?e.domain():a.extent())}),h&&a.extent(h);var C=E.select(".nv-brushBackground").selectAll("g").data([h||a.extent()]),T=C.enter().append("g");T.append("rect").attr("class","left").attr("x",0).attr("y",0).attr("height",k),T.append("rect").attr("class","right").attr("x",0).attr("y",0).attr("height",k);var A=E.select(".nv-x.nv-brush").call(a);function P(t){h=a.empty()?null:a.extent();var n=a.empty()?e.domain():a.extent();g.brush({extent:n,brush:a}),a.empty()||a.extent(h),C.data([a.empty()?e.domain():h]).each(function(t,n){var r=e(t[0])-e.range()[0],i=w-e(t[1]);d3.select(this).select(".left").attr("width",r<0?0:r),d3.select(this).select(".right").attr("x",e(t[1])).attr("width",i<0?0:i)}),t&&g.onBrush(n)}A.selectAll("rect").attr("height",k),A.selectAll(".resize").append("path").attr("d",function(t){var e=+("e"==t),n=e?1:-1,r=k/3;return"M"+.5*n+","+r+"A6,6 0 0 "+e+" "+6.5*n+","+(r+6)+"V"+(2*r-6)+"A6,6 0 0 "+e+" "+.5*n+","+2*r+"ZM"+2.5*n+","+(r+8)+"V"+(2*r-8)+"M"+4.5*n+","+(r+8)+"V"+(2*r-8)}),P(!0),E.select(".nv-background rect").attr("width",w).attr("height",k),f&&(i.scale(e)._ticks(r.utils.calcTicksX(w/100,y)).tickSize(-k,0),E.select(".nv-x.nv-axis").attr("transform","translate(0,"+n.range()[0]+")"),d3.transition(E.select(".nv-x.nv-axis")).call(i)),d&&(o.scale(n)._ticks(r.utils.calcTicksY(k/36,y)).tickSize(-w,0),d3.transition(E.select(".nv-y.nv-axis")).call(o)),E.select(".nv-x.nv-axis").attr("transform","translate(0,"+n.range()[0]+")")}),y.renderEnd("focus immediate"),b}return b.dispatch=g,b.content=t,b.brush=a,b.xAxis=i,b.yAxis=o,b.options=r.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return c},set:function(t){c=t}},height:{get:function(){return s},set:function(t){s=t}},showXAxis:{get:function(){return f},set:function(t){f=t}},showYAxis:{get:function(){return d},set:function(t){d=t}},brushExtent:{get:function(){return h},set:function(t){h=t}},syncBrushing:{get:function(){return m},set:function(t){m=t}},margin:{get:function(){return u},set:function(t){u.top=void 0!==t.top?t.top:u.top,u.right=void 0!==t.right?t.right:u.right,u.bottom=void 0!==t.bottom?t.bottom:u.bottom,u.left=void 0!==t.left?t.left:u.left}},duration:{get:function(){return v},set:function(e){v=e,y.reset(v),t.duration(v),i.duration(v),o.duration(v)}},color:{get:function(){return l},set:function(e){l=r.utils.getColor(e),t.color(l)}},interpolate:{get:function(){return t.interpolate()},set:function(e){t.interpolate(e)}},xTickFormat:{get:function(){return i.tickFormat()},set:function(t){i.tickFormat(t)}},yTickFormat:{get:function(){return o.tickFormat()},set:function(t){o.tickFormat(t)}},x:{get:function(){return t.x()},set:function(e){t.x(e)}},y:{get:function(){return t.y()},set:function(e){t.y(e)}},rightAlignYAxis:{get:function(){return p},set:function(t){p=t,o.orient(p?"right":"left")}}}),r.utils.inheritOptions(b,t),r.utils.initOptions(b),b},r.models.forceDirectedGraph=function(){"use strict";var t={top:2,right:0,bottom:2,left:0},e=400,n=32,i=null,o=d3.dispatch("renderEnd"),a=r.utils.getColor(["#000"]),u=r.models.tooltip(),l=null,c=.1,s=.9,f=30,d=-120,p=.1,h=.8,v=.1,g=5,m=function(t){},y=function(t){},b=d3.functor(0),x=d3.functor(0),w=r.utils.renderWatch(o);function k(o){return w.reset(),o.each(function(o){i=d3.select(this),r.utils.initSVG(i);var l=r.utils.availableWidth(e,i,t),b=r.utils.availableHeight(n,i,t);if(i.attr("width",l).attr("height",b),!(o&&o.links&&o.nodes))return r.utils.noData(k,i),k;i.selectAll(".nv-noData").remove(),i.selectAll("*").remove();var x=new Set;o.nodes.forEach(function(t){Object.keys(t).forEach(function(t){x.add(t)})});var w=d3.layout.force().nodes(o.nodes).links(o.links).size([l,b]).linkStrength(c).friction(s).linkDistance(f).charge(d).gravity(p).theta(h).alpha(v).start(),M=i.selectAll(".link").data(o.links).enter().append("line").attr("class","nv-force-link").style("stroke-width",function(t){return Math.sqrt(t.value)}),S=i.selectAll(".node").data(o.nodes).enter().append("g").attr("class","nv-force-node").call(w.drag);S.append("circle").attr("r",g).style("fill",function(t){return a(t)}).on("mouseover",function(t){i.select(".nv-series-"+t.seriesIndex+" .nv-distx-"+t.pointIndex).attr("y1",t.py),i.select(".nv-series-"+t.seriesIndex+" .nv-disty-"+t.pointIndex).attr("x2",t.px);var e=a(t);t.series=[],x.forEach(function(n){t.series.push({color:e,key:n,value:t[n]})}),u.data(t).hidden(!1)}).on("mouseout",function(t){u.hidden(!0)}),u.headerFormatter(function(t){return"Node"}),y(M),m(S),w.on("tick",function(){M.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y}),S.attr("transform",function(t){return"translate("+t.x+", "+t.y+")"})})}),k}return k.options=r.utils.optionsFunc.bind(k),k._options=Object.create({},{width:{get:function(){return e},set:function(t){e=t}},height:{get:function(){return n},set:function(t){n=t}},linkStrength:{get:function(){return c},set:function(t){c=t}},friction:{get:function(){return s},set:function(t){s=t}},linkDist:{get:function(){return f},set:function(t){f=t}},charge:{get:function(){return d},set:function(t){d=t}},gravity:{get:function(){return p},set:function(t){p=t}},theta:{get:function(){return h},set:function(t){h=t}},alpha:{get:function(){return v},set:function(t){v=t}},radius:{get:function(){return g},set:function(t){g=t}},x:{get:function(){return b},set:function(t){b=d3.functor(t)}},y:{get:function(){return x},set:function(t){x=d3.functor(t)}},margin:{get:function(){return t},set:function(e){t.top=void 0!==e.top?e.top:t.top,t.right=void 0!==e.right?e.right:t.right,t.bottom=void 0!==e.bottom?e.bottom:t.bottom,t.left=void 0!==e.left?e.left:t.left}},color:{get:function(){return a},set:function(t){a=r.utils.getColor(t)}},noData:{get:function(){return l},set:function(t){l=t}},nodeExtras:{get:function(){return m},set:function(t){m=t}},linkExtras:{get:function(){return y},set:function(t){y=t}}}),k.dispatch=o,k.tooltip=u,r.utils.initOptions(k),k},r.models.furiousLegend=function(){"use strict";var t={top:5,right:0,bottom:5,left:0},e=400,n=20,i=function(t){return t.key},o=function(t){return t},a=r.utils.getColor(),u=20,l=!0,c=28,s=!0,f=!0,d=!1,p=!1,h=d3.dispatch("legendClick","legendDblclick","legendMouseover","legendMouseout","stateChange"),v="classic";function g(m){function y(t,e){return"furious"!=v?"#000":p?t.disengaged?a(t,e):"#fff":p?void 0:t.disabled?a(t,e):"#fff"}function b(t,e){return p&&"furious"==v?t.disengaged?"#fff":a(t,e):t.disabled?"#fff":a(t,e)}return m.each(function(g){var m=e-t.left-t.right,x=d3.select(this);r.utils.initSVG(x);var w=x.selectAll("g.nv-legend").data([g]),k=(w.enter().append("g").attr("class","nvd3 nv-legend").append("g"),w.select("g"));w.attr("transform","translate("+t.left+","+t.top+")");var M,S=k.selectAll(".nv-series").data(function(t){return"furious"!=v?t:t.filter(function(t){return!!p||!t.disengaged})}),E=S.enter().append("g").attr("class","nv-series");"classic"==v?(E.append("circle").style("stroke-width",2).attr("class","nv-legend-symbol").attr("r",5),M=S.select("circle")):"furious"==v&&(E.append("rect").style("stroke-width",2).attr("class","nv-legend-symbol").attr("rx",3).attr("ry",3),M=S.select("rect"),E.append("g").attr("class","nv-check-box").property("innerHTML",'<path d="M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z" class="nv-box"></path><path d="M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511" class="nv-check"></path>').attr("transform","translate(-10,-8)scale(0.5)"),S.select(".nv-check-box").each(function(t,e){d3.select(this).selectAll("path").attr("stroke",y(t,e))})),E.append("text").attr("text-anchor","start").attr("class","nv-legend-text").attr("dy",".32em").attr("dx","8");var _,C=S.select("text.nv-legend-text");switch(S.on("mouseover",function(t,e){h.legendMouseover(t,e)}).on("mouseout",function(t,e){h.legendMouseout(t,e)}).on("click",function(t,e){h.legendClick(t,e);var n=S.data();f&&("classic"==v?d?(n.forEach(function(t){t.disabled=!0}),t.disabled=!1):(t.disabled=!t.disabled,n.every(function(t){return t.disabled})&&n.forEach(function(t){t.disabled=!1})):"furious"==v&&(p?(t.disengaged=!t.disengaged,t.userDisabled=null==t.userDisabled?!!t.disabled:t.userDisabled,t.disabled=t.disengaged||t.userDisabled):p||(t.disabled=!t.disabled,t.userDisabled=t.disabled,n.filter(function(t){return!t.disengaged}).every(function(t){return t.userDisabled})&&n.forEach(function(t){t.disabled=t.userDisabled=!1}))),h.stateChange({disabled:n.map(function(t){return!!t.disabled}),disengaged:n.map(function(t){return!!t.disengaged})}))}).on("dblclick",function(t,e){if(("furious"!=v||!p)&&(h.legendDblclick(t,e),f)){var n=S.data();n.forEach(function(t){t.disabled=!0,"furious"==v&&(t.userDisabled=t.disabled)}),t.disabled=!1,"furious"==v&&(t.userDisabled=t.disabled),h.stateChange({disabled:n.map(function(t){return!!t.disabled})})}}),S.classed("nv-disabled",function(t){return t.userDisabled}),S.exit().remove(),C.attr("fill",y).text(function(t){return o(i(t))}),v){case"furious":_=23;break;case"classic":_=20}if(l){var T=[];S.each(function(t,e){var n,a;if(o(i(t))&&o(i(t)).length>u){var l=o(i(t)).substring(0,u);n=d3.select(this).select("text").text(l+"..."),d3.select(this).append("svg:title").text(o(i(t)))}else n=d3.select(this).select("text");try{if((a=n.node().getComputedTextLength())<=0)throw Error()}catch(t){a=r.utils.calcApproxTextWidth(n)}T.push(a+c)});for(var A=0,P=0,N=[];P<m&&A<T.length;)N[A]=T[A],P+=T[A++];for(0===A&&(A=1);P>m&&A>1;){N=[],A--;for(var O=0;O<T.length;O++)T[O]>(N[O%A]||0)&&(N[O%A]=T[O]);P=N.reduce(function(t,e,n,r){return t+e})}for(var F=[],L=0,D=0;L<A;L++)F[L]=D,D+=N[L];S.attr("transform",function(t,e){return"translate("+F[e%A]+","+(5+Math.floor(e/A)*_)+")"}),s?k.attr("transform","translate("+(e-t.right-P)+","+t.top+")"):k.attr("transform","translate(0,"+t.top+")"),n=t.top+t.bottom+Math.ceil(T.length/A)*_}else{var R,I=5,j=5,z=0;S.attr("transform",function(n,r){var i=d3.select(this).select("text").node().getComputedTextLength()+c;return R=j,e<t.left+t.right+R+i&&(j=R=5,I+=_),(j+=i)>z&&(z=j),"translate("+R+","+I+")"}),k.attr("transform","translate("+(e-t.right-z)+","+t.top+")"),n=t.top+t.bottom+I+15}"furious"==v&&M.attr("width",function(t,e){return C[0][e].getComputedTextLength()+27}).attr("height",18).attr("y",-9).attr("x",-15),M.style("fill",b).style("stroke",function(t,e){return t.color||a(t,e)})}),g}return g.dispatch=h,g.options=r.utils.optionsFunc.bind(g),g._options=Object.create({},{width:{get:function(){return e},set:function(t){e=t}},height:{get:function(){return n},set:function(t){n=t}},key:{get:function(){return i},set:function(t){i=t}},keyFormatter:{get:function(){return o},set:function(t){o=t}},align:{get:function(){return l},set:function(t){l=t}},rightAlign:{get:function(){return s},set:function(t){s=t}},maxKeyLength:{get:function(){return u},set:function(t){u=t}},padding:{get:function(){return c},set:function(t){c=t}},updateState:{get:function(){return f},set:function(t){f=t}},radioButtonMode:{get:function(){return d},set:function(t){d=t}},expanded:{get:function(){return p},set:function(t){p=t}},vers:{get:function(){return v},set:function(t){v=t}},margin:{get:function(){return t},set:function(e){t.top=void 0!==e.top?e.top:t.top,t.right=void 0!==e.right?e.right:t.right,t.bottom=void 0!==e.bottom?e.bottom:t.bottom,t.left=void 0!==e.left?e.left:t.left}},color:{get:function(){return a},set:function(t){a=r.utils.getColor(t)}}}),r.utils.initOptions(g),g},r.models.historicalBar=function(){"use strict";var t,e,n,i,o={top:0,right:0,bottom:0,left:0},a=null,u=null,l=Math.floor(1e4*Math.random()),c=null,s=d3.scale.linear(),f=d3.scale.linear(),d=function(t){return t.x},p=function(t){return t.y},h=[],v=[0],g=!1,m=!0,y=r.utils.defaultColor(),b=d3.dispatch("chartClick","elementClick","elementDblClick","elementMouseover","elementMouseout","elementMousemove","renderEnd"),x=!0,w=r.utils.renderWatch(b,0);function k(M){return M.each(function(k){w.reset(),c=d3.select(this);var M=r.utils.availableWidth(a,c,o),S=r.utils.availableHeight(u,c,o);r.utils.initSVG(c),s.domain(t||d3.extent(k[0].values.map(d).concat(h))),g?s.range(n||[.5*M/k[0].values.length,M*(k[0].values.length-.5)/k[0].values.length]):s.range(n||[0,M]),f.domain(e||d3.extent(k[0].values.map(p).concat(v))).range(i||[S,0]),s.domain()[0]===s.domain()[1]&&(s.domain()[0]?s.domain([s.domain()[0]-.01*s.domain()[0],s.domain()[1]+.01*s.domain()[1]]):s.domain([-1,1])),f.domain()[0]===f.domain()[1]&&(f.domain()[0]?f.domain([f.domain()[0]+.01*f.domain()[0],f.domain()[1]-.01*f.domain()[1]]):f.domain([-1,1]));var E=c.selectAll("g.nv-wrap.nv-historicalBar-"+l).data([k[0].values]),_=E.enter().append("g").attr("class","nvd3 nv-wrap nv-historicalBar-"+l),C=_.append("defs"),T=_.append("g"),A=E.select("g");T.append("g").attr("class","nv-bars"),E.attr("transform","translate("+o.left+","+o.top+")"),c.on("click",function(t,e){b.chartClick({data:t,index:e,pos:d3.event,id:l})}),C.append("clipPath").attr("id","nv-chart-clip-path-"+l).append("rect"),E.select("#nv-chart-clip-path-"+l+" rect").attr("width",M).attr("height",S),A.attr("clip-path",m?"url(#nv-chart-clip-path-"+l+")":"");var P=E.select(".nv-bars").selectAll(".nv-bar").data(function(t){return t},function(t,e){return d(t,e)});P.exit().remove(),P.enter().append("rect").attr("x",0).attr("y",function(t,e){return r.utils.NaNtoZero(f(Math.max(0,p(t,e))))}).attr("height",function(t,e){return r.utils.NaNtoZero(Math.abs(f(p(t,e))-f(0)))}).attr("transform",function(t,e){return"translate("+(s(d(t,e))-M/k[0].values.length*.45)+",0)"}).on("mouseover",function(t,e){x&&(d3.select(this).classed("hover",!0),b.elementMouseover({data:t,index:e,color:d3.select(this).style("fill")}))}).on("mouseout",function(t,e){x&&(d3.select(this).classed("hover",!1),b.elementMouseout({data:t,index:e,color:d3.select(this).style("fill")}))}).on("mousemove",function(t,e){x&&b.elementMousemove({data:t,index:e,color:d3.select(this).style("fill")})}).on("click",function(t,e){x&&(b.elementClick({data:t,index:e,color:d3.select(this).style("fill"),event:d3.event,element:this}),d3.event.stopPropagation())}).on("dblclick",function(t,e){x&&(b.elementDblClick({data:t,index:e,color:d3.select(this).style("fill")}),d3.event.stopPropagation())}),P.attr("fill",function(t,e){return y(t,e)}).attr("class",function(t,e,n){return(p(t,e)<0?"nv-bar negative":"nv-bar positive")+" nv-bar-"+n+"-"+e}).watchTransition(w,"bars").attr("transform",function(t,e){return"translate("+(s(d(t,e))-M/k[0].values.length*.45)+",0)"}).attr("width",M/k[0].values.length*.9),P.watchTransition(w,"bars").attr("y",function(t,e){var n=p(t,e)<0?f(0):f(0)-f(p(t,e))<1?f(0)-1:f(p(t,e));return r.utils.NaNtoZero(n)}).attr("height",function(t,e){return r.utils.NaNtoZero(Math.max(Math.abs(f(p(t,e))-f(0)),1))})}),w.renderEnd("historicalBar immediate"),k}return k.highlightPoint=function(t,e){c.select(".nv-bars .nv-bar-0-"+t).classed("hover",e)},k.clearHighlights=function(){c.select(".nv-bars .nv-bar.hover").classed("hover",!1)},k.dispatch=b,k.options=r.utils.optionsFunc.bind(k),k._options=Object.create({},{width:{get:function(){return a},set:function(t){a=t}},height:{get:function(){return u},set:function(t){u=t}},forceX:{get:function(){return h},set:function(t){h=t}},forceY:{get:function(){return v},set:function(t){v=t}},padData:{get:function(){return g},set:function(t){g=t}},x:{get:function(){return d},set:function(t){d=t}},y:{get:function(){return p},set:function(t){p=t}},xScale:{get:function(){return s},set:function(t){s=t}},yScale:{get:function(){return f},set:function(t){f=t}},xDomain:{get:function(){return t},set:function(e){t=e}},yDomain:{get:function(){return e},set:function(t){e=t}},xRange:{get:function(){return n},set:function(t){n=t}},yRange:{get:function(){return i},set:function(t){i=t}},clipEdge:{get:function(){return m},set:function(t){m=t}},id:{get:function(){return l},set:function(t){l=t}},interactive:{get:function(){return x},set:function(t){x=t}},margin:{get:function(){return o},set:function(t){o.top=void 0!==t.top?t.top:o.top,o.right=void 0!==t.right?t.right:o.right,o.bottom=void 0!==t.bottom?t.bottom:o.bottom,o.left=void 0!==t.left?t.left:o.left}},color:{get:function(){return y},set:function(t){y=r.utils.getColor(t)}}}),r.utils.initOptions(k),k},r.models.historicalBarChart=function(t){"use strict";var e,n,i=t||r.models.historicalBar(),o=r.models.axis(),a=r.models.axis(),u=r.models.legend(),l=r.interactiveGuideline(),c=r.models.tooltip(),s={top:30,right:90,bottom:50,left:90},f=null,d=r.utils.defaultColor(),p=null,h=null,v=!1,g=!0,m=!0,y=!1,b=!1,x={},w=null,k=null,M=d3.dispatch("tooltipHide","stateChange","changeState","renderEnd"),S=250;o.orient("bottom").tickPadding(7),a.orient(y?"right":"left"),c.duration(0).headerEnabled(!1).valueFormatter(function(t,e){return a.tickFormat()(t,e)}).headerFormatter(function(t,e){return o.tickFormat()(t,e)});var E=r.utils.renderWatch(M,0);function _(t){return t.each(function(c){E.reset(),E.models(i),g&&E.models(o),m&&E.models(a);var k=d3.select(this);r.utils.initSVG(k);var C,T=r.utils.availableWidth(p,k,s),A=r.utils.availableHeight(h,k,s);if(_.update=function(){k.transition().duration(S).call(_)},_.container=this,x.disabled=c.map(function(t){return!!t.disabled}),!w)for(C in w={},x)x[C]instanceof Array?w[C]=x[C].slice(0):w[C]=x[C];if(!(c&&c.length&&c.filter(function(t){return t.values.length}).length))return r.utils.noData(_,k),_;k.selectAll(".nv-noData").remove(),e=i.xScale(),n=i.yScale();var P=k.selectAll("g.nv-wrap.nv-historicalBarChart").data([c]),N=P.enter().append("g").attr("class","nvd3 nv-wrap nv-historicalBarChart").append("g"),O=P.select("g");N.append("g").attr("class","nv-x nv-axis"),N.append("g").attr("class","nv-y nv-axis"),N.append("g").attr("class","nv-barsWrap"),N.append("g").attr("class","nv-legendWrap"),N.append("g").attr("class","nv-interactive"),v?(u.width(T),O.select(".nv-legendWrap").datum(c).call(u),f||u.height()===s.top||(s.top=u.height(),A=r.utils.availableHeight(h,k,s)),P.select(".nv-legendWrap").attr("transform","translate(0,"+-s.top+")")):O.select(".nv-legendWrap").selectAll("*").remove(),P.attr("transform","translate("+s.left+","+s.top+")"),y&&O.select(".nv-y.nv-axis").attr("transform","translate("+T+",0)"),b&&(l.width(T).height(A).margin({left:s.left,top:s.top}).svgContainer(k).xScale(e),P.select(".nv-interactive").call(l)),i.width(T).height(A).color(c.map(function(t,e){return t.color||d(t,e)}).filter(function(t,e){return!c[e].disabled})),O.select(".nv-barsWrap").datum(c.filter(function(t){return!t.disabled})).transition().call(i),g&&(o.scale(e)._ticks(r.utils.calcTicksX(T/100,c)).tickSize(-A,0),O.select(".nv-x.nv-axis").attr("transform","translate(0,"+n.range()[0]+")"),O.select(".nv-x.nv-axis").transition().call(o)),m&&(a.scale(n)._ticks(r.utils.calcTicksY(A/36,c)).tickSize(-T,0),O.select(".nv-y.nv-axis").transition().call(a)),l.dispatch.on("elementMousemove",function(t){i.clearHighlights();var e,n,u,s=[];c.filter(function(t,e){return t.seriesIndex=e,!t.disabled}).forEach(function(o,a){n=r.interactiveBisect(o.values,t.pointXValue,_.x()),i.highlightPoint(n,!0);var l=o.values[n];void 0!==l&&(void 0===e&&(e=l),void 0===u&&(u=_.xScale()(_.x()(l,n))),s.push({key:o.key,value:_.y()(l,n),color:d(o,o.seriesIndex),data:o.values[n]}))});var f=o.tickFormat()(_.x()(e,n));l.tooltip.valueFormatter(function(t,e){return a.tickFormat()(t)}).data({value:f,index:n,series:s})(),l.renderGuideLine(u)}),l.dispatch.on("elementMouseout",function(t){M.tooltipHide(),i.clearHighlights()}),u.dispatch.on("legendClick",function(e,n){e.disabled=!e.disabled,c.filter(function(t){return!t.disabled}).length||c.map(function(t){return t.disabled=!1,P.selectAll(".nv-series").classed("disabled",!1),t}),x.disabled=c.map(function(t){return!!t.disabled}),M.stateChange(x),t.transition().call(_)}),u.dispatch.on("legendDblclick",function(t){c.forEach(function(t){t.disabled=!0}),t.disabled=!1,x.disabled=c.map(function(t){return!!t.disabled}),M.stateChange(x),_.update()}),M.on("changeState",function(t){void 0!==t.disabled&&(c.forEach(function(e,n){e.disabled=t.disabled[n]}),x.disabled=t.disabled),_.update()})}),E.renderEnd("historicalBarChart immediate"),_}return i.dispatch.on("elementMouseover.tooltip",function(t){t.series={key:_.x()(t.data),value:_.y()(t.data),color:t.color},c.data(t).hidden(!1)}),i.dispatch.on("elementMouseout.tooltip",function(t){c.hidden(!0)}),i.dispatch.on("elementMousemove.tooltip",function(t){c()}),_.dispatch=M,_.bars=i,_.legend=u,_.xAxis=o,_.yAxis=a,_.interactiveLayer=l,_.tooltip=c,_.options=r.utils.optionsFunc.bind(_),_._options=Object.create({},{width:{get:function(){return p},set:function(t){p=t}},height:{get:function(){return h},set:function(t){h=t}},showLegend:{get:function(){return v},set:function(t){v=t}},showXAxis:{get:function(){return g},set:function(t){g=t}},showYAxis:{get:function(){return m},set:function(t){m=t}},defaultState:{get:function(){return w},set:function(t){w=t}},noData:{get:function(){return k},set:function(t){k=t}},margin:{get:function(){return s},set:function(t){void 0!==t.top&&(s.top=t.top,f=t.top),s.right=void 0!==t.right?t.right:s.right,s.bottom=void 0!==t.bottom?t.bottom:s.bottom,s.left=void 0!==t.left?t.left:s.left}},color:{get:function(){return d},set:function(t){d=r.utils.getColor(t),u.color(d),i.color(d)}},duration:{get:function(){return S},set:function(t){S=t,E.reset(S),a.duration(S),o.duration(S)}},rightAlignYAxis:{get:function(){return y},set:function(t){y=t,a.orient(t?"right":"left")}},useInteractiveGuideline:{get:function(){return b},set:function(t){b=t,!0===t&&_.interactive(!1)}}}),r.utils.inheritOptions(_,i),r.utils.initOptions(_),_},r.models.ohlcBarChart=function(){var t=r.models.historicalBarChart(r.models.ohlcBar());return t.useInteractiveGuideline(!0),t.interactiveLayer.tooltip.contentGenerator(function(e){var n=e.series[0].data;return'<h3 style="color: #'+(n.open<n.close?"2ca02c":"d62728")+'">'+e.value+"</h3><table><tr><td>open:</td><td>"+t.yAxis.tickFormat()(n.open)+"</td></tr><tr><td>close:</td><td>"+t.yAxis.tickFormat()(n.close)+"</td></tr><tr><td>high</td><td>"+t.yAxis.tickFormat()(n.high)+"</td></tr><tr><td>low:</td><td>"+t.yAxis.tickFormat()(n.low)+"</td></tr></table>"}),t},r.models.candlestickBarChart=function(){var t=r.models.historicalBarChart(r.models.candlestickBar());return t.useInteractiveGuideline(!0),t.interactiveLayer.tooltip.contentGenerator(function(e){var n=e.series[0].data;return'<h3 style="color: #'+(n.open<n.close?"2ca02c":"d62728")+'">'+e.value+"</h3><table><tr><td>open:</td><td>"+t.yAxis.tickFormat()(n.open)+"</td></tr><tr><td>close:</td><td>"+t.yAxis.tickFormat()(n.close)+"</td></tr><tr><td>high</td><td>"+t.yAxis.tickFormat()(n.high)+"</td></tr><tr><td>low:</td><td>"+t.yAxis.tickFormat()(n.low)+"</td></tr></table>"}),t},r.models.legend=function(){"use strict";var t={top:5,right:0,bottom:5,left:0},e=400,n=20,i=function(t){return t.key},o=function(t){return t},a=r.utils.getColor(),u=20,l=!0,c=32,s=!0,f=!0,d=!0,p=!1,h=!1,v=d3.dispatch("legendClick","legendDblclick","legendMouseover","legendMouseout","stateChange"),g="classic";function m(y){function b(t,e){return"furious"!=g?"#000":h?t.disengaged?"#000":"#fff":h?void 0:(t.color||(t.color=a(t,e)),t.disabled?t.color:"#fff")}function x(t,e){return h&&"furious"==g&&t.disengaged?"#eee":t.color||a(t,e)}function w(t,e){return h&&"furious"==g?1:t.disabled?0:1}return y.each(function(a){var m=e-t.left-t.right,y=d3.select(this);r.utils.initSVG(y);var k=y.selectAll("g.nv-legend").data([a]),M=k.enter().append("g").attr("class","nvd3 nv-legend").append("g"),S=k.select("g");s?k.attr("transform","translate("+-t.right+","+t.top+")"):k.attr("transform","translate("+t.left+","+t.top+")");var E,_,C=S.selectAll(".nv-series").data(function(t){return"furious"!=g?t:t.filter(function(t){return!!h||!t.disengaged})}),T=C.enter().append("g").attr("class","nv-series");switch(g){case"furious":_=23;break;case"classic":_=20}"classic"==g?(T.append("circle").style("stroke-width",2).attr("class","nv-legend-symbol").attr("r",5),E=C.select(".nv-legend-symbol")):"furious"==g&&(T.append("rect").style("stroke-width",2).attr("class","nv-legend-symbol").attr("rx",3).attr("ry",3),E=C.select(".nv-legend-symbol"),T.append("g").attr("class","nv-check-box").property("innerHTML",'<path d="M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z" class="nv-box"></path><path d="M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511" class="nv-check"></path>').attr("transform","translate(-10,-8)scale(0.5)"),C.select(".nv-check-box").each(function(t,e){d3.select(this).selectAll("path").attr("stroke",b(t,e))})),T.append("text").attr("text-anchor","start").attr("class","nv-legend-text").attr("dy",".32em").attr("dx","8");var A=C.select("text.nv-legend-text");C.on("mouseover",function(t,e){v.legendMouseover(t,e)}).on("mouseout",function(t,e){v.legendMouseout(t,e)}).on("click",function(t,e){v.legendClick(t,e);var n=C.data();f&&("classic"==g?p?(n.forEach(function(t){t.disabled=!0}),t.disabled=!1):(t.disabled=!t.disabled,n.every(function(t){return t.disabled})&&n.forEach(function(t){t.disabled=!1})):"furious"==g&&(h?(t.disengaged=!t.disengaged,t.userDisabled=null==t.userDisabled?!!t.disabled:t.userDisabled,t.disabled=t.disengaged||t.userDisabled):h||(t.disabled=!t.disabled,t.userDisabled=t.disabled,n.filter(function(t){return!t.disengaged}).every(function(t){return t.userDisabled})&&n.forEach(function(t){t.disabled=t.userDisabled=!1}))),v.stateChange({disabled:n.map(function(t){return!!t.disabled}),disengaged:n.map(function(t){return!!t.disengaged})}))}).on("dblclick",function(t,e){if(d){if("furious"==g&&h)return;if(v.legendDblclick(t,e),f){var n=C.data();n.forEach(function(t){t.disabled=!0,"furious"==g&&(t.userDisabled=t.disabled)}),t.disabled=!1,"furious"==g&&(t.userDisabled=t.disabled),v.stateChange({disabled:n.map(function(t){return!!t.disabled})})}}}),C.classed("nv-disabled",function(t){return t.userDisabled}),C.exit().remove(),A.attr("fill",b).text(function(t){return o(i(t))});var P=0;if(l){var N=[];C.each(function(t,e){var n,a;if(o(i(t))&&o(i(t)).length>u){var l=o(i(t)).substring(0,u);n=d3.select(this).select("text").text(l+"..."),d3.select(this).append("svg:title").text(o(i(t)))}else n=d3.select(this).select("text");try{if((a=n.node().getComputedTextLength())<=0)throw Error()}catch(t){a=r.utils.calcApproxTextWidth(n)}N.push(a+c)});var O=0,F=[];for(P=0;P<m&&O<N.length;)F[O]=N[O],P+=N[O++];for(0===O&&(O=1);P>m&&O>1;){F=[],O--;for(var L=0;L<N.length;L++)N[L]>(F[L%O]||0)&&(F[L%O]=N[L]);P=F.reduce(function(t,e,n,r){return t+e})}for(var D=[],R=0,I=0;R<O;R++)D[R]=I,I+=F[R];C.attr("transform",function(t,e){return"translate("+D[e%O]+","+(5+Math.floor(e/O)*_)+")"}),s?S.attr("transform","translate("+(e-t.right-P)+","+t.top+")"):S.attr("transform","translate(0,"+t.top+")"),n=t.top+t.bottom+Math.ceil(N.length/O)*_}else{var j,z=5,W=5,B=0;C.attr("transform",function(n,r){var i=d3.select(this).select("text").node().getComputedTextLength()+c;return j=W,e<t.left+t.right+j+i&&(W=j=5,z+=_),(W+=i)>B&&(B=W),P<j+B&&(P=j+B),"translate("+j+","+z+")"}),S.attr("transform","translate("+(e-t.right-B)+","+t.top+")"),n=t.top+t.bottom+z+15}"furious"==g&&(E.attr("width",function(t,e){return A[0][e].getComputedTextLength()+27}).attr("height",18).attr("y",-9).attr("x",-15),M.insert("rect",":first-child").attr("class","nv-legend-bg").attr("fill","#eee").attr("opacity",0),S.select(".nv-legend-bg").transition().duration(300).attr("x",-_).attr("width",P+_-12).attr("height",n+10).attr("y",-t.top-10).attr("opacity",h?1:0)),E.style("fill",x).style("fill-opacity",w).style("stroke",x)}),m}return m.dispatch=v,m.options=r.utils.optionsFunc.bind(m),m._options=Object.create({},{width:{get:function(){return e},set:function(t){e=t}},height:{get:function(){return n},set:function(t){n=t}},key:{get:function(){return i},set:function(t){i=t}},keyFormatter:{get:function(){return o},set:function(t){o=t}},align:{get:function(){return l},set:function(t){l=t}},maxKeyLength:{get:function(){return u},set:function(t){u=t}},rightAlign:{get:function(){return s},set:function(t){s=t}},padding:{get:function(){return c},set:function(t){c=t}},updateState:{get:function(){return f},set:function(t){f=t}},enableDoubleClick:{get:function(){return d},set:function(t){d=t}},radioButtonMode:{get:function(){return p},set:function(t){p=t}},expanded:{get:function(){return h},set:function(t){h=t}},vers:{get:function(){return g},set:function(t){g=t}},margin:{get:function(){return t},set:function(e){t.top=void 0!==e.top?e.top:t.top,t.right=void 0!==e.right?e.right:t.right,t.bottom=void 0!==e.bottom?e.bottom:t.bottom,t.left=void 0!==e.left?e.left:t.left}},color:{get:function(){return a},set:function(t){a=r.utils.getColor(t)}}}),r.utils.initOptions(m),m},r.models.line=function(){"use strict";var t,e,n=r.models.scatter(),i={top:0,right:0,bottom:0,left:0},o=960,a=500,u=null,l=1.5,c=r.utils.defaultColor(),s=function(t){return t.x},f=function(t){return t.y},d=function(t,e){return!isNaN(f(t,e))&&null!==f(t,e)},p=function(t){return t.area},h=!1,v="linear",g=250,m=d3.dispatch("elementClick","elementMouseover","elementMouseout","renderEnd");n.pointSize(16).pointDomain([16,256]);var y,b,x=r.utils.renderWatch(m,g);function w(g){return x.reset(),x.models(n),g.each(function(g){u=d3.select(this);var m=r.utils.availableWidth(o,u,i),w=r.utils.availableHeight(a,u,i);r.utils.initSVG(u),t=n.xScale(),e=n.yScale(),y=y||t,b=b||e;var k=u.selectAll("g.nv-wrap.nv-line").data([g]),M=k.enter().append("g").attr("class","nvd3 nv-wrap nv-line"),S=M.append("defs"),E=M.append("g"),_=k.select("g");E.append("g").attr("class","nv-groups"),E.append("g").attr("class","nv-scatterWrap"),k.attr("transform","translate("+i.left+","+i.top+")"),n.width(m).height(w);var C=k.select(".nv-scatterWrap");C.call(n),S.append("clipPath").attr("id","nv-edge-clip-"+n.id()).append("rect"),k.select("#nv-edge-clip-"+n.id()+" rect").attr("width",m).attr("height",w>0?w:0),_.attr("clip-path",h?"url(#nv-edge-clip-"+n.id()+")":""),C.attr("clip-path",h?"url(#nv-edge-clip-"+n.id()+")":"");var T=k.select(".nv-groups").selectAll(".nv-group").data(function(t){return t},function(t){return t.key});T.enter().append("g").style("stroke-opacity",1e-6).style("stroke-width",function(t){return t.strokeWidth||l}).style("fill-opacity",1e-6),T.exit().remove(),T.attr("class",function(t,e){return(t.classed||"")+" nv-group nv-series-"+e}).classed("hover",function(t){return t.hover}).style("fill",function(t,e){return c(t,e)}).style("stroke",function(t,e){return c(t,e)}),T.watchTransition(x,"line: groups").style("stroke-opacity",1).style("fill-opacity",function(t){return t.fillOpacity||.5});var A=T.selectAll("path.nv-area").data(function(t){return p(t)?[t]:[]});A.enter().append("path").attr("class","nv-area").attr("d",function(t){return d3.svg.area().interpolate(v).defined(d).x(function(t,e){return r.utils.NaNtoZero(y(s(t,e)))}).y0(function(t,e){return r.utils.NaNtoZero(b(f(t,e)))}).y1(function(t,n){return b(e.domain()[0]<=0?e.domain()[1]>=0?0:e.domain()[1]:e.domain()[0])}).apply(this,[t.values])}),T.exit().selectAll("path.nv-area").remove(),A.watchTransition(x,"line: areaPaths").attr("d",function(n){return d3.svg.area().interpolate(v).defined(d).x(function(e,n){return r.utils.NaNtoZero(t(s(e,n)))}).y0(function(t,n){return r.utils.NaNtoZero(e(f(t,n)))}).y1(function(t,n){return e(e.domain()[0]<=0?e.domain()[1]>=0?0:e.domain()[1]:e.domain()[0])}).apply(this,[n.values])});var P=T.selectAll("path.nv-line").data(function(t){return[t.values]});P.enter().append("path").attr("class","nv-line").attr("d",d3.svg.line().interpolate(v).defined(d).x(function(t,e){return r.utils.NaNtoZero(y(s(t,e)))}).y(function(t,e){return r.utils.NaNtoZero(b(f(t,e)))})),P.watchTransition(x,"line: linePaths").attr("d",d3.svg.line().interpolate(v).defined(d).x(function(e,n){return r.utils.NaNtoZero(t(s(e,n)))}).y(function(t,n){return r.utils.NaNtoZero(e(f(t,n)))})),y=t.copy(),b=e.copy()}),x.renderEnd("line immediate"),w}return w.dispatch=m,w.scatter=n,n.dispatch.on("elementClick",function(){m.elementClick.apply(this,arguments)}),n.dispatch.on("elementMouseover",function(){m.elementMouseover.apply(this,arguments)}),n.dispatch.on("elementMouseout",function(){m.elementMouseout.apply(this,arguments)}),w.options=r.utils.optionsFunc.bind(w),w._options=Object.create({},{width:{get:function(){return o},set:function(t){o=t}},height:{get:function(){return a},set:function(t){a=t}},defined:{get:function(){return d},set:function(t){d=t}},interpolate:{get:function(){return v},set:function(t){v=t}},clipEdge:{get:function(){return h},set:function(t){h=t}},margin:{get:function(){return i},set:function(t){i.top=void 0!==t.top?t.top:i.top,i.right=void 0!==t.right?t.right:i.right,i.bottom=void 0!==t.bottom?t.bottom:i.bottom,i.left=void 0!==t.left?t.left:i.left}},duration:{get:function(){return g},set:function(t){g=t,x.reset(g),n.duration(g)}},isArea:{get:function(){return p},set:function(t){p=d3.functor(t)}},x:{get:function(){return s},set:function(t){s=t,n.x(t)}},y:{get:function(){return f},set:function(t){f=t,n.y(t)}},color:{get:function(){return c},set:function(t){c=r.utils.getColor(t),n.color(c)}}}),r.utils.inheritOptions(w,n),r.utils.initOptions(w),w},r.models.lineChart=function(){"use strict";var t,e,n=r.models.line(),i=r.models.axis(),o=r.models.axis(),a=r.models.legend(),u=r.interactiveGuideline(),l=r.models.tooltip(),c=r.models.focus(r.models.line()),s={top:30,right:20,bottom:50,left:60},f=null,d=r.utils.defaultColor(),p=null,h=null,v=!0,g="top",m=!0,y=!0,b=!1,x=!1,w=!1,k=r.utils.state(),M=null,S=null,E=d3.dispatch("stateChange","changeState","renderEnd"),_=250;i.orient("bottom").tickPadding(7),o.orient(b?"right":"left"),n.clipEdge(!0).duration(0),l.valueFormatter(function(t,e){return o.tickFormat()(t,e)}).headerFormatter(function(t,e){return i.tickFormat()(t,e)}),u.tooltip.valueFormatter(function(t,e){return o.tickFormat()(t,e)}).headerFormatter(function(t,e){return i.tickFormat()(t,e)});var C=r.utils.renderWatch(E,_),T=function(t){return function(){return{active:t.map(function(t){return!t.disabled})}}},A=function(t){return function(e){void 0!==e.active&&t.forEach(function(t,n){t.disabled=!e.active[n]})}};function P(l){return C.reset(),C.models(n),m&&C.models(i),y&&C.models(o),l.each(function(l){var S=d3.select(this);r.utils.initSVG(S);var C,N=r.utils.availableWidth(p,S,s),O=r.utils.availableHeight(h,S,s)-(w?c.height():0);if(P.update=function(){0===_?S.call(P):S.transition().duration(_).call(P)},P.container=this,k.setter(A(l),P.update).getter(T(l)).update(),k.disabled=l.map(function(t){return!!t.disabled}),!M)for(C in M={},k)k[C]instanceof Array?M[C]=k[C].slice(0):M[C]=k[C];if(!(l&&l.length&&l.filter(function(t){return t.values.length}).length))return r.utils.noData(P,S),P;S.selectAll(".nv-noData").remove(),c.dispatch.on("onBrush",function(t){B(t)}),t=n.xScale(),e=n.yScale();var F=S.selectAll("g.nv-wrap.nv-lineChart").data([l]),L=F.enter().append("g").attr("class","nvd3 nv-wrap nv-lineChart").append("g"),D=F.select("g");L.append("g").attr("class","nv-legendWrap");var R=L.append("g").attr("class","nv-focus");R.append("g").attr("class","nv-background").append("rect"),R.append("g").attr("class","nv-x nv-axis"),R.append("g").attr("class","nv-y nv-axis"),R.append("g").attr("class","nv-linesWrap"),R.append("g").attr("class","nv-interactive"),L.append("g").attr("class","nv-focusWrap"),v?(a.width(N),D.select(".nv-legendWrap").datum(l).call(a),"bottom"===g?(s.bottom=i.height()+a.height(),O=r.utils.availableHeight(h,S,s),D.select(".nv-legendWrap").attr("transform","translate(0,"+(O+i.height())+")")):"top"===g&&(f||a.height()===s.top||(s.top=a.height(),O=r.utils.availableHeight(h,S,s)-(w?c.height():0)),F.select(".nv-legendWrap").attr("transform","translate(0,"+-s.top+")"))):D.select(".nv-legendWrap").selectAll("*").remove(),F.attr("transform","translate("+s.left+","+s.top+")"),b&&D.select(".nv-y.nv-axis").attr("transform","translate("+N+",0)"),x&&(u.width(N).height(O).margin({left:s.left,top:s.top}).svgContainer(S).xScale(t),F.select(".nv-interactive").call(u)),D.select(".nv-focus .nv-background rect").attr("width",N).attr("height",O),n.width(N).height(O).color(l.map(function(t,e){return t.color||d(t,e)}).filter(function(t,e){return!l[e].disabled}));var I=D.select(".nv-linesWrap").datum(l.filter(function(t){return!t.disabled}));function j(){m&&D.select(".nv-focus .nv-x.nv-axis").transition().duration(_).call(i)}function z(){y&&D.select(".nv-focus .nv-y.nv-axis").transition().duration(_).call(o)}if(m&&i.scale(t)._ticks(r.utils.calcTicksX(N/100,l)).tickSize(-O,0),y&&o.scale(e)._ticks(r.utils.calcTicksY(O/36,l)).tickSize(-N,0),D.select(".nv-focus .nv-x.nv-axis").attr("transform","translate(0,"+O+")"),w||null!==c.brush.extent()){c.width(N),D.select(".nv-focusWrap").style("display",w?"initial":"none").attr("transform","translate(0,"+(O+s.bottom+c.margin().top)+")").call(c);var W=c.brush.empty()?c.xDomain():c.brush.extent();null!==W&&B(W)}else I.call(n),j(),z();function B(t){D.select(".nv-focus .nv-linesWrap").datum(l.filter(function(t){return!t.disabled}).map(function(e,r){return{key:e.key,area:e.area,classed:e.classed,values:e.values.filter(function(e,r){return n.x()(e,r)>=t[0]&&n.x()(e,r)<=t[1]}),disableTooltip:e.disableTooltip}})).transition().duration(_).call(n),j(),z()}a.dispatch.on("stateChange",function(t){for(var e in t)k[e]=t[e];E.stateChange(k),P.update()}),u.dispatch.on("elementMousemove",function(e){n.clearHighlights();var i,a,s,f=[];if(l.filter(function(t,e){return t.seriesIndex=e,!t.disabled&&!t.disableTooltip}).forEach(function(o,u){var l=null!==c.brush.extent()?c.brush.empty()?c.xScale().domain():c.brush.extent():t.domain(),p=o.values.filter(function(t,e){return l[0]<=l[1]?n.x()(t,e)>=l[0]&&n.x()(t,e)<=l[1]:n.x()(t,e)>=l[1]&&n.x()(t,e)<=l[0]}),h=p[a=r.interactiveBisect(p,e.pointXValue,n.x())],v=P.y()(h,a);null!==v&&n.highlightPoint(u,a,!0),void 0!==h&&(void 0===i&&(i=h),void 0===s&&(s=P.xScale()(P.x()(h,a))),f.push({key:o.key,value:v,color:d(o,o.seriesIndex),data:h}))}),f.length>2){var p=P.yScale().invert(e.mouseY),h=.03*Math.abs(P.yScale().domain()[0]-P.yScale().domain()[1]),v=r.nearestValueIndex(f.map(function(t){return t.value}),p,h);null!==v&&(f[v].highlight=!0)}u.tooltip.valueFormatter(u.tooltip.valueFormatter()||function(t,e){return null==t?"N/A":o.tickFormat()(t)}).data({value:P.x()(i,a),index:a,series:f})(),u.renderGuideLine(s)}),u.dispatch.on("elementClick",function(t){var e,i=[];l.filter(function(t,e){return t.seriesIndex=e,!t.disabled}).forEach(function(n){var o=r.interactiveBisect(n.values,t.pointXValue,P.x()),a=n.values[o];if(void 0!==a){void 0===e&&(e=P.xScale()(P.x()(a,o)));var u=P.yScale()(P.y()(a,o));i.push({point:a,pointIndex:o,pos:[e,u],seriesIndex:n.seriesIndex,series:n})}}),n.dispatch.elementClick(i)}),u.dispatch.on("elementMouseout",function(t){n.clearHighlights()}),E.on("changeState",function(t){void 0!==t.disabled&&l.length===t.disabled.length&&(l.forEach(function(e,n){e.disabled=t.disabled[n]}),k.disabled=t.disabled),P.update()})}),C.renderEnd("lineChart immediate"),P}return n.dispatch.on("elementMouseover.tooltip",function(t){t.series.disableTooltip||l.data(t).hidden(!1)}),n.dispatch.on("elementMouseout.tooltip",function(t){l.hidden(!0)}),P.dispatch=E,P.lines=n,P.legend=a,P.focus=c,P.xAxis=i,P.x2Axis=c.xAxis,P.yAxis=o,P.y2Axis=c.yAxis,P.interactiveLayer=u,P.tooltip=l,P.state=k,P.dispatch=E,P.options=r.utils.optionsFunc.bind(P),P._options=Object.create({},{width:{get:function(){return p},set:function(t){p=t}},height:{get:function(){return h},set:function(t){h=t}},showLegend:{get:function(){return v},set:function(t){v=t}},legendPosition:{get:function(){return g},set:function(t){g=t}},showXAxis:{get:function(){return m},set:function(t){m=t}},showYAxis:{get:function(){return y},set:function(t){y=t}},defaultState:{get:function(){return M},set:function(t){M=t}},noData:{get:function(){return S},set:function(t){S=t}},focusEnable:{get:function(){return w},set:function(t){w=t}},focusHeight:{get:function(){return c.height()},set:function(t){c.height(t)}},focusShowAxisX:{get:function(){return c.showXAxis()},set:function(t){c.showXAxis(t)}},focusShowAxisY:{get:function(){return c.showYAxis()},set:function(t){c.showYAxis(t)}},brushExtent:{get:function(){return c.brushExtent()},set:function(t){c.brushExtent(t)}},focusMargin:{get:function(){return c.margin},set:function(t){void 0!==t.top&&(s.top=t.top,f=t.top),c.margin.right=void 0!==t.right?t.right:c.margin.right,c.margin.bottom=void 0!==t.bottom?t.bottom:c.margin.bottom,c.margin.left=void 0!==t.left?t.left:c.margin.left}},margin:{get:function(){return s},set:function(t){s.top=void 0!==t.top?t.top:s.top,s.right=void 0!==t.right?t.right:s.right,s.bottom=void 0!==t.bottom?t.bottom:s.bottom,s.left=void 0!==t.left?t.left:s.left}},duration:{get:function(){return _},set:function(t){_=t,C.reset(_),n.duration(_),c.duration(_),i.duration(_),o.duration(_)}},color:{get:function(){return d},set:function(t){d=r.utils.getColor(t),a.color(d),n.color(d),c.color(d)}},interpolate:{get:function(){return n.interpolate()},set:function(t){n.interpolate(t),c.interpolate(t)}},xTickFormat:{get:function(){return i.tickFormat()},set:function(t){i.tickFormat(t),c.xTickFormat(t)}},yTickFormat:{get:function(){return o.tickFormat()},set:function(t){o.tickFormat(t),c.yTickFormat(t)}},x:{get:function(){return n.x()},set:function(t){n.x(t),c.x(t)}},y:{get:function(){return n.y()},set:function(t){n.y(t),c.y(t)}},rightAlignYAxis:{get:function(){return b},set:function(t){b=t,o.orient(b?"right":"left")}},useInteractiveGuideline:{get:function(){return x},set:function(t){(x=t)&&(n.interactive(!1),n.useVoronoi(!1))}}}),r.utils.inheritOptions(P,n),r.utils.initOptions(P),P},r.models.lineWithFocusChart=function(){return r.models.lineChart().margin({bottom:30}).focusEnable(!0)},r.models.linePlusBarChart=function(){"use strict";var t,e,n,i,o,a,u,l=r.models.line(),c=r.models.line(),s=r.models.historicalBar(),f=r.models.historicalBar(),d=r.models.axis(),p=r.models.axis(),h=r.models.axis(),v=r.models.axis(),g=r.models.axis(),m=r.models.axis(),y=r.models.legend(),b=d3.svg.brush(),x=r.models.tooltip(),w={top:30,right:30,bottom:30,left:60},k=null,M={top:0,right:30,bottom:20,left:60},S=null,E=null,_=function(t){return t.x},C=function(t){return t.y},T=r.utils.defaultColor(),A=!0,P=!0,N=!1,O=!0,F=50,L=null,D=null,R=d3.dispatch("brush","stateChange","changeState"),I=0,j=r.utils.state(),z=null,W=" (left axis)",B=" (right axis)",U=!1;l.clipEdge(!0),c.interactive(!1),c.pointActive(function(t){return!1}),d.orient("bottom").tickPadding(5),h.orient("left"),v.orient("right"),p.orient("bottom").tickPadding(5),g.orient("left"),m.orient("right"),x.headerEnabled(!0).headerFormatter(function(t,e){return d.tickFormat()(t,e)});var V=function(t){return function(){return{active:t.map(function(t){return!t.disabled})}}},H=function(t){return function(e){void 0!==e.active&&t.forEach(function(t,n){t.disabled=!e.active[n]})}},q=function(t){return t.every(function(t){return t.disabled})};function Y(x){return x.each(function(x){var D=d3.select(this);r.utils.initSVG(D);var G,$=r.utils.availableWidth(S,D,w),X=r.utils.availableHeight(E,D,w)-(P?F:0),K=F-M.top-M.bottom;if(Y.update=function(){D.transition().duration(I).call(Y)},Y.container=this,j.setter(H(x),Y.update).getter(V(x)).update(),j.disabled=x.map(function(t){return!!t.disabled}),!z)for(G in z={},j)j[G]instanceof Array?z[G]=j[G].slice(0):z[G]=j[G];if(!(x&&x.length&&x.filter(function(t){return t.values.length}).length))return r.utils.noData(Y,D),Y;D.selectAll(".nv-noData").remove();var Z=x.filter(function(t){return!t.disabled&&t.bar}),Q=x.filter(function(t){return!t.bar});e=Z.length&&!U?s.xScale():l.xScale(),n=p.scale(),i=U?l.yScale():s.yScale(),o=U?s.yScale():l.yScale(),a=U?c.yScale():f.yScale(),u=U?f.yScale():c.yScale();var J=x.filter(function(t){return!t.disabled&&(U?!t.bar:t.bar)}).map(function(t){return t.values.map(function(t,e){return{x:_(t,e),y:C(t,e)}})}),tt=x.filter(function(t){return!t.disabled&&(U?t.bar:!t.bar)}).map(function(t){return t.values.map(function(t,e){return{x:_(t,e),y:C(t,e)}})});e.range([0,$]),n.domain(d3.extent(d3.merge(J.concat(tt)),function(t){return t.x})).range([0,$]);var et=D.selectAll("g.nv-wrap.nv-linePlusBar").data([x]),nt=et.enter().append("g").attr("class","nvd3 nv-wrap nv-linePlusBar").append("g"),rt=et.select("g");nt.append("g").attr("class","nv-legendWrap");var it=nt.append("g").attr("class","nv-focus");it.append("g").attr("class","nv-x nv-axis"),it.append("g").attr("class","nv-y1 nv-axis"),it.append("g").attr("class","nv-y2 nv-axis"),it.append("g").attr("class","nv-barsWrap"),it.append("g").attr("class","nv-linesWrap");var ot=nt.append("g").attr("class","nv-context");if(ot.append("g").attr("class","nv-x nv-axis"),ot.append("g").attr("class","nv-y1 nv-axis"),ot.append("g").attr("class","nv-y2 nv-axis"),ot.append("g").attr("class","nv-barsWrap"),ot.append("g").attr("class","nv-linesWrap"),ot.append("g").attr("class","nv-brushBackground"),ot.append("g").attr("class","nv-x nv-brush"),A){var at=y.align()?$/2:$,ut=y.align()?at:0;y.width(at),rt.select(".nv-legendWrap").datum(x.map(function(t){return t.originalKey=void 0===t.originalKey?t.key:t.originalKey,t.key=U?t.originalKey+(t.bar?B:W):t.originalKey+(t.bar?W:B),t})).call(y),k||y.height()===w.top||(w.top=y.height(),X=r.utils.availableHeight(E,D,w)-F),rt.select(".nv-legendWrap").attr("transform","translate("+ut+","+-w.top+")")}else rt.select(".nv-legendWrap").selectAll("*").remove();et.attr("transform","translate("+w.left+","+w.top+")"),rt.select(".nv-context").style("display",P?"initial":"none"),f.width($).height(K).color(x.map(function(t,e){return t.color||T(t,e)}).filter(function(t,e){return!x[e].disabled&&x[e].bar})),c.width($).height(K).color(x.map(function(t,e){return t.color||T(t,e)}).filter(function(t,e){return!x[e].disabled&&!x[e].bar}));var lt=rt.select(".nv-context .nv-barsWrap").datum(Z.length?Z:[{values:[]}]),ct=rt.select(".nv-context .nv-linesWrap").datum(q(Q)?[{values:[]}]:Q.filter(function(t){return!t.disabled}));rt.select(".nv-context").attr("transform","translate(0,"+(X+w.bottom+M.top)+")"),lt.transition().call(f),ct.transition().call(c),O&&(p._ticks(r.utils.calcTicksX($/100,x)).tickSize(-K,0),rt.select(".nv-context .nv-x.nv-axis").attr("transform","translate(0,"+a.range()[0]+")"),rt.select(".nv-context .nv-x.nv-axis").transition().call(p)),N&&(g.scale(a)._ticks(K/36).tickSize(-$,0),m.scale(u)._ticks(K/36).tickSize(Z.length?0:-$,0),rt.select(".nv-context .nv-y3.nv-axis").style("opacity",Z.length?1:0).attr("transform","translate(0,"+n.range()[0]+")"),rt.select(".nv-context .nv-y2.nv-axis").style("opacity",Q.length?1:0).attr("transform","translate("+n.range()[1]+",0)"),rt.select(".nv-context .nv-y1.nv-axis").transition().call(g),rt.select(".nv-context .nv-y2.nv-axis").transition().call(m)),b.x(n).on("brush",pt),L&&b.extent(L);var st=rt.select(".nv-brushBackground").selectAll("g").data([L||b.extent()]),ft=st.enter().append("g");ft.append("rect").attr("class","left").attr("x",0).attr("y",0).attr("height",K),ft.append("rect").attr("class","right").attr("x",0).attr("y",0).attr("height",K);var dt=rt.select(".nv-x.nv-brush").call(b);function pt(){L=b.empty()?null:b.extent(),t=b.empty()?n.domain():b.extent(),R.brush({extent:t,brush:b}),b.empty()||b.extent(L),st.data([b.empty()?n.domain():L]).each(function(t,e){var r=n(t[0])-n.range()[0],i=n.range()[1]-n(t[1]);d3.select(this).select(".left").attr("width",r<0?0:r),d3.select(this).select(".right").attr("x",n(t[1])).attr("width",i<0?0:i)}),s.width($).height(X).color(x.map(function(t,e){return t.color||T(t,e)}).filter(function(t,e){return!x[e].disabled&&x[e].bar})),l.width($).height(X).color(x.map(function(t,e){return t.color||T(t,e)}).filter(function(t,e){return!x[e].disabled&&!x[e].bar}));var a=rt.select(".nv-focus .nv-barsWrap").datum(Z.length?Z.map(function(e,n){return{key:e.key,values:e.values.filter(function(e,n){return s.x()(e,n)>=t[0]&&s.x()(e,n)<=t[1]})}}):[{values:[]}]),u=rt.select(".nv-focus .nv-linesWrap").datum(q(Q)?[{values:[]}]:Q.filter(function(t){return!t.disabled}).map(function(e,n){return{area:e.area,fillOpacity:e.fillOpacity,strokeWidth:e.strokeWidth,key:e.key,values:e.values.filter(function(e,n){return l.x()(e,n)>=t[0]&&l.x()(e,n)<=t[1]})}}));e=Z.length&&!U?s.xScale():l.xScale(),d.scale(e)._ticks(r.utils.calcTicksX($/100,x)).tickSize(-X,0),d.domain([Math.ceil(t[0]),Math.floor(t[1])]),rt.select(".nv-x.nv-axis").transition().duration(I).call(d),a.transition().duration(I).call(s),u.transition().duration(I).call(l),rt.select(".nv-focus .nv-x.nv-axis").attr("transform","translate(0,"+i.range()[0]+")"),h.scale(i)._ticks(r.utils.calcTicksY(X/36,x)).tickSize(-$,0),v.scale(o)._ticks(r.utils.calcTicksY(X/36,x)),U?v.tickSize(Q.length?0:-$,0):v.tickSize(Z.length?0:-$,0);var c=Z.length?1:0,f=Q.length&&!q(Q)?1:0,p=U?f:c,g=U?c:f;rt.select(".nv-focus .nv-y1.nv-axis").style("opacity",p),rt.select(".nv-focus .nv-y2.nv-axis").style("opacity",g).attr("transform","translate("+e.range()[1]+",0)"),rt.select(".nv-focus .nv-y1.nv-axis").transition().duration(I).call(h),rt.select(".nv-focus .nv-y2.nv-axis").transition().duration(I).call(v)}dt.selectAll("rect").attr("height",K),dt.selectAll(".resize").append("path").attr("d",function(t){var e=+("e"==t),n=e?1:-1,r=K/3;return"M"+.5*n+","+r+"A6,6 0 0 "+e+" "+6.5*n+","+(r+6)+"V"+(2*r-6)+"A6,6 0 0 "+e+" "+.5*n+","+2*r+"ZM"+2.5*n+","+(r+8)+"V"+(2*r-8)+"M"+4.5*n+","+(r+8)+"V"+(2*r-8)}),y.dispatch.on("stateChange",function(t){for(var e in t)j[e]=t[e];R.stateChange(j),Y.update()}),R.on("changeState",function(t){void 0!==t.disabled&&(x.forEach(function(e,n){e.disabled=t.disabled[n]}),j.disabled=t.disabled),Y.update()}),pt()}),Y}return l.dispatch.on("elementMouseover.tooltip",function(t){x.duration(100).valueFormatter(function(t,e){return(U?{main:h,focus:g}:{main:v,focus:m}).main.tickFormat()(t,e)}).data(t).hidden(!1)}),l.dispatch.on("elementMouseout.tooltip",function(t){x.hidden(!0)}),s.dispatch.on("elementMouseover.tooltip",function(t){t.value=Y.x()(t.data),t.series={value:Y.y()(t.data),color:t.color},x.duration(0).valueFormatter(function(t,e){return(U?{main:v,focus:m}:{main:h,focus:g}).main.tickFormat()(t,e)}).data(t).hidden(!1)}),s.dispatch.on("elementMouseout.tooltip",function(t){x.hidden(!0)}),s.dispatch.on("elementMousemove.tooltip",function(t){x()}),Y.dispatch=R,Y.legend=y,Y.lines=l,Y.lines2=c,Y.bars=s,Y.bars2=f,Y.xAxis=d,Y.x2Axis=p,Y.y1Axis=h,Y.y2Axis=v,Y.y3Axis=g,Y.y4Axis=m,Y.tooltip=x,Y.options=r.utils.optionsFunc.bind(Y),Y._options=Object.create({},{width:{get:function(){return S},set:function(t){S=t}},height:{get:function(){return E},set:function(t){E=t}},showLegend:{get:function(){return A},set:function(t){A=t}},brushExtent:{get:function(){return L},set:function(t){L=t}},noData:{get:function(){return D},set:function(t){D=t}},focusEnable:{get:function(){return P},set:function(t){P=t}},focusHeight:{get:function(){return F},set:function(t){F=t}},focusShowAxisX:{get:function(){return O},set:function(t){O=t}},focusShowAxisY:{get:function(){return N},set:function(t){N=t}},legendLeftAxisHint:{get:function(){return W},set:function(t){W=t}},legendRightAxisHint:{get:function(){return B},set:function(t){B=t}},margin:{get:function(){return w},set:function(t){void 0!==t.top&&(w.top=t.top,k=t.top),w.right=void 0!==t.right?t.right:w.right,w.bottom=void 0!==t.bottom?t.bottom:w.bottom,w.left=void 0!==t.left?t.left:w.left}},focusMargin:{get:function(){return M},set:function(t){M.top=void 0!==t.top?t.top:M.top,M.right=void 0!==t.right?t.right:M.right,M.bottom=void 0!==t.bottom?t.bottom:M.bottom,M.left=void 0!==t.left?t.left:M.left}},duration:{get:function(){return I},set:function(t){I=t}},color:{get:function(){return T},set:function(t){T=r.utils.getColor(t),y.color(T)}},x:{get:function(){return _},set:function(t){_=t,l.x(t),c.x(t),s.x(t),f.x(t)}},y:{get:function(){return C},set:function(t){C=t,l.y(t),c.y(t),s.y(t),f.y(t)}},switchYAxisOrder:{get:function(){return U},set:function(t){if(U!==t){var e=h;h=v,v=e;var n=g;g=m,m=n}U=t,h.orient("left"),v.orient("right"),g.orient("left"),m.orient("right")}}}),r.utils.inheritOptions(Y,l),r.utils.initOptions(Y),Y},r.models.multiBar=function(){"use strict";var t,e,n,i,o,a,u,l={top:0,right:0,bottom:0,left:0},c=960,s=500,f=d3.scale.ordinal(),d=d3.scale.linear(),p=Math.floor(1e4*Math.random()),h=null,v=function(t){return t.x},g=function(t){return t.y},m=[0],y=!0,b=!1,x="zero",w=r.utils.defaultColor(),k=!1,M=null,S=500,E=.1,_=.75,C=d3.dispatch("chartClick","elementClick","elementDblClick","elementMouseover","elementMouseout","elementMousemove","renderEnd"),T=r.utils.renderWatch(C,S),A=0;function P(N){return T.reset(),N.each(function(P){var N=c-l.left-l.right,O=s-l.top-l.bottom;h=d3.select(this),r.utils.initSVG(h);var F=0;if(k&&P.length&&(k=[{values:P[0].values.map(function(t){return{x:t.x,y:0,series:t.series,size:.01}})}]),b){var L=d3.layout.stack().offset(x).values(function(t){return t.values}).y(g)(!P.length&&k?k:P);L.forEach(function(t,e){t.nonStackable?(P[e].nonStackableSeries=F++,L[e]=P[e]):e>0&&L[e-1].nonStackable&&L[e].values.map(function(t,n){t.y0-=L[e-1].values[n].y,t.y1=t.y0+t.y})}),P=L}P.forEach(function(t,e){t.values.forEach(function(n){n.series=e,n.key=t.key})}),b&&P.length>0&&P[0].values.map(function(t,e){var n=0,r=0;P.map(function(t,i){if(!P[i].nonStackable){var o=t.values[e];o.size=Math.abs(o.y),o.y<0?(o.y1=r,r-=o.size):(o.y1=o.size+n,n+=o.size)}})});var D=e&&n?[]:P.map(function(t,e){return t.values.map(function(t,n){return{x:v(t,n),y:g(t,n),y0:t.y0,y1:t.y1,idx:e}})});f.domain(e||d3.merge(D).map(function(t){return t.x})).rangeBands(i||[0,N],E),d.domain(n||d3.extent(d3.merge(D).map(function(t){var e=t.y;return b&&!P[t.idx].nonStackable&&(e=t.y>0?t.y1:t.y1+t.y),e}).concat(m))).range(o||[O,0]),f.domain()[0]===f.domain()[1]&&(f.domain()[0]?f.domain([f.domain()[0]-.01*f.domain()[0],f.domain()[1]+.01*f.domain()[1]]):f.domain([-1,1])),d.domain()[0]===d.domain()[1]&&(d.domain()[0]?d.domain([d.domain()[0]+.01*d.domain()[0],d.domain()[1]-.01*d.domain()[1]]):d.domain([-1,1])),a=a||f,u=u||d;var R=h.selectAll("g.nv-wrap.nv-multibar").data([P]),I=R.enter().append("g").attr("class","nvd3 nv-wrap nv-multibar"),j=I.append("defs"),z=I.append("g"),W=R.select("g");z.append("g").attr("class","nv-groups"),R.attr("transform","translate("+l.left+","+l.top+")"),j.append("clipPath").attr("id","nv-edge-clip-"+p).append("rect"),R.select("#nv-edge-clip-"+p+" rect").attr("width",N).attr("height",O),W.attr("clip-path",y?"url(#nv-edge-clip-"+p+")":"");var B=R.select(".nv-groups").selectAll(".nv-group").data(function(t){return t},function(t,e){return e});B.enter().append("g").style("stroke-opacity",1e-6).style("fill-opacity",1e-6);var U=T.transition(B.exit().selectAll("rect.nv-bar"),"multibarExit",Math.min(100,S)).attr("y",function(t,e,n){var r=u(0)||0;return b&&P[t.series]&&!P[t.series].nonStackable&&(r=u(t.y0)),r}).attr("height",0).remove();U.delay&&U.delay(function(t,e){return e*(S/(A+1))-e}),B.attr("class",function(t,e){return"nv-group nv-series-"+e}).classed("hover",function(t){return t.hover}).style("fill",function(t,e){return w(t,e)}).style("stroke",function(t,e){return w(t,e)}),B.style("stroke-opacity",1).style("fill-opacity",_);var V=B.selectAll("rect.nv-bar").data(function(t){return k&&!P.length?k.values:t.values});V.exit().remove(),V.enter().append("rect").attr("class",function(t,e){return g(t,e)<0?"nv-bar negative":"nv-bar positive"}).attr("x",function(t,e,n){return b&&!P[n].nonStackable?0:n*f.rangeBand()/P.length}).attr("y",function(t,e,n){return u(b&&!P[n].nonStackable?t.y0:0)||0}).attr("height",0).attr("width",function(t,e,n){return f.rangeBand()/(b&&!P[n].nonStackable?1:P.length)}).attr("transform",function(t,e){return"translate("+f(v(t,e))+",0)"}),V.style("fill",function(t,e,n){return w(t,n,e)}).style("stroke",function(t,e,n){return w(t,n,e)}).on("mouseover",function(t,e,n){d3.select(this).classed("hover",!0),C.elementMouseover({data:t,index:e,series:P[n],color:d3.select(this).style("fill")})}).on("mouseout",function(t,e,n){d3.select(this).classed("hover",!1),C.elementMouseout({data:t,index:e,series:P[n],color:d3.select(this).style("fill")})}).on("mousemove",function(t,e,n){C.elementMousemove({data:t,index:e,series:P[n],color:d3.select(this).style("fill")})}).on("click",function(t,e,n){C.elementClick({data:t,index:e,series:P[n],color:d3.select(this).style("fill"),event:d3.event,element:this}),d3.event.stopPropagation()}).on("dblclick",function(t,e,n){C.elementDblClick({data:t,index:e,series:P[n],color:d3.select(this).style("fill")}),d3.event.stopPropagation()}),V.attr("class",function(t,e){return g(t,e)<0?"nv-bar negative":"nv-bar positive"}).attr("transform",function(t,e){return"translate("+f(v(t,e))+",0)"}),M&&(t||(t=P.map(function(){return!0})),V.style("fill",function(e,n,r){return d3.rgb(M(e,n)).darker(t.map(function(t,e){return e}).filter(function(e,n){return!t[n]})[r]).toString()}).style("stroke",function(e,n,r){return d3.rgb(M(e,n)).darker(t.map(function(t,e){return e}).filter(function(e,n){return!t[n]})[r]).toString()}));var H=V.watchTransition(T,"multibar",Math.min(250,S)).delay(function(t,e){return e*S/P[0].values.length});b?H.attr("y",function(t,e,n){return P[n].nonStackable?g(t,e)<0?d(0):d(0)-d(g(t,e))<-1?d(0)-1:d(g(t,e))||0:d(t.y1)}).attr("height",function(t,e,n){return P[n].nonStackable?Math.max(Math.abs(d(g(t,e))-d(0)),0)||0:Math.max(Math.abs(d(t.y+t.y0)-d(t.y0)),0)}).attr("x",function(t,e,n){var r=0;return P[n].nonStackable&&(r=t.series*f.rangeBand()/P.length,P.length!==F&&(r=P[n].nonStackableSeries*f.rangeBand()/(2*F))),r}).attr("width",function(t,e,n){if(P[n].nonStackable){var r=f.rangeBand()/F;return P.length!==F&&(r=f.rangeBand()/(2*F)),r}return f.rangeBand()}):H.attr("x",function(t,e){return t.series*f.rangeBand()/P.length}).attr("width",f.rangeBand()/P.length).attr("y",function(t,e){return g(t,e)<0?d(0):d(0)-d(g(t,e))<1?d(0)-1:d(g(t,e))||0}).attr("height",function(t,e){return Math.max(Math.abs(d(g(t,e))-d(0)),1)||0}),a=f.copy(),u=d.copy(),P[0]&&P[0].values&&(A=P[0].values.length)}),T.renderEnd("multibar immediate"),P}return P.dispatch=C,P.options=r.utils.optionsFunc.bind(P),P._options=Object.create({},{width:{get:function(){return c},set:function(t){c=t}},height:{get:function(){return s},set:function(t){s=t}},x:{get:function(){return v},set:function(t){v=t}},y:{get:function(){return g},set:function(t){g=t}},xScale:{get:function(){return f},set:function(t){f=t}},yScale:{get:function(){return d},set:function(t){d=t}},xDomain:{get:function(){return e},set:function(t){e=t}},yDomain:{get:function(){return n},set:function(t){n=t}},xRange:{get:function(){return i},set:function(t){i=t}},yRange:{get:function(){return o},set:function(t){o=t}},forceY:{get:function(){return m},set:function(t){m=t}},stacked:{get:function(){return b},set:function(t){b=t}},stackOffset:{get:function(){return x},set:function(t){x=t}},clipEdge:{get:function(){return y},set:function(t){y=t}},disabled:{get:function(){return t},set:function(e){t=e}},id:{get:function(){return p},set:function(t){p=t}},hideable:{get:function(){return k},set:function(t){k=t}},groupSpacing:{get:function(){return E},set:function(t){E=t}},fillOpacity:{get:function(){return _},set:function(t){_=t}},margin:{get:function(){return l},set:function(t){l.top=void 0!==t.top?t.top:l.top,l.right=void 0!==t.right?t.right:l.right,l.bottom=void 0!==t.bottom?t.bottom:l.bottom,l.left=void 0!==t.left?t.left:l.left}},duration:{get:function(){return S},set:function(t){S=t,T.reset(S)}},color:{get:function(){return w},set:function(t){w=r.utils.getColor(t)}},barColor:{get:function(){return M},set:function(t){M=t?r.utils.getColor(t):null}}}),r.utils.initOptions(P),P},r.models.multiBarChart=function(){"use strict";var t,e,n=r.models.multiBar(),i=r.models.axis(),o=r.models.axis(),a=r.interactiveGuideline(),u=r.models.legend(),l=r.models.legend(),c=r.models.tooltip(),s={top:30,right:20,bottom:50,left:60},f=null,d=null,p=null,h=r.utils.defaultColor(),v=!0,g={},m=!0,y=null,b=!0,x=!0,w=!1,k=!0,M=!1,S=!1,E=0,_=r.utils.state(),C=null,T=null,A=d3.dispatch("stateChange","changeState","renderEnd"),P=function(){return v?180:0},N=250,O=!1;_.stacked=!1,n.stacked(!1),i.orient("bottom").tickPadding(7).showMaxMin(!1).tickFormat(function(t){return t}),o.orient(w?"right":"left").tickFormat(d3.format(",.1f")),c.duration(0).valueFormatter(function(t,e){return o.tickFormat()(t,e)}).headerFormatter(function(t,e){return i.tickFormat()(t,e)}),a.tooltip.valueFormatter(function(t,e){return null==t?"N/A":o.tickFormat()(t,e)}).headerFormatter(function(t,e){return i.tickFormat()(t,e)}),a.tooltip.valueFormatter(function(t,e){return null==t?"N/A":o.tickFormat()(t,e)}).headerFormatter(function(t,e){return i.tickFormat()(t,e)}),a.tooltip.duration(0).valueFormatter(function(t,e){return o.tickFormat()(t,e)}).headerFormatter(function(t,e){return i.tickFormat()(t,e)}),l.updateState(!1);var F=r.utils.renderWatch(A),L=!1,D=function(t){return function(){return{active:t.map(function(t){return!t.disabled}),stacked:L}}},R=function(t){return function(e){void 0!==e.stacked&&(L=e.stacked),void 0!==e.active&&t.forEach(function(t,n){t.disabled=!e.active[n]})}};function I(T){return F.reset(),F.models(n),b&&F.models(i),x&&F.models(o),T.each(function(T){var F=d3.select(this);r.utils.initSVG(F);var j,z=r.utils.availableWidth(d,F,s),W=r.utils.availableHeight(p,F,s);if(I.update=function(){0===N?F.call(I):F.transition().duration(N).call(I)},I.container=this,_.setter(R(T),I.update).getter(D(T)).update(),_.disabled=T.map(function(t){return!!t.disabled}),!C)for(j in C={},_)_[j]instanceof Array?C[j]=_[j].slice(0):C[j]=_[j];if(!(T&&T.length&&T.filter(function(t){return t.values.length}).length))return r.utils.noData(I,F),I;F.selectAll(".nv-noData").remove(),t=n.xScale(),e=n.yScale();var B=F.selectAll("g.nv-wrap.nv-multiBarWithLegend").data([T]),U=B.enter().append("g").attr("class","nvd3 nv-wrap nv-multiBarWithLegend").append("g"),V=B.select("g");if(U.append("g").attr("class","nv-x nv-axis"),U.append("g").attr("class","nv-y nv-axis"),U.append("g").attr("class","nv-barsWrap"),U.append("g").attr("class","nv-legendWrap"),U.append("g").attr("class","nv-controlsWrap"),U.append("g").attr("class","nv-interactive"),m?"bottom"===y?(u.width(z-s.right),V.select(".nv-legendWrap").datum(T).call(u),s.bottom=i.height()+u.height(),W=r.utils.availableHeight(p,F,s),V.select(".nv-legendWrap").attr("transform","translate(0,"+(W+i.height())+")")):(u.width(z-P()),V.select(".nv-legendWrap").datum(T).call(u),f||u.height()===s.top||(s.top=u.height(),W=r.utils.availableHeight(p,F,s)),V.select(".nv-legendWrap").attr("transform","translate("+P()+","+-s.top+")")):V.select(".nv-legendWrap").selectAll("*").remove(),v){var H=[{key:g.grouped||"Grouped",disabled:n.stacked()},{key:g.stacked||"Stacked",disabled:!n.stacked()}];l.width(P()).color(["#444","#444","#444"]),V.select(".nv-controlsWrap").datum(H).attr("transform","translate(0,"+-s.top+")").call(l)}else V.select(".nv-controlsWrap").selectAll("*").remove();if(B.attr("transform","translate("+s.left+","+s.top+")"),w&&V.select(".nv-y.nv-axis").attr("transform","translate("+z+",0)"),n.disabled(T.map(function(t){return t.disabled})).width(z).height(W).color(T.map(function(t,e){return t.color||h(t,e)}).filter(function(t,e){return!T[e].disabled})),V.select(".nv-barsWrap").datum(T.filter(function(t){return!t.disabled})).call(n),b){i.scale(t)._ticks(r.utils.calcTicksX(z/100,T)).tickSize(-W,0),V.select(".nv-x.nv-axis").attr("transform","translate(0,"+e.range()[0]+")"),V.select(".nv-x.nv-axis").call(i);var q=V.select(".nv-x.nv-axis > g").selectAll("g");if(q.selectAll("line, text").style("opacity",1),M){var Y=function(t,e){return"translate("+t+","+e+")"};q.selectAll("text").attr("transform",function(t,e,n){return Y(0,n%2==0?5:17)});var G=d3.selectAll(".nv-x.nv-axis .nv-wrap g g text")[0].length;V.selectAll(".nv-x.nv-axis .nv-axisMaxMin text").attr("transform",function(t,e){return Y(0,0===e||G%2!=0?17:5)})}S&&V.selectAll(".tick text").call(r.utils.wrapTicks,I.xAxis.rangeBand()),k&&q.filter(function(t,e){return e%Math.ceil(T[0].values.length/(z/100))!=0}).selectAll("text, line").style("opacity",0),E&&q.selectAll(".tick text").attr("transform","rotate("+E+" 0,0)").style("text-anchor",E>0?"start":"end"),V.select(".nv-x.nv-axis").selectAll("g.nv-axisMaxMin text").style("opacity",1)}x&&(o.scale(e)._ticks(r.utils.calcTicksY(W/36,T)).tickSize(-z,0),V.select(".nv-y.nv-axis").call(o)),O&&(a.width(z).height(W).margin({left:s.left,top:s.top}).svgContainer(F).xScale(t),B.select(".nv-interactive").call(a)),u.dispatch.on("stateChange",function(t){for(var e in t)_[e]=t[e];A.stateChange(_),I.update()}),l.dispatch.on("legendClick",function(t,e){if(t.disabled){switch(H=H.map(function(t){return t.disabled=!0,t}),t.disabled=!1,t.key){case"Grouped":case g.grouped:n.stacked(!1);break;case"Stacked":case g.stacked:n.stacked(!0)}_.stacked=n.stacked(),A.stateChange(_),I.update()}}),A.on("changeState",function(t){void 0!==t.disabled&&(T.forEach(function(e,n){e.disabled=t.disabled[n]}),_.disabled=t.disabled),void 0!==t.stacked&&(n.stacked(t.stacked),_.stacked=t.stacked,L=t.stacked),I.update()}),O?(a.dispatch.on("elementMousemove",function(e){if(null!=e.pointXValue){var n,r,i,o,u=[];T.filter(function(t,e){return t.seriesIndex=e,!t.disabled}).forEach(function(a,l){r=t.domain().indexOf(e.pointXValue);var c=a.values[r];void 0!==c&&(o=c.x,void 0===n&&(n=c),void 0===i&&(i=e.mouseX),u.push({key:a.key,value:I.y()(c,r),color:h(a,a.seriesIndex),data:a.values[r]}))}),a.tooltip.data({value:o,index:r,series:u})(),a.renderGuideLine(i)}}),a.dispatch.on("elementMouseout",function(t){a.tooltip.hidden(!0)})):(n.dispatch.on("elementMouseover.tooltip",function(t){t.value=I.x()(t.data),t.series={key:t.data.key,value:I.y()(t.data),color:t.color},c.data(t).hidden(!1)}),n.dispatch.on("elementMouseout.tooltip",function(t){c.hidden(!0)}),n.dispatch.on("elementMousemove.tooltip",function(t){c()}))}),F.renderEnd("multibarchart immediate"),I}return I.dispatch=A,I.multibar=n,I.legend=u,I.controls=l,I.xAxis=i,I.yAxis=o,I.state=_,I.tooltip=c,I.interactiveLayer=a,I.options=r.utils.optionsFunc.bind(I),I._options=Object.create({},{width:{get:function(){return d},set:function(t){d=t}},height:{get:function(){return p},set:function(t){p=t}},showLegend:{get:function(){return m},set:function(t){m=t}},legendPosition:{get:function(){return y},set:function(t){y=t}},showControls:{get:function(){return v},set:function(t){v=t}},controlLabels:{get:function(){return g},set:function(t){g=t}},showXAxis:{get:function(){return b},set:function(t){b=t}},showYAxis:{get:function(){return x},set:function(t){x=t}},defaultState:{get:function(){return C},set:function(t){C=t}},noData:{get:function(){return T},set:function(t){T=t}},reduceXTicks:{get:function(){return k},set:function(t){k=t}},rotateLabels:{get:function(){return E},set:function(t){E=t}},staggerLabels:{get:function(){return M},set:function(t){M=t}},wrapLabels:{get:function(){return S},set:function(t){S=!!t}},margin:{get:function(){return s},set:function(t){void 0!==t.top&&(s.top=t.top,f=t.top),s.right=void 0!==t.right?t.right:s.right,s.bottom=void 0!==t.bottom?t.bottom:s.bottom,s.left=void 0!==t.left?t.left:s.left}},duration:{get:function(){return N},set:function(t){N=t,n.duration(N),i.duration(N),o.duration(N),F.reset(N)}},color:{get:function(){return h},set:function(t){h=r.utils.getColor(t),u.color(h)}},rightAlignYAxis:{get:function(){return w},set:function(t){w=t,o.orient(w?"right":"left")}},useInteractiveGuideline:{get:function(){return O},set:function(t){O=t}},barColor:{get:function(){return n.barColor},set:function(t){n.barColor(t),u.color(function(t,e){return d3.rgb("#ccc").darker(1.5*e).toString()})}}}),r.utils.inheritOptions(I,n),r.utils.initOptions(I),I},r.models.multiBarHorizontal=function(){"use strict";var t,e,n,i,o,a,u,l={top:0,right:0,bottom:0,left:0},c=960,s=500,f=Math.floor(1e4*Math.random()),d=null,p=d3.scale.ordinal(),h=d3.scale.linear(),v=function(t){return t.x},g=function(t){return t.y},m=function(t){return t.yErr},y=[0],b=r.utils.defaultColor(),x=null,w=!1,k=!1,M=!1,S=60,E=.1,_=.75,C=d3.format(",.2f"),T=250,A=d3.dispatch("chartClick","elementClick","elementDblClick","elementMouseover","elementMouseout","elementMousemove","renderEnd"),P=r.utils.renderWatch(A,T);function N(f){return P.reset(),f.each(function(f){var T=c-l.left-l.right,N=s-l.top-l.bottom;d=d3.select(this),r.utils.initSVG(d),w&&(f=d3.layout.stack().offset("zero").values(function(t){return t.values}).y(g)(f)),f.forEach(function(t,e){t.values.forEach(function(n){n.series=e,n.key=t.key})}),w&&f[0].values.map(function(t,e){var n=0,r=0;f.map(function(t){var i=t.values[e];i.size=Math.abs(i.y),i.y<0?(i.y1=r-i.size,r-=i.size):(i.y1=n,n+=i.size)})});var O=e&&n?[]:f.map(function(t){return t.values.map(function(t,e){return{x:v(t,e),y:g(t,e),y0:t.y0,y1:t.y1}})});p.domain(e||d3.merge(O).map(function(t){return t.x})).rangeBands(i||[0,N],E),h.domain(n||d3.extent(d3.merge(O).map(function(t){return w?t.y>0?t.y1+t.y:t.y1:t.y}).concat(y))),k&&!w?h.range(o||[h.domain()[0]<0?S:0,T-(h.domain()[1]>0?S:0)]):h.range(o||[0,T]),a=a||p,u=u||d3.scale.linear().domain(h.domain()).range([h(0),h(0)]);var F=d3.select(this).selectAll("g.nv-wrap.nv-multibarHorizontal").data([f]),L=F.enter().append("g").attr("class","nvd3 nv-wrap nv-multibarHorizontal"),D=(L.append("defs"),L.append("g"));F.select("g"),D.append("g").attr("class","nv-groups"),F.attr("transform","translate("+l.left+","+l.top+")");var R=F.select(".nv-groups").selectAll(".nv-group").data(function(t){return t},function(t,e){return e});R.enter().append("g").style("stroke-opacity",1e-6).style("fill-opacity",1e-6),R.exit().watchTransition(P,"multibarhorizontal: exit groups").style("stroke-opacity",1e-6).style("fill-opacity",1e-6).remove(),R.attr("class",function(t,e){return"nv-group nv-series-"+e}).classed("hover",function(t){return t.hover}).style("fill",function(t,e){return b(t,e)}).style("stroke",function(t,e){return b(t,e)}),R.watchTransition(P,"multibarhorizontal: groups").style("stroke-opacity",1).style("fill-opacity",_);var I=R.selectAll("g.nv-bar").data(function(t){return t.values});I.exit().remove();var j=I.enter().append("g").attr("transform",function(t,e,n){return"translate("+u(w?t.y0:0)+","+(w?0:n*p.rangeBand()/f.length+p(v(t,e)))+")"});j.append("rect").attr("width",0).attr("height",p.rangeBand()/(w?1:f.length)),I.on("mouseover",function(t,e){d3.select(this).classed("hover",!0),A.elementMouseover({data:t,index:e,color:d3.select(this).style("fill")})}).on("mouseout",function(t,e){d3.select(this).classed("hover",!1),A.elementMouseout({data:t,index:e,color:d3.select(this).style("fill")})}).on("mouseout",function(t,e){A.elementMouseout({data:t,index:e,color:d3.select(this).style("fill")})}).on("mousemove",function(t,e){A.elementMousemove({data:t,index:e,color:d3.select(this).style("fill")})}).on("click",function(t,e){A.elementClick({data:t,index:e,color:d3.select(this).style("fill"),event:d3.event,element:this}),d3.event.stopPropagation()}).on("dblclick",function(t,e){A.elementDblClick({data:t,index:e,color:d3.select(this).style("fill")}),d3.event.stopPropagation()}),m(f[0],0)&&(j.append("polyline"),I.select("polyline").attr("fill","none").attr("points",function(t,e){var n=m(t,e),r=.8*p.rangeBand()/(2*(w?1:f.length));return[[(n=(n=n.length?n:[-Math.abs(n),Math.abs(n)]).map(function(n){return h(n+(g(t,e)<0?0:g(t,e)))-h(0)}))[0],-r],[n[0],r],[n[0],0],[n[1],0],[n[1],-r],[n[1],r]].map(function(t){return t.join(",")}).join(" ")}).attr("transform",function(t,e){return"translate(0, "+p.rangeBand()/(2*(w?1:f.length))+")"})),j.append("text"),k&&!w?(I.select("text").attr("text-anchor",function(t,e){return g(t,e)<0?"end":"start"}).attr("y",p.rangeBand()/(2*f.length)).attr("dy",".32em").text(function(t,e){var n=C(g(t,e)),r=m(t,e);return void 0===r?n:r.length?n+"+"+C(Math.abs(r[1]))+"-"+C(Math.abs(r[0])):n+"±"+C(Math.abs(r))}),I.watchTransition(P,"multibarhorizontal: bars").select("text").attr("x",function(t,e){return g(t,e)<0?-4:h(g(t,e))-h(0)+4})):I.selectAll("text").text(""),M&&!w?(j.append("text").classed("nv-bar-label",!0),I.select("text.nv-bar-label").attr("text-anchor",function(t,e){return g(t,e)<0?"start":"end"}).attr("y",p.rangeBand()/(2*f.length)).attr("dy",".32em").text(function(t,e){return v(t,e)}),I.watchTransition(P,"multibarhorizontal: bars").select("text.nv-bar-label").attr("x",function(t,e){return g(t,e)<0?h(0)-h(g(t,e))+4:-4})):I.selectAll("text.nv-bar-label").text(""),I.attr("class",function(t,e){return g(t,e)<0?"nv-bar negative":"nv-bar positive"}),x&&(t||(t=f.map(function(){return!0})),I.style("fill",function(e,n,r){return d3.rgb(x(e,n)).darker(t.map(function(t,e){return e}).filter(function(e,n){return!t[n]})[r]).toString()}).style("stroke",function(e,n,r){return d3.rgb(x(e,n)).darker(t.map(function(t,e){return e}).filter(function(e,n){return!t[n]})[r]).toString()})),w?I.watchTransition(P,"multibarhorizontal: bars").attr("transform",function(t,e){return"translate("+h(t.y1)+","+p(v(t,e))+")"}).select("rect").attr("width",function(t,e){return Math.abs(h(g(t,e)+t.y0)-h(t.y0))||0}).attr("height",p.rangeBand()):I.watchTransition(P,"multibarhorizontal: bars").attr("transform",function(t,e){return"translate("+(g(t,e)<0?h(g(t,e)):h(0))+","+(t.series*p.rangeBand()/f.length+p(v(t,e)))+")"}).select("rect").attr("height",p.rangeBand()/f.length).attr("width",function(t,e){return Math.max(Math.abs(h(g(t,e))-h(0)),1)||0}),a=p.copy(),u=h.copy()}),P.renderEnd("multibarHorizontal immediate"),N}return N.dispatch=A,N.options=r.utils.optionsFunc.bind(N),N._options=Object.create({},{width:{get:function(){return c},set:function(t){c=t}},height:{get:function(){return s},set:function(t){s=t}},x:{get:function(){return v},set:function(t){v=t}},y:{get:function(){return g},set:function(t){g=t}},yErr:{get:function(){return m},set:function(t){m=t}},xScale:{get:function(){return p},set:function(t){p=t}},yScale:{get:function(){return h},set:function(t){h=t}},xDomain:{get:function(){return e},set:function(t){e=t}},yDomain:{get:function(){return n},set:function(t){n=t}},xRange:{get:function(){return i},set:function(t){i=t}},yRange:{get:function(){return o},set:function(t){o=t}},forceY:{get:function(){return y},set:function(t){y=t}},stacked:{get:function(){return w},set:function(t){w=t}},showValues:{get:function(){return k},set:function(t){k=t}},disabled:{get:function(){return t},set:function(e){t=e}},id:{get:function(){return f},set:function(t){f=t}},valueFormat:{get:function(){return C},set:function(t){C=t}},valuePadding:{get:function(){return S},set:function(t){S=t}},groupSpacing:{get:function(){return E},set:function(t){E=t}},fillOpacity:{get:function(){return _},set:function(t){_=t}},margin:{get:function(){return l},set:function(t){l.top=void 0!==t.top?t.top:l.top,l.right=void 0!==t.right?t.right:l.right,l.bottom=void 0!==t.bottom?t.bottom:l.bottom,l.left=void 0!==t.left?t.left:l.left}},duration:{get:function(){return T},set:function(t){T=t,P.reset(T)}},color:{get:function(){return b},set:function(t){b=r.utils.getColor(t)}},barColor:{get:function(){return x},set:function(t){x=t?r.utils.getColor(t):null}}}),r.utils.initOptions(N),N},r.models.multiBarHorizontalChart=function(){"use strict";var t,e,n=r.models.multiBarHorizontal(),i=r.models.axis(),o=r.models.axis(),a=r.models.legend().height(30),u=r.models.legend().height(30),l=r.models.tooltip(),c={top:30,right:20,bottom:50,left:60},s=null,f=null,d=null,p=r.utils.defaultColor(),h=!0,v="top",g={},m=!0,y="top",b=!0,x=!0,w=!1,k=r.utils.state(),M=null,S=null,E=d3.dispatch("stateChange","changeState","renderEnd"),_=function(){return h?180:0},C=250;k.stacked=!1,n.stacked(w),i.orient("left").tickPadding(5).showMaxMin(!1).tickFormat(function(t){return t}),o.orient("bottom").tickFormat(d3.format(",.1f")),l.duration(0).valueFormatter(function(t,e){return o.tickFormat()(t,e)}).headerFormatter(function(t,e){return i.tickFormat()(t,e)}),u.updateState(!1);var T=function(t){return function(){return{active:t.map(function(t){return!t.disabled}),stacked:w}}},A=function(t){return function(e){void 0!==e.stacked&&(w=e.stacked),void 0!==e.active&&t.forEach(function(t,n){t.disabled=!e.active[n]})}},P=r.utils.renderWatch(E,C);function N(l){return P.reset(),P.models(n),b&&P.models(i),x&&P.models(o),l.each(function(l){var S=d3.select(this);r.utils.initSVG(S);var P,O=r.utils.availableWidth(f,S,c),F=r.utils.availableHeight(d,S,c);if(N.update=function(){S.transition().duration(C).call(N)},N.container=this,w=n.stacked(),k.setter(A(l),N.update).getter(T(l)).update(),k.disabled=l.map(function(t){return!!t.disabled}),!M)for(P in M={},k)k[P]instanceof Array?M[P]=k[P].slice(0):M[P]=k[P];if(!(l&&l.length&&l.filter(function(t){return t.values.length}).length))return r.utils.noData(N,S),N;S.selectAll(".nv-noData").remove(),t=n.xScale(),e=n.yScale().clamp(!0);var L=S.selectAll("g.nv-wrap.nv-multiBarHorizontalChart").data([l]),D=L.enter().append("g").attr("class","nvd3 nv-wrap nv-multiBarHorizontalChart").append("g"),R=L.select("g");if(D.append("g").attr("class","nv-x nv-axis"),D.append("g").attr("class","nv-y nv-axis").append("g").attr("class","nv-zeroLine").append("line"),D.append("g").attr("class","nv-barsWrap"),D.append("g").attr("class","nv-legendWrap"),D.append("g").attr("class","nv-controlsWrap"),m?(a.width(O-_()),R.select(".nv-legendWrap").datum(l).call(a),"bottom"===y?(c.bottom=i.height()+a.height(),F=r.utils.availableHeight(d,S,c),R.select(".nv-legendWrap").attr("transform","translate("+_()+","+(F+i.height())+")")):"top"===y&&(s||a.height()===c.top||(c.top=a.height(),F=r.utils.availableHeight(d,S,c)),R.select(".nv-legendWrap").attr("transform","translate("+_()+","+-c.top+")"))):R.select(".nv-legendWrap").selectAll("*").remove(),h){var I=[{key:g.grouped||"Grouped",disabled:n.stacked()},{key:g.stacked||"Stacked",disabled:!n.stacked()}];u.width(_()).color(["#444","#444","#444"]),"bottom"===v?(c.bottom=i.height()+a.height(),F=r.utils.availableHeight(d,S,c),R.select(".nv-controlsWrap").datum(I).attr("transform","translate(0,"+(F+i.height())+")").call(u)):"top"===v&&R.select(".nv-controlsWrap").datum(I).attr("transform","translate(0,"+-c.top+")").call(u)}else R.select(".nv-controlsWrap").selectAll("*").remove();L.attr("transform","translate("+c.left+","+c.top+")"),n.disabled(l.map(function(t){return t.disabled})).width(O).height(F).color(l.map(function(t,e){return t.color||p(t,e)}).filter(function(t,e){return!l[e].disabled})),R.select(".nv-barsWrap").datum(l.filter(function(t){return!t.disabled})).transition().call(n),b&&(i.scale(t)._ticks(r.utils.calcTicksY(F/24,l)).tickSize(-O,0),R.select(".nv-x.nv-axis").call(i),R.select(".nv-x.nv-axis").selectAll("g").selectAll("line, text")),x&&(o.scale(e)._ticks(r.utils.calcTicksX(O/100,l)).tickSize(-F,0),R.select(".nv-y.nv-axis").attr("transform","translate(0,"+F+")"),R.select(".nv-y.nv-axis").call(o)),R.select(".nv-zeroLine line").attr("x1",e(0)).attr("x2",e(0)).attr("y1",0).attr("y2",-F),a.dispatch.on("stateChange",function(t){for(var e in t)k[e]=t[e];E.stateChange(k),N.update()}),u.dispatch.on("legendClick",function(t,e){if(t.disabled){switch(I=I.map(function(t){return t.disabled=!0,t}),t.disabled=!1,t.key){case"Grouped":case g.grouped:n.stacked(!1);break;case"Stacked":case g.stacked:n.stacked(!0)}k.stacked=n.stacked(),E.stateChange(k),w=n.stacked(),N.update()}}),E.on("changeState",function(t){void 0!==t.disabled&&(l.forEach(function(e,n){e.disabled=t.disabled[n]}),k.disabled=t.disabled),void 0!==t.stacked&&(n.stacked(t.stacked),k.stacked=t.stacked,w=t.stacked),N.update()})}),P.renderEnd("multibar horizontal chart immediate"),N}return n.dispatch.on("elementMouseover.tooltip",function(t){t.value=N.x()(t.data),t.series={key:t.data.key,value:N.y()(t.data),color:t.color},l.data(t).hidden(!1)}),n.dispatch.on("elementMouseout.tooltip",function(t){l.hidden(!0)}),n.dispatch.on("elementMousemove.tooltip",function(t){l()}),N.dispatch=E,N.multibar=n,N.legend=a,N.controls=u,N.xAxis=i,N.yAxis=o,N.state=k,N.tooltip=l,N.options=r.utils.optionsFunc.bind(N),N._options=Object.create({},{width:{get:function(){return f},set:function(t){f=t}},height:{get:function(){return d},set:function(t){d=t}},showLegend:{get:function(){return m},set:function(t){m=t}},legendPosition:{get:function(){return y},set:function(t){y=t}},controlsPosition:{get:function(){return v},set:function(t){v=t}},showControls:{get:function(){return h},set:function(t){h=t}},controlLabels:{get:function(){return g},set:function(t){g=t}},showXAxis:{get:function(){return b},set:function(t){b=t}},showYAxis:{get:function(){return x},set:function(t){x=t}},defaultState:{get:function(){return M},set:function(t){M=t}},noData:{get:function(){return S},set:function(t){S=t}},margin:{get:function(){return c},set:function(t){void 0!==t.top&&(c.top=t.top,s=t.top),c.right=void 0!==t.right?t.right:c.right,c.bottom=void 0!==t.bottom?t.bottom:c.bottom,c.left=void 0!==t.left?t.left:c.left}},duration:{get:function(){return C},set:function(t){C=t,P.reset(C),n.duration(C),i.duration(C),o.duration(C)}},color:{get:function(){return p},set:function(t){p=r.utils.getColor(t),a.color(p)}},barColor:{get:function(){return n.barColor},set:function(t){n.barColor(t),a.color(function(t,e){return d3.rgb("#ccc").darker(1.5*e).toString()})}}}),r.utils.inheritOptions(N,n),r.utils.initOptions(N),N},r.models.multiChart=function(){"use strict";var t,e,n={top:30,right:20,bottom:50,left:60},i=null,o=r.utils.defaultColor(),a=null,u=null,l=!0,c=null,s=function(t){return t.x},f=function(t){return t.y},d="linear",p=!0,h=r.interactiveGuideline(),v=!1,g=" (right axis)",m=250,y=d3.scale.linear(),b=d3.scale.linear(),x=d3.scale.linear(),w=r.models.line().yScale(b).duration(m),k=r.models.line().yScale(x).duration(m),M=r.models.scatter().yScale(b).duration(m),S=r.models.scatter().yScale(x).duration(m),E=r.models.multiBar().stacked(!1).yScale(b).duration(m),_=r.models.multiBar().stacked(!1).yScale(x).duration(m),C=r.models.stackedArea().yScale(b).duration(m),T=r.models.stackedArea().yScale(x).duration(m),A=r.models.axis().scale(y).orient("bottom").tickPadding(5).duration(m),P=r.models.axis().scale(b).orient("left").duration(m),N=r.models.axis().scale(x).orient("right").duration(m),O=r.models.legend().height(30),F=r.models.tooltip(),L=d3.dispatch(),D=[w,k,M,S,E,_,C,T];function R(c){return c.each(function(c){var p=d3.select(this);r.utils.initSVG(p),R.update=function(){p.transition().call(R)},R.container=this;var m=r.utils.availableWidth(a,p,n),L=r.utils.availableHeight(u,p,n),I=c.filter(function(t){return"line"==t.type&&1==t.yAxis}),j=c.filter(function(t){return"line"==t.type&&2==t.yAxis}),z=c.filter(function(t){return"scatter"==t.type&&1==t.yAxis}),W=c.filter(function(t){return"scatter"==t.type&&2==t.yAxis}),B=c.filter(function(t){return"bar"==t.type&&1==t.yAxis}),U=c.filter(function(t){return"bar"==t.type&&2==t.yAxis}),V=c.filter(function(t){return"area"==t.type&&1==t.yAxis}),H=c.filter(function(t){return"area"==t.type&&2==t.yAxis});if(!(c&&c.length&&c.filter(function(t){return t.values.length}).length))return r.utils.noData(R,p),R;p.selectAll(".nv-noData").remove();var q=c.filter(function(t){return!t.disabled&&1==t.yAxis}).map(function(t){return t.values.map(function(t,e){return{x:s(t),y:f(t)}})}),Y=c.filter(function(t){return!t.disabled&&2==t.yAxis}).map(function(t){return t.values.map(function(t,e){return{x:s(t),y:f(t)}})});y.domain(d3.extent(d3.merge(q.concat(Y)),function(t){return t.x})).range([0,m]);var G=p.selectAll("g.wrap.multiChart").data([c]),$=G.enter().append("g").attr("class","wrap nvd3 multiChart").append("g");$.append("g").attr("class","nv-x nv-axis"),$.append("g").attr("class","nv-y1 nv-axis"),$.append("g").attr("class","nv-y2 nv-axis"),$.append("g").attr("class","stack1Wrap"),$.append("g").attr("class","stack2Wrap"),$.append("g").attr("class","bars1Wrap"),$.append("g").attr("class","bars2Wrap"),$.append("g").attr("class","scatters1Wrap"),$.append("g").attr("class","scatters2Wrap"),$.append("g").attr("class","lines1Wrap"),$.append("g").attr("class","lines2Wrap"),$.append("g").attr("class","legendWrap"),$.append("g").attr("class","nv-interactive");var X=G.select("g"),K=c.map(function(t,e){return c[e].color||o(t,e)});if(l){var Z=O.align()?m/2:m,Q=O.align()?Z:0;O.width(Z),O.color(K),X.select(".legendWrap").datum(c.map(function(t){return t.originalKey=void 0===t.originalKey?t.key:t.originalKey,t.key=t.originalKey+(1==t.yAxis?"":g),t})).call(O),i||O.height()===n.top||(n.top=O.height(),L=r.utils.availableHeight(u,p,n)),X.select(".legendWrap").attr("transform","translate("+Q+","+-n.top+")")}else X.select(".legendWrap").selectAll("*").remove();w.width(m).height(L).interpolate(d).color(K.filter(function(t,e){return!c[e].disabled&&1==c[e].yAxis&&"line"==c[e].type})),k.width(m).height(L).interpolate(d).color(K.filter(function(t,e){return!c[e].disabled&&2==c[e].yAxis&&"line"==c[e].type})),M.width(m).height(L).color(K.filter(function(t,e){return!c[e].disabled&&1==c[e].yAxis&&"scatter"==c[e].type})),S.width(m).height(L).color(K.filter(function(t,e){return!c[e].disabled&&2==c[e].yAxis&&"scatter"==c[e].type})),E.width(m).height(L).color(K.filter(function(t,e){return!c[e].disabled&&1==c[e].yAxis&&"bar"==c[e].type})),_.width(m).height(L).color(K.filter(function(t,e){return!c[e].disabled&&2==c[e].yAxis&&"bar"==c[e].type})),C.width(m).height(L).interpolate(d).color(K.filter(function(t,e){return!c[e].disabled&&1==c[e].yAxis&&"area"==c[e].type})),T.width(m).height(L).interpolate(d).color(K.filter(function(t,e){return!c[e].disabled&&2==c[e].yAxis&&"area"==c[e].type})),X.attr("transform","translate("+n.left+","+n.top+")");var J=X.select(".lines1Wrap").datum(I.filter(function(t){return!t.disabled})),tt=X.select(".scatters1Wrap").datum(z.filter(function(t){return!t.disabled})),et=X.select(".bars1Wrap").datum(B.filter(function(t){return!t.disabled})),nt=X.select(".stack1Wrap").datum(V.filter(function(t){return!t.disabled})),rt=X.select(".lines2Wrap").datum(j.filter(function(t){return!t.disabled})),it=X.select(".scatters2Wrap").datum(W.filter(function(t){return!t.disabled})),ot=X.select(".bars2Wrap").datum(U.filter(function(t){return!t.disabled})),at=X.select(".stack2Wrap").datum(H.filter(function(t){return!t.disabled})),ut=[];E.stacked()&&B.length&&(ut=B.filter(function(t){return!t.disabled}).map(function(t){return t.values})).length>0&&(ut=ut.reduce(function(t,e){return t.map(function(t,n){return{x:t.x,y:t.y+e[n].y}})})),B.length&&ut.push({x:0,y:0});var lt=[];function ct(t){var e=2===t.series.yAxis?N:P;t.value=t.point.x,t.series={value:t.point.y,color:t.point.color,key:t.series.key},F.duration(0).headerFormatter(function(t,e){return A.tickFormat()(t,e)}).valueFormatter(function(t,n){return e.tickFormat()(t,n)}).data(t).hidden(!1)}function st(t){var e=2===t.series.yAxis?N:P;t.value=t.point.x,t.series={value:t.point.y,color:t.point.color,key:t.series.key},F.duration(100).headerFormatter(function(t,e){return A.tickFormat()(t,e)}).valueFormatter(function(t,n){return e.tickFormat()(t,n)}).data(t).hidden(!1)}function ft(t){var e=2===t.series.yAxis?N:P;t.point.x=C.x()(t.point),t.point.y=C.y()(t.point),F.duration(0).headerFormatter(function(t,e){return A.tickFormat()(t,e)}).valueFormatter(function(t,n){return e.tickFormat()(t,n)}).data(t).hidden(!1)}function dt(t){var e=2===t.series.yAxis?N:P;t.value=E.x()(t.data),t.series={value:E.y()(t.data),color:t.color,key:t.data.key},F.duration(0).headerFormatter(function(t,e){return A.tickFormat()(t,e)}).valueFormatter(function(t,n){return e.tickFormat()(t,n)}).data(t).hidden(!1)}function pt(){for(var t=0,e=D.length;t<e;t++){var n=D[t];try{n.clearHighlights()}catch(t){}}}_.stacked()&&U.length&&(lt=U.filter(function(t){return!t.disabled}).map(function(t){return t.values})).length>0&&(lt=lt.reduce(function(t,e){return t.map(function(t,n){return{x:t.x,y:t.y+e[n].y}})})),U.length&&lt.push({x:0,y:0}),b.domain(t||d3.extent(d3.merge(q).concat(ut),function(t){return t.y})).range([0,L]),x.domain(e||d3.extent(d3.merge(Y).concat(lt),function(t){return t.y})).range([0,L]),w.yDomain(b.domain()),M.yDomain(b.domain()),E.yDomain(b.domain()),C.yDomain(b.domain()),k.yDomain(x.domain()),S.yDomain(x.domain()),_.yDomain(x.domain()),T.yDomain(x.domain()),V.length&&d3.transition(nt).call(C),H.length&&d3.transition(at).call(T),B.length&&d3.transition(et).call(E),U.length&&d3.transition(ot).call(_),I.length&&d3.transition(J).call(w),j.length&&d3.transition(rt).call(k),z.length&&d3.transition(tt).call(M),W.length&&d3.transition(it).call(S),A._ticks(r.utils.calcTicksX(m/100,c)).tickSize(-L,0),X.select(".nv-x.nv-axis").attr("transform","translate(0,"+L+")"),d3.transition(X.select(".nv-x.nv-axis")).call(A),P._ticks(r.utils.calcTicksY(L/36,c)).tickSize(-m,0),d3.transition(X.select(".nv-y1.nv-axis")).call(P),N._ticks(r.utils.calcTicksY(L/36,c)).tickSize(-m,0),d3.transition(X.select(".nv-y2.nv-axis")).call(N),X.select(".nv-y1.nv-axis").classed("nv-disabled",!q.length).attr("transform","translate("+y.range()[0]+",0)"),X.select(".nv-y2.nv-axis").classed("nv-disabled",!Y.length).attr("transform","translate("+y.range()[1]+",0)"),O.dispatch.on("stateChange",function(t){R.update()}),v&&(h.width(m).height(L).margin({left:n.left,top:n.top}).svgContainer(p).xScale(y),G.select(".nv-interactive").call(h)),v?(h.dispatch.on("elementMousemove",function(t){pt();var e,n,i,a=[];c.filter(function(t,e){return t.seriesIndex=e,!t.disabled}).forEach(function(u,l){var c=y.domain(),s=u.values.filter(function(t,e){return R.x()(t,e)>=c[0]&&R.x()(t,e)<=c[1]}),f=s[n=r.interactiveBisect(s,t.pointXValue,R.x())],d=R.y()(f,n);null!==d&&function(t,e,n){for(var r=0,i=D.length;r<i;r++){var o=D[r];try{o.highlightPoint(t,e,n)}catch(t){}}}(l,n,!0),void 0!==f&&(void 0===e&&(e=f),void 0===i&&(i=y(R.x()(f,n))),a.push({key:u.key,value:d,color:o(u,u.seriesIndex),data:f,yAxis:2==u.yAxis?N:P}))}),h.tooltip.headerFormatter(function(t,e){return A.tickFormat()(t,e)}).valueFormatter(h.tooltip.valueFormatter()||function(t,e){var n=a[e].yAxis;return null==t?"N/A":n.tickFormat()(t)}).data({value:R.x()(e,n),index:n,series:a})(),h.renderGuideLine(i)}),h.dispatch.on("elementMouseout",function(t){pt()})):(w.dispatch.on("elementMouseover.tooltip",ct),k.dispatch.on("elementMouseover.tooltip",ct),w.dispatch.on("elementMouseout.tooltip",function(t){F.hidden(!0)}),k.dispatch.on("elementMouseout.tooltip",function(t){F.hidden(!0)}),M.dispatch.on("elementMouseover.tooltip",st),S.dispatch.on("elementMouseover.tooltip",st),M.dispatch.on("elementMouseout.tooltip",function(t){F.hidden(!0)}),S.dispatch.on("elementMouseout.tooltip",function(t){F.hidden(!0)}),C.dispatch.on("elementMouseover.tooltip",ft),T.dispatch.on("elementMouseover.tooltip",ft),C.dispatch.on("elementMouseout.tooltip",function(t){F.hidden(!0)}),T.dispatch.on("elementMouseout.tooltip",function(t){F.hidden(!0)}),E.dispatch.on("elementMouseover.tooltip",dt),_.dispatch.on("elementMouseover.tooltip",dt),E.dispatch.on("elementMouseout.tooltip",function(t){F.hidden(!0)}),_.dispatch.on("elementMouseout.tooltip",function(t){F.hidden(!0)}),E.dispatch.on("elementMousemove.tooltip",function(t){F()}),_.dispatch.on("elementMousemove.tooltip",function(t){F()}))}),R}return R.dispatch=L,R.legend=O,R.lines1=w,R.lines2=k,R.scatters1=M,R.scatters2=S,R.bars1=E,R.bars2=_,R.stack1=C,R.stack2=T,R.xAxis=A,R.yAxis1=P,R.yAxis2=N,R.tooltip=F,R.interactiveLayer=h,R.options=r.utils.optionsFunc.bind(R),R._options=Object.create({},{width:{get:function(){return a},set:function(t){a=t}},height:{get:function(){return u},set:function(t){u=t}},showLegend:{get:function(){return l},set:function(t){l=t}},yDomain1:{get:function(){return t},set:function(e){t=e}},yDomain2:{get:function(){return e},set:function(t){e=t}},noData:{get:function(){return c},set:function(t){c=t}},interpolate:{get:function(){return d},set:function(t){d=t}},legendRightAxisHint:{get:function(){return g},set:function(t){g=t}},margin:{get:function(){return n},set:function(t){void 0!==t.top&&(n.top=t.top,i=t.top),n.right=void 0!==t.right?t.right:n.right,n.bottom=void 0!==t.bottom?t.bottom:n.bottom,n.left=void 0!==t.left?t.left:n.left}},color:{get:function(){return o},set:function(t){o=r.utils.getColor(t)}},x:{get:function(){return s},set:function(t){s=t,w.x(t),k.x(t),M.x(t),S.x(t),E.x(t),_.x(t),C.x(t),T.x(t)}},y:{get:function(){return f},set:function(t){f=t,w.y(t),k.y(t),M.y(t),S.y(t),C.y(t),T.y(t),E.y(t),_.y(t)}},useVoronoi:{get:function(){return p},set:function(t){p=t,w.useVoronoi(t),k.useVoronoi(t),C.useVoronoi(t),T.useVoronoi(t)}},useInteractiveGuideline:{get:function(){return v},set:function(t){(v=t)&&(w.interactive(!1),w.useVoronoi(!1),k.interactive(!1),k.useVoronoi(!1),C.interactive(!1),C.useVoronoi(!1),T.interactive(!1),T.useVoronoi(!1),M.interactive(!1),S.interactive(!1))}},duration:{get:function(){return m},set:function(t){m=t,[w,k,C,T,M,S,A,P,N].forEach(function(t){t.duration(m)})}}}),r.utils.initOptions(R),R},r.models.ohlcBar=function(){"use strict";var t,e,n,i,o={top:0,right:0,bottom:0,left:0},a=null,u=null,l=Math.floor(1e4*Math.random()),c=null,s=d3.scale.linear(),f=d3.scale.linear(),d=function(t){return t.x},p=function(t){return t.y},h=function(t){return t.open},v=function(t){return t.close},g=function(t){return t.high},m=function(t){return t.low},y=[],b=[],x=!1,w=!0,k=r.utils.defaultColor(),M=!1,S=d3.dispatch("stateChange","changeState","renderEnd","chartClick","elementClick","elementDblClick","elementMouseover","elementMouseout","elementMousemove");function E(M){return M.each(function(M){c=d3.select(this);var E=r.utils.availableWidth(a,c,o),_=r.utils.availableHeight(u,c,o);r.utils.initSVG(c);var C=E/M[0].values.length*.9;s.domain(t||d3.extent(M[0].values.map(d).concat(y))),x?s.range(n||[.5*E/M[0].values.length,E*(M[0].values.length-.5)/M[0].values.length]):s.range(n||[5+C/2,E-C/2-5]),f.domain(e||[d3.min(M[0].values.map(m).concat(b)),d3.max(M[0].values.map(g).concat(b))]).range(i||[_,0]),s.domain()[0]===s.domain()[1]&&(s.domain()[0]?s.domain([s.domain()[0]-.01*s.domain()[0],s.domain()[1]+.01*s.domain()[1]]):s.domain([-1,1])),f.domain()[0]===f.domain()[1]&&(f.domain()[0]?f.domain([f.domain()[0]+.01*f.domain()[0],f.domain()[1]-.01*f.domain()[1]]):f.domain([-1,1]));var T=d3.select(this).selectAll("g.nv-wrap.nv-ohlcBar").data([M[0].values]),A=T.enter().append("g").attr("class","nvd3 nv-wrap nv-ohlcBar"),P=A.append("defs"),N=A.append("g"),O=T.select("g");N.append("g").attr("class","nv-ticks"),T.attr("transform","translate("+o.left+","+o.top+")"),c.on("click",function(t,e){S.chartClick({data:t,index:e,pos:d3.event,id:l})}),P.append("clipPath").attr("id","nv-chart-clip-path-"+l).append("rect"),T.select("#nv-chart-clip-path-"+l+" rect").attr("width",E).attr("height",_),O.attr("clip-path",w?"url(#nv-chart-clip-path-"+l+")":"");var F=T.select(".nv-ticks").selectAll(".nv-tick").data(function(t){return t});F.exit().remove(),F.enter().append("path").attr("class",function(t,e,n){return(h(t,e)>v(t,e)?"nv-tick negative":"nv-tick positive")+" nv-tick-"+n+"-"+e}).attr("d",function(t,e){return"m0,0l0,"+(f(h(t,e))-f(g(t,e)))+"l"+-C/2+",0l"+C/2+",0l0,"+(f(m(t,e))-f(h(t,e)))+"l0,"+(f(v(t,e))-f(m(t,e)))+"l"+C/2+",0l"+-C/2+",0z"}).attr("transform",function(t,e){return"translate("+s(d(t,e))+","+f(g(t,e))+")"}).attr("fill",function(t,e){return k[0]}).attr("stroke",function(t,e){return k[0]}).attr("x",0).attr("y",function(t,e){return f(Math.max(0,p(t,e)))}).attr("height",function(t,e){return Math.abs(f(p(t,e))-f(0))}),F.attr("class",function(t,e,n){return(h(t,e)>v(t,e)?"nv-tick negative":"nv-tick positive")+" nv-tick-"+n+"-"+e}),d3.transition(F).attr("transform",function(t,e){return"translate("+s(d(t,e))+","+f(g(t,e))+")"}).attr("d",function(t,e){var n=E/M[0].values.length*.9;return"m0,0l0,"+(f(h(t,e))-f(g(t,e)))+"l"+-n/2+",0l"+n/2+",0l0,"+(f(m(t,e))-f(h(t,e)))+"l0,"+(f(v(t,e))-f(m(t,e)))+"l"+n/2+",0l"+-n/2+",0z"})}),E}return E.highlightPoint=function(t,e){E.clearHighlights(),c.select(".nv-ohlcBar .nv-tick-0-"+t).classed("hover",e)},E.clearHighlights=function(){c.select(".nv-ohlcBar .nv-tick.hover").classed("hover",!1)},E.dispatch=S,E.options=r.utils.optionsFunc.bind(E),E._options=Object.create({},{width:{get:function(){return a},set:function(t){a=t}},height:{get:function(){return u},set:function(t){u=t}},xScale:{get:function(){return s},set:function(t){s=t}},yScale:{get:function(){return f},set:function(t){f=t}},xDomain:{get:function(){return t},set:function(e){t=e}},yDomain:{get:function(){return e},set:function(t){e=t}},xRange:{get:function(){return n},set:function(t){n=t}},yRange:{get:function(){return i},set:function(t){i=t}},forceX:{get:function(){return y},set:function(t){y=t}},forceY:{get:function(){return b},set:function(t){b=t}},padData:{get:function(){return x},set:function(t){x=t}},clipEdge:{get:function(){return w},set:function(t){w=t}},id:{get:function(){return l},set:function(t){l=t}},interactive:{get:function(){return M},set:function(t){M=t}},x:{get:function(){return d},set:function(t){d=t}},y:{get:function(){return p},set:function(t){p=t}},open:{get:function(){return h()},set:function(t){h=t}},close:{get:function(){return v()},set:function(t){v=t}},high:{get:function(){return g},set:function(t){g=t}},low:{get:function(){return m},set:function(t){m=t}},margin:{get:function(){return o},set:function(t){o.top=null!=t.top?t.top:o.top,o.right=null!=t.right?t.right:o.right,o.bottom=null!=t.bottom?t.bottom:o.bottom,o.left=null!=t.left?t.left:o.left}},color:{get:function(){return k},set:function(t){k=r.utils.getColor(t)}}}),r.utils.initOptions(E),E},r.models.parallelCoordinates=function(){"use strict";var t,e,n,i={top:30,right:0,bottom:10,left:0},o=null,a=null,u=null,l=null,c=d3.scale.ordinal(),s={},f="undefined values",d=[],p=[],h=[],v=!0,g=r.utils.defaultColor(),m=[],y=[],b=[],x=[],w=1,k=d3.svg.line(),M=d3.svg.axis(),S=d3.dispatch("brushstart","brush","brushEnd","dimensionsOrder","stateChange","elementClick","elementMouseover","elementMouseout","elementMousemove","renderEnd","activeChanged"),E=r.utils.renderWatch(S);function _(C){return E.reset(),C.each(function(E){var _=d3.select(this);if(u=r.utils.availableWidth(o,_,i),l=r.utils.availableHeight(a,_,i),r.utils.initSVG(_),void 0===E[0].values){var C=[];E.forEach(function(t){var e={};Object.keys(t).forEach(function(n){"name"!==n&&(e[n]=t[n])}),C.push({key:t.name,values:e})}),E=C}var T=E.map(function(t){return t.values});0===y.length&&(y=E),h=d.sort(function(t,e){return t.currentPosition-e.currentPosition}).map(function(t){return t.key}),p=d.filter(function(t){return!t.disabled}),c.rangePoints([0,u],1).domain(p.map(function(t){return t.key}));var A={},P=!1,N=[];h.forEach(function(t){var e=d3.extent(T,function(e){return+e[t]}),n=e[0],r=e[1],i=!1;(isNaN(n)||isNaN(r))&&(i=!0,n=0,r=0),n===r&&(n-=1,r+=1);var o=m.filter(function(e){return e.dimension==t});0!==o.length&&(i?(n=s[t].domain()[0],r=s[t].domain()[1]):!o[0].hasOnlyNaN&&v?(n=n>o[0].extent[0]?o[0].extent[0]:n,r=r<o[0].extent[1]?o[0].extent[1]:r):o[0].hasNaN&&(r=r<o[0].extent[1]?o[0].extent[1]:r,A[t]=s[t].domain()[1],P=!0)),s[t]=d3.scale.linear().domain([n,r]).range([.9*(l-12),0]),x=[],s[t].brush=d3.svg.brush().y(s[t]).on("brushstart",Y).on("brush",G).on("brushend",$)});var O=_.selectAll("g.nv-wrap.nv-parallelCoordinates").data([E]),F=O.enter().append("g").attr("class","nvd3 nv-wrap nv-parallelCoordinates").append("g"),L=O.select("g");F.append("g").attr("class","nv-parallelCoordinates background"),F.append("g").attr("class","nv-parallelCoordinates foreground"),F.append("g").attr("class","nv-parallelCoordinates missingValuesline"),O.attr("transform","translate("+i.left+","+i.top+")"),k.interpolate("cardinal").tension(w),M.orient("left");var D,R,I=d3.behavior.drag().on("dragstart",function(t){b[t.key]=this.parentNode.__origin__=c(t.key),e.attr("visibility","hidden")}).on("drag",function(e){b[e.key]=Math.min(u,Math.max(0,this.parentNode.__origin__+=d3.event.x)),t.attr("d",H),p.sort(function(t,e){return K(t.key)-K(e.key)}),p.forEach(function(t,e){return t.currentPosition=e}),c.domain(p.map(function(t){return t.key})),n.attr("transform",function(t){return"translate("+K(t.key)+")"})}).on("dragend",function(n,r){delete this.parentNode.__origin__,delete b[n.key],d3.select(this.parentNode).attr("transform","translate("+c(n.key)+")"),t.attr("d",H),e.attr("d",H).attr("visibility",null),S.dimensionsOrder(p)}),j=c.range()[1]-c.range()[0];if(j=isNaN(j)?c.range()[0]:j,!isNaN(j)){var z=[0+j/2,l-12,u-j/2,l-12];(D=O.select(".missingValuesline").selectAll("line").data([z])).enter().append("line"),D.exit().remove(),D.attr("x1",function(t){return t[0]}).attr("y1",function(t){return t[1]}).attr("x2",function(t){return t[2]}).attr("y2",function(t){return t[3]}),(R=O.select(".missingValuesline").selectAll("text").data([f])).append("text").data([f]),R.enter().append("text"),R.exit().remove(),R.attr("y",l).attr("x",u-92-j/2).text(function(t){return t})}(e=O.select(".background").selectAll("path").data(E)).enter().append("path"),e.exit().remove(),e.attr("d",H),(t=O.select(".foreground").selectAll("path").data(E)).enter().append("path"),t.exit().remove(),t.attr("d",H).style("stroke-width",function(t,e){return isNaN(t.strokeWidth)&&(t.strokeWidth=1),t.strokeWidth}).attr("stroke",function(t,e){return t.color||g(t,e)}),t.on("mouseover",function(t,e){d3.select(this).classed("hover",!0).style("stroke-width",t.strokeWidth+2+"px").style("stroke-opacity",1),S.elementMouseover({label:t.name,color:t.color||g(t,e),values:t.values,dimensions:p})}),t.on("mouseout",function(t,e){d3.select(this).classed("hover",!1).style("stroke-width",t.strokeWidth+"px").style("stroke-opacity",.7),S.elementMouseout({label:t.name,index:e})}),t.on("mousemove",function(t,e){S.elementMousemove()}),t.on("click",function(t){S.elementClick({id:t.id})});var W=(n=L.selectAll(".dimension").data(p)).enter().append("g").attr("class","nv-parallelCoordinates dimension");n.attr("transform",function(t){return"translate("+c(t.key)+",0)"}),W.append("g").attr("class","nv-axis"),W.append("text").attr("class","nv-label").style("cursor","move").attr("dy","-1em").attr("text-anchor","middle").on("mouseover",function(t,e){S.elementMouseover({label:t.tooltip||t.key,color:t.color})}).on("mouseout",function(t,e){S.elementMouseout({label:t.tooltip})}).on("mousemove",function(t,e){S.elementMousemove()}).call(I),W.append("g").attr("class","nv-brushBackground"),n.exit().remove(),n.select(".nv-label").text(function(t){return t.key}),q(v);var B=h.filter(function(t){return!s[t].brush.empty()}),U=B.map(function(t){return s[t].brush.extent()}),V=y.slice(0);function H(t){return k(p.map(function(e){if(isNaN(t.values[e.key])||isNaN(parseFloat(t.values[e.key]))||P){var n=s[e.key].domain(),r=s[e.key].range(),i=n[0]-(n[1]-n[0])/9;if(x.indexOf(e.key)<0){var o=d3.scale.linear().domain([i,n[1]]).range([l-12,r[1]]);s[e.key].brush.y(o),x.push(e.key)}if(isNaN(t.values[e.key])||isNaN(parseFloat(t.values[e.key])))return[c(e.key),s[e.key](i)]}return void 0!==D&&(x.length>0||P?(D.style("display","inline"),R.style("display","inline")):(D.style("display","none"),R.style("display","none"))),[c(e.key),s[e.key](t.values[e.key])]}))}function q(t){m.forEach(function(e){var n=s[e.dimension].brush.y().domain();e.hasOnlyNaN&&(e.extent[1]=(s[e.dimension].domain()[1]-n[0])*(e.extent[1]-e.extent[0])/(A[e.dimension]-e.extent[0])+n[0]),e.hasNaN&&(e.extent[0]=n[0]),t&&s[e.dimension].brush.extent(e.extent)}),n.select(".nv-brushBackground").each(function(t){d3.select(this).call(s[t.key].brush)}).selectAll("rect").attr("x",-8).attr("width",16),X()}function Y(){!1===v&&(v=!0,q(!0))}function G(){B=h.filter(function(t){return!s[t].brush.empty()}),U=B.map(function(t){return s[t].brush.extent()}),m=[],B.forEach(function(t,e){m[e]={dimension:t,extent:U[e],hasNaN:!1,hasOnlyNaN:!1}}),y=[],t.style("display",function(t){var e=B.every(function(e,n){return!(!isNaN(t.values[e])&&!isNaN(parseFloat(t.values[e]))||U[n][0]!=s[e].brush.y().domain()[0])||U[n][0]<=t.values[e]&&t.values[e]<=U[n][1]&&!isNaN(parseFloat(t.values[e]))});return e&&y.push(t),e?null:"none"}),X(),S.brush({filters:m,active:y})}function $(){var t=B.length>0;m.forEach(function(t){t.extent[0]===s[t.dimension].brush.y().domain()[0]&&x.indexOf(t.dimension)>=0&&(t.hasNaN=!0),t.extent[1]<s[t.dimension].domain()[0]&&(t.hasOnlyNaN=!0)}),S.brushEnd(y,t)}function X(){n.select(".nv-axis").each(function(t,e){var n=m.filter(function(e){return e.dimension==t.key});N[t.key]=s[t.key].domain(),0!=n.length&&v&&(N[t.key]=[],n[0].extent[1]>s[t.key].domain()[0]&&(N[t.key]=[n[0].extent[1]]),n[0].extent[0]>=s[t.key].domain()[0]&&N[t.key].push(n[0].extent[0])),d3.select(this).call(M.scale(s[t.key]).tickFormat(t.format).tickValues(N[t.key]))})}function K(t){var e=b[t];return null==e?c(t):e}y=[],t.style("display",function(t){var e=B.every(function(e,n){return!(!isNaN(t.values[e])&&!isNaN(parseFloat(t.values[e]))||U[n][0]!=s[e].brush.y().domain()[0])||U[n][0]<=t.values[e]&&t.values[e]<=U[n][1]&&!isNaN(parseFloat(t.values[e]))});return e&&y.push(t),e?null:"none"}),(m.length>0||!r.utils.arrayEquals(y,V))&&S.activeChanged(y)}),_}return _.dispatch=S,_.options=r.utils.optionsFunc.bind(_),_._options=Object.create({},{width:{get:function(){return o},set:function(t){o=t}},height:{get:function(){return a},set:function(t){a=t}},dimensionData:{get:function(){return d},set:function(t){d=t}},displayBrush:{get:function(){return v},set:function(t){v=t}},filters:{get:function(){return m},set:function(t){m=t}},active:{get:function(){return y},set:function(t){y=t}},lineTension:{get:function(){return w},set:function(t){w=t}},undefinedValuesLabel:{get:function(){return f},set:function(t){f=t}},dimensions:{get:function(){return d.map(function(t){return t.key})},set:function(t){r.deprecated("dimensions","use dimensionData instead"),0===d.length?t.forEach(function(t){d.push({key:t})}):t.forEach(function(t,e){d[e].key=t})}},dimensionNames:{get:function(){return d.map(function(t){return t.key})},set:function(t){r.deprecated("dimensionNames","use dimensionData instead"),h=[],0===d.length?t.forEach(function(t){d.push({key:t})}):t.forEach(function(t,e){d[e].key=t})}},dimensionFormats:{get:function(){return d.map(function(t){return t.format})},set:function(t){r.deprecated("dimensionFormats","use dimensionData instead"),0===d.length?t.forEach(function(t){d.push({format:t})}):t.forEach(function(t,e){d[e].format=t})}},margin:{get:function(){return i},set:function(t){i.top=void 0!==t.top?t.top:i.top,i.right=void 0!==t.right?t.right:i.right,i.bottom=void 0!==t.bottom?t.bottom:i.bottom,i.left=void 0!==t.left?t.left:i.left}},color:{get:function(){return g},set:function(t){g=r.utils.getColor(t)}}}),r.utils.initOptions(_),_},r.models.parallelCoordinatesChart=function(){"use strict";var t=r.models.parallelCoordinates(),e=r.models.legend(),n=r.models.tooltip(),i=(r.models.tooltip(),{top:0,right:0,bottom:0,left:0}),o=null,a=null,u=null,l=!0,c=r.utils.defaultColor(),s=r.utils.state(),f=[],d=!0,p=null,h=null,v="undefined",g=d3.dispatch("dimensionsOrder","brushEnd","stateChange","changeState","renderEnd"),m=r.utils.renderWatch(g),y=function(t){return function(){return{active:t.map(function(t){return!t.disabled})}}},b=function(t){return function(e){void 0!==e.active&&t.forEach(function(t,n){t.disabled=!e.active[n]})}};function x(n){return m.reset(),m.models(t),n.each(function(n){var c=d3.select(this);r.utils.initSVG(c);var h,v=r.utils.availableWidth(a,c,i),m=r.utils.availableHeight(u,c,i);if(x.update=function(){c.call(x)},x.container=this,s.setter(b(f),x.update).getter(y(f)).update(),s.disabled=f.map(function(t){return!!t.disabled}),(f=f.map(function(t){return t.disabled=!!t.disabled,t})).forEach(function(t,e){t.originalPosition=isNaN(t.originalPosition)?e:t.originalPosition,t.currentPosition=isNaN(t.currentPosition)?e:t.currentPosition}),!p)for(h in p={},s)s[h]instanceof Array?p[h]=s[h].slice(0):p[h]=s[h];if(!n||!n.length)return r.utils.noData(x,c),x;c.selectAll(".nv-noData").remove();var w=c.selectAll("g.nv-wrap.nv-parallelCoordinatesChart").data([n]),k=w.enter().append("g").attr("class","nvd3 nv-wrap nv-parallelCoordinatesChart").append("g"),M=w.select("g");k.append("g").attr("class","nv-parallelCoordinatesWrap"),k.append("g").attr("class","nv-legendWrap"),M.select("rect").attr("width",v).attr("height",m>0?m:0),l?(e.width(v).color(function(t){return"rgb(188,190,192)"}),M.select(".nv-legendWrap").datum(f.sort(function(t,e){return t.originalPosition-e.originalPosition})).call(e),o||e.height()===i.top||(i.top=e.height(),m=r.utils.availableHeight(u,c,i)),w.select(".nv-legendWrap").attr("transform","translate( 0 ,"+-i.top+")")):M.select(".nv-legendWrap").selectAll("*").remove(),w.attr("transform","translate("+i.left+","+i.top+")"),t.width(v).height(m).dimensionData(f).displayBrush(d),M.select(".nv-parallelCoordinatesWrap ").datum(n).transition().call(t),t.dispatch.on("brushEnd",function(t,e){e?(d=!0,g.brushEnd(t)):d=!1}),e.dispatch.on("stateChange",function(t){for(var e in t)s[e]=t[e];g.stateChange(s),x.update()}),t.dispatch.on("dimensionsOrder",function(t){f.sort(function(t,e){return t.currentPosition-e.currentPosition});var e=!1;f.forEach(function(t,n){t.currentPosition=n,t.currentPosition!==t.originalPosition&&(e=!0)}),g.dimensionsOrder(f,e)}),g.on("changeState",function(t){void 0!==t.disabled&&(f.forEach(function(e,n){e.disabled=t.disabled[n]}),s.disabled=t.disabled),x.update()})}),m.renderEnd("parraleleCoordinateChart immediate"),x}return n.contentGenerator(function(t){var e='<table><thead><tr><td class="legend-color-guide"><div style="background-color:'+t.color+'"></div></td><td><strong>'+t.key+"</strong></td></tr></thead>";return 0!==t.series.length&&(e+='<tbody><tr><td height ="10px"></td></tr>',t.series.forEach(function(t){e=e+'<tr><td class="legend-color-guide"><div style="background-color:'+t.color+'"></div></td><td class="key">'+t.key+'</td><td class="value">'+t.value+"</td></tr>"}),e+="</tbody>"),e+="</table>"}),t.dispatch.on("elementMouseover.tooltip",function(t){var e={key:t.label,color:t.color,series:[]};t.values&&(Object.keys(t.values).forEach(function(n){var r,i=t.dimensions.filter(function(t){return t.key===n})[0];i&&(r=isNaN(t.values[n])||isNaN(parseFloat(t.values[n]))?v:i.format(t.values[n]),e.series.push({idx:i.currentPosition,key:n,value:r,color:i.color}))}),e.series.sort(function(t,e){return t.idx-e.idx})),n.data(e).hidden(!1)}),t.dispatch.on("elementMouseout.tooltip",function(t){n.hidden(!0)}),t.dispatch.on("elementMousemove.tooltip",function(){n()}),x.dispatch=g,x.parallelCoordinates=t,x.legend=e,x.tooltip=n,x.options=r.utils.optionsFunc.bind(x),x._options=Object.create({},{width:{get:function(){return a},set:function(t){a=t}},height:{get:function(){return u},set:function(t){u=t}},showLegend:{get:function(){return l},set:function(t){l=t}},defaultState:{get:function(){return p},set:function(t){p=t}},dimensionData:{get:function(){return f},set:function(t){f=t}},displayBrush:{get:function(){return d},set:function(t){d=t}},noData:{get:function(){return h},set:function(t){h=t}},nanValue:{get:function(){return v},set:function(t){v=t}},margin:{get:function(){return i},set:function(t){void 0!==t.top&&(i.top=t.top,o=t.top),i.right=void 0!==t.right?t.right:i.right,i.bottom=void 0!==t.bottom?t.bottom:i.bottom,i.left=void 0!==t.left?t.left:i.left}},color:{get:function(){return c},set:function(n){c=r.utils.getColor(n),e.color(c),t.color(c)}}}),r.utils.inheritOptions(x,t),r.utils.initOptions(x),x},r.models.pie=function(){"use strict";var t={top:0,right:0,bottom:0,left:0},e=500,n=500,i=function(t){return t.x},o=function(t){return t.y},a=Math.floor(1e4*Math.random()),u=null,l=r.utils.defaultColor(),c=d3.format(",.2f"),s=!0,f=!1,d="key",p=.02,h=!1,v=!1,g=!1,m=!0,y=0,b=!1,x=!1,w=!1,k=!1,M=0,S=.5,E=250,_=[],C=d3.dispatch("chartClick","elementClick","elementDblClick","elementMouseover","elementMouseout","elementMousemove","renderEnd"),T=[],A=[],P=r.utils.renderWatch(C);function N(O){return P.reset(),O.each(function(N){var O=e-t.left-t.right,F=n-t.top-t.bottom,L=Math.min(O,F)/2,D=[],R=[];if(u=d3.select(this),0===_.length)for(var I=L-L/10,j=S*L,z=0;z<N[0].length;z++)D.push(I),R.push(j);else m?(D=_.map(function(t){return(t.outer-t.outer/10)*L}),R=_.map(function(t){return(t.inner-t.inner/10)*L}),S=d3.min(_.map(function(t){return t.inner-t.inner/10}))):(D=_.map(function(t){return t.outer*L}),R=_.map(function(t){return t.inner*L}),S=d3.min(_.map(function(t){return t.inner})));r.utils.initSVG(u);var W=u.selectAll(".nv-wrap.nv-pie").data(N),B=W.enter().append("g").attr("class","nvd3 nv-wrap nv-pie nv-chart-"+a).append("g"),U=W.select("g"),V=B.append("g").attr("class","nv-pie");for(B.append("g").attr("class","nv-pieLabels"),W.attr("transform","translate("+t.left+","+t.top+")"),U.select(".nv-pie").attr("transform","translate("+O/2+","+F/2+")"),U.select(".nv-pieLabels").attr("transform","translate("+O/2+","+F/2+")"),u.on("click",function(t,e){C.chartClick({data:t,index:e,pos:d3.event,id:a})}),T=[],A=[],z=0;z<N[0].length;z++){var H=d3.svg.arc().outerRadius(D[z]),q=d3.svg.arc().outerRadius(D[z]+5);!1!==x&&(H.startAngle(x),q.startAngle(x)),!1!==k&&(H.endAngle(k),q.endAngle(k)),v&&(H.innerRadius(R[z]),q.innerRadius(R[z])),H.cornerRadius&&M&&(H.cornerRadius(M),q.cornerRadius(M)),T.push(H),A.push(q)}var Y=d3.layout.pie().sort(null).value(function(t){return t.disabled?0:o(t)});Y.padAngle&&w&&Y.padAngle(w),v&&g&&(V.append("text").attr("class","nv-pie-title"),W.select(".nv-pie-title").style("text-anchor","middle").text(function(t){return g}).style("font-size",Math.min(O,F)*S*2/(g.length+2)+"px").attr("dy","0.35em").attr("transform",function(t,e){return"translate(0, "+y+")"}));var G=W.select(".nv-pie").selectAll(".nv-slice").data(Y),$=W.select(".nv-pieLabels").selectAll(".nv-label").data(Y);G.exit().remove(),$.exit().remove();var X=G.enter().append("g");if(X.attr("class","nv-slice"),X.on("mouseover",function(t,e){d3.select(this).classed("hover",!0),m&&d3.select(this).select("path").transition().duration(70).attr("d",A[e]),C.elementMouseover({data:t.data,index:e,color:d3.select(this).style("fill"),percent:(t.endAngle-t.startAngle)/(2*Math.PI)})}),X.on("mouseout",function(t,e){d3.select(this).classed("hover",!1),m&&d3.select(this).select("path").transition().duration(50).attr("d",T[e]),C.elementMouseout({data:t.data,index:e})}),X.on("mousemove",function(t,e){C.elementMousemove({data:t.data,index:e})}),X.on("click",function(t,e){C.elementClick({data:t.data,index:e,color:d3.select(this).style("fill"),event:d3.event,element:this})}),X.on("dblclick",function(t,e){C.elementDblClick({data:t.data,index:e,color:d3.select(this).style("fill")})}),G.attr("fill",function(t,e){return l(t.data,e)}),G.attr("stroke",function(t,e){return l(t.data,e)}),X.append("path").each(function(t){this._current=t}),G.select("path").transition().duration(E).attr("d",function(t,e){return T[e](t)}).attrTween("d",function(t,e){t.endAngle=isNaN(t.endAngle)?0:t.endAngle,t.startAngle=isNaN(t.startAngle)?0:t.startAngle,v||(t.innerRadius=0);var n=d3.interpolate(this._current,t);return this._current=n(0),function(t){return T[e](n(t))}}),s){var K=[];for(z=0;z<N[0].length;z++)K.push(T[z]),f?v&&(K[z]=d3.svg.arc().outerRadius(T[z].outerRadius()),!1!==x&&K[z].startAngle(x),!1!==k&&K[z].endAngle(k)):v||K[z].innerRadius(0);$.enter().append("g").classed("nv-label",!0).each(function(t,e){var n=d3.select(this);n.attr("transform",function(t,e){if(b){t.outerRadius=D[e]+10,t.innerRadius=D[e]+15;var n=(t.startAngle+t.endAngle)/2*(180/Math.PI);return(t.startAngle+t.endAngle)/2<Math.PI?n-=90:n+=90,"translate("+K[e].centroid(t)+") rotate("+n+")"}return t.outerRadius=L+10,t.innerRadius=L+15,"translate("+K[e].centroid(t)+")"}),n.append("rect").style("stroke","#fff").style("fill","#fff").attr("rx",3).attr("ry",3),n.append("text").style("text-anchor",b?(t.startAngle+t.endAngle)/2<Math.PI?"start":"end":"middle").style("fill","#000")});var Z={},Q=function(t){return 140*Math.floor(t[0]/140)+","+14*Math.floor(t[1]/14)},J=function(t){return(t.endAngle-t.startAngle)/(2*Math.PI)};$.watchTransition(P,"pie labels").attr("transform",function(t,e){if(b){t.outerRadius=D[e]+10,t.innerRadius=D[e]+15;var n=(t.startAngle+t.endAngle)/2*(180/Math.PI);return(t.startAngle+t.endAngle)/2<Math.PI?n-=90:n+=90,"translate("+K[e].centroid(t)+") rotate("+n+")"}t.outerRadius=L+10,t.innerRadius=L+15;var r=K[e].centroid(t),i=J(t);if(t.value&&i>=p){var o=Q(r);Z[o]&&(r[1]-=14),Z[Q(r)]=!0}return"translate("+r+")"}),$.select(".nv-label text").style("text-anchor",function(t,e){return b?(t.startAngle+t.endAngle)/2<Math.PI?"start":"end":"middle"}).text(function(t,e){var n=J(t),r="";if(!t.value||n<p)return"";if("function"==typeof d)r=d(t,e,{key:i(t.data),value:o(t.data),percent:c(n)});else switch(d){case"key":r=i(t.data);break;case"value":r=c(o(t.data));break;case"percent":r=d3.format("%")(n)}return r}),h&&$.each(function(t,e){if(this.getBBox){var n=this.getBBox(),i=K[e].centroid(t),o={x:i[0]+n.x,y:i[1]+n.y},a={x:o.x+n.width,y:o.y},u={x:o.x,y:o.y+n.height},l={x:o.x+n.width,y:o.y+n.height};t.visible=r.utils.pointIsInArc(o,t,H)&&r.utils.pointIsInArc(a,t,H)&&r.utils.pointIsInArc(u,t,H)&&r.utils.pointIsInArc(l,t,H)}}).style("display",function(t){return t.visible?null:"none"})}}),P.renderEnd("pie immediate"),N}return N.dispatch=C,N.options=r.utils.optionsFunc.bind(N),N._options=Object.create({},{arcsRadius:{get:function(){return _},set:function(t){_=t}},width:{get:function(){return e},set:function(t){e=t}},height:{get:function(){return n},set:function(t){n=t}},showLabels:{get:function(){return s},set:function(t){s=t}},title:{get:function(){return g},set:function(t){g=t}},titleOffset:{get:function(){return y},set:function(t){y=t}},labelThreshold:{get:function(){return p},set:function(t){p=t}},hideOverlapLabels:{get:function(){return h},set:function(t){h=t}},valueFormat:{get:function(){return c},set:function(t){c=t}},x:{get:function(){return i},set:function(t){i=t}},id:{get:function(){return a},set:function(t){a=t}},endAngle:{get:function(){return k},set:function(t){k=t}},startAngle:{get:function(){return x},set:function(t){x=t}},padAngle:{get:function(){return w},set:function(t){w=t}},cornerRadius:{get:function(){return M},set:function(t){M=t}},donutRatio:{get:function(){return S},set:function(t){S=t}},labelsOutside:{get:function(){return f},set:function(t){f=t}},labelSunbeamLayout:{get:function(){return b},set:function(t){b=t}},donut:{get:function(){return v},set:function(t){v=t}},growOnHover:{get:function(){return m},set:function(t){m=t}},pieLabelsOutside:{get:function(){return f},set:function(t){f=t,r.deprecated("pieLabelsOutside","use labelsOutside instead")}},donutLabelsOutside:{get:function(){return f},set:function(t){f=t,r.deprecated("donutLabelsOutside","use labelsOutside instead")}},labelFormat:{get:function(){return c},set:function(t){c=t,r.deprecated("labelFormat","use valueFormat instead")}},margin:{get:function(){return t},set:function(e){t.top=void 0!==e.top?e.top:t.top,t.right=void 0!==e.right?e.right:t.right,t.bottom=void 0!==e.bottom?e.bottom:t.bottom,t.left=void 0!==e.left?e.left:t.left}},duration:{get:function(){return E},set:function(t){E=t,P.reset(E)}},y:{get:function(){return o},set:function(t){o=d3.functor(t)}},color:{get:function(){return l},set:function(t){l=r.utils.getColor(t)}},labelType:{get:function(){return d},set:function(t){d=t||"key"}}}),r.utils.initOptions(N),N},r.models.pieChart=function(){"use strict";var t=r.models.pie(),e=r.models.legend(),n=r.models.tooltip(),i={top:30,right:20,bottom:20,left:20},o=null,a=null,u=null,l=!1,c=!0,s="top",f=r.utils.defaultColor(),d=r.utils.state(),p=null,h=null,v=250,g=d3.dispatch("stateChange","changeState","renderEnd");n.duration(0).headerEnabled(!1).valueFormatter(function(e,n){return t.valueFormat()(e,n)});var m=r.utils.renderWatch(g),y=function(t){return function(){return{active:t.map(function(t){return!t.disabled})}}},b=function(t){return function(e){void 0!==e.active&&t.forEach(function(t,n){t.disabled=!e.active[n]})}};function x(n){return m.reset(),m.models(t),n.each(function(n){var l=d3.select(this);r.utils.initSVG(l);var f,h=r.utils.availableWidth(a,l,i),v=r.utils.availableHeight(u,l,i);if(x.update=function(){l.transition().call(x)},x.container=this,d.setter(b(n),x.update).getter(y(n)).update(),d.disabled=n.map(function(t){return!!t.disabled}),!p)for(f in p={},d)d[f]instanceof Array?p[f]=d[f].slice(0):p[f]=d[f];if(!n||!n.length)return r.utils.noData(x,l),x;l.selectAll(".nv-noData").remove();var m=l.selectAll("g.nv-wrap.nv-pieChart").data([n]),w=m.enter().append("g").attr("class","nvd3 nv-wrap nv-pieChart").append("g"),k=m.select("g");if(w.append("g").attr("class","nv-pieWrap"),w.append("g").attr("class","nv-legendWrap"),c)if("top"===s)e.width(h).key(t.x()),m.select(".nv-legendWrap").datum(n).call(e),o||e.height()===i.top||(i.top=e.height(),v=r.utils.availableHeight(u,l,i)),m.select(".nv-legendWrap").attr("transform","translate(0,"+-i.top+")");else if("right"===s){var M=r.models.legend().width();h/2<M&&(M=h/2),e.height(v).key(t.x()),e.width(M),h-=e.width(),m.select(".nv-legendWrap").datum(n).call(e).attr("transform","translate("+h+",0)")}else"bottom"===s&&(e.width(h).key(t.x()),m.select(".nv-legendWrap").datum(n).call(e),i.bottom=e.height(),v=r.utils.availableHeight(u,l,i),m.select(".nv-legendWrap").attr("transform","translate(0,"+v+")"));else k.select(".nv-legendWrap").selectAll("*").remove();m.attr("transform","translate("+i.left+","+i.top+")"),t.width(h).height(v);var S=k.select(".nv-pieWrap").datum([n]);d3.transition(S).call(t),e.dispatch.on("stateChange",function(t){for(var e in t)d[e]=t[e];g.stateChange(d),x.update()}),g.on("changeState",function(t){void 0!==t.disabled&&(n.forEach(function(e,n){e.disabled=t.disabled[n]}),d.disabled=t.disabled),x.update()})}),m.renderEnd("pieChart immediate"),x}return t.dispatch.on("elementMouseover.tooltip",function(t){t.series={key:x.x()(t.data),value:x.y()(t.data),color:t.color,percent:t.percent},l||(delete t.percent,delete t.series.percent),n.data(t).hidden(!1)}),t.dispatch.on("elementMouseout.tooltip",function(t){n.hidden(!0)}),t.dispatch.on("elementMousemove.tooltip",function(t){n()}),x.legend=e,x.dispatch=g,x.pie=t,x.tooltip=n,x.options=r.utils.optionsFunc.bind(x),x._options=Object.create({},{width:{get:function(){return a},set:function(t){a=t}},height:{get:function(){return u},set:function(t){u=t}},noData:{get:function(){return h},set:function(t){h=t}},showTooltipPercent:{get:function(){return l},set:function(t){l=t}},showLegend:{get:function(){return c},set:function(t){c=t}},legendPosition:{get:function(){return s},set:function(t){s=t}},defaultState:{get:function(){return p},set:function(t){p=t}},color:{get:function(){return f},set:function(n){f=n,e.color(f),t.color(f)}},duration:{get:function(){return v},set:function(e){v=e,m.reset(v),t.duration(v)}},margin:{get:function(){return i},set:function(t){void 0!==t.top&&(i.top=t.top,o=t.top),i.right=void 0!==t.right?t.right:i.right,i.bottom=void 0!==t.bottom?t.bottom:i.bottom,i.left=void 0!==t.left?t.left:i.left}}}),r.utils.inheritOptions(x,t),r.utils.initOptions(x),x},r.models.sankey=function(){"use strict";var t={},e=24,n=8,i=[1,1],o=[],a=[],u=!0,l=function(t){o.forEach(function(t){t.sourceLinks=[],t.targetLinks=[]}),a.forEach(function(t){var e=t.source,n=t.target;"number"==typeof e&&(e=t.source=o[t.source]),"number"==typeof n&&(n=t.target=o[t.target]),e.sourceLinks.push(t),n.targetLinks.push(t)}),o.forEach(function(t){t.value=Math.max(d3.sum(t.sourceLinks,d),d3.sum(t.targetLinks,d))}),function(){for(var t,n,r=o,a=0;r.length&&a<o.length;)t=[],r.forEach(function(n){n.x=a,n.dx=e,n.sourceLinks.forEach(function(e){t.indexOf(e.target)<0&&t.push(e.target)})}),r=t,++a;u&&function(t){o.forEach(function(e){e.sourceLinks.length||(e.x=t-1)})}(a),n=(i[0]-e)/(a-1),o.forEach(function(t){t.x*=n})}(),function(t){var e,r=d3.nest().key(function(t){return t.x}).sortKeys(d3.ascending).entries(o).map(function(t){return t.values});e=d3.min(r,function(t){return(i[1]-(t.length-1)*n)/d3.sum(t,d)}),r.forEach(function(t){t.forEach(function(t,n){t.y=n,t.dy=t.value*e})}),a.forEach(function(t){t.dy=t.value*e}),p(),f();for(var u=1;t>0;--t)c(u*=.99),p(),f(),l(u),p(),f();function l(t){function e(t){return(t.source.y+t.sy+t.dy/2)*t.value}r.forEach(function(n,r){n.forEach(function(n){if(n.targetLinks.length){var r=d3.sum(n.targetLinks,e)/d3.sum(n.targetLinks,d);n.y+=(r-s(n))*t}})})}function c(t){function e(t){return(t.target.y+t.ty+t.dy/2)*t.value}r.slice().reverse().forEach(function(n){n.forEach(function(n){if(n.sourceLinks.length){var r=d3.sum(n.sourceLinks,e)/d3.sum(n.sourceLinks,d);n.y+=(r-s(n))*t}})})}function p(){r.forEach(function(t){var e,r,o,a=0,u=t.length;for(t.sort(h),o=0;o<u;++o)e=t[o],(r=a-e.y)>0&&(e.y+=r),a=e.y+e.dy+n;if((r=a-n-i[1])>0)for(a=e.y-=r,o=u-2;o>=0;--o)e=t[o],(r=e.y+e.dy+n-a)>0&&(e.y-=r),a=e.y})}function h(t,e){return t.y-e.y}}(t)},c=function(){var t=.5;function e(e){var n=e.source.x+e.source.dx,r=e.target.x,i=d3.interpolateNumber(n,r),o=i(t),a=i(1-t),u=e.source.y+e.sy+e.dy/2,l=e.target.y+e.ty+e.dy/2;return"M"+n+","+u+"C"+o+","+u+" "+a+","+l+" "+r+","+l}return e.curvature=function(n){return arguments.length?(t=+n,e):t},e},s=function(t){return t.y+t.dy/2};function f(){function t(t,e){return t.source.y-e.source.y}function e(t,e){return t.target.y-e.target.y}o.forEach(function(n){n.sourceLinks.sort(e),n.targetLinks.sort(t)}),o.forEach(function(t){var e=0,n=0;t.sourceLinks.forEach(function(t){t.sy=e,e+=t.dy}),t.targetLinks.forEach(function(t){t.ty=n,n+=t.dy})})}function d(t){return t.value}return t.options=r.utils.optionsFunc.bind(t),t._options=Object.create({},{nodeWidth:{get:function(){return e},set:function(t){e=+t}},nodePadding:{get:function(){return n},set:function(t){n=t}},nodes:{get:function(){return o},set:function(t){o=t}},links:{get:function(){return a},set:function(t){a=t}},size:{get:function(){return i},set:function(t){i=t}},sinksRight:{get:function(){return u},set:function(t){u=t}},layout:{get:function(){l(32)},set:function(t){l(t)}},relayout:{get:function(){f()},set:function(t){}},center:{get:function(){return s()},set:function(t){"function"==typeof t&&(s=t)}},link:{get:function(){return c()},set:function(t){return"function"==typeof t&&(c=t),c()}}}),r.utils.initOptions(t),t},r.models.sankeyChart=function(){"use strict";var t={top:5,right:0,bottom:5,left:0},e=r.models.sankey(),n=600,i=400,o=36,a=40,u="units",l=void 0,c=d3.format(",.0f"),s=function(t){return c(t)+" "+u},f=d3.scale.category20(),d=function(t){return t.source.name+" → "+t.target.name+"\n"+s(t.value)},p=function(t){return t.color=f(t.name.replace(/ .*/,""))},h=function(t){return d3.rgb(t.color).darker(2)},v=function(t){return t.name+"\n"+s(t.value)},g=function(t,e){t.append("text").attr("x",0).attr("y",0).attr("class","nvd3-sankey-chart-error").attr("text-anchor","middle").text(e)};function m(t){return t.each(function(r){var u={nodes:[{node:1,name:"Test 1"},{node:2,name:"Test 2"},{node:3,name:"Test 3"},{node:4,name:"Test 4"},{node:5,name:"Test 5"},{node:6,name:"Test 6"}],links:[{source:0,target:1,value:2295},{source:0,target:5,value:1199},{source:1,target:2,value:1119},{source:1,target:5,value:1176},{source:2,target:3,value:487},{source:2,target:5,value:632},{source:3,target:4,value:301},{source:3,target:5,value:186}]},c=!1,s=!1;if(("object"==typeof r.nodes&&r.nodes.length)>=0&&("object"==typeof r.links&&r.links.length)>=0&&(c=!0),r.nodes&&r.nodes.length>0&&r.links&&r.links.length>0&&(s=!0),!c)return console.error("NVD3 Sankey chart error:","invalid data format for",r),console.info("Valid data format is: ",u,JSON.stringify(u)),g(t,"Error loading chart, data is invalid"),!1;if(!s)return g(t,"No data available"),!1;var f=t.append("svg").attr("width",n).attr("height",i).append("g").attr("class","nvd3 nv-wrap nv-sankeyChart");e.nodeWidth(o).nodePadding(a).size([n,i]);var m=e.link();e.nodes(r.nodes).links(r.links).layout(32).center(l);var y=f.append("g").selectAll(".link").data(r.links).enter().append("path").attr("class","link").attr("d",m).style("stroke-width",function(t){return Math.max(1,t.dy)}).sort(function(t,e){return e.dy-t.dy});y.append("title").text(d);var b=f.append("g").selectAll(".node").data(r.nodes).enter().append("g").attr("class","node").attr("transform",function(t){return"translate("+t.x+","+t.y+")"}).call(d3.behavior.drag().origin(function(t){return t}).on("dragstart",function(){this.parentNode.appendChild(this)}).on("drag",function(t){d3.select(this).attr("transform","translate("+t.x+","+(t.y=Math.max(0,Math.min(i-t.dy,d3.event.y)))+")"),e.relayout(),y.attr("d",m)}));b.append("rect").attr("height",function(t){return t.dy}).attr("width",e.nodeWidth()).style("fill",p).style("stroke",h).append("title").text(v),b.append("text").attr("x",-6).attr("y",function(t){return t.dy/2}).attr("dy",".35em").attr("text-anchor","end").attr("transform",null).text(function(t){return t.name}).filter(function(t){return t.x<n/2}).attr("x",6+e.nodeWidth()).attr("text-anchor","start")}),m}return m.options=r.utils.optionsFunc.bind(m),m._options=Object.create({},{units:{get:function(){return u},set:function(t){u=t}},width:{get:function(){return n},set:function(t){n=t}},height:{get:function(){return i},set:function(t){i=t}},format:{get:function(){return s},set:function(t){s=t}},linkTitle:{get:function(){return d},set:function(t){d=t}},nodeWidth:{get:function(){return o},set:function(t){o=t}},nodePadding:{get:function(){return a},set:function(t){a=t}},center:{get:function(){return l},set:function(t){l=t}},margin:{get:function(){return t},set:function(e){t.top=void 0!==e.top?e.top:t.top,t.right=void 0!==e.right?e.right:t.right,t.bottom=void 0!==e.bottom?e.bottom:t.bottom,t.left=void 0!==e.left?e.left:t.left}},nodeStyle:{get:function(){return{}},set:function(t){p=void 0!==t.fillColor?t.fillColor:p,h=void 0!==t.strokeColor?t.strokeColor:h,v=void 0!==t.title?t.title:v}}}),r.utils.initOptions(m),m},r.models.scatter=function(){"use strict";var t,e,n,i,o,a,u,l,c={top:0,right:0,bottom:0,left:0},s=null,f=null,d=r.utils.defaultColor(),p=null,h=Math.floor(1e5*Math.random()),v=null,g=d3.scale.linear(),m=d3.scale.linear(),y=d3.scale.linear(),b=function(t){return t.x},x=function(t){return t.y},w=function(t){return t.size||1},k=function(t){return t.shape||"circle"},M=[],S=[],E=[],_=!0,C=function(t){return!t.notActive},T=!1,A=.1,P=!1,N=!0,O=!1,F=function(){return 25},L=null,D=null,R=null,I=null,j=null,z=null,W=!1,B=d3.dispatch("elementClick","elementDblClick","elementMouseover","elementMouseout","renderEnd"),U=!0,V=250,H=300,q=!1,Y=!1,G=r.utils.renderWatch(B,V),$=[16,256],X={};function K(t){var e;e=t[0].series+":"+t[1],delete X[e]}function Z(t){var e,n,r,i=function(t){var e;return e=t[0].series+":"+t[1],X[e]=X[e]||{}}(t),o=!1;for(e=1;e<arguments.length;e+=2)n=arguments[e],r=arguments[e+1](t[0],t[1]),i[n]===r&&i.hasOwnProperty(n)||(i[n]=r,o=!0);return o}function Q(V){return G.reset(),V.each(function(V){v=d3.select(this);var X=r.utils.availableWidth(s,v,c),J=r.utils.availableHeight(f,v,c);r.utils.initSVG(v),V.forEach(function(t,e){t.values.forEach(function(t){t.series=e})});var tt="function"==typeof Q.yScale().base,et=L&&D&&j?[]:d3.merge(V.map(function(t){return t.values.map(function(t,e){return{x:b(t,e),y:x(t,e),size:w(t,e)}})}));if(g.domain(L||d3.extent(et.map(function(t){return t.x}).concat(M))),T&&V[0]?g.range(R||[(X*A+X)/(2*V[0].values.length),X-X*(1+A)/(2*V[0].values.length)]):g.range(R||[0,X]),tt){var nt=d3.min(et.map(function(t){if(0!==t.y)return t.y}));m.clamp(!0).domain(D||d3.extent(et.map(function(t){return 0!==t.y?t.y:.1*nt}).concat(S))).range(I||[J,0])}else m.domain(D||d3.extent(et.map(function(t){return t.y}).concat(S))).range(I||[J,0]);y.domain(j||d3.extent(et.map(function(t){return t.size}).concat(E))).range(z||$),W=g.domain()[0]===g.domain()[1]||m.domain()[0]===m.domain()[1],g.domain()[0]===g.domain()[1]&&(g.domain()[0]?g.domain([g.domain()[0]-.01*g.domain()[0],g.domain()[1]+.01*g.domain()[1]]):g.domain([-1,1])),m.domain()[0]===m.domain()[1]&&(m.domain()[0]?m.domain([m.domain()[0]-.01*m.domain()[0],m.domain()[1]+.01*m.domain()[1]]):m.domain([-1,1])),isNaN(g.domain()[0])&&g.domain([-1,1]),isNaN(m.domain()[0])&&m.domain([-1,1]),t=t||g,e=e||m,n=n||y;var rt=g(1)!==t(1)||m(1)!==e(1)||y(1)!==n(1);u=u||f;var it=(a=a||s)!==s||u!==f,ot=(i=i||[])[0]!==g.domain()[0]||i[1]!==g.domain()[1];i=g.domain(),o=o||[],ot=ot||o[0]!==m.domain()[0]||o[1]!==m.domain()[1],o=m.domain();var at=v.selectAll("g.nv-wrap.nv-scatter").data([V]),ut=at.enter().append("g").attr("class","nvd3 nv-wrap nv-scatter nv-chart-"+h),lt=ut.append("defs"),ct=ut.append("g"),st=at.select("g");function ft(){if(Y=!1,!_)return!1;if(!0===U){at.select(".nv-point-paths").selectAll("path").remove();var t=d3.merge(V.map(function(t,e){return t.values.map(function(t,n){var i=b(t,n),o=x(t,n);return[r.utils.NaNtoZero(g(i))+1e-4*Math.random(),r.utils.NaNtoZero(m(o))+1e-4*Math.random(),e,n,t]}).filter(function(t,e){return C(t[4],e)})}));if(0==t.length)return!1;t.length<3&&(t.push([g.range()[0]-20,m.range()[0]-20,null,null]),t.push([g.range()[1]+20,m.range()[1]+20,null,null]),t.push([g.range()[0]-20,m.range()[0]+20,null,null]),t.push([g.range()[1]+20,m.range()[1]-20,null,null]));var e=d3.geom.polygon([[-10,-10],[-10,f+10],[s+10,f+10],[s+10,-10]]);t=t.sort(function(t,e){return t[0]-e[0]||t[1]-e[1]});for(var n=0;n<t.length-1;)Math.abs(t[n][0]-t[n+1][0])<1e-4&&Math.abs(t[n][1]-t[n+1][1])<1e-4?t.splice(n+1,1):n++;var i=d3.geom.voronoi(t).map(function(n,r){return{data:e.clip(n),series:t[r][2],point:t[r][3]}}),o=at.select(".nv-point-paths").selectAll("path").data(i),a=o.enter().append("svg:path").attr("d",function(t){return t&&t.data&&0!==t.data.length?"M"+t.data.join(",")+"Z":"M 0 0"}).attr("id",function(t,e){return"nv-path-"+e}).attr("clip-path",function(t,e){return"url(#nv-clip-"+h+"-"+e+")"});O&&a.style("fill",d3.rgb(230,230,230)).style("fill-opacity",.4).style("stroke-opacity",1).style("stroke",d3.rgb(200,200,200)),N&&(at.select(".nv-point-clips").selectAll("*").remove(),at.select(".nv-point-clips").selectAll("clipPath").data(t).enter().append("svg:clipPath").attr("id",function(t,e){return"nv-clip-"+h+"-"+e}).append("svg:circle").attr("cx",function(t){return t[0]}).attr("cy",function(t){return t[1]}).attr("r",F));var u=function(t,e,n){if(Y)return 0;var r=V[e.series];if(void 0!==r){var i=r.values[e.point];i.color=d(r,e.series),i.x=b(i),i.y=x(i);var o=v.node().getBoundingClientRect(),a=window.pageYOffset||document.documentElement.scrollTop,u=window.pageXOffset||document.documentElement.scrollLeft;n({point:i,series:r,pos:{left:g(b(i,e.point))+o.left+u+c.left+10,top:m(x(i,e.point))+o.top+a+c.top+10},relativePos:[g(b(i,e.point))+c.left,m(x(i,e.point))+c.top],seriesIndex:e.series,pointIndex:e.point,event:d3.event,element:t})}};o.on("click",function(t){u(this,t,B.elementClick)}).on("dblclick",function(t){u(this,t,B.elementDblClick)}).on("mouseover",function(t){u(this,t,B.elementMouseover)}).on("mouseout",function(t,e){u(this,t,B.elementMouseout)})}else at.select(".nv-groups").selectAll(".nv-group").selectAll(".nv-point").on("click",function(t,e){if(Y||!V[t.series])return 0;var n=V[t.series],r=n.values[e];B.elementClick({point:r,series:n,pos:[g(b(r,e))+c.left,m(x(r,e))+c.top],relativePos:[g(b(r,e))+c.left,m(x(r,e))+c.top],seriesIndex:t.series,pointIndex:e,event:d3.event,element:this})}).on("dblclick",function(t,e){if(Y||!V[t.series])return 0;var n=V[t.series],r=n.values[e];B.elementDblClick({point:r,series:n,pos:[g(b(r,e))+c.left,m(x(r,e))+c.top],relativePos:[g(b(r,e))+c.left,m(x(r,e))+c.top],seriesIndex:t.series,pointIndex:e})}).on("mouseover",function(t,e){if(Y||!V[t.series])return 0;var n=V[t.series],r=n.values[e];B.elementMouseover({point:r,series:n,pos:[g(b(r,e))+c.left,m(x(r,e))+c.top],relativePos:[g(b(r,e))+c.left,m(x(r,e))+c.top],seriesIndex:t.series,pointIndex:e,color:d(t,e)})}).on("mouseout",function(t,e){if(Y||!V[t.series])return 0;var n=V[t.series],r=n.values[e];B.elementMouseout({point:r,series:n,pos:[g(b(r,e))+c.left,m(x(r,e))+c.top],relativePos:[g(b(r,e))+c.left,m(x(r,e))+c.top],seriesIndex:t.series,pointIndex:e,color:d(t,e)})})}at.classed("nv-single-point",W),ct.append("g").attr("class","nv-groups"),ct.append("g").attr("class","nv-point-paths"),ut.append("g").attr("class","nv-point-clips"),at.attr("transform","translate("+c.left+","+c.top+")"),lt.append("clipPath").attr("id","nv-edge-clip-"+h).append("rect").attr("transform","translate( -10, -10)"),at.select("#nv-edge-clip-"+h+" rect").attr("width",X+20).attr("height",J>0?J+20:0),st.attr("clip-path",P?"url(#nv-edge-clip-"+h+")":""),Y=!0;var dt=at.select(".nv-groups").selectAll(".nv-group").data(function(t){return t},function(t){return t.key});dt.enter().append("g").style("stroke-opacity",1e-6).style("fill-opacity",1e-6),dt.exit().remove(),dt.attr("class",function(t,e){return(t.classed||"")+" nv-group nv-series-"+e}).classed("nv-noninteractive",!_).classed("hover",function(t){return t.hover}),dt.watchTransition(G,"scatter: groups").style("fill",function(t,e){return d(t,e)}).style("stroke",function(t,e){return t.pointBorderColor||p||d(t,e)}).style("stroke-opacity",1).style("fill-opacity",.5);var pt=dt.selectAll("path.nv-point").data(function(t){return t.values.map(function(t,e){return[t,e]}).filter(function(t,e){return C(t[0],e)})});if(pt.enter().append("path").attr("class",function(t){return"nv-point nv-point-"+t[1]}).style("fill",function(t){return t.color}).style("stroke",function(t){return t.color}).attr("transform",function(n){return"translate("+r.utils.NaNtoZero(t(b(n[0],n[1])))+","+r.utils.NaNtoZero(e(x(n[0],n[1])))+")"}).attr("d",r.utils.symbol().type(function(t){return k(t[0])}).size(function(t){return y(w(t[0],t[1]))})),pt.exit().each(K).remove(),dt.exit().selectAll("path.nv-point").watchTransition(G,"scatter exit").attr("transform",function(t){return"translate("+r.utils.NaNtoZero(g(b(t[0],t[1])))+","+r.utils.NaNtoZero(m(x(t[0],t[1])))+")"}).remove(),pt.filter(function(t){return Z(t,"x",b,"y",x)||rt||it||ot}).watchTransition(G,"scatter points").attr("transform",function(t){return"translate("+r.utils.NaNtoZero(g(b(t[0],t[1])))+","+r.utils.NaNtoZero(m(x(t[0],t[1])))+")"}),pt.filter(function(t){return Z(t,"shape",k,"size",w)||rt||it||ot}).watchTransition(G,"scatter points").attr("d",r.utils.symbol().type(function(t){return k(t[0])}).size(function(t){return y(w(t[0],t[1]))})),q){var ht=dt.selectAll(".nv-label").data(function(t){return t.values.map(function(t,e){return[t,e]}).filter(function(t,e){return C(t[0],e)})});ht.enter().append("text").style("fill",function(t,e){return t.color}).style("stroke-opacity",0).style("fill-opacity",1).attr("transform",function(n){return"translate("+(r.utils.NaNtoZero(t(b(n[0],n[1])))+Math.sqrt(y(w(n[0],n[1]))/Math.PI)+2)+","+r.utils.NaNtoZero(e(x(n[0],n[1])))+")"}).text(function(t,e){return t[0].label}),ht.exit().remove(),dt.exit().selectAll("path.nv-label").watchTransition(G,"scatter exit").attr("transform",function(t){return"translate("+(r.utils.NaNtoZero(g(b(t[0],t[1])))+Math.sqrt(y(w(t[0],t[1]))/Math.PI)+2)+","+r.utils.NaNtoZero(m(x(t[0],t[1])))+")"}).remove(),ht.each(function(t){d3.select(this).classed("nv-label",!0).classed("nv-label-"+t[1],!1).classed("hover",!1)}),ht.watchTransition(G,"scatter labels").attr("transform",function(t){return"translate("+(r.utils.NaNtoZero(g(b(t[0],t[1])))+Math.sqrt(y(w(t[0],t[1]))/Math.PI)+2)+","+r.utils.NaNtoZero(m(x(t[0],t[1])))+")"})}H?(clearTimeout(l),l=setTimeout(ft,H)):ft(),t=g.copy(),e=m.copy(),n=y.copy(),a=s,u=f}),G.renderEnd("scatter immediate"),Q}return Q.dispatch=B,Q.options=r.utils.optionsFunc.bind(Q),Q._calls=new function(){this.clearHighlights=function(){return r.dom.write(function(){v.selectAll(".nv-point.hover").classed("hover",!1)}),null},this.highlightPoint=function(t,e,n){r.dom.write(function(){v.select(".nv-groups").selectAll(".nv-series-"+t).selectAll(".nv-point-"+e).classed("hover",n)})}},B.on("elementMouseover.point",function(t){_&&Q._calls.highlightPoint(t.seriesIndex,t.pointIndex,!0)}),B.on("elementMouseout.point",function(t){_&&Q._calls.highlightPoint(t.seriesIndex,t.pointIndex,!1)}),Q._options=Object.create({},{width:{get:function(){return s},set:function(t){s=t}},height:{get:function(){return f},set:function(t){f=t}},xScale:{get:function(){return g},set:function(t){g=t}},yScale:{get:function(){return m},set:function(t){m=t}},pointScale:{get:function(){return y},set:function(t){y=t}},xDomain:{get:function(){return L},set:function(t){L=t}},yDomain:{get:function(){return D},set:function(t){D=t}},pointDomain:{get:function(){return j},set:function(t){j=t}},xRange:{get:function(){return R},set:function(t){R=t}},yRange:{get:function(){return I},set:function(t){I=t}},pointRange:{get:function(){return z},set:function(t){z=t}},forceX:{get:function(){return M},set:function(t){M=t}},forceY:{get:function(){return S},set:function(t){S=t}},forcePoint:{get:function(){return E},set:function(t){E=t}},interactive:{get:function(){return _},set:function(t){_=t}},pointActive:{get:function(){return C},set:function(t){C=t}},padDataOuter:{get:function(){return A},set:function(t){A=t}},padData:{get:function(){return T},set:function(t){T=t}},clipEdge:{get:function(){return P},set:function(t){P=t}},clipVoronoi:{get:function(){return N},set:function(t){N=t}},clipRadius:{get:function(){return F},set:function(t){F=t}},showVoronoi:{get:function(){return O},set:function(t){O=t}},id:{get:function(){return h},set:function(t){h=t}},interactiveUpdateDelay:{get:function(){return H},set:function(t){H=t}},showLabels:{get:function(){return q},set:function(t){q=t}},pointBorderColor:{get:function(){return p},set:function(t){p=t}},x:{get:function(){return b},set:function(t){b=d3.functor(t)}},y:{get:function(){return x},set:function(t){x=d3.functor(t)}},pointSize:{get:function(){return w},set:function(t){w=d3.functor(t)}},pointShape:{get:function(){return k},set:function(t){k=d3.functor(t)}},margin:{get:function(){return c},set:function(t){c.top=void 0!==t.top?t.top:c.top,c.right=void 0!==t.right?t.right:c.right,c.bottom=void 0!==t.bottom?t.bottom:c.bottom,c.left=void 0!==t.left?t.left:c.left}},duration:{get:function(){return V},set:function(t){V=t,G.reset(V)}},color:{get:function(){return d},set:function(t){d=r.utils.getColor(t)}},useVoronoi:{get:function(){return U},set:function(t){!1===(U=t)&&(N=!1)}}}),r.utils.initOptions(Q),Q},r.models.scatterChart=function(){"use strict";var t=r.models.scatter(),e=r.models.axis(),n=r.models.axis(),i=r.models.legend(),o=r.models.distribution(),a=r.models.distribution(),u=r.models.tooltip(),l={top:30,right:20,bottom:50,left:75},c=null,s=null,f=null,d=null,p=r.utils.defaultColor(),h=t.xScale(),v=t.yScale(),g=!1,m=!1,y=!0,b=!0,x=!0,w=!1,k=r.utils.state(),M=null,S=d3.dispatch("stateChange","changeState","renderEnd"),E=null,_=250,C=!1;t.xScale(h).yScale(v),e.orient("bottom").tickPadding(10),n.orient(w?"right":"left").tickPadding(10),o.axis("x"),a.axis("y"),u.headerFormatter(function(t,n){return e.tickFormat()(t,n)}).valueFormatter(function(t,e){return n.tickFormat()(t,e)});var T=r.utils.renderWatch(S,_),A=function(t){return function(){return{active:t.map(function(t){return!t.disabled})}}},P=function(t){return function(e){void 0!==e.active&&t.forEach(function(t,n){t.disabled=!e.active[n]})}};function N(E){return T.reset(),T.models(t),b&&T.models(e),x&&T.models(n),g&&T.models(o),m&&T.models(a),E.each(function(E){d=d3.select(this),r.utils.initSVG(d);var O,F=r.utils.availableWidth(s,d,l),L=r.utils.availableHeight(f,d,l);if(N.update=function(){0===_?d.call(N):d.transition().duration(_).call(N)},N.container=this,k.setter(P(E),N.update).getter(A(E)).update(),k.disabled=E.map(function(t){return!!t.disabled}),!M)for(O in M={},k)k[O]instanceof Array?M[O]=k[O].slice(0):M[O]=k[O];if(!(E&&E.length&&E.filter(function(t){return t.values.length}).length))return r.utils.noData(N,d),T.renderEnd("scatter immediate"),N;d.selectAll(".nv-noData").remove(),h=t.xScale(),v=t.yScale();var D=d.selectAll("g.nv-wrap.nv-scatterChart").data([E]),R=D.enter().append("g").attr("class","nvd3 nv-wrap nv-scatterChart nv-chart-"+t.id()).append("g"),I=D.select("g");if(R.append("rect").attr("class","nvd3 nv-background").style("pointer-events","none"),R.append("g").attr("class","nv-x nv-axis"),R.append("g").attr("class","nv-y nv-axis"),R.append("g").attr("class","nv-scatterWrap"),R.append("g").attr("class","nv-regressionLinesWrap"),R.append("g").attr("class","nv-distWrap"),R.append("g").attr("class","nv-legendWrap"),w&&I.select(".nv-y.nv-axis").attr("transform","translate("+F+",0)"),y){var j=F;i.width(j),D.select(".nv-legendWrap").datum(E).call(i),c||i.height()===l.top||(l.top=i.height(),L=r.utils.availableHeight(f,d,l)),D.select(".nv-legendWrap").attr("transform","translate(0,"+-l.top+")")}else I.select(".nv-legendWrap").selectAll("*").remove();D.attr("transform","translate("+l.left+","+l.top+")"),t.width(F).height(L).color(E.map(function(t,e){return t.color=t.color||p(t,e),t.color}).filter(function(t,e){return!E[e].disabled})).showLabels(C),D.select(".nv-scatterWrap").datum(E.filter(function(t){return!t.disabled})).call(t),D.select(".nv-regressionLinesWrap").attr("clip-path","url(#nv-edge-clip-"+t.id()+")");var z=D.select(".nv-regressionLinesWrap").selectAll(".nv-regLines").data(function(t){return t});z.enter().append("g").attr("class","nv-regLines");var W=z.selectAll(".nv-regLine").data(function(t){return[t]});W.enter().append("line").attr("class","nv-regLine").style("stroke-opacity",0),W.filter(function(t){return t.intercept&&t.slope}).watchTransition(T,"scatterPlusLineChart: regline").attr("x1",h.range()[0]).attr("x2",h.range()[1]).attr("y1",function(t,e){return v(h.domain()[0]*t.slope+t.intercept)}).attr("y2",function(t,e){return v(h.domain()[1]*t.slope+t.intercept)}).style("stroke",function(t,e,n){return p(t,n)}).style("stroke-opacity",function(t,e){return t.disabled||void 0===t.slope||void 0===t.intercept?0:1}),b&&(e.scale(h)._ticks(r.utils.calcTicksX(F/100,E)).tickSize(-L,0),I.select(".nv-x.nv-axis").attr("transform","translate(0,"+v.range()[0]+")").call(e)),x&&(n.scale(v)._ticks(r.utils.calcTicksY(L/36,E)).tickSize(-F,0),I.select(".nv-y.nv-axis").call(n)),g&&(o.getData(t.x()).scale(h).width(F).color(E.map(function(t,e){return t.color||p(t,e)}).filter(function(t,e){return!E[e].disabled})),R.select(".nv-distWrap").append("g").attr("class","nv-distributionX"),I.select(".nv-distributionX").attr("transform","translate(0,"+v.range()[0]+")").datum(E.filter(function(t){return!t.disabled})).call(o)),m&&(a.getData(t.y()).scale(v).width(L).color(E.map(function(t,e){return t.color||p(t,e)}).filter(function(t,e){return!E[e].disabled})),R.select(".nv-distWrap").append("g").attr("class","nv-distributionY"),I.select(".nv-distributionY").attr("transform","translate("+(w?F:-a.size())+",0)").datum(E.filter(function(t){return!t.disabled})).call(a)),i.dispatch.on("stateChange",function(t){for(var e in t)k[e]=t[e];S.stateChange(k),N.update()}),S.on("changeState",function(t){void 0!==t.disabled&&(E.forEach(function(e,n){e.disabled=t.disabled[n]}),k.disabled=t.disabled),N.update()}),t.dispatch.on("elementMouseout.tooltip",function(e){u.hidden(!0),d.select(".nv-chart-"+t.id()+" .nv-series-"+e.seriesIndex+" .nv-distx-"+e.pointIndex).attr("y1",0),d.select(".nv-chart-"+t.id()+" .nv-series-"+e.seriesIndex+" .nv-disty-"+e.pointIndex).attr("x2",a.size())}),t.dispatch.on("elementMouseover.tooltip",function(t){d.select(".nv-series-"+t.seriesIndex+" .nv-distx-"+t.pointIndex).attr("y1",t.relativePos[1]-L),d.select(".nv-series-"+t.seriesIndex+" .nv-disty-"+t.pointIndex).attr("x2",t.relativePos[0]+o.size()),u.data(t).hidden(!1)}),h.copy(),v.copy()}),T.renderEnd("scatter with line immediate"),N}return N.dispatch=S,N.scatter=t,N.legend=i,N.xAxis=e,N.yAxis=n,N.distX=o,N.distY=a,N.tooltip=u,N.options=r.utils.optionsFunc.bind(N),N._options=Object.create({},{width:{get:function(){return s},set:function(t){s=t}},height:{get:function(){return f},set:function(t){f=t}},container:{get:function(){return d},set:function(t){d=t}},showDistX:{get:function(){return g},set:function(t){g=t}},showDistY:{get:function(){return m},set:function(t){m=t}},showLegend:{get:function(){return y},set:function(t){y=t}},showXAxis:{get:function(){return b},set:function(t){b=t}},showYAxis:{get:function(){return x},set:function(t){x=t}},defaultState:{get:function(){return M},set:function(t){M=t}},noData:{get:function(){return E},set:function(t){E=t}},duration:{get:function(){return _},set:function(t){_=t}},showLabels:{get:function(){return C},set:function(t){C=t}},margin:{get:function(){return l},set:function(t){void 0!==t.top&&(l.top=t.top,c=t.top),l.right=void 0!==t.right?t.right:l.right,l.bottom=void 0!==t.bottom?t.bottom:l.bottom,l.left=void 0!==t.left?t.left:l.left}},rightAlignYAxis:{get:function(){return w},set:function(t){w=t,n.orient(t?"right":"left")}},color:{get:function(){return p},set:function(t){p=r.utils.getColor(t),i.color(p),o.color(p),a.color(p)}}}),r.utils.inheritOptions(N,t),r.utils.initOptions(N),N},r.models.sparkline=function(){"use strict";var t,e,n,i,o={top:2,right:0,bottom:2,left:0},a=400,u=32,l=null,c=!0,s=d3.scale.linear(),f=d3.scale.linear(),d=function(t){return t.x},p=function(t){return t.y},h=r.utils.getColor(["#000"]),v=!0,g=!0,m=d3.dispatch("renderEnd"),y=r.utils.renderWatch(m);function b(c){return y.reset(),c.each(function(c){var m=a-o.left-o.right,y=u-o.top-o.bottom;l=d3.select(this),r.utils.initSVG(l),s.domain(t||d3.extent(c,d)).range(n||[0,m]),f.domain(e||d3.extent(c,p)).range(i||[y,0]);var b=l.selectAll("g.nv-wrap.nv-sparkline").data([c]);b.enter().append("g").attr("class","nvd3 nv-wrap nv-sparkline").append("g"),b.select("g"),b.attr("transform","translate("+o.left+","+o.top+")");var x=b.selectAll("path").data(function(t){return[t]});x.enter().append("path"),x.exit().remove(),x.style("stroke",function(t,e){return t.color||h(t,e)}).attr("d",d3.svg.line().x(function(t,e){return s(d(t,e))}).y(function(t,e){return f(p(t,e))}));var w=b.selectAll("circle.nv-point").data(function(t){var e=t.map(function(t,e){return p(t,e)});function n(e){if(-1!=e){var n=t[e];return n.pointIndex=e,n}return null}var r=n(e.lastIndexOf(f.domain()[1])),i=n(e.indexOf(f.domain()[0])),o=n(e.length-1);return[v?i:null,v?r:null,g?o:null].filter(function(t){return null!=t})});w.enter().append("circle"),w.exit().remove(),w.attr("cx",function(t,e){return s(d(t,t.pointIndex))}).attr("cy",function(t,e){return f(p(t,t.pointIndex))}).attr("r",2).attr("class",function(t,e){return d(t,t.pointIndex)==s.domain()[1]?"nv-point nv-currentValue":p(t,t.pointIndex)==f.domain()[0]?"nv-point nv-minValue":"nv-point nv-maxValue"})}),y.renderEnd("sparkline immediate"),b}return b.options=r.utils.optionsFunc.bind(b),b._options=Object.create({},{width:{get:function(){return a},set:function(t){a=t}},height:{get:function(){return u},set:function(t){u=t}},xDomain:{get:function(){return t},set:function(e){t=e}},yDomain:{get:function(){return e},set:function(t){e=t}},xRange:{get:function(){return n},set:function(t){n=t}},yRange:{get:function(){return i},set:function(t){i=t}},xScale:{get:function(){return s},set:function(t){s=t}},yScale:{get:function(){return f},set:function(t){f=t}},animate:{get:function(){return c},set:function(t){c=t}},showMinMaxPoints:{get:function(){return v},set:function(t){v=t}},showCurrentPoint:{get:function(){return g},set:function(t){g=t}},x:{get:function(){return d},set:function(t){d=d3.functor(t)}},y:{get:function(){return p},set:function(t){p=d3.functor(t)}},margin:{get:function(){return o},set:function(t){o.top=void 0!==t.top?t.top:o.top,o.right=void 0!==t.right?t.right:o.right,o.bottom=void 0!==t.bottom?t.bottom:o.bottom,o.left=void 0!==t.left?t.left:o.left}},color:{get:function(){return h},set:function(t){h=r.utils.getColor(t)}}}),b.dispatch=m,r.utils.initOptions(b),b},r.models.sparklinePlus=function(){"use strict";var t,e,n=r.models.sparkline(),i={top:15,right:100,bottom:10,left:50},o=null,a=null,u=[],l=!1,c=d3.format(",r"),s=d3.format(",.2f"),f=!0,d=!0,p=!1,h=null,v=d3.dispatch("renderEnd"),g=r.utils.renderWatch(v);function m(h){return g.reset(),g.models(n),h.each(function(h){var v=d3.select(this);r.utils.initSVG(v);var g=r.utils.availableWidth(o,v,i),y=r.utils.availableHeight(a,v,i);if(m.update=function(){v.call(m)},m.container=this,!h||!h.length)return r.utils.noData(m,v),m;v.selectAll(".nv-noData").remove();var b=n.y()(h[h.length-1],h.length-1);t=n.xScale(),e=n.yScale();var x=v.selectAll("g.nv-wrap.nv-sparklineplus").data([h]),w=x.enter().append("g").attr("class","nvd3 nv-wrap nv-sparklineplus").append("g"),k=x.select("g");w.append("g").attr("class","nv-sparklineWrap"),w.append("g").attr("class","nv-valueWrap"),w.append("g").attr("class","nv-hoverArea"),x.attr("transform","translate("+i.left+","+i.top+")");var M=k.select(".nv-sparklineWrap");if(n.width(g).height(y),M.call(n),f){var S=k.select(".nv-valueWrap").selectAll(".nv-currentValue").data([b]);S.enter().append("text").attr("class","nv-currentValue").attr("dx",p?-8:8).attr("dy",".9em").style("text-anchor",p?"end":"start"),S.attr("x",g+(p?i.right:0)).attr("y",d?function(t){return e(t)}:0).style("fill",n.color()(h[h.length-1],h.length-1)).text(s(b))}function E(){if(!l){var e=k.selectAll(".nv-hoverValue").data(u),r=e.enter().append("g").attr("class","nv-hoverValue").style("stroke-opacity",0).style("fill-opacity",0);e.exit().transition().duration(250).style("stroke-opacity",0).style("fill-opacity",0).remove(),e.attr("transform",function(e){return"translate("+t(n.x()(h[e],e))+",0)"}).transition().duration(250).style("stroke-opacity",1).style("fill-opacity",1),u.length&&(r.append("line").attr("x1",0).attr("y1",-i.top).attr("x2",0).attr("y2",y),r.append("text").attr("class","nv-xValue").attr("x",-6).attr("y",-i.top).attr("text-anchor","end").attr("dy",".9em"),k.select(".nv-hoverValue .nv-xValue").text(c(n.x()(h[u[0]],u[0]))),r.append("text").attr("class","nv-yValue").attr("x",6).attr("y",-i.top).attr("text-anchor","start").attr("dy",".9em"),k.select(".nv-hoverValue .nv-yValue").text(s(n.y()(h[u[0]],u[0]))))}}w.select(".nv-hoverArea").append("rect").on("mousemove",function(){if(!l){var e=d3.mouse(this)[0]-i.left;u=[function(t,e){for(var r=Math.abs(n.x()(t[0],0)-e),i=0,o=0;o<t.length;o++)Math.abs(n.x()(t[o],o)-e)<r&&(r=Math.abs(n.x()(t[o],o)-e),i=o);return i}(h,Math.round(t.invert(e)))],E()}}).on("click",function(){l=!l}).on("mouseout",function(){u=[],E()}),k.select(".nv-hoverArea rect").attr("transform",function(t){return"translate("+-i.left+","+-i.top+")"}).attr("width",g+i.left+i.right).attr("height",y+i.top)}),g.renderEnd("sparklinePlus immediate"),m}return m.dispatch=v,m.sparkline=n,m.options=r.utils.optionsFunc.bind(m),m._options=Object.create({},{width:{get:function(){return o},set:function(t){o=t}},height:{get:function(){return a},set:function(t){a=t}},xTickFormat:{get:function(){return c},set:function(t){c=t}},yTickFormat:{get:function(){return s},set:function(t){s=t}},showLastValue:{get:function(){return f},set:function(t){f=t}},alignValue:{get:function(){return d},set:function(t){d=t}},rightAlignValue:{get:function(){return p},set:function(t){p=t}},noData:{get:function(){return h},set:function(t){h=t}},margin:{get:function(){return i},set:function(t){i.top=void 0!==t.top?t.top:i.top,i.right=void 0!==t.right?t.right:i.right,i.bottom=void 0!==t.bottom?t.bottom:i.bottom,i.left=void 0!==t.left?t.left:i.left}}}),r.utils.inheritOptions(m,n),r.utils.initOptions(m),m},r.models.stackedArea=function(){"use strict";var t,e,n={top:0,right:0,bottom:0,left:0},i=960,o=500,a=r.utils.defaultColor(),u=Math.floor(1e5*Math.random()),l=null,c=function(t){return t.x},s=function(t){return t.y},f=function(t,e){return!isNaN(s(t,e))&&null!==s(t,e)},d="stack",p="zero",h="default",v="linear",g=!1,m=r.models.scatter(),y=250,b=d3.dispatch("areaClick","areaMouseover","areaMouseout","renderEnd","elementClick","elementMouseover","elementMouseout");m.pointSize(2.2).pointDomain([2.2,2.2]);var x=r.utils.renderWatch(b,y);function w(d){return x.reset(),x.models(m),d.each(function(d){var y=i-n.left-n.right,k=o-n.top-n.bottom;l=d3.select(this),r.utils.initSVG(l),t=m.xScale(),e=m.yScale();var M=d;d.forEach(function(t,e){t.seriesIndex=e,t.values=t.values.map(function(t,n){return t.index=n,t.seriesIndex=e,t})});var S=d.filter(function(t){return!t.disabled});d=d3.layout.stack().order(h).offset(p).values(function(t){return t.values}).x(c).y(s).out(function(t,e,n){t.display={y:n,y0:e}})(S);var E=l.selectAll("g.nv-wrap.nv-stackedarea").data([d]),_=E.enter().append("g").attr("class","nvd3 nv-wrap nv-stackedarea"),C=_.append("defs"),T=_.append("g"),A=E.select("g");T.append("g").attr("class","nv-areaWrap"),T.append("g").attr("class","nv-scatterWrap"),E.attr("transform","translate("+n.left+","+n.top+")"),0==m.forceY().length&&m.forceY().push(0),m.width(y).height(k).x(c).y(function(t){if(void 0!==t.display)return t.display.y+t.display.y0}).color(d.map(function(t,e){return t.color=t.color||a(t,t.seriesIndex),t.color})),A.select(".nv-scatterWrap").datum(d).call(m),C.append("clipPath").attr("id","nv-edge-clip-"+u).append("rect"),E.select("#nv-edge-clip-"+u+" rect").attr("width",y).attr("height",k),A.attr("clip-path",g?"url(#nv-edge-clip-"+u+")":"");var P=d3.svg.area().defined(f).x(function(e,n){return t(c(e,n))}).y0(function(t){return e(t.display.y0)}).y1(function(t){return e(t.display.y+t.display.y0)}).interpolate(v),N=d3.svg.area().defined(f).x(function(e,n){return t(c(e,n))}).y0(function(t){return e(t.display.y0)}).y1(function(t){return e(t.display.y0)}),O=A.select(".nv-areaWrap").selectAll("path.nv-area").data(function(t){return t});O.enter().append("path").attr("class",function(t,e){return"nv-area nv-area-"+e}).attr("d",function(t,e){return N(t.values,t.seriesIndex)}).on("mouseover",function(t,e){d3.select(this).classed("hover",!0),b.areaMouseover({point:t,series:t.key,pos:[d3.event.pageX,d3.event.pageY],seriesIndex:t.seriesIndex})}).on("mouseout",function(t,e){d3.select(this).classed("hover",!1),b.areaMouseout({point:t,series:t.key,pos:[d3.event.pageX,d3.event.pageY],seriesIndex:t.seriesIndex})}).on("click",function(t,e){d3.select(this).classed("hover",!1),b.areaClick({point:t,series:t.key,pos:[d3.event.pageX,d3.event.pageY],seriesIndex:t.seriesIndex})}),O.exit().remove(),O.style("fill",function(t,e){return t.color||a(t,t.seriesIndex)}).style("stroke",function(t,e){return t.color||a(t,t.seriesIndex)}),O.watchTransition(x,"stackedArea path").attr("d",function(t,e){return P(t.values,e)}),m.dispatch.on("elementMouseover.area",function(t){A.select(".nv-chart-"+u+" .nv-area-"+t.seriesIndex).classed("hover",!0)}),m.dispatch.on("elementMouseout.area",function(t){A.select(".nv-chart-"+u+" .nv-area-"+t.seriesIndex).classed("hover",!1)}),w.d3_stackedOffset_stackPercent=function(t){var e,n,r,i=t.length,o=t[0].length,a=[];for(n=0;n<o;++n){for(e=0,r=0;e<M.length;e++)r+=s(M[e].values[n]);if(r)for(e=0;e<i;e++)t[e][n][1]/=r;else for(e=0;e<i;e++)t[e][n][1]=0}for(n=0;n<o;++n)a[n]=0;return a}}),x.renderEnd("stackedArea immediate"),w}return w.dispatch=b,w.scatter=m,m.dispatch.on("elementClick",function(){b.elementClick.apply(this,arguments)}),m.dispatch.on("elementMouseover",function(){b.elementMouseover.apply(this,arguments)}),m.dispatch.on("elementMouseout",function(){b.elementMouseout.apply(this,arguments)}),w.interpolate=function(t){return arguments.length?(v=t,w):v},w.duration=function(t){return arguments.length?(y=t,x.reset(y),m.duration(y),w):y},w.dispatch=b,w.scatter=m,w.options=r.utils.optionsFunc.bind(w),w._options=Object.create({},{width:{get:function(){return i},set:function(t){i=t}},height:{get:function(){return o},set:function(t){o=t}},defined:{get:function(){return f},set:function(t){f=t}},clipEdge:{get:function(){return g},set:function(t){g=t}},offset:{get:function(){return p},set:function(t){p=t}},order:{get:function(){return h},set:function(t){h=t}},interpolate:{get:function(){return v},set:function(t){v=t}},x:{get:function(){return c},set:function(t){c=d3.functor(t)}},y:{get:function(){return s},set:function(t){s=d3.functor(t)}},margin:{get:function(){return n},set:function(t){n.top=void 0!==t.top?t.top:n.top,n.right=void 0!==t.right?t.right:n.right,n.bottom=void 0!==t.bottom?t.bottom:n.bottom,n.left=void 0!==t.left?t.left:n.left}},color:{get:function(){return a},set:function(t){a=r.utils.getColor(t)}},style:{get:function(){return d},set:function(t){switch(d=t){case"stack":w.offset("zero"),w.order("default");break;case"stream":w.offset("wiggle"),w.order("inside-out");break;case"stream-center":w.offset("silhouette"),w.order("inside-out");break;case"expand":w.offset("expand"),w.order("default");break;case"stack_percent":w.offset(w.d3_stackedOffset_stackPercent),w.order("default")}}},duration:{get:function(){return y},set:function(t){y=t,x.reset(y),m.duration(y)}}}),r.utils.inheritOptions(w,m),r.utils.initOptions(w),w},r.models.stackedAreaChart=function(){"use strict";var t,e,n=r.models.stackedArea(),i=r.models.axis(),o=r.models.axis(),a=r.models.legend(),u=r.models.legend(),l=r.interactiveGuideline(),c=r.models.tooltip(),s=r.models.focus(r.models.stackedArea()),f={top:10,right:25,bottom:50,left:60},d=null,p=null,h=null,v=r.utils.defaultColor(),g=!0,m=!0,y="top",b=!0,x=!0,w=!1,k=!1,M=!1,S=!0,E="TOTAL",_=r.utils.state(),C=null,T=null,A=d3.dispatch("stateChange","changeState","renderEnd"),P=250,N=["Stacked","Stream","Expanded"],O={},F=250;_.style=n.style(),i.orient("bottom").tickPadding(7),o.orient(w?"right":"left"),c.headerFormatter(function(t,e){return i.tickFormat()(t,e)}).valueFormatter(function(t,e){return o.tickFormat()(t,e)}),l.tooltip.headerFormatter(function(t,e){return i.tickFormat()(t,e)}).valueFormatter(function(t,e){return null==t?"N/A":o.tickFormat()(t,e)});var L=null,D=null;u.updateState(!1);var R=r.utils.renderWatch(A),I=(n.style(),function(t){return function(){return{active:t.map(function(t){return!t.disabled}),style:n.style()}}}),j=function(t){return function(e){void 0!==e.style&&e.style,void 0!==e.active&&t.forEach(function(t,n){t.disabled=!e.active[n]})}},z=d3.format("%");function W(c){return R.reset(),R.models(n),b&&R.models(i),x&&R.models(o),c.each(function(c){var T=d3.select(this);r.utils.initSVG(T);var R,B=r.utils.availableWidth(p,T,f),U=r.utils.availableHeight(h,T,f)-(k?s.height():0);if(W.update=function(){T.transition().duration(F).call(W)},W.container=this,_.setter(j(c),W.update).getter(I(c)).update(),_.disabled=c.map(function(t){return!!t.disabled}),!C)for(R in C={},_)_[R]instanceof Array?C[R]=_[R].slice(0):C[R]=_[R];if(!(c&&c.length&&c.filter(function(t){return t.values.length}).length))return r.utils.noData(W,T),W;T.selectAll(".nv-noData").remove(),t=n.xScale(),e=n.yScale();var V=T.selectAll("g.nv-wrap.nv-stackedAreaChart").data([c]),H=V.enter().append("g").attr("class","nvd3 nv-wrap nv-stackedAreaChart").append("g"),q=V.select("g");H.append("g").attr("class","nv-legendWrap"),H.append("g").attr("class","nv-controlsWrap");var Y=H.append("g").attr("class","nv-focus");if(Y.append("g").attr("class","nv-background").append("rect"),Y.append("g").attr("class","nv-x nv-axis"),Y.append("g").attr("class","nv-y nv-axis"),Y.append("g").attr("class","nv-stackedWrap"),Y.append("g").attr("class","nv-interactive"),H.append("g").attr("class","nv-focusWrap"),m){var G=g&&"top"===y?B-P:B;if(a.width(G),q.select(".nv-legendWrap").datum(c).call(a),"bottom"===y){var $=10+(b?12:0);f.bottom=Math.max(a.height()+$,f.bottom);var X=(U=r.utils.availableHeight(h,T,f)-(k?s.height():0))+$;q.select(".nv-legendWrap").attr("transform","translate(0,"+X+")")}else"top"===y&&(d||f.top==a.height()||(f.top=a.height(),U=r.utils.availableHeight(h,T,f)-(k?s.height():0)),q.select(".nv-legendWrap").attr("transform","translate("+(B-G)+","+-f.top+")"))}else q.select(".nv-legendWrap").selectAll("*").remove();if(g){var K=[{key:O.stacked||"Stacked",metaKey:"Stacked",disabled:"stack"!=n.style(),style:"stack"},{key:O.stream||"Stream",metaKey:"Stream",disabled:"stream"!=n.style(),style:"stream"},{key:O.expanded||"Expanded",metaKey:"Expanded",disabled:"expand"!=n.style(),style:"expand"},{key:O.stack_percent||"Stack %",metaKey:"Stack_Percent",disabled:"stack_percent"!=n.style(),style:"stack_percent"}];P=N.length/3*260,K=K.filter(function(t){return-1!==N.indexOf(t.metaKey)}),u.width(P).color(["#444","#444","#444"]),q.select(".nv-controlsWrap").datum(K).call(u);var Z=Math.max(u.height(),m&&"top"===y?a.height():0);f.top!=Z&&(f.top=Z,U=r.utils.availableHeight(h,T,f)-(k?s.height():0)),q.select(".nv-controlsWrap").attr("transform","translate(0,"+-f.top+")")}else q.select(".nv-controlsWrap").selectAll("*").remove();V.attr("transform","translate("+f.left+","+f.top+")"),w&&q.select(".nv-y.nv-axis").attr("transform","translate("+B+",0)"),M&&(l.width(B).height(U).margin({left:f.left,top:f.top}).svgContainer(T).xScale(t),V.select(".nv-interactive").call(l)),q.select(".nv-focus .nv-background rect").attr("width",B).attr("height",U),n.width(B).height(U).color(c.map(function(t,e){return t.color||v(t,e)}).filter(function(t,e){return!c[e].disabled}));var Q,J=q.select(".nv-focus .nv-stackedWrap").datum(c.filter(function(t){return!t.disabled}));function tt(){b&&q.select(".nv-focus .nv-x.nv-axis").attr("transform","translate(0,"+U+")").transition().duration(F).call(i)}function et(){if(x){if("expand"===n.style()||"stack_percent"===n.style()){var t=o.tickFormat();L&&t===z||(L=t),o.tickFormat(z)}else L&&(o.tickFormat(L),L=null);q.select(".nv-focus .nv-y.nv-axis").transition().duration(0).call(o)}}if(b&&i.scale(t)._ticks(r.utils.calcTicksX(B/100,c)).tickSize(-U,0),x&&(Q="wiggle"===n.offset()?0:r.utils.calcTicksY(U/36,c),o.scale(e)._ticks(Q).tickSize(-B,0)),k){s.width(B),q.select(".nv-focusWrap").attr("transform","translate(0,"+(U+f.bottom+s.margin().top)+")").datum(c.filter(function(t){return!t.disabled})).call(s);var nt=s.brush.empty()?s.xDomain():s.brush.extent();null!==nt&&rt(nt)}else J.transition().call(n),tt(),et();function rt(t){q.select(".nv-focus .nv-stackedWrap").datum(c.filter(function(t){return!t.disabled}).map(function(e,r){return{key:e.key,area:e.area,classed:e.classed,values:e.values.filter(function(e,r){return n.x()(e,r)>=t[0]&&n.x()(e,r)<=t[1]}),disableTooltip:e.disableTooltip}})).transition().duration(F).call(n),tt(),et()}n.dispatch.on("areaClick.toggle",function(t){1===c.filter(function(t){return!t.disabled}).length?c.forEach(function(t){t.disabled=!1}):c.forEach(function(e,n){e.disabled=n!=t.seriesIndex}),_.disabled=c.map(function(t){return!!t.disabled}),A.stateChange(_),W.update()}),a.dispatch.on("stateChange",function(t){for(var e in t)_[e]=t[e];A.stateChange(_),W.update()}),u.dispatch.on("legendClick",function(t,e){t.disabled&&(K=K.map(function(t){return t.disabled=!0,t}),t.disabled=!1,n.style(t.style),_.style=n.style(),A.stateChange(_),W.update())}),l.dispatch.on("elementMousemove",function(t){n.clearHighlights();var e,i,o,a=[],u=0,s=!0,f=!1;if(c.filter(function(t,e){return t.seriesIndex=e,!t.disabled}).forEach(function(l,d){i=r.interactiveBisect(l.values,t.pointXValue,W.x());var p=l.values[i],h=W.y()(p,i);if(null!=h&&h>0&&(n.highlightPoint(d,i,!0),f=!0),d!==c.length-1||f||n.highlightPoint(d,i,!0),void 0!==p){void 0===e&&(e=p),void 0===o&&(o=W.xScale()(W.x()(p,i)));var g="expand"==n.style()?p.display.y:W.y()(p,i);a.push({key:l.key,value:g,color:v(l,l.seriesIndex),point:p}),S&&"expand"!=n.style()&&null!=g&&(u+=g,s=!1)}}),a.reverse(),a.length>2){var d=W.yScale().invert(t.mouseY),p=null;a.forEach(function(t,e){d=Math.abs(d);var n=Math.abs(t.point.display.y0),r=Math.abs(t.point.display.y);d>=n&&d<=r+n&&(p=e)}),null!=p&&(a[p].highlight=!0)}S&&"expand"!=n.style()&&a.length>=2&&!s&&a.push({key:E,value:u,total:!0});var h=W.x()(e,i),g=l.tooltip.valueFormatter();"expand"===n.style()||"stack_percent"===n.style()?(D||(D=g),g=d3.format(".1%")):D&&(g=D,D=null),l.tooltip.valueFormatter(g).data({value:h,series:a})(),l.renderGuideLine(o)}),l.dispatch.on("elementMouseout",function(t){n.clearHighlights()}),s.dispatch.on("onBrush",function(t){rt(t)}),A.on("changeState",function(t){void 0!==t.disabled&&c.length===t.disabled.length&&(c.forEach(function(e,n){e.disabled=t.disabled[n]}),_.disabled=t.disabled),void 0!==t.style&&(n.style(t.style),t.style),W.update()})}),R.renderEnd("stacked Area chart immediate"),W}return n.dispatch.on("elementMouseover.tooltip",function(t){t.point.x=n.x()(t.point),t.point.y=n.y()(t.point),c.data(t).hidden(!1)}),n.dispatch.on("elementMouseout.tooltip",function(t){c.hidden(!0)}),W.dispatch=A,W.stacked=n,W.legend=a,W.controls=u,W.xAxis=i,W.x2Axis=s.xAxis,W.yAxis=o,W.y2Axis=s.yAxis,W.interactiveLayer=l,W.tooltip=c,W.focus=s,W.dispatch=A,W.options=r.utils.optionsFunc.bind(W),W._options=Object.create({},{width:{get:function(){return p},set:function(t){p=t}},height:{get:function(){return h},set:function(t){h=t}},showLegend:{get:function(){return m},set:function(t){m=t}},legendPosition:{get:function(){return y},set:function(t){y=t}},showXAxis:{get:function(){return b},set:function(t){b=t}},showYAxis:{get:function(){return x},set:function(t){x=t}},defaultState:{get:function(){return C},set:function(t){C=t}},noData:{get:function(){return T},set:function(t){T=t}},showControls:{get:function(){return g},set:function(t){g=t}},controlLabels:{get:function(){return O},set:function(t){O=t}},controlOptions:{get:function(){return N},set:function(t){N=t}},showTotalInTooltip:{get:function(){return S},set:function(t){S=t}},totalLabel:{get:function(){return E},set:function(t){E=t}},focusEnable:{get:function(){return k},set:function(t){k=t}},focusHeight:{get:function(){return s.height()},set:function(t){s.height(t)}},brushExtent:{get:function(){return s.brushExtent()},set:function(t){s.brushExtent(t)}},margin:{get:function(){return f},set:function(t){void 0!==t.top&&(f.top=t.top,d=t.top),f.right=void 0!==t.right?t.right:f.right,f.bottom=void 0!==t.bottom?t.bottom:f.bottom,f.left=void 0!==t.left?t.left:f.left}},focusMargin:{get:function(){return s.margin},set:function(t){s.margin.top=void 0!==t.top?t.top:s.margin.top,s.margin.right=void 0!==t.right?t.right:s.margin.right,s.margin.bottom=void 0!==t.bottom?t.bottom:s.margin.bottom,s.margin.left=void 0!==t.left?t.left:s.margin.left}},duration:{get:function(){return F},set:function(t){F=t,R.reset(F),n.duration(F),i.duration(F),o.duration(F)}},color:{get:function(){return v},set:function(t){v=r.utils.getColor(t),a.color(v),n.color(v),s.color(v)}},x:{get:function(){return n.x()},set:function(t){n.x(t),s.x(t)}},y:{get:function(){return n.y()},set:function(t){n.y(t),s.y(t)}},rightAlignYAxis:{get:function(){return w},set:function(t){w=t,o.orient(w?"right":"left")}},useInteractiveGuideline:{get:function(){return M},set:function(t){M=!!t,W.interactive(!t),W.useVoronoi(!t),n.scatter.interactive(!t)}}}),r.utils.inheritOptions(W,n),r.utils.initOptions(W),W},r.models.stackedAreaWithFocusChart=function(){return r.models.stackedAreaChart().margin({bottom:30}).focusEnable(!0)},r.models.sunburst=function(){"use strict";var t,e,n,i,o={top:0,right:0,bottom:0,left:0},a=600,u=600,l="count",c={count:function(t){return 1},value:function(t){return t.value||t.size},size:function(t){return t.value||t.size}},s=Math.floor(1e4*Math.random()),f=null,d=r.utils.defaultColor(),p=!1,h=function(t){return"count"===l?t.name+" #"+t.value:t.name+" "+(t.value||t.size)},v=.02,g=function(t,e){return t.name>e.name},m=function(t,e){return void 0!==t.parent?t.name+"-"+t.parent.name+"-"+e:t.name},y=!0,b=500,x=d3.dispatch("chartClick","elementClick","elementDblClick","elementMousemove","elementMouseover","elementMouseout","renderEnd"),w=d3.scale.linear().range([0,2*Math.PI]),k=d3.scale.sqrt(),M=d3.layout.partition().sort(g),S={},E=d3.svg.arc().startAngle(function(t){return Math.max(0,Math.min(2*Math.PI,w(t.x)))}).endAngle(function(t){return Math.max(0,Math.min(2*Math.PI,w(t.x+t.dx)))}).innerRadius(function(t){return Math.max(0,k(t.y))}).outerRadius(function(t){return Math.max(0,k(t.y+t.dy))});function _(t){return C(t)>90?180:0}function C(t){return(Math.max(0,Math.min(2*Math.PI,w(t.x)))+Math.max(0,Math.min(2*Math.PI,w(t.x+t.dx))))/2*(180/Math.PI)-90}function T(t){var e=Math.max(0,Math.min(2*Math.PI,w(t.x)));return(Math.max(0,Math.min(2*Math.PI,w(t.x+t.dx)))-e)/(2*Math.PI)}function A(t){var e=Math.max(0,Math.min(2*Math.PI,w(t.x)));return Math.max(0,Math.min(2*Math.PI,w(t.x+t.dx)))-e>v}function P(e,n){var r=d3.interpolate(w.domain(),[t.x,t.x+t.dx]),o=d3.interpolate(k.domain(),[t.y,1]),a=d3.interpolate(k.range(),[t.y?20:0,i]);return 0===n?function(){return E(e)}:function(t){return w.domain(r(t)),k.domain(o(t)).range(a(t)),E(e)}}function N(t){var e=d3.interpolate({x:t.x0,dx:t.dx0,y:t.y0,dy:t.dy0},t);return function(n){var r=e(n);return t.x0=r.x,t.dx0=r.dx,t.y0=r.y,t.dy0=r.dy,E(r)}}function O(t){t.forEach(function(t){var e=m(t),n=S[e];n?(t.dx0=n.dx,t.x0=n.x,t.dy0=n.dy,t.y0=n.y):(t.dx0=t.dx,t.x0=t.x,t.dy0=t.dy,t.y0=t.y),function(t){var e=m(t);S[e]||(S[e]={});var n=S[e];n.dx=t.dx,n.x=t.x,n.dy=t.dy,n.y=t.y}(t)})}function F(e){var n=f.selectAll("text"),r=f.selectAll("path");n.transition().attr("opacity",0),t=e,r.transition().duration(b).attrTween("d",P).each("end",function(t){t.x>=e.x&&t.x<e.x+e.dx&&t.depth>=e.depth&&d3.select(this.parentNode).select("text").transition().duration(b).text(function(t){return h(t)}).attr("opacity",function(t){return A(t)?1:0}).attr("transform",function(){var n=this.getBBox().width;if(0===t.depth)return"translate("+n/2*-1+",0)";if(t.depth===e.depth)return"translate("+(k(t.y)+5)+",0)";var r=C(t),i=_(t);return 0===i?"rotate("+r+")translate("+(k(t.y)+5)+",0)":"rotate("+r+")translate("+(k(t.y)+n+5)+",0)rotate("+i+")"})})}var L=r.utils.renderWatch(x);function D(t){return L.reset(),t.each(function(t){f=d3.select(this),e=r.utils.availableWidth(a,f,o),n=r.utils.availableHeight(u,f,o),i=Math.min(e,n)/2,k.range([0,i]);var v=f.select("g.nvd3.nv-wrap.nv-sunburst");v[0][0]?v.attr("transform","translate("+(e/2+o.left+o.right)+","+(n/2+o.top+o.bottom)+")"):v=f.append("g").attr("class","nvd3 nv-wrap nv-sunburst nv-chart-"+s).attr("transform","translate("+(e/2+o.left+o.right)+","+(n/2+o.top+o.bottom)+")"),f.on("click",function(t,e){x.chartClick({data:t,index:e,pos:d3.event,id:s})}),M.value(c[l]||c.count);var g=M.nodes(t[0]).reverse();O(g);var w=v.selectAll(".arc-container").data(g,m);w.enter().append("g").attr("class","arc-container").append("path").attr("d",E).style("fill",function(t){return t.color?t.color:d(y?(t.children?t:t.parent).name:t.name)}).style("stroke","#FFF").on("click",function(t,e){F(t),x.elementClick({data:t,index:e})}).on("mouseover",function(t,e){d3.select(this).classed("hover",!0).style("opacity",.8),x.elementMouseover({data:t,color:d3.select(this).style("fill"),percent:T(t)})}).on("mouseout",function(t,e){d3.select(this).classed("hover",!1).style("opacity",1),x.elementMouseout({data:t})}).on("mousemove",function(t,e){x.elementMousemove({data:t})}),w.each(function(t){d3.select(this).select("path").transition().duration(b).attrTween("d",N)}),p&&(w.selectAll("text").remove(),w.append("text").text(function(t){return h(t)}).transition().duration(b).attr("opacity",function(t){return A(t)?1:0}).attr("transform",function(t){var e=this.getBBox().width;if(0===t.depth)return"rotate(0)translate("+e/2*-1+",0)";var n=C(t),r=_(t);return 0===r?"rotate("+n+")translate("+(k(t.y)+5)+",0)":"rotate("+n+")translate("+(k(t.y)+e+5)+",0)rotate("+r+")"})),F(g[g.length-1]),w.exit().transition().duration(b).attr("opacity",0).each("end",function(t){var e=m(t);S[e]=void 0}).remove()}),L.renderEnd("sunburst immediate"),D}return D.dispatch=x,D.options=r.utils.optionsFunc.bind(D),D._options=Object.create({},{width:{get:function(){return a},set:function(t){a=t}},height:{get:function(){return u},set:function(t){u=t}},mode:{get:function(){return l},set:function(t){l=t}},id:{get:function(){return s},set:function(t){s=t}},duration:{get:function(){return b},set:function(t){b=t}},groupColorByParent:{get:function(){return y},set:function(t){y=!!t}},showLabels:{get:function(){return p},set:function(t){p=!!t}},labelFormat:{get:function(){return h},set:function(t){h=t}},labelThreshold:{get:function(){return v},set:function(t){v=t}},sort:{get:function(){return g},set:function(t){g=t}},key:{get:function(){return m},set:function(t){m=t}},margin:{get:function(){return o},set:function(t){o.top=null!=t.top?t.top:o.top,o.right=null!=t.right?t.right:o.right,o.bottom=null!=t.bottom?t.bottom:o.bottom,o.left=null!=t.left?t.left:o.left}},color:{get:function(){return d},set:function(t){d=r.utils.getColor(t)}}}),r.utils.initOptions(D),D},r.models.sunburstChart=function(){"use strict";var t=r.models.sunburst(),e=r.models.tooltip(),n={top:30,right:20,bottom:20,left:20},i=null,o=null,a=r.utils.defaultColor(),u=!1,l=(Math.round(1e5*Math.random()),null),c=null,s=250,f=d3.dispatch("stateChange","changeState","renderEnd"),d=r.utils.renderWatch(f);function p(e){return d.reset(),d.models(t),e.each(function(e){var a=d3.select(this);r.utils.initSVG(a);var u=r.utils.availableWidth(i,a,n),l=r.utils.availableHeight(o,a,n);if(p.update=function(){0===s?a.call(p):a.transition().duration(s).call(p)},p.container=a,!e||!e.length)return r.utils.noData(p,a),p;a.selectAll(".nv-noData").remove(),t.width(u).height(l).margin(n),a.call(t)}),d.renderEnd("sunburstChart immediate"),p}return e.duration(0).headerEnabled(!1).valueFormatter(function(t){return t}),t.dispatch.on("elementMouseover.tooltip",function(t){t.series={key:t.data.name,value:t.data.value||t.data.size,color:t.color,percent:t.percent},u||(delete t.percent,delete t.series.percent),e.data(t).hidden(!1)}),t.dispatch.on("elementMouseout.tooltip",function(t){e.hidden(!0)}),t.dispatch.on("elementMousemove.tooltip",function(t){e()}),p.dispatch=f,p.sunburst=t,p.tooltip=e,p.options=r.utils.optionsFunc.bind(p),p._options=Object.create({},{noData:{get:function(){return c},set:function(t){c=t}},defaultState:{get:function(){return l},set:function(t){l=t}},showTooltipPercent:{get:function(){return u},set:function(t){u=t}},color:{get:function(){return a},set:function(e){a=e,t.color(a)}},duration:{get:function(){return s},set:function(e){s=e,d.reset(s),t.duration(s)}},margin:{get:function(){return n},set:function(e){n.top=void 0!==e.top?e.top:n.top,n.right=void 0!==e.right?e.right:n.right,n.bottom=void 0!==e.bottom?e.bottom:n.bottom,n.left=void 0!==e.left?e.left:n.left,t.margin(n)}}}),r.utils.inheritOptions(p,t),r.utils.initOptions(p),p},r.version="1.8.6"},function(t,e,n){t.exports=!n(9)&&!n(3)(function(){return 7!=Object.defineProperty(n(64)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(2),i=n(8),o=n(32),a=n(65),u=n(10).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||u(e,t,{value:a.f(t)})}},function(t,e,n){var r=n(14),i=n(16),o=n(52)(!1),a=n(66)("IE_PROTO");t.exports=function(t,e){var n,u=i(t),l=0,c=[];for(n in u)n!=a&&r(u,n)&&c.push(n);for(;e.length>l;)r(u,n=e[l++])&&(~o(c,n)||c.push(n));return c}},function(t,e,n){var r=n(10),i=n(4),o=n(33);t.exports=n(9)?Object.defineProperties:function(t,e){i(t);for(var n,a=o(e),u=a.length,l=0;u>l;)r.f(t,n=a[l++],e[n]);return t}},function(t,e,n){var r=n(16),i=n(36).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(r(t))}},function(t,e,n){"use strict";var r=n(9),i=n(33),o=n(53),a=n(48),u=n(11),l=n(47),c=Object.assign;t.exports=!c||n(3)(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=c({},t)[n]||Object.keys(c({},e)).join("")!=r})?function(t,e){for(var n=u(t),c=arguments.length,s=1,f=o.f,d=a.f;c>s;)for(var p,h=l(arguments[s++]),v=f?i(h).concat(f(h)):i(h),g=v.length,m=0;g>m;)p=v[m++],r&&!d.call(h,p)||(n[p]=h[p]);return n}:c},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,n){"use strict";var r=n(19),i=n(5),o=n(104),a=[].slice,u={};t.exports=Function.bind||function(t){var e=r(this),n=a.call(arguments,1),l=function(){var r=n.concat(a.call(arguments));return this instanceof l?function(t,e,n){if(!(e in u)){for(var r=[],i=0;i<e;i++)r[i]="a["+i+"]";u[e]=Function("F,a","return new F("+r.join(",")+")")}return u[e](t,n)}(e,r.length,r):o(e,r,t)};return i(e.prototype)&&(l.prototype=e.prototype),l}},function(t,e){t.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},function(t,e,n){var r=n(2).parseInt,i=n(42).trim,o=n(70),a=/^[-+]?0[xX]/;t.exports=8!==r(o+"08")||22!==r(o+"0x16")?function(t,e){var n=i(String(t),3);return r(n,e>>>0||(a.test(n)?16:10))}:r},function(t,e,n){var r=n(2).parseFloat,i=n(42).trim;t.exports=1/r(n(70)+"-0")!=-1/0?function(t){var e=i(String(t),3),n=r(e);return 0===n&&"-"==e.charAt(0)?-0:n}:r},function(t,e,n){var r=n(24);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(e);return+t}},function(t,e,n){var r=n(5),i=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&i(t)===t}},function(t,e){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,n){"use strict";var r=n(35),i=n(30),o=n(41),a={};n(15)(a,n(6)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(a,{next:i(1,n)}),o(t,e+" Iterator")}},function(t,e,n){var r=n(4);t.exports=function(t,e,n,i){try{return i?e(r(n)[0],n[1]):e(n)}catch(e){var o=t.return;throw void 0!==o&&r(o.call(t)),e}}},function(t,e,n){var r=n(227);t.exports=function(t,e){return new(r(t))(e)}},function(t,e,n){var r=n(19),i=n(11),o=n(47),a=n(7);t.exports=function(t,e,n,u,l){r(e);var c=i(t),s=o(c),f=a(c.length),d=l?f-1:0,p=l?-1:1;if(n<2)for(;;){if(d in s){u=s[d],d+=p;break}if(d+=p,l?d<0:f<=d)throw TypeError("Reduce of empty array with no initial value")}for(;l?d>=0:f>d;d+=p)d in s&&(u=e(u,s[d],d,c));return u}},function(t,e,n){"use strict";var r=n(11),i=n(34),o=n(7);t.exports=[].copyWithin||function(t,e){var n=r(this),a=o(n.length),u=i(t,a),l=i(e,a),c=arguments.length>2?arguments[2]:void 0,s=Math.min((void 0===c?a:i(c,a))-l,a-u),f=1;for(l<u&&u<l+s&&(f=-1,l+=s-1,u+=s-1);s-- >0;)l in n?n[u]=n[l]:delete n[u],u+=f,l+=f;return n}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){"use strict";var r=n(85);n(1)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,e,n){n(9)&&"g"!=/./g.flags&&n(10).f(RegExp.prototype,"flags",{configurable:!0,get:n(56)})},function(t,e,n){"use strict";var r,i,o,a,u=n(32),l=n(2),c=n(18),s=n(49),f=n(1),d=n(5),p=n(19),h=n(45),v=n(59),g=n(50),m=n(87).set,y=n(247)(),b=n(119),x=n(248),w=n(60),k=n(120),M=l.TypeError,S=l.process,E=S&&S.versions,_=E&&E.v8||"",C=l.Promise,T="process"==s(S),A=function(){},P=i=b.f,N=!!function(){try{var t=C.resolve(1),e=(t.constructor={})[n(6)("species")]=function(t){t(A,A)};return(T||"function"==typeof PromiseRejectionEvent)&&t.then(A)instanceof e&&0!==_.indexOf("6.6")&&-1===w.indexOf("Chrome/66")}catch(t){}}(),O=function(t){var e;return!(!d(t)||"function"!=typeof(e=t.then))&&e},F=function(t,e){if(!t._n){t._n=!0;var n=t._c;y(function(){for(var r=t._v,i=1==t._s,o=0,a=function(e){var n,o,a,u=i?e.ok:e.fail,l=e.resolve,c=e.reject,s=e.domain;try{u?(i||(2==t._h&&R(t),t._h=1),!0===u?n=r:(s&&s.enter(),n=u(r),s&&(s.exit(),a=!0)),n===e.promise?c(M("Promise-chain cycle")):(o=O(n))?o.call(n,l,c):l(n)):c(r)}catch(t){s&&!a&&s.exit(),c(t)}};n.length>o;)a(n[o++]);t._c=[],t._n=!1,e&&!t._h&&L(t)})}},L=function(t){m.call(l,function(){var e,n,r,i=t._v,o=D(t);if(o&&(e=x(function(){T?S.emit("unhandledRejection",i,t):(n=l.onunhandledrejection)?n({promise:t,reason:i}):(r=l.console)&&r.error&&r.error("Unhandled promise rejection",i)}),t._h=T||D(t)?2:1),t._a=void 0,o&&e.e)throw e.v})},D=function(t){return 1!==t._h&&0===(t._a||t._c).length},R=function(t){m.call(l,function(){var e;T?S.emit("rejectionHandled",t):(e=l.onrejectionhandled)&&e({promise:t,reason:t._v})})},I=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),F(e,!0))},j=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw M("Promise can't be resolved itself");(e=O(t))?y(function(){var r={_w:n,_d:!1};try{e.call(t,c(j,r,1),c(I,r,1))}catch(t){I.call(r,t)}}):(n._v=t,n._s=1,F(n,!1))}catch(t){I.call({_w:n,_d:!1},t)}}};N||(C=function(t){h(this,C,"Promise","_h"),p(t),r.call(this);try{t(c(j,this,1),c(I,this,1))}catch(t){I.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(46)(C.prototype,{then:function(t,e){var n=P(g(this,C));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=T?S.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&F(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r;this.promise=t,this.resolve=c(j,t,1),this.reject=c(I,t,1)},b.f=P=function(t){return t===C||t===a?new o(t):i(t)}),f(f.G+f.W+f.F*!N,{Promise:C}),n(41)(C,"Promise"),n(44)("Promise"),a=n(8).Promise,f(f.S+f.F*!N,"Promise",{reject:function(t){var e=P(this);return(0,e.reject)(t),e.promise}}),f(f.S+f.F*(u||!N),"Promise",{resolve:function(t){return k(u&&this===a?C:this,t)}}),f(f.S+f.F*!(N&&n(55)(function(t){C.all(t).catch(A)})),"Promise",{all:function(t){var e=this,n=P(e),r=n.resolve,i=n.reject,o=x(function(){var n=[],o=0,a=1;v(t,!1,function(t){var u=o++,l=!1;n.push(void 0),a++,e.resolve(t).then(function(t){l||(l=!0,n[u]=t,--a||r(n))},i)}),--a||r(n)});return o.e&&i(o.v),n.promise},race:function(t){var e=this,n=P(e),r=n.reject,i=x(function(){v(t,!1,function(t){e.resolve(t).then(n.resolve,r)})});return i.e&&r(i.v),n.promise}})},function(t,e,n){"use strict";var r=n(19);function i(t){var e,n;this.promise=new t(function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r}),this.resolve=r(e),this.reject=r(n)}t.exports.f=function(t){return new i(t)}},function(t,e,n){var r=n(4),i=n(5),o=n(119);t.exports=function(t,e){if(r(t),i(e)&&e.constructor===t)return e;var n=o.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){"use strict";var r=n(10).f,i=n(35),o=n(46),a=n(18),u=n(45),l=n(59),c=n(76),s=n(115),f=n(44),d=n(9),p=n(29).fastKey,h=n(39),v=d?"_s":"size",g=function(t,e){var n,r=p(e);if("F"!==r)return t._i[r];for(n=t._f;n;n=n.n)if(n.k==e)return n};t.exports={getConstructor:function(t,e,n,c){var s=t(function(t,r){u(t,s,e,"_i"),t._t=e,t._i=i(null),t._f=void 0,t._l=void 0,t[v]=0,null!=r&&l(r,n,t[c],t)});return o(s.prototype,{clear:function(){for(var t=h(this,e),n=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var n=h(this,e),r=g(n,t);if(r){var i=r.n,o=r.p;delete n._i[r.i],r.r=!0,o&&(o.n=i),i&&(i.p=o),n._f==r&&(n._f=i),n._l==r&&(n._l=o),n[v]--}return!!r},forEach:function(t){h(this,e);for(var n,r=a(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!g(h(this,e),t)}}),d&&r(s.prototype,"size",{get:function(){return h(this,e)[v]}}),s},def:function(t,e,n){var r,i,o=g(t,e);return o?o.v=n:(t._l=o={i:i=p(e,!0),k:e,v:n,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[v]++,"F"!==i&&(t._i[i]=o)),t},getEntry:g,setStrong:function(t,e,n){c(t,e,function(t,n){this._t=h(t,e),this._k=n,this._l=void 0},function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?s(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,s(1))},n?"entries":"values",!n,!0),f(e)}}},function(t,e,n){"use strict";var r=n(46),i=n(29).getWeak,o=n(4),a=n(5),u=n(45),l=n(59),c=n(23),s=n(14),f=n(39),d=c(5),p=c(6),h=0,v=function(t){return t._l||(t._l=new g)},g=function(){this.a=[]},m=function(t,e){return d(t.a,function(t){return t[0]===e})};g.prototype={get:function(t){var e=m(this,t);if(e)return e[1]},has:function(t){return!!m(this,t)},set:function(t,e){var n=m(this,t);n?n[1]=e:this.a.push([t,e])},delete:function(t){var e=p(this.a,function(e){return e[0]===t});return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,n,o){var c=t(function(t,r){u(t,c,e,"_i"),t._t=e,t._i=h++,t._l=void 0,null!=r&&l(r,n,t[o],t)});return r(c.prototype,{delete:function(t){if(!a(t))return!1;var n=i(t);return!0===n?v(f(this,e)).delete(t):n&&s(n,this._i)&&delete n[this._i]},has:function(t){if(!a(t))return!1;var n=i(t);return!0===n?v(f(this,e)).has(t):n&&s(n,this._i)}}),c},def:function(t,e,n){var r=i(o(e),!0);return!0===r?v(t).set(e,n):r[t._i]=n,t},ufstore:v}},function(t,e,n){var r=n(20),i=n(7);t.exports=function(t){if(void 0===t)return 0;var e=r(t),n=i(e);if(e!==n)throw RangeError("Wrong length!");return n}},function(t,e,n){var r=n(36),i=n(53),o=n(4),a=n(2).Reflect;t.exports=a&&a.ownKeys||function(t){var e=r.f(o(t)),n=i.f;return n?e.concat(n(t)):e}},function(t,e,n){var r=n(7),i=n(72),o=n(25);t.exports=function(t,e,n,a){var u=String(o(t)),l=u.length,c=void 0===n?" ":String(n),s=r(e);if(s<=l||""==c)return u;var f=s-l,d=i.call(c,Math.ceil(f/c.length));return d.length>f&&(d=d.slice(0,f)),a?d+u:u+d}},function(t,e,n){var r=n(9),i=n(33),o=n(16),a=n(48).f;t.exports=function(t){return function(e){for(var n,u=o(e),l=i(u),c=l.length,s=0,f=[];c>s;)n=l[s++],r&&!a.call(u,n)||f.push(t?[n,u[n]]:u[n]);return f}}},function(t,e){var n=t.exports={version:"2.6.6"};"number"==typeof __e&&(__e=n)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map(function(t){return e[t]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(t){r[t]=t}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var n,a,u=function(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))i.call(n,c)&&(u[c]=n[c]);if(r){a=r(n);for(var s=0;s<a.length;s++)o.call(n,a[s])&&(u[a[s]]=n[a[s]])}}return u}},function(t,e,n){"use strict";t.exports=n(327)},function(t,e,n){"use strict";function r(t){var e,n=t.Symbol;return"function"==typeof n?n.observable?e=n.observable:(e=n("observable"),n.observable=e):e="@@observable",e}n.d(e,"a",function(){return r})},function(t,e,n){n(133),t.exports=n(330)},function(t,e,n){"use strict";n(134);var r,i=(r=n(306))&&r.__esModule?r:{default:r};i.default._babelPolyfill&&"undefined"!=typeof console&&console.warn&&console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."),i.default._babelPolyfill=!0},function(t,e,n){"use strict";n(135),n(278),n(280),n(283),n(285),n(287),n(289),n(291),n(293),n(295),n(297),n(299),n(301),n(305)},function(t,e,n){n(136),n(139),n(140),n(141),n(142),n(143),n(144),n(145),n(146),n(147),n(148),n(149),n(150),n(151),n(152),n(153),n(154),n(155),n(156),n(157),n(158),n(159),n(160),n(161),n(162),n(163),n(164),n(165),n(166),n(167),n(168),n(169),n(170),n(171),n(172),n(173),n(174),n(175),n(176),n(177),n(178),n(179),n(180),n(182),n(183),n(184),n(185),n(186),n(187),n(188),n(189),n(190),n(191),n(192),n(193),n(194),n(195),n(196),n(197),n(198),n(199),n(200),n(201),n(202),n(203),n(204),n(205),n(206),n(207),n(208),n(209),n(210),n(211),n(212),n(213),n(214),n(215),n(217),n(218),n(220),n(221),n(222),n(223),n(224),n(225),n(226),n(228),n(229),n(230),n(231),n(232),n(233),n(234),n(235),n(236),n(237),n(238),n(239),n(240),n(84),n(241),n(116),n(242),n(117),n(243),n(244),n(245),n(246),n(118),n(249),n(250),n(251),n(252),n(253),n(254),n(255),n(256),n(257),n(258),n(259),n(260),n(261),n(262),n(263),n(264),n(265),n(266),n(267),n(268),n(269),n(270),n(271),n(272),n(273),n(274),n(275),n(276),n(277),t.exports=n(8)},function(t,e,n){"use strict";var r=n(2),i=n(14),o=n(9),a=n(1),u=n(12),l=n(29).KEY,c=n(3),s=n(51),f=n(41),d=n(31),p=n(6),h=n(65),v=n(97),g=n(138),m=n(54),y=n(4),b=n(5),x=n(11),w=n(16),k=n(28),M=n(30),S=n(35),E=n(100),_=n(21),C=n(53),T=n(10),A=n(33),P=_.f,N=T.f,O=E.f,F=r.Symbol,L=r.JSON,D=L&&L.stringify,R=p("_hidden"),I=p("toPrimitive"),j={}.propertyIsEnumerable,z=s("symbol-registry"),W=s("symbols"),B=s("op-symbols"),U=Object.prototype,V="function"==typeof F,H=r.QObject,q=!H||!H.prototype||!H.prototype.findChild,Y=o&&c(function(){return 7!=S(N({},"a",{get:function(){return N(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=P(U,e);r&&delete U[e],N(t,e,n),r&&t!==U&&N(U,e,r)}:N,G=function(t){var e=W[t]=S(F.prototype);return e._k=t,e},$=V&&"symbol"==typeof F.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof F},X=function(t,e,n){return t===U&&X(B,e,n),y(t),e=k(e,!0),y(n),i(W,e)?(n.enumerable?(i(t,R)&&t[R][e]&&(t[R][e]=!1),n=S(n,{enumerable:M(0,!1)})):(i(t,R)||N(t,R,M(1,{})),t[R][e]=!0),Y(t,e,n)):N(t,e,n)},K=function(t,e){y(t);for(var n,r=g(e=w(e)),i=0,o=r.length;o>i;)X(t,n=r[i++],e[n]);return t},Z=function(t){var e=j.call(this,t=k(t,!0));return!(this===U&&i(W,t)&&!i(B,t))&&(!(e||!i(this,t)||!i(W,t)||i(this,R)&&this[R][t])||e)},Q=function(t,e){if(t=w(t),e=k(e,!0),t!==U||!i(W,e)||i(B,e)){var n=P(t,e);return!n||!i(W,e)||i(t,R)&&t[R][e]||(n.enumerable=!0),n}},J=function(t){for(var e,n=O(w(t)),r=[],o=0;n.length>o;)i(W,e=n[o++])||e==R||e==l||r.push(e);return r},tt=function(t){for(var e,n=t===U,r=O(n?B:w(t)),o=[],a=0;r.length>a;)!i(W,e=r[a++])||n&&!i(U,e)||o.push(W[e]);return o};V||(u((F=function(){if(this instanceof F)throw TypeError("Symbol is not a constructor!");var t=d(arguments.length>0?arguments[0]:void 0),e=function(n){this===U&&e.call(B,n),i(this,R)&&i(this[R],t)&&(this[R][t]=!1),Y(this,t,M(1,n))};return o&&q&&Y(U,t,{configurable:!0,set:e}),G(t)}).prototype,"toString",function(){return this._k}),_.f=Q,T.f=X,n(36).f=E.f=J,n(48).f=Z,C.f=tt,o&&!n(32)&&u(U,"propertyIsEnumerable",Z,!0),h.f=function(t){return G(p(t))}),a(a.G+a.W+a.F*!V,{Symbol:F});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nt=0;et.length>nt;)p(et[nt++]);for(var rt=A(p.store),it=0;rt.length>it;)v(rt[it++]);a(a.S+a.F*!V,"Symbol",{for:function(t){return i(z,t+="")?z[t]:z[t]=F(t)},keyFor:function(t){if(!$(t))throw TypeError(t+" is not a symbol!");for(var e in z)if(z[e]===t)return e},useSetter:function(){q=!0},useSimple:function(){q=!1}}),a(a.S+a.F*!V,"Object",{create:function(t,e){return void 0===e?S(t):K(S(t),e)},defineProperty:X,defineProperties:K,getOwnPropertyDescriptor:Q,getOwnPropertyNames:J,getOwnPropertySymbols:tt});var ot=c(function(){C.f(1)});a(a.S+a.F*ot,"Object",{getOwnPropertySymbols:function(t){return C.f(x(t))}}),L&&a(a.S+a.F*(!V||c(function(){var t=F();return"[null]"!=D([t])||"{}"!=D({a:t})||"{}"!=D(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=e=r[1],(b(e)||void 0!==t)&&!$(t))return m(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!$(e))return e}),r[1]=e,D.apply(L,r)}}),F.prototype[I]||n(15)(F.prototype,I,F.prototype.valueOf),f(F,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(t,e,n){t.exports=n(51)("native-function-to-string",Function.toString)},function(t,e,n){var r=n(33),i=n(53),o=n(48);t.exports=function(t){var e=r(t),n=i.f;if(n)for(var a,u=n(t),l=o.f,c=0;u.length>c;)l.call(t,a=u[c++])&&e.push(a);return e}},function(t,e,n){var r=n(1);r(r.S,"Object",{create:n(35)})},function(t,e,n){var r=n(1);r(r.S+r.F*!n(9),"Object",{defineProperty:n(10).f})},function(t,e,n){var r=n(1);r(r.S+r.F*!n(9),"Object",{defineProperties:n(99)})},function(t,e,n){var r=n(16),i=n(21).f;n(22)("getOwnPropertyDescriptor",function(){return function(t,e){return i(r(t),e)}})},function(t,e,n){var r=n(11),i=n(37);n(22)("getPrototypeOf",function(){return function(t){return i(r(t))}})},function(t,e,n){var r=n(11),i=n(33);n(22)("keys",function(){return function(t){return i(r(t))}})},function(t,e,n){n(22)("getOwnPropertyNames",function(){return n(100).f})},function(t,e,n){var r=n(5),i=n(29).onFreeze;n(22)("freeze",function(t){return function(e){return t&&r(e)?t(i(e)):e}})},function(t,e,n){var r=n(5),i=n(29).onFreeze;n(22)("seal",function(t){return function(e){return t&&r(e)?t(i(e)):e}})},function(t,e,n){var r=n(5),i=n(29).onFreeze;n(22)("preventExtensions",function(t){return function(e){return t&&r(e)?t(i(e)):e}})},function(t,e,n){var r=n(5);n(22)("isFrozen",function(t){return function(e){return!r(e)||!!t&&t(e)}})},function(t,e,n){var r=n(5);n(22)("isSealed",function(t){return function(e){return!r(e)||!!t&&t(e)}})},function(t,e,n){var r=n(5);n(22)("isExtensible",function(t){return function(e){return!!r(e)&&(!t||t(e))}})},function(t,e,n){var r=n(1);r(r.S+r.F,"Object",{assign:n(101)})},function(t,e,n){var r=n(1);r(r.S,"Object",{is:n(102)})},function(t,e,n){var r=n(1);r(r.S,"Object",{setPrototypeOf:n(69).set})},function(t,e,n){"use strict";var r=n(49),i={};i[n(6)("toStringTag")]="z",i+""!="[object z]"&&n(12)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,e,n){var r=n(1);r(r.P,"Function",{bind:n(103)})},function(t,e,n){var r=n(10).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||n(9)&&r(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},function(t,e,n){"use strict";var r=n(5),i=n(37),o=n(6)("hasInstance"),a=Function.prototype;o in a||n(10).f(a,o,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,n){var r=n(1),i=n(105);r(r.G+r.F*(parseInt!=i),{parseInt:i})},function(t,e,n){var r=n(1),i=n(106);r(r.G+r.F*(parseFloat!=i),{parseFloat:i})},function(t,e,n){"use strict";var r=n(2),i=n(14),o=n(24),a=n(71),u=n(28),l=n(3),c=n(36).f,s=n(21).f,f=n(10).f,d=n(42).trim,p=r.Number,h=p,v=p.prototype,g="Number"==o(n(35)(v)),m="trim"in String.prototype,y=function(t){var e=u(t,!1);if("string"==typeof e&&e.length>2){var n,r,i,o=(e=m?e.trim():d(e,3)).charCodeAt(0);if(43===o||45===o){if(88===(n=e.charCodeAt(2))||120===n)return NaN}else if(48===o){switch(e.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+e}for(var a,l=e.slice(2),c=0,s=l.length;c<s;c++)if((a=l.charCodeAt(c))<48||a>i)return NaN;return parseInt(l,r)}}return+e};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof p&&(g?l(function(){v.valueOf.call(n)}):"Number"!=o(n))?a(new h(y(e)),n,p):y(e)};for(var b,x=n(9)?c(h):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;x.length>w;w++)i(h,b=x[w])&&!i(p,b)&&f(p,b,s(h,b));p.prototype=v,v.constructor=p,n(12)(r,"Number",p)}},function(t,e,n){"use strict";var r=n(1),i=n(20),o=n(107),a=n(72),u=1..toFixed,l=Math.floor,c=[0,0,0,0,0,0],s="Number.toFixed: incorrect invocation!",f=function(t,e){for(var n=-1,r=e;++n<6;)r+=t*c[n],c[n]=r%1e7,r=l(r/1e7)},d=function(t){for(var e=6,n=0;--e>=0;)n+=c[e],c[e]=l(n/t),n=n%t*1e7},p=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==c[t]){var n=String(c[t]);e=""===e?n:e+a.call("0",7-n.length)+n}return e},h=function(t,e,n){return 0===e?n:e%2==1?h(t,e-1,n*t):h(t*t,e/2,n)};r(r.P+r.F*(!!u&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(3)(function(){u.call({})})),"Number",{toFixed:function(t){var e,n,r,u,l=o(this,s),c=i(t),v="",g="0";if(c<0||c>20)throw RangeError(s);if(l!=l)return"NaN";if(l<=-1e21||l>=1e21)return String(l);if(l<0&&(v="-",l=-l),l>1e-21)if(n=(e=function(t){for(var e=0,n=t;n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e}(l*h(2,69,1))-69)<0?l*h(2,-e,1):l/h(2,e,1),n*=4503599627370496,(e=52-e)>0){for(f(0,n),r=c;r>=7;)f(1e7,0),r-=7;for(f(h(10,r,1),0),r=e-1;r>=23;)d(1<<23),r-=23;d(1<<r),f(1,1),d(2),g=p()}else f(0,n),f(1<<-e,0),g=p()+a.call("0",c);return g=c>0?v+((u=g.length)<=c?"0."+a.call("0",c-u)+g:g.slice(0,u-c)+"."+g.slice(u-c)):v+g}})},function(t,e,n){"use strict";var r=n(1),i=n(3),o=n(107),a=1..toPrecision;r(r.P+r.F*(i(function(){return"1"!==a.call(1,void 0)})||!i(function(){a.call({})})),"Number",{toPrecision:function(t){var e=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?a.call(e):a.call(e,t)}})},function(t,e,n){var r=n(1);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,e,n){var r=n(1),i=n(2).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},function(t,e,n){var r=n(1);r(r.S,"Number",{isInteger:n(108)})},function(t,e,n){var r=n(1);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,e,n){var r=n(1),i=n(108),o=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},function(t,e,n){var r=n(1);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,n){var r=n(1);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,n){var r=n(1),i=n(106);r(r.S+r.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(t,e,n){var r=n(1),i=n(105);r(r.S+r.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(t,e,n){var r=n(1),i=n(109),o=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},function(t,e,n){var r=n(1),i=Math.asinh;r(r.S+r.F*!(i&&1/i(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},function(t,e,n){var r=n(1),i=Math.atanh;r(r.S+r.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,n){var r=n(1),i=n(73);r(r.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,n){var r=n(1);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,n){var r=n(1),i=Math.exp;r(r.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},function(t,e,n){var r=n(1),i=n(74);r(r.S+r.F*(i!=Math.expm1),"Math",{expm1:i})},function(t,e,n){var r=n(1);r(r.S,"Math",{fround:n(181)})},function(t,e,n){var r=n(73),i=Math.pow,o=i(2,-52),a=i(2,-23),u=i(2,127)*(2-a),l=i(2,-126);t.exports=Math.fround||function(t){var e,n,i=Math.abs(t),c=r(t);return i<l?c*(i/l/a+1/o-1/o)*l*a:(n=(e=(1+a/o)*i)-(e-i))>u||n!=n?c*(1/0):c*n}},function(t,e,n){var r=n(1),i=Math.abs;r(r.S,"Math",{hypot:function(t,e){for(var n,r,o=0,a=0,u=arguments.length,l=0;a<u;)l<(n=i(arguments[a++]))?(o=o*(r=l/n)*r+1,l=n):o+=n>0?(r=n/l)*r:n;return l===1/0?1/0:l*Math.sqrt(o)}})},function(t,e,n){var r=n(1),i=Math.imul;r(r.S+r.F*n(3)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function(t,e){var n=+t,r=+e,i=65535&n,o=65535&r;return 0|i*o+((65535&n>>>16)*o+i*(65535&r>>>16)<<16>>>0)}})},function(t,e,n){var r=n(1);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,n){var r=n(1);r(r.S,"Math",{log1p:n(109)})},function(t,e,n){var r=n(1);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,n){var r=n(1);r(r.S,"Math",{sign:n(73)})},function(t,e,n){var r=n(1),i=n(74),o=Math.exp;r(r.S+r.F*n(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},function(t,e,n){var r=n(1),i=n(74),o=Math.exp;r(r.S,"Math",{tanh:function(t){var e=i(t=+t),n=i(-t);return e==1/0?1:n==1/0?-1:(e-n)/(o(t)+o(-t))}})},function(t,e,n){var r=n(1);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,n){var r=n(1),i=n(34),o=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(t){for(var e,n=[],r=arguments.length,a=0;r>a;){if(e=+arguments[a++],i(e,1114111)!==e)throw RangeError(e+" is not a valid code point");n.push(e<65536?o(e):o(55296+((e-=65536)>>10),e%1024+56320))}return n.join("")}})},function(t,e,n){var r=n(1),i=n(16),o=n(7);r(r.S,"String",{raw:function(t){for(var e=i(t.raw),n=o(e.length),r=arguments.length,a=[],u=0;n>u;)a.push(String(e[u++])),u<r&&a.push(String(arguments[u]));return a.join("")}})},function(t,e,n){"use strict";n(42)("trim",function(t){return function(){return t(this,3)}})},function(t,e,n){"use strict";var r=n(75)(!0);n(76)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){"use strict";var r=n(1),i=n(75)(!1);r(r.P,"String",{codePointAt:function(t){return i(this,t)}})},function(t,e,n){"use strict";var r=n(1),i=n(7),o=n(77),a="".endsWith;r(r.P+r.F*n(79)("endsWith"),"String",{endsWith:function(t){var e=o(this,t,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=i(e.length),u=void 0===n?r:Math.min(i(n),r),l=String(t);return a?a.call(e,l,u):e.slice(u-l.length,u)===l}})},function(t,e,n){"use strict";var r=n(1),i=n(77);r(r.P+r.F*n(79)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){var r=n(1);r(r.P,"String",{repeat:n(72)})},function(t,e,n){"use strict";var r=n(1),i=n(7),o=n(77),a="".startsWith;r(r.P+r.F*n(79)("startsWith"),"String",{startsWith:function(t){var e=o(this,t,"startsWith"),n=i(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return a?a.call(e,r,n):e.slice(n,n+r.length)===r}})},function(t,e,n){"use strict";n(13)("anchor",function(t){return function(e){return t(this,"a","name",e)}})},function(t,e,n){"use strict";n(13)("big",function(t){return function(){return t(this,"big","","")}})},function(t,e,n){"use strict";n(13)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,e,n){"use strict";n(13)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,e,n){"use strict";n(13)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,e,n){"use strict";n(13)("fontcolor",function(t){return function(e){return t(this,"font","color",e)}})},function(t,e,n){"use strict";n(13)("fontsize",function(t){return function(e){return t(this,"font","size",e)}})},function(t,e,n){"use strict";n(13)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,e,n){"use strict";n(13)("link",function(t){return function(e){return t(this,"a","href",e)}})},function(t,e,n){"use strict";n(13)("small",function(t){return function(){return t(this,"small","","")}})},function(t,e,n){"use strict";n(13)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,e,n){"use strict";n(13)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,e,n){"use strict";n(13)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,e,n){var r=n(1);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,n){"use strict";var r=n(1),i=n(11),o=n(28);r(r.P+r.F*n(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var e=i(this),n=o(e);return"number"!=typeof n||isFinite(n)?e.toISOString():null}})},function(t,e,n){var r=n(1),i=n(216);r(r.P+r.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},function(t,e,n){"use strict";var r=n(3),i=Date.prototype.getTime,o=Date.prototype.toISOString,a=function(t){return t>9?t:"0"+t};t.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-5e13-1))})||!r(function(){o.call(new Date(NaN))})?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),n=t.getUTCMilliseconds(),r=e<0?"-":e>9999?"+":"";return r+("00000"+Math.abs(e)).slice(r?-6:-4)+"-"+a(t.getUTCMonth()+1)+"-"+a(t.getUTCDate())+"T"+a(t.getUTCHours())+":"+a(t.getUTCMinutes())+":"+a(t.getUTCSeconds())+"."+(n>99?n:"0"+a(n))+"Z"}:o},function(t,e,n){var r=Date.prototype,i=r.toString,o=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(12)(r,"toString",function(){var t=o.call(this);return t==t?i.call(this):"Invalid Date"})},function(t,e,n){var r=n(6)("toPrimitive"),i=Date.prototype;r in i||n(15)(i,r,n(219))},function(t,e,n){"use strict";var r=n(4),i=n(28);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(r(this),"number"!=t)}},function(t,e,n){var r=n(1);r(r.S,"Array",{isArray:n(54)})},function(t,e,n){"use strict";var r=n(18),i=n(1),o=n(11),a=n(111),u=n(80),l=n(7),c=n(81),s=n(82);i(i.S+i.F*!n(55)(function(t){Array.from(t)}),"Array",{from:function(t){var e,n,i,f,d=o(t),p="function"==typeof this?this:Array,h=arguments.length,v=h>1?arguments[1]:void 0,g=void 0!==v,m=0,y=s(d);if(g&&(v=r(v,h>2?arguments[2]:void 0,2)),null==y||p==Array&&u(y))for(n=new p(e=l(d.length));e>m;m++)c(n,m,g?v(d[m],m):d[m]);else for(f=y.call(d),n=new p;!(i=f.next()).done;m++)c(n,m,g?a(f,v,[i.value,m],!0):i.value);return n.length=m,n}})},function(t,e,n){"use strict";var r=n(1),i=n(81);r(r.S+r.F*n(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);e>t;)i(n,t,arguments[t++]);return n.length=e,n}})},function(t,e,n){"use strict";var r=n(1),i=n(16),o=[].join;r(r.P+r.F*(n(47)!=Object||!n(17)(o)),"Array",{join:function(t){return o.call(i(this),void 0===t?",":t)}})},function(t,e,n){"use strict";var r=n(1),i=n(68),o=n(24),a=n(34),u=n(7),l=[].slice;r(r.P+r.F*n(3)(function(){i&&l.call(i)}),"Array",{slice:function(t,e){var n=u(this.length),r=o(this);if(e=void 0===e?n:e,"Array"==r)return l.call(this,t,e);for(var i=a(t,n),c=a(e,n),s=u(c-i),f=new Array(s),d=0;d<s;d++)f[d]="String"==r?this.charAt(i+d):this[i+d];return f}})},function(t,e,n){"use strict";var r=n(1),i=n(19),o=n(11),a=n(3),u=[].sort,l=[1,2,3];r(r.P+r.F*(a(function(){l.sort(void 0)})||!a(function(){l.sort(null)})||!n(17)(u)),"Array",{sort:function(t){return void 0===t?u.call(o(this)):u.call(o(this),i(t))}})},function(t,e,n){"use strict";var r=n(1),i=n(23)(0),o=n(17)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,e,n){var r=n(5),i=n(54),o=n(6)("species");t.exports=function(t){var e;return i(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!i(e.prototype)||(e=void 0),r(e)&&null===(e=e[o])&&(e=void 0)),void 0===e?Array:e}},function(t,e,n){"use strict";var r=n(1),i=n(23)(1);r(r.P+r.F*!n(17)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(1),i=n(23)(2);r(r.P+r.F*!n(17)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(1),i=n(23)(3);r(r.P+r.F*!n(17)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(1),i=n(23)(4);r(r.P+r.F*!n(17)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(1),i=n(113);r(r.P+r.F*!n(17)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},function(t,e,n){"use strict";var r=n(1),i=n(113);r(r.P+r.F*!n(17)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},function(t,e,n){"use strict";var r=n(1),i=n(52)(!1),o=[].indexOf,a=!!o&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!n(17)(o)),"Array",{indexOf:function(t){return a?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(1),i=n(16),o=n(20),a=n(7),u=[].lastIndexOf,l=!!u&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(l||!n(17)(u)),"Array",{lastIndexOf:function(t){if(l)return u.apply(this,arguments)||0;var e=i(this),n=a(e.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,o(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in e&&e[r]===t)return r||0;return-1}})},function(t,e,n){var r=n(1);r(r.P,"Array",{copyWithin:n(114)}),n(38)("copyWithin")},function(t,e,n){var r=n(1);r(r.P,"Array",{fill:n(83)}),n(38)("fill")},function(t,e,n){"use strict";var r=n(1),i=n(23)(5),o=!0;"find"in[]&&Array(1).find(function(){o=!1}),r(r.P+r.F*o,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),n(38)("find")},function(t,e,n){"use strict";var r=n(1),i=n(23)(6),o="findIndex",a=!0;o in[]&&Array(1)[o](function(){a=!1}),r(r.P+r.F*a,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),n(38)(o)},function(t,e,n){n(44)("Array")},function(t,e,n){var r=n(2),i=n(71),o=n(10).f,a=n(36).f,u=n(78),l=n(56),c=r.RegExp,s=c,f=c.prototype,d=/a/g,p=/a/g,h=new c(d)!==d;if(n(9)&&(!h||n(3)(function(){return p[n(6)("match")]=!1,c(d)!=d||c(p)==p||"/a/i"!=c(d,"i")}))){c=function(t,e){var n=this instanceof c,r=u(t),o=void 0===e;return!n&&r&&t.constructor===c&&o?t:i(h?new s(r&&!o?t.source:t,e):s((r=t instanceof c)?t.source:t,r&&o?l.call(t):e),n?this:f,c)};for(var v=function(t){t in c||o(c,t,{configurable:!0,get:function(){return s[t]},set:function(e){s[t]=e}})},g=a(s),m=0;g.length>m;)v(g[m++]);f.constructor=c,c.prototype=f,n(12)(r,"RegExp",c)}n(44)("RegExp")},function(t,e,n){"use strict";n(117);var r=n(4),i=n(56),o=n(9),a=/./.toString,u=function(t){n(12)(RegExp.prototype,"toString",t,!0)};n(3)(function(){return"/a/b"!=a.call({source:"a",flags:"b"})})?u(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=a.name&&u(function(){return a.call(this)})},function(t,e,n){"use strict";var r=n(4),i=n(7),o=n(86),a=n(57);n(58)("match",1,function(t,e,n,u){return[function(n){var r=t(this),i=null==n?void 0:n[e];return void 0!==i?i.call(n,r):new RegExp(n)[e](String(r))},function(t){var e=u(n,t,this);if(e.done)return e.value;var l=r(t),c=String(this);if(!l.global)return a(l,c);var s=l.unicode;l.lastIndex=0;for(var f,d=[],p=0;null!==(f=a(l,c));){var h=String(f[0]);d[p]=h,""===h&&(l.lastIndex=o(c,i(l.lastIndex),s)),p++}return 0===p?null:d}]})},function(t,e,n){"use strict";var r=n(4),i=n(11),o=n(7),a=n(20),u=n(86),l=n(57),c=Math.max,s=Math.min,f=Math.floor,d=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;n(58)("replace",2,function(t,e,n,h){return[function(r,i){var o=t(this),a=null==r?void 0:r[e];return void 0!==a?a.call(r,o,i):n.call(String(o),r,i)},function(t,e){var i=h(n,t,this,e);if(i.done)return i.value;var f=r(t),d=String(this),p="function"==typeof e;p||(e=String(e));var g=f.global;if(g){var m=f.unicode;f.lastIndex=0}for(var y=[];;){var b=l(f,d);if(null===b)break;if(y.push(b),!g)break;""===String(b[0])&&(f.lastIndex=u(d,o(f.lastIndex),m))}for(var x,w="",k=0,M=0;M<y.length;M++){b=y[M];for(var S=String(b[0]),E=c(s(a(b.index),d.length),0),_=[],C=1;C<b.length;C++)_.push(void 0===(x=b[C])?x:String(x));var T=b.groups;if(p){var A=[S].concat(_,E,d);void 0!==T&&A.push(T);var P=String(e.apply(void 0,A))}else P=v(S,d,E,_,T,e);E>=k&&(w+=d.slice(k,E)+P,k=E+S.length)}return w+d.slice(k)}];function v(t,e,r,o,a,u){var l=r+t.length,c=o.length,s=p;return void 0!==a&&(a=i(a),s=d),n.call(u,s,function(n,i){var u;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,r);case"'":return e.slice(l);case"<":u=a[i.slice(1,-1)];break;default:var s=+i;if(0===s)return n;if(s>c){var d=f(s/10);return 0===d?n:d<=c?void 0===o[d-1]?i.charAt(1):o[d-1]+i.charAt(1):n}u=o[s-1]}return void 0===u?"":u})}})},function(t,e,n){"use strict";var r=n(4),i=n(102),o=n(57);n(58)("search",1,function(t,e,n,a){return[function(n){var r=t(this),i=null==n?void 0:n[e];return void 0!==i?i.call(n,r):new RegExp(n)[e](String(r))},function(t){var e=a(n,t,this);if(e.done)return e.value;var u=r(t),l=String(this),c=u.lastIndex;i(c,0)||(u.lastIndex=0);var s=o(u,l);return i(u.lastIndex,c)||(u.lastIndex=c),null===s?-1:s.index}]})},function(t,e,n){"use strict";var r=n(78),i=n(4),o=n(50),a=n(86),u=n(7),l=n(57),c=n(85),s=n(3),f=Math.min,d=[].push,p=!s(function(){RegExp(4294967295,"y")});n(58)("split",2,function(t,e,n,s){var h;return h="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,e){var i=String(this);if(void 0===t&&0===e)return[];if(!r(t))return n.call(i,t,e);for(var o,a,u,l=[],s=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),f=0,p=void 0===e?4294967295:e>>>0,h=new RegExp(t.source,s+"g");(o=c.call(h,i))&&!((a=h.lastIndex)>f&&(l.push(i.slice(f,o.index)),o.length>1&&o.index<i.length&&d.apply(l,o.slice(1)),u=o[0].length,f=a,l.length>=p));)h.lastIndex===o.index&&h.lastIndex++;return f===i.length?!u&&h.test("")||l.push(""):l.push(i.slice(f)),l.length>p?l.slice(0,p):l}:"0".split(void 0,0).length?function(t,e){return void 0===t&&0===e?[]:n.call(this,t,e)}:n,[function(n,r){var i=t(this),o=null==n?void 0:n[e];return void 0!==o?o.call(n,i,r):h.call(String(i),n,r)},function(t,e){var r=s(h,t,this,e,h!==n);if(r.done)return r.value;var c=i(t),d=String(this),v=o(c,RegExp),g=c.unicode,m=(c.ignoreCase?"i":"")+(c.multiline?"m":"")+(c.unicode?"u":"")+(p?"y":"g"),y=new v(p?c:"^(?:"+c.source+")",m),b=void 0===e?4294967295:e>>>0;if(0===b)return[];if(0===d.length)return null===l(y,d)?[d]:[];for(var x=0,w=0,k=[];w<d.length;){y.lastIndex=p?w:0;var M,S=l(y,p?d:d.slice(w));if(null===S||(M=f(u(y.lastIndex+(p?0:w)),d.length))===x)w=a(d,w,g);else{if(k.push(d.slice(x,w)),k.length===b)return k;for(var E=1;E<=S.length-1;E++)if(k.push(S[E]),k.length===b)return k;w=x=M}}return k.push(d.slice(x)),k}]})},function(t,e,n){var r=n(2),i=n(87).set,o=r.MutationObserver||r.WebKitMutationObserver,a=r.process,u=r.Promise,l="process"==n(24)(a);t.exports=function(){var t,e,n,c=function(){var r,i;for(l&&(r=a.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(r){throw t?n():e=void 0,r}}e=void 0,r&&r.enter()};if(l)n=function(){a.nextTick(c)};else if(!o||r.navigator&&r.navigator.standalone)if(u&&u.resolve){var s=u.resolve(void 0);n=function(){s.then(c)}}else n=function(){i.call(r,c)};else{var f=!0,d=document.createTextNode("");new o(c).observe(d,{characterData:!0}),n=function(){d.data=f=!f}}return function(r){var i={fn:r,next:void 0};e&&(e.next=i),t||(t=i,n()),e=i}}},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,n){"use strict";var r=n(121),i=n(39);t.exports=n(61)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var e=r.getEntry(i(this,"Map"),t);return e&&e.v},set:function(t,e){return r.def(i(this,"Map"),0===t?0:t,e)}},r,!0)},function(t,e,n){"use strict";var r=n(121),i=n(39);t.exports=n(61)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"Set"),t=0===t?0:t,t)}},r)},function(t,e,n){"use strict";var r,i=n(2),o=n(23)(0),a=n(12),u=n(29),l=n(101),c=n(122),s=n(5),f=n(39),d=n(39),p=!i.ActiveXObject&&"ActiveXObject"in i,h=u.getWeak,v=Object.isExtensible,g=c.ufstore,m=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},y={get:function(t){if(s(t)){var e=h(t);return!0===e?g(f(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return c.def(f(this,"WeakMap"),t,e)}},b=t.exports=n(61)("WeakMap",m,y,c,!0,!0);d&&p&&(l((r=c.getConstructor(m,"WeakMap")).prototype,y),u.NEED=!0,o(["delete","has","get","set"],function(t){var e=b.prototype,n=e[t];a(e,t,function(e,i){if(s(e)&&!v(e)){this._f||(this._f=new r);var o=this._f[t](e,i);return"set"==t?this:o}return n.call(this,e,i)})}))},function(t,e,n){"use strict";var r=n(122),i=n(39);n(61)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,e,n){"use strict";var r=n(1),i=n(62),o=n(88),a=n(4),u=n(34),l=n(7),c=n(5),s=n(2).ArrayBuffer,f=n(50),d=o.ArrayBuffer,p=o.DataView,h=i.ABV&&s.isView,v=d.prototype.slice,g=i.VIEW;r(r.G+r.W+r.F*(s!==d),{ArrayBuffer:d}),r(r.S+r.F*!i.CONSTR,"ArrayBuffer",{isView:function(t){return h&&h(t)||c(t)&&g in t}}),r(r.P+r.U+r.F*n(3)(function(){return!new d(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,e){if(void 0!==v&&void 0===e)return v.call(a(this),t);for(var n=a(this).byteLength,r=u(t,n),i=u(void 0===e?n:e,n),o=new(f(this,d))(l(i-r)),c=new p(this),s=new p(o),h=0;r<i;)s.setUint8(h++,c.getUint8(r++));return o}}),n(44)("ArrayBuffer")},function(t,e,n){var r=n(1);r(r.G+r.W+r.F*!n(62).ABV,{DataView:n(88).DataView})},function(t,e,n){n(26)("Int8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(26)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(26)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}},!0)},function(t,e,n){n(26)("Int16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(26)("Uint16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(26)("Int32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(26)("Uint32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(26)("Float32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(26)("Float64",8,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){var r=n(1),i=n(19),o=n(4),a=(n(2).Reflect||{}).apply,u=Function.apply;r(r.S+r.F*!n(3)(function(){a(function(){})}),"Reflect",{apply:function(t,e,n){var r=i(t),l=o(n);return a?a(r,e,l):u.call(r,e,l)}})},function(t,e,n){var r=n(1),i=n(35),o=n(19),a=n(4),u=n(5),l=n(3),c=n(103),s=(n(2).Reflect||{}).construct,f=l(function(){function t(){}return!(s(function(){},[],t)instanceof t)}),d=!l(function(){s(function(){})});r(r.S+r.F*(f||d),"Reflect",{construct:function(t,e){o(t),a(e);var n=arguments.length<3?t:o(arguments[2]);if(d&&!f)return s(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(c.apply(t,r))}var l=n.prototype,p=i(u(l)?l:Object.prototype),h=Function.apply.call(t,p,e);return u(h)?h:p}})},function(t,e,n){var r=n(10),i=n(1),o=n(4),a=n(28);i(i.S+i.F*n(3)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,e,n){o(t),e=a(e,!0),o(n);try{return r.f(t,e,n),!0}catch(t){return!1}}})},function(t,e,n){var r=n(1),i=n(21).f,o=n(4);r(r.S,"Reflect",{deleteProperty:function(t,e){var n=i(o(t),e);return!(n&&!n.configurable)&&delete t[e]}})},function(t,e,n){"use strict";var r=n(1),i=n(4),o=function(t){this._t=i(t),this._i=0;var e,n=this._k=[];for(e in t)n.push(e)};n(110)(o,"Object",function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new o(t)}})},function(t,e,n){var r=n(21),i=n(37),o=n(14),a=n(1),u=n(5),l=n(4);a(a.S,"Reflect",{get:function t(e,n){var a,c,s=arguments.length<3?e:arguments[2];return l(e)===s?e[n]:(a=r.f(e,n))?o(a,"value")?a.value:void 0!==a.get?a.get.call(s):void 0:u(c=i(e))?t(c,n,s):void 0}})},function(t,e,n){var r=n(21),i=n(1),o=n(4);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return r.f(o(t),e)}})},function(t,e,n){var r=n(1),i=n(37),o=n(4);r(r.S,"Reflect",{getPrototypeOf:function(t){return i(o(t))}})},function(t,e,n){var r=n(1);r(r.S,"Reflect",{has:function(t,e){return e in t}})},function(t,e,n){var r=n(1),i=n(4),o=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return i(t),!o||o(t)}})},function(t,e,n){var r=n(1);r(r.S,"Reflect",{ownKeys:n(124)})},function(t,e,n){var r=n(1),i=n(4),o=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){i(t);try{return o&&o(t),!0}catch(t){return!1}}})},function(t,e,n){var r=n(10),i=n(21),o=n(37),a=n(14),u=n(1),l=n(30),c=n(4),s=n(5);u(u.S,"Reflect",{set:function t(e,n,u){var f,d,p=arguments.length<4?e:arguments[3],h=i.f(c(e),n);if(!h){if(s(d=o(e)))return t(d,n,u,p);h=l(0)}if(a(h,"value")){if(!1===h.writable||!s(p))return!1;if(f=i.f(p,n)){if(f.get||f.set||!1===f.writable)return!1;f.value=u,r.f(p,n,f)}else r.f(p,n,l(0,u));return!0}return void 0!==h.set&&(h.set.call(p,u),!0)}})},function(t,e,n){var r=n(1),i=n(69);i&&r(r.S,"Reflect",{setPrototypeOf:function(t,e){i.check(t,e);try{return i.set(t,e),!0}catch(t){return!1}}})},function(t,e,n){n(279),t.exports=n(8).Array.includes},function(t,e,n){"use strict";var r=n(1),i=n(52)(!0);r(r.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),n(38)("includes")},function(t,e,n){n(281),t.exports=n(8).Array.flatMap},function(t,e,n){"use strict";var r=n(1),i=n(282),o=n(11),a=n(7),u=n(19),l=n(112);r(r.P,"Array",{flatMap:function(t){var e,n,r=o(this);return u(t),e=a(r.length),n=l(r,0),i(n,r,r,e,0,1,t,arguments[1]),n}}),n(38)("flatMap")},function(t,e,n){"use strict";var r=n(54),i=n(5),o=n(7),a=n(18),u=n(6)("isConcatSpreadable");t.exports=function t(e,n,l,c,s,f,d,p){for(var h,v,g=s,m=0,y=!!d&&a(d,p,3);m<c;){if(m in l){if(h=y?y(l[m],m,n):l[m],v=!1,i(h)&&(v=void 0!==(v=h[u])?!!v:r(h)),v&&f>0)g=t(e,n,h,o(h.length),g,f-1)-1;else{if(g>=9007199254740991)throw TypeError();e[g]=h}g++}m++}return g}},function(t,e,n){n(284),t.exports=n(8).String.padStart},function(t,e,n){"use strict";var r=n(1),i=n(125),o=n(60),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(o);r(r.P+r.F*a,"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,n){n(286),t.exports=n(8).String.padEnd},function(t,e,n){"use strict";var r=n(1),i=n(125),o=n(60),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(o);r(r.P+r.F*a,"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,n){n(288),t.exports=n(8).String.trimLeft},function(t,e,n){"use strict";n(42)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,e,n){n(290),t.exports=n(8).String.trimRight},function(t,e,n){"use strict";n(42)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,e,n){n(292),t.exports=n(65).f("asyncIterator")},function(t,e,n){n(97)("asyncIterator")},function(t,e,n){n(294),t.exports=n(8).Object.getOwnPropertyDescriptors},function(t,e,n){var r=n(1),i=n(124),o=n(16),a=n(21),u=n(81);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,n,r=o(t),l=a.f,c=i(r),s={},f=0;c.length>f;)void 0!==(n=l(r,e=c[f++]))&&u(s,e,n);return s}})},function(t,e,n){n(296),t.exports=n(8).Object.values},function(t,e,n){var r=n(1),i=n(126)(!1);r(r.S,"Object",{values:function(t){return i(t)}})},function(t,e,n){n(298),t.exports=n(8).Object.entries},function(t,e,n){var r=n(1),i=n(126)(!0);r(r.S,"Object",{entries:function(t){return i(t)}})},function(t,e,n){"use strict";n(118),n(300),t.exports=n(8).Promise.finally},function(t,e,n){"use strict";var r=n(1),i=n(8),o=n(2),a=n(50),u=n(120);r(r.P+r.R,"Promise",{finally:function(t){var e=a(this,i.Promise||o.Promise),n="function"==typeof t;return this.then(n?function(n){return u(e,t()).then(function(){return n})}:t,n?function(n){return u(e,t()).then(function(){throw n})}:t)}})},function(t,e,n){n(302),n(303),n(304),t.exports=n(8)},function(t,e,n){var r=n(2),i=n(1),o=n(60),a=[].slice,u=/MSIE .\./.test(o),l=function(t){return function(e,n){var r=arguments.length>2,i=!!r&&a.call(arguments,2);return t(r?function(){("function"==typeof e?e:Function(e)).apply(this,i)}:e,n)}};i(i.G+i.B+i.F*u,{setTimeout:l(r.setTimeout),setInterval:l(r.setInterval)})},function(t,e,n){var r=n(1),i=n(87);r(r.G+r.B,{setImmediate:i.set,clearImmediate:i.clear})},function(t,e,n){for(var r=n(84),i=n(33),o=n(12),a=n(2),u=n(15),l=n(43),c=n(6),s=c("iterator"),f=c("toStringTag"),d=l.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=i(p),v=0;v<h.length;v++){var g,m=h[v],y=p[m],b=a[m],x=b&&b.prototype;if(x&&(x[s]||u(x,s,d),x[f]||u(x,f,m),l[m]=d,y))for(g in r)x[g]||o(x,g,r[g],!0)}},function(t,e,n){var r=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function l(t,e,n,r){var i=e&&e.prototype instanceof v?e:v,o=Object.create(i.prototype),a=new C(r||[]);return o._invoke=function(t,e,n){var r=s;return function(i,o){if(r===d)throw new Error("Generator is already running");if(r===p){if("throw"===i)throw o;return A()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var u=S(a,n);if(u){if(u===h)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===s)throw r=p,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=d;var l=c(t,e,n);if("normal"===l.type){if(r=n.done?p:f,l.arg===h)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r=p,n.method="throw",n.arg=l.arg)}}}(t,n,a),o}function c(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=l;var s="suspendedStart",f="suspendedYield",d="executing",p="completed",h={};function v(){}function g(){}function m(){}var y={};y[o]=function(){return this};var b=Object.getPrototypeOf,x=b&&b(b(T([])));x&&x!==n&&r.call(x,o)&&(y=x);var w=m.prototype=v.prototype=Object.create(y);function k(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function M(t){var e;this._invoke=function(n,i){function o(){return new Promise(function(e,o){!function e(n,i,o,a){var u=c(t[n],t,i);if("throw"!==u.type){var l=u.arg,s=l.value;return s&&"object"==typeof s&&r.call(s,"__await")?Promise.resolve(s.__await).then(function(t){e("next",t,o,a)},function(t){e("throw",t,o,a)}):Promise.resolve(s).then(function(t){l.value=t,o(l)},function(t){return e("throw",t,o,a)})}a(u.arg)}(n,i,e,o)})}return e=e?e.then(o,o):o()}}function S(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,S(t,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var i=c(r,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,h;var o=i.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,h):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function _(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function C(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function T(t){if(t){var n=t[o];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,a=function n(){for(;++i<t.length;)if(r.call(t,i))return n.value=t[i],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}return{next:A}}function A(){return{value:e,done:!0}}return g.prototype=w.constructor=m,m.constructor=g,m[u]=g.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,u in t||(t[u]="GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},k(M.prototype),M.prototype[a]=function(){return this},t.AsyncIterator=M,t.async=function(e,n,r,i){var o=new M(l(e,n,r,i));return t.isGeneratorFunction(n)?o:o.next().then(function(t){return t.done?t.value:o.next()})},k(w),w[u]="Generator",w[o]=function(){return this},w.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=T,C.prototype={constructor:C,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(_),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function i(r,i){return u.type="throw",u.arg=t,n.next=r,i&&(n.method="next",n.arg=e),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],u=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var l=r.call(a,"catchLoc"),c=r.call(a,"finallyLoc");if(l&&c){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,h):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),h},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),_(n),h}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;_(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:T(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),h}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,e,n){n(307),t.exports=n(127).global},function(t,e,n){var r=n(308);r(r.G,{global:n(89)})},function(t,e,n){var r=n(89),i=n(127),o=n(309),a=n(311),u=n(318),l=function(t,e,n){var c,s,f,d=t&l.F,p=t&l.G,h=t&l.S,v=t&l.P,g=t&l.B,m=t&l.W,y=p?i:i[e]||(i[e]={}),b=y.prototype,x=p?r:h?r[e]:(r[e]||{}).prototype;for(c in p&&(n=e),n)(s=!d&&x&&void 0!==x[c])&&u(y,c)||(f=s?x[c]:n[c],y[c]=p&&"function"!=typeof x[c]?n[c]:g&&s?o(f,r):m&&x[c]==f?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(f):v&&"function"==typeof f?o(Function.call,f):f,v&&((y.virtual||(y.virtual={}))[c]=f,t&l.R&&b&&!b[c]&&a(b,c,f)))};l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,t.exports=l},function(t,e,n){var r=n(310);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){var r=n(312),i=n(317);t.exports=n(91)?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(313),i=n(314),o=n(316),a=Object.defineProperty;e.f=n(91)?Object.defineProperty:function(t,e,n){if(r(t),e=o(e,!0),r(n),i)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(90);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e,n){t.exports=!n(91)&&!n(128)(function(){return 7!=Object.defineProperty(n(315)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(90),i=n(89).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,e,n){var r=n(90);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){"use strict";
/** @license React v16.10.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(129),i="function"==typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,u=i?Symbol.for("react.fragment"):60107,l=i?Symbol.for("react.strict_mode"):60108,c=i?Symbol.for("react.profiler"):60114,s=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,d=i?Symbol.for("react.forward_ref"):60112,p=i?Symbol.for("react.suspense"):60113,h=i?Symbol.for("react.suspense_list"):60120,v=i?Symbol.for("react.memo"):60115,g=i?Symbol.for("react.lazy"):60116;i&&Symbol.for("react.fundamental"),i&&Symbol.for("react.responder"),i&&Symbol.for("react.scope");var m="function"==typeof Symbol&&Symbol.iterator;function y(t){for(var e=t.message,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return t.message="Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",t}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},x={};function w(t,e,n){this.props=t,this.context=e,this.refs=x,this.updater=n||b}function k(){}function M(t,e,n){this.props=t,this.context=e,this.refs=x,this.updater=n||b}w.prototype.isReactComponent={},w.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw y(Error(85));this.updater.enqueueSetState(this,t,e,"setState")},w.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},k.prototype=w.prototype;var S=M.prototype=new k;S.constructor=M,r(S,w.prototype),S.isPureReactComponent=!0;var E={current:null},_={suspense:null},C={current:null},T=Object.prototype.hasOwnProperty,A={key:!0,ref:!0,__self:!0,__source:!0};function P(t,e,n){var r,i={},a=null,u=null;if(null!=e)for(r in void 0!==e.ref&&(u=e.ref),void 0!==e.key&&(a=""+e.key),e)T.call(e,r)&&!A.hasOwnProperty(r)&&(i[r]=e[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];i.children=c}if(t&&t.defaultProps)for(r in l=t.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:t,key:a,ref:u,props:i,_owner:C.current}}function N(t){return"object"==typeof t&&null!==t&&t.$$typeof===o}var O=/\/+/g,F=[];function L(t,e,n,r){if(F.length){var i=F.pop();return i.result=t,i.keyPrefix=e,i.func=n,i.context=r,i.count=0,i}return{result:t,keyPrefix:e,func:n,context:r,count:0}}function D(t){t.result=null,t.keyPrefix=null,t.func=null,t.context=null,t.count=0,10>F.length&&F.push(t)}function R(t,e,n){return null==t?0:function t(e,n,r,i){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var l=!1;if(null===e)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case o:case a:l=!0}}if(l)return r(i,e,""===n?"."+I(e,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(e))for(var c=0;c<e.length;c++){var s=n+I(u=e[c],c);l+=t(u,s,r,i)}else if(s=null===e||"object"!=typeof e?null:"function"==typeof(s=m&&e[m]||e["@@iterator"])?s:null,"function"==typeof s)for(e=s.call(e),c=0;!(u=e.next()).done;)l+=t(u=u.value,s=n+I(u,c++),r,i);else if("object"===u)throw r=""+e,y(Error(31),"[object Object]"===r?"object with keys {"+Object.keys(e).join(", ")+"}":r,"");return l}(t,"",e,n)}function I(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+(""+t).replace(/[=:]/g,function(t){return e[t]})}(t.key):e.toString(36)}function j(t,e){t.func.call(t.context,e,t.count++)}function z(t,e,n){var r=t.result,i=t.keyPrefix;t=t.func.call(t.context,e,t.count++),Array.isArray(t)?W(t,r,n,function(t){return t}):null!=t&&(N(t)&&(t=function(t,e){return{$$typeof:o,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(t,i+(!t.key||e&&e.key===t.key?"":(""+t.key).replace(O,"$&/")+"/")+n)),r.push(t))}function W(t,e,n,r,i){var o="";null!=n&&(o=(""+n).replace(O,"$&/")+"/"),R(t,z,e=L(e,o,r,i)),D(e)}function B(){var t=E.current;if(null===t)throw y(Error(321));return t}var U={Children:{map:function(t,e,n){if(null==t)return t;var r=[];return W(t,r,null,e,n),r},forEach:function(t,e,n){if(null==t)return t;R(t,j,e=L(null,null,e,n)),D(e)},count:function(t){return R(t,function(){return null},null)},toArray:function(t){var e=[];return W(t,e,null,function(t){return t}),e},only:function(t){if(!N(t))throw y(Error(143));return t}},createRef:function(){return{current:null}},Component:w,PureComponent:M,createContext:function(t,e){return void 0===e&&(e=null),(t={$$typeof:f,_calculateChangedBits:e,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:t},t.Consumer=t},forwardRef:function(t){return{$$typeof:d,render:t}},lazy:function(t){return{$$typeof:g,_ctor:t,_status:-1,_result:null}},memo:function(t,e){return{$$typeof:v,type:t,compare:void 0===e?null:e}},useCallback:function(t,e){return B().useCallback(t,e)},useContext:function(t,e){return B().useContext(t,e)},useEffect:function(t,e){return B().useEffect(t,e)},useImperativeHandle:function(t,e,n){return B().useImperativeHandle(t,e,n)},useDebugValue:function(){},useLayoutEffect:function(t,e){return B().useLayoutEffect(t,e)},useMemo:function(t,e){return B().useMemo(t,e)},useReducer:function(t,e,n){return B().useReducer(t,e,n)},useRef:function(t){return B().useRef(t)},useState:function(t){return B().useState(t)},Fragment:u,Profiler:c,StrictMode:l,Suspense:p,unstable_SuspenseList:h,createElement:P,cloneElement:function(t,e,n){if(null==t)throw y(Error(267),t);var i=r({},t.props),a=t.key,u=t.ref,l=t._owner;if(null!=e){if(void 0!==e.ref&&(u=e.ref,l=C.current),void 0!==e.key&&(a=""+e.key),t.type&&t.type.defaultProps)var c=t.type.defaultProps;for(s in e)T.call(e,s)&&!A.hasOwnProperty(s)&&(i[s]=void 0===e[s]&&void 0!==c?c[s]:e[s])}var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:o,type:t.type,key:a,ref:u,props:i,_owner:l}},createFactory:function(t){var e=P.bind(null,t);return e.type=t,e},isValidElement:N,version:"16.10.2",unstable_withSuspenseConfig:function(t,e){var n=_.suspense;_.suspense=void 0===e?null:e;try{t()}finally{_.suspense=n}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:E,ReactCurrentBatchConfig:_,ReactCurrentOwner:C,IsSomeRendererActing:{current:!1},assign:r}},V={default:U},H=V&&U||V;t.exports=H.default||H},function(t,e,n){"use strict";
/** @license React v16.10.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),i=n(129),o=n(321);function a(t){for(var e=t.message,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return t.message="Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",t}if(!r)throw a(Error(227));var u=null,l={};function c(){if(u)for(var t in l){var e=l[t],n=u.indexOf(t);if(!(-1<n))throw a(Error(96),t);if(!f[n]){if(!e.extractEvents)throw a(Error(97),t);for(var r in f[n]=e,n=e.eventTypes){var i=void 0,o=n[r],c=e,p=r;if(d.hasOwnProperty(p))throw a(Error(99),p);d[p]=o;var h=o.phasedRegistrationNames;if(h){for(i in h)h.hasOwnProperty(i)&&s(h[i],c,p);i=!0}else o.registrationName?(s(o.registrationName,c,p),i=!0):i=!1;if(!i)throw a(Error(98),r,t)}}}}function s(t,e,n){if(p[t])throw a(Error(100),t);p[t]=e,h[t]=e.eventTypes[n].dependencies}var f=[],d={},p={},h={};var v=!1,g=null,m=!1,y=null,b={onError:function(t){v=!0,g=t}};function x(t,e,n,r,i,o,a,u,l){v=!1,g=null,function(t,e,n,r,i,o,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{e.apply(n,c)}catch(t){this.onError(t)}}.apply(b,arguments)}var w=null,k=null,M=null;function S(t,e,n){var r=t.type||"unknown-event";t.currentTarget=M(n),function(t,e,n,r,i,o,u,l,c){if(x.apply(this,arguments),v){if(!v)throw a(Error(198));var s=g;v=!1,g=null,m||(m=!0,y=s)}}(r,e,void 0,t),t.currentTarget=null}function E(t,e){if(null==e)throw a(Error(30));return null==t?e:Array.isArray(t)?Array.isArray(e)?(t.push.apply(t,e),t):(t.push(e),t):Array.isArray(e)?[t].concat(e):[t,e]}function _(t,e,n){Array.isArray(t)?t.forEach(e,n):t&&e.call(n,t)}var C=null;function T(t){if(t){var e=t._dispatchListeners,n=t._dispatchInstances;if(Array.isArray(e))for(var r=0;r<e.length&&!t.isPropagationStopped();r++)S(t,e[r],n[r]);else e&&S(t,e,n);t._dispatchListeners=null,t._dispatchInstances=null,t.isPersistent()||t.constructor.release(t)}}function A(t){if(null!==t&&(C=E(C,t)),t=C,C=null,t){if(_(t,T),C)throw a(Error(95));if(m)throw t=y,m=!1,y=null,t}}var P={injectEventPluginOrder:function(t){if(u)throw a(Error(101));u=Array.prototype.slice.call(t),c()},injectEventPluginsByName:function(t){var e,n=!1;for(e in t)if(t.hasOwnProperty(e)){var r=t[e];if(!l.hasOwnProperty(e)||l[e]!==r){if(l[e])throw a(Error(102),e);l[e]=r,n=!0}}n&&c()}};function N(t,e){var n=t.stateNode;if(!n)return null;var r=w(n);if(!r)return null;n=r[e];t:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(t=t.type)||"input"===t||"select"===t||"textarea"===t)),t=!r;break t;default:t=!1}if(t)return null;if(n&&"function"!=typeof n)throw a(Error(231),e,typeof n);return n}var O=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;O.hasOwnProperty("ReactCurrentDispatcher")||(O.ReactCurrentDispatcher={current:null}),O.hasOwnProperty("ReactCurrentBatchConfig")||(O.ReactCurrentBatchConfig={suspense:null});var F=/^(.*)[\\\/]/,L="function"==typeof Symbol&&Symbol.for,D=L?Symbol.for("react.element"):60103,R=L?Symbol.for("react.portal"):60106,I=L?Symbol.for("react.fragment"):60107,j=L?Symbol.for("react.strict_mode"):60108,z=L?Symbol.for("react.profiler"):60114,W=L?Symbol.for("react.provider"):60109,B=L?Symbol.for("react.context"):60110,U=L?Symbol.for("react.concurrent_mode"):60111,V=L?Symbol.for("react.forward_ref"):60112,H=L?Symbol.for("react.suspense"):60113,q=L?Symbol.for("react.suspense_list"):60120,Y=L?Symbol.for("react.memo"):60115,G=L?Symbol.for("react.lazy"):60116;L&&Symbol.for("react.fundamental"),L&&Symbol.for("react.responder"),L&&Symbol.for("react.scope");var $="function"==typeof Symbol&&Symbol.iterator;function X(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=$&&t[$]||t["@@iterator"])?t:null}function K(t){if(null==t)return null;if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case I:return"Fragment";case R:return"Portal";case z:return"Profiler";case j:return"StrictMode";case H:return"Suspense";case q:return"SuspenseList"}if("object"==typeof t)switch(t.$$typeof){case B:return"Context.Consumer";case W:return"Context.Provider";case V:var e=t.render;return e=e.displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case Y:return K(t.type);case G:if(t=1===t._status?t._result:null)return K(t)}return null}function Z(t){var e="";do{t:switch(t.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break t;default:var r=t._debugOwner,i=t._debugSource,o=K(t.type);n=null,r&&(n=K(r.type)),r=o,o="",i?o=" (at "+i.fileName.replace(F,"")+":"+i.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}e+=n,t=t.return}while(t);return e}var Q=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),J=null,tt=null,et=null;function nt(t){if(t=k(t)){if("function"!=typeof J)throw a(Error(280));var e=w(t.stateNode);J(t.stateNode,t.type,e)}}function rt(t){tt?et?et.push(t):et=[t]:tt=t}function it(){if(tt){var t=tt,e=et;if(et=tt=null,nt(t),e)for(t=0;t<e.length;t++)nt(e[t])}}function ot(t,e){return t(e)}function at(t,e,n,r){return t(e,n,r)}function ut(){}var lt=ot,ct=!1,st=!1;function ft(){null===tt&&null===et||(ut(),it())}new Map,new Map,new Map;var dt=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pt=Object.prototype.hasOwnProperty,ht={},vt={};function gt(t,e,n,r,i,o){this.acceptsBooleans=2===e||3===e||4===e,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=t,this.type=e,this.sanitizeURL=o}var mt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(t){mt[t]=new gt(t,0,!1,t,null,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(t){var e=t[0];mt[e]=new gt(e,1,!1,t[1],null,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(t){mt[t]=new gt(t,2,!1,t.toLowerCase(),null,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(t){mt[t]=new gt(t,2,!1,t,null,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(t){mt[t]=new gt(t,3,!1,t.toLowerCase(),null,!1)}),["checked","multiple","muted","selected"].forEach(function(t){mt[t]=new gt(t,3,!0,t,null,!1)}),["capture","download"].forEach(function(t){mt[t]=new gt(t,4,!1,t,null,!1)}),["cols","rows","size","span"].forEach(function(t){mt[t]=new gt(t,6,!1,t,null,!1)}),["rowSpan","start"].forEach(function(t){mt[t]=new gt(t,5,!1,t.toLowerCase(),null,!1)});var yt=/[\-:]([a-z])/g;function bt(t){return t[1].toUpperCase()}function xt(t){switch(typeof t){case"boolean":case"number":case"object":case"string":case"undefined":return t;default:return""}}function wt(t,e,n,r){var i=mt.hasOwnProperty(e)?mt[e]:null;(null!==i?0===i.type:!r&&(2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1])))||(function(t,e,n,r){if(null==e||function(t,e,n,r){if(null!==n&&0===n.type)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(t=t.toLowerCase().slice(0,5))&&"aria-"!==t);default:return!1}}(t,e,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!e;case 4:return!1===e;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}(e,n,i,r)&&(n=null),r||null===i?function(t){return!!pt.call(vt,t)||!pt.call(ht,t)&&(dt.test(t)?vt[t]=!0:(ht[t]=!0,!1))}(e)&&(null===n?t.removeAttribute(e):t.setAttribute(e,""+n)):i.mustUseProperty?t[i.propertyName]=null===n?3!==i.type&&"":n:(e=i.attributeName,r=i.attributeNamespace,null===n?t.removeAttribute(e):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?t.setAttributeNS(r,e,n):t.setAttribute(e,n))))}function kt(t){var e=t.type;return(t=t.nodeName)&&"input"===t.toLowerCase()&&("checkbox"===e||"radio"===e)}function Mt(t){t._valueTracker||(t._valueTracker=function(t){var e=kt(t)?"checked":"value",n=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),r=""+t[e];if(!t.hasOwnProperty(e)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(t,e,{configurable:!0,get:function(){return i.call(this)},set:function(t){r=""+t,o.call(this,t)}}),Object.defineProperty(t,e,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(t){r=""+t},stopTracking:function(){t._valueTracker=null,delete t[e]}}}}(t))}function St(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var n=e.getValue(),r="";return t&&(r=kt(t)?t.checked?"true":"false":t.value),(t=r)!==n&&(e.setValue(t),!0)}function Et(t,e){var n=e.checked;return i({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:t._wrapperState.initialChecked})}function _t(t,e){var n=null==e.defaultValue?"":e.defaultValue,r=null!=e.checked?e.checked:e.defaultChecked;n=xt(null!=e.value?e.value:n),t._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}}function Ct(t,e){null!=(e=e.checked)&&wt(t,"checked",e,!1)}function Tt(t,e){Ct(t,e);var n=xt(e.value),r=e.type;if(null!=n)"number"===r?(0===n&&""===t.value||t.value!=n)&&(t.value=""+n):t.value!==""+n&&(t.value=""+n);else if("submit"===r||"reset"===r)return void t.removeAttribute("value");e.hasOwnProperty("value")?Pt(t,e.type,n):e.hasOwnProperty("defaultValue")&&Pt(t,e.type,xt(e.defaultValue)),null==e.checked&&null!=e.defaultChecked&&(t.defaultChecked=!!e.defaultChecked)}function At(t,e,n){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var r=e.type;if(!("submit"!==r&&"reset"!==r||void 0!==e.value&&null!==e.value))return;e=""+t._wrapperState.initialValue,n||e===t.value||(t.value=e),t.defaultValue=e}""!==(n=t.name)&&(t.name=""),t.defaultChecked=!t.defaultChecked,t.defaultChecked=!!t._wrapperState.initialChecked,""!==n&&(t.name=n)}function Pt(t,e,n){"number"===e&&t.ownerDocument.activeElement===t||(null==n?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+n&&(t.defaultValue=""+n))}function Nt(t,e){return t=i({children:void 0},e),(e=function(t){var e="";return r.Children.forEach(t,function(t){null!=t&&(e+=t)}),e}(e.children))&&(t.children=e),t}function Ot(t,e,n,r){if(t=t.options,e){e={};for(var i=0;i<n.length;i++)e["$"+n[i]]=!0;for(n=0;n<t.length;n++)i=e.hasOwnProperty("$"+t[n].value),t[n].selected!==i&&(t[n].selected=i),i&&r&&(t[n].defaultSelected=!0)}else{for(n=""+xt(n),e=null,i=0;i<t.length;i++){if(t[i].value===n)return t[i].selected=!0,void(r&&(t[i].defaultSelected=!0));null!==e||t[i].disabled||(e=t[i])}null!==e&&(e.selected=!0)}}function Ft(t,e){if(null!=e.dangerouslySetInnerHTML)throw a(Error(91));return i({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function Lt(t,e){var n=e.value;if(null==n){if(n=e.defaultValue,null!=(e=e.children)){if(null!=n)throw a(Error(92));if(Array.isArray(e)){if(!(1>=e.length))throw a(Error(93));e=e[0]}n=e}null==n&&(n="")}t._wrapperState={initialValue:xt(n)}}function Dt(t,e){var n=xt(e.value),r=xt(e.defaultValue);null!=n&&((n=""+n)!==t.value&&(t.value=n),null==e.defaultValue&&t.defaultValue!==n&&(t.defaultValue=n)),null!=r&&(t.defaultValue=""+r)}function Rt(t){var e=t.textContent;e===t._wrapperState.initialValue&&""!==e&&null!==e&&(t.value=e)}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(t){var e=t.replace(yt,bt);mt[e]=new gt(e,1,!1,t,null,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(t){var e=t.replace(yt,bt);mt[e]=new gt(e,1,!1,t,"http://www.w3.org/1999/xlink",!1)}),["xml:base","xml:lang","xml:space"].forEach(function(t){var e=t.replace(yt,bt);mt[e]=new gt(e,1,!1,t,"http://www.w3.org/XML/1998/namespace",!1)}),["tabIndex","crossOrigin"].forEach(function(t){mt[t]=new gt(t,1,!1,t.toLowerCase(),null,!1)}),mt.xlinkHref=new gt("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach(function(t){mt[t]=new gt(t,1,!1,t.toLowerCase(),null,!0)});var It={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function jt(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function zt(t,e){return null==t||"http://www.w3.org/1999/xhtml"===t?jt(e):"http://www.w3.org/2000/svg"===t&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":t}var Wt,Bt,Ut=(Bt=function(t,e){if(t.namespaceURI!==It.svg||"innerHTML"in t)t.innerHTML=e;else{for((Wt=Wt||document.createElement("div")).innerHTML="<svg>"+e.valueOf().toString()+"</svg>",e=Wt.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,e,n,r){MSApp.execUnsafeLocalFunction(function(){return Bt(t,e)})}:Bt);function Vt(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&3===n.nodeType)return void(n.nodeValue=e)}t.textContent=e}function Ht(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n}var qt={animationend:Ht("Animation","AnimationEnd"),animationiteration:Ht("Animation","AnimationIteration"),animationstart:Ht("Animation","AnimationStart"),transitionend:Ht("Transition","TransitionEnd")},Yt={},Gt={};function $t(t){if(Yt[t])return Yt[t];if(!qt[t])return t;var e,n=qt[t];for(e in n)if(n.hasOwnProperty(e)&&e in Gt)return Yt[t]=n[e];return t}Q&&(Gt=document.createElement("div").style,"AnimationEvent"in window||(delete qt.animationend.animation,delete qt.animationiteration.animation,delete qt.animationstart.animation),"TransitionEvent"in window||delete qt.transitionend.transition);var Xt=$t("animationend"),Kt=$t("animationiteration"),Zt=$t("animationstart"),Qt=$t("transitionend"),Jt="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),te=!1,ee=[],ne=null,re=null,ie=null,oe=new Map,ae=new Map,ue="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),le="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function ce(t,e,n,r){return{blockedOn:t,topLevelType:e,eventSystemFlags:32|n,nativeEvent:r}}function se(t,e){switch(t){case"focus":case"blur":ne=null;break;case"dragenter":case"dragleave":re=null;break;case"mouseover":case"mouseout":ie=null;break;case"pointerover":case"pointerout":oe.delete(e.pointerId);break;case"gotpointercapture":case"lostpointercapture":ae.delete(e.pointerId)}}function fe(t,e,n,r,i){return null===t||t.nativeEvent!==i?ce(e,n,r,i):(t.eventSystemFlags|=r,t)}function de(t){if(null!==t.blockedOn)return!1;var e=Sn(t.topLevelType,t.eventSystemFlags,t.nativeEvent);return null===e||(t.blockedOn=e,!1)}function pe(t,e,n){de(t)&&n.delete(e)}function he(){for(te=!1;0<ee.length;){var t=ee[0];if(null!==t.blockedOn)break;var e=Sn(t.topLevelType,t.eventSystemFlags,t.nativeEvent);null!==e?t.blockedOn=e:ee.shift()}null!==ne&&de(ne)&&(ne=null),null!==re&&de(re)&&(re=null),null!==ie&&de(ie)&&(ie=null),oe.forEach(pe),ae.forEach(pe)}function ve(t,e){t.blockedOn===e&&(t.blockedOn=null,te||(te=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,he)))}function ge(t){function e(e){return ve(e,t)}if(0<ee.length){ve(ee[0],t);for(var n=1;n<ee.length;n++){var r=ee[n];r.blockedOn===t&&(r.blockedOn=null)}}null!==ne&&ve(ne,t),null!==re&&ve(re,t),null!==ie&&ve(ie,t),oe.forEach(e),ae.forEach(e)}var me=0,ye=2,be=1024;function xe(t){var e=t,n=t;if(t.alternate)for(;e.return;)e=e.return;else{t=e;do{((e=t).effectTag&(ye|be))!==me&&(n=e.return),t=e.return}while(t)}return 3===e.tag?n:null}function we(t){if(xe(t)!==t)throw a(Error(188))}function ke(t){if(!(t=function(t){var e=t.alternate;if(!e){if(null===(e=xe(t)))throw a(Error(188));return e!==t?null:t}for(var n=t,r=e;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return we(i),t;if(o===r)return we(i),e;o=o.sibling}throw a(Error(188))}if(n.return!==r.return)n=i,r=o;else{for(var u=!1,l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u){for(l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u)throw a(Error(189))}}if(n.alternate!==r)throw a(Error(190))}if(3!==n.tag)throw a(Error(188));return n.stateNode.current===n?t:e}(t)))return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}function Me(t){return(t=t.target||t.srcElement||window).correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}function Se(t){do{t=t.return}while(t&&5!==t.tag);return t||null}function Ee(t,e,n){(e=N(t,n.dispatchConfig.phasedRegistrationNames[e]))&&(n._dispatchListeners=E(n._dispatchListeners,e),n._dispatchInstances=E(n._dispatchInstances,t))}function _e(t){if(t&&t.dispatchConfig.phasedRegistrationNames){for(var e=t._targetInst,n=[];e;)n.push(e),e=Se(e);for(e=n.length;0<e--;)Ee(n[e],"captured",t);for(e=0;e<n.length;e++)Ee(n[e],"bubbled",t)}}function Ce(t,e,n){t&&n&&n.dispatchConfig.registrationName&&(e=N(t,n.dispatchConfig.registrationName))&&(n._dispatchListeners=E(n._dispatchListeners,e),n._dispatchInstances=E(n._dispatchInstances,t))}function Te(t){t&&t.dispatchConfig.registrationName&&Ce(t._targetInst,null,t)}function Ae(t){_(t,_e)}function Pe(){return!0}function Ne(){return!1}function Oe(t,e,n,r){for(var i in this.dispatchConfig=t,this._targetInst=e,this.nativeEvent=n,t=this.constructor.Interface)t.hasOwnProperty(i)&&((e=t[i])?this[i]=e(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Pe:Ne,this.isPropagationStopped=Ne,this}function Fe(t,e,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,t,e,n,r),i}return new this(t,e,n,r)}function Le(t){if(!(t instanceof this))throw a(Error(279));t.destructor(),10>this.eventPool.length&&this.eventPool.push(t)}function De(t){t.eventPool=[],t.getPooled=Fe,t.release=Le}i(Oe.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():"unknown"!=typeof t.returnValue&&(t.returnValue=!1),this.isDefaultPrevented=Pe)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():"unknown"!=typeof t.cancelBubble&&(t.cancelBubble=!0),this.isPropagationStopped=Pe)},persist:function(){this.isPersistent=Pe},isPersistent:Ne,destructor:function(){var t,e=this.constructor.Interface;for(t in e)this[t]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Ne,this._dispatchInstances=this._dispatchListeners=null}}),Oe.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Oe.extend=function(t){function e(){}function n(){return r.apply(this,arguments)}var r=this;e.prototype=r.prototype;var o=new e;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,t),n.extend=r.extend,De(n),n},De(Oe);var Re=Oe.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Ie=Oe.extend({clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}}),je=Oe.extend({view:null,detail:null}),ze=je.extend({relatedTarget:null});function We(t){var e=t.keyCode;return"charCode"in t?0===(t=t.charCode)&&13===e&&(t=13):t=e,10===t&&(t=13),32<=t||13===t?t:0}var Be={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Ue={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Ve={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function He(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):!!(t=Ve[t])&&!!e[t]}function qe(){return He}for(var Ye=je.extend({key:function(t){if(t.key){var e=Be[t.key]||t.key;if("Unidentified"!==e)return e}return"keypress"===t.type?13===(t=We(t))?"Enter":String.fromCharCode(t):"keydown"===t.type||"keyup"===t.type?Ue[t.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:qe,charCode:function(t){return"keypress"===t.type?We(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?We(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}}),Ge=0,$e=0,Xe=!1,Ke=!1,Ze=je.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:qe,button:null,buttons:null,relatedTarget:function(t){return t.relatedTarget||(t.fromElement===t.srcElement?t.toElement:t.fromElement)},movementX:function(t){if("movementX"in t)return t.movementX;var e=Ge;return Ge=t.screenX,Xe?"mousemove"===t.type?t.screenX-e:0:(Xe=!0,0)},movementY:function(t){if("movementY"in t)return t.movementY;var e=$e;return $e=t.screenY,Ke?"mousemove"===t.type?t.screenY-e:0:(Ke=!0,0)}}),Qe=Ze.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Je=Ze.extend({dataTransfer:null}),tn=je.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:qe}),en=Oe.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),nn=Ze.extend({deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:null,deltaMode:null}),rn=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[Xt,"animationEnd",2],[Kt,"animationIteration",2],[Zt,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[Qt,"transitionEnd",2],["waiting","waiting",2]],on={},an={},un=0;un<rn.length;un++){var ln=rn[un],cn=ln[0],sn=ln[1],fn=ln[2],dn="on"+(sn[0].toUpperCase()+sn.slice(1)),pn={phasedRegistrationNames:{bubbled:dn,captured:dn+"Capture"},dependencies:[cn],eventPriority:fn};on[sn]=pn,an[cn]=pn}var hn={eventTypes:on,getEventPriority:function(t){return void 0!==(t=an[t])?t.eventPriority:2},extractEvents:function(t,e,n,r){var i=an[t];if(!i)return null;switch(t){case"keypress":if(0===We(n))return null;case"keydown":case"keyup":t=Ye;break;case"blur":case"focus":t=ze;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":t=Ze;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":t=Je;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":t=tn;break;case Xt:case Kt:case Zt:t=Re;break;case Qt:t=en;break;case"scroll":t=je;break;case"wheel":t=nn;break;case"copy":case"cut":case"paste":t=Ie;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":t=Qe;break;default:t=Oe}return Ae(e=t.getPooled(i,e,n,r)),e}},vn=hn.getEventPriority,gn=10,mn=[];function yn(t){var e=t.targetInst,n=e;do{if(!n){t.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(e=n.tag)&&6!==e||t.ancestors.push(n),n=or(r)}while(n);for(n=0;n<t.ancestors.length;n++){e=t.ancestors[n];var i=Me(t.nativeEvent);r=t.topLevelType;for(var o=t.nativeEvent,a=t.eventSystemFlags,u=null,l=0;l<f.length;l++){var c=f[l];c&&(c=c.extractEvents(r,e,o,i,a))&&(u=E(u,c))}A(u)}}var bn=!0;function xn(t,e){wn(e,t,!1)}function wn(t,e,n){switch(vn(e)){case 0:var r=function(t,e,n){ct||ut();var r=Mn,i=ct;ct=!0;try{at(r,t,e,n)}finally{(ct=i)||ft()}}.bind(null,e,1);break;case 1:r=function(t,e,n){Mn(t,e,n)}.bind(null,e,1);break;default:r=Mn.bind(null,e,1)}n?t.addEventListener(e,r,!0):t.addEventListener(e,r,!1)}function kn(t,e,n,r){if(mn.length){var i=mn.pop();i.topLevelType=t,i.eventSystemFlags=e,i.nativeEvent=n,i.targetInst=r,t=i}else t={topLevelType:t,eventSystemFlags:e,nativeEvent:n,targetInst:r,ancestors:[]};try{if(e=yn,n=t,st)e(n,void 0);else{st=!0;try{lt(e,n,void 0)}finally{st=!1,ft()}}}finally{t.topLevelType=null,t.nativeEvent=null,t.targetInst=null,t.ancestors.length=0,mn.length<gn&&mn.push(t)}}function Mn(t,e,n){if(bn)if(0<ee.length&&-1<ue.indexOf(t))t=ce(null,t,e,n),ee.push(t);else{var r=Sn(t,e,n);null===r?se(t,n):-1<ue.indexOf(t)?(t=ce(r,t,e,n),ee.push(t)):function(t,e,n,r){switch(e){case"focus":return ne=fe(ne,t,e,n,r),!0;case"dragenter":return re=fe(re,t,e,n,r),!0;case"mouseover":return ie=fe(ie,t,e,n,r),!0;case"pointerover":var i=r.pointerId;return oe.set(i,fe(oe.get(i)||null,t,e,n,r)),!0;case"gotpointercapture":return i=r.pointerId,ae.set(i,fe(ae.get(i)||null,t,e,n,r)),!0}return!1}(r,t,e,n)||(se(t,n),kn(t,e,n,null))}}function Sn(t,e,n){var r=Me(n),i=or(r);if(null!==i)if(null===(r=xe(i)))i=null;else{var o=r.tag;if(13===o){if(null!==(r=13!==r.tag||(null===(i=r.memoizedState)&&(null!==(r=r.alternate)&&(i=r.memoizedState)),null===i)?null:i.dehydrated))return r;i=null}else if(3===o){if(r.stateNode.hydrate)return 3===r.tag?r.stateNode.containerInfo:null;i=null}else r!==i&&(i=null)}return kn(t,e,n,i),null}function En(t){if(!Q)return!1;var e=(t="on"+t)in document;return e||((e=document.createElement("div")).setAttribute(t,"return;"),e="function"==typeof e[t]),e}var _n=new("function"==typeof WeakMap?WeakMap:Map);function Cn(t){var e=_n.get(t);return void 0===e&&(e=new Set,_n.set(t,e)),e}function Tn(t,e,n){if(!n.has(t)){switch(t){case"scroll":wn(e,"scroll",!0);break;case"focus":case"blur":wn(e,"focus",!0),wn(e,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":En(t)&&wn(e,t,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Jt.indexOf(t)&&xn(t,e)}n.add(t)}}var An={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Pn=["Webkit","ms","Moz","O"];function Nn(t,e,n){return null==e||"boolean"==typeof e||""===e?"":n||"number"!=typeof e||0===e||An.hasOwnProperty(t)&&An[t]?(""+e).trim():e+"px"}function On(t,e){for(var n in t=t.style,e)if(e.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=Nn(n,e[n],r);"float"===n&&(n="cssFloat"),r?t.setProperty(n,i):t[n]=i}}Object.keys(An).forEach(function(t){Pn.forEach(function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),An[e]=An[t]})});var Fn=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ln(t,e){if(e){if(Fn[t]&&(null!=e.children||null!=e.dangerouslySetInnerHTML))throw a(Error(137),t,"");if(null!=e.dangerouslySetInnerHTML){if(null!=e.children)throw a(Error(60));if(!("object"==typeof e.dangerouslySetInnerHTML&&"__html"in e.dangerouslySetInnerHTML))throw a(Error(61))}if(null!=e.style&&"object"!=typeof e.style)throw a(Error(62),"")}}function Dn(t,e){if(-1===t.indexOf("-"))return"string"==typeof e.is;switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Rn(t,e){var n=Cn(t=9===t.nodeType||11===t.nodeType?t:t.ownerDocument);e=h[e];for(var r=0;r<e.length;r++)Tn(e[r],t,n)}function In(){}function jn(t){if(void 0===(t=t||("undefined"!=typeof document?document:void 0)))return null;try{return t.activeElement||t.body}catch(e){return t.body}}function zn(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function Wn(t,e){var n,r=zn(t);for(t=0;r;){if(3===r.nodeType){if(n=t+r.textContent.length,t<=e&&n>=e)return{node:r,offset:e-t};t=n}t:{for(;r;){if(r.nextSibling){r=r.nextSibling;break t}r=r.parentNode}r=void 0}r=zn(r)}}function Bn(){for(var t=window,e=jn();e instanceof t.HTMLIFrameElement;){try{var n="string"==typeof e.contentWindow.location.href}catch(t){n=!1}if(!n)break;e=jn((t=e.contentWindow).document)}return e}function Un(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&("input"===e&&("text"===t.type||"search"===t.type||"tel"===t.type||"url"===t.type||"password"===t.type)||"textarea"===e||"true"===t.contentEditable)}var Vn="$",Hn="/$",qn="$?",Yn="$!",Gn=null,$n=null;function Xn(t,e){switch(t){case"button":case"input":case"select":case"textarea":return!!e.autoFocus}return!1}function Kn(t,e){return"textarea"===t||"option"===t||"noscript"===t||"string"==typeof e.children||"number"==typeof e.children||"object"==typeof e.dangerouslySetInnerHTML&&null!==e.dangerouslySetInnerHTML&&null!=e.dangerouslySetInnerHTML.__html}var Zn="function"==typeof setTimeout?setTimeout:void 0,Qn="function"==typeof clearTimeout?clearTimeout:void 0;function Jn(t){for(;null!=t;t=t.nextSibling){var e=t.nodeType;if(1===e||3===e)break}return t}function tr(t){t=t.previousSibling;for(var e=0;t;){if(8===t.nodeType){var n=t.data;if(n===Vn||n===Yn||n===qn){if(0===e)return t;e--}else n===Hn&&e++}t=t.previousSibling}return null}var er=Math.random().toString(36).slice(2),nr="__reactInternalInstance$"+er,rr="__reactEventHandlers$"+er,ir="__reactContainere$"+er;function or(t){var e=t[nr];if(e)return e;for(var n=t.parentNode;n;){if(e=n[ir]||n[nr]){if(n=e.alternate,null!==e.child||null!==n&&null!==n.child)for(t=tr(t);null!==t;){if(n=t[nr])return n;t=tr(t)}return e}n=(t=n).parentNode}return null}function ar(t){return!(t=t[nr]||t[ir])||5!==t.tag&&6!==t.tag&&13!==t.tag&&3!==t.tag?null:t}function ur(t){if(5===t.tag||6===t.tag)return t.stateNode;throw a(Error(33))}function lr(t){return t[rr]||null}var cr=null,sr=null,fr=null;function dr(){if(fr)return fr;var t,e,n=sr,r=n.length,i="value"in cr?cr.value:cr.textContent,o=i.length;for(t=0;t<r&&n[t]===i[t];t++);var a=r-t;for(e=1;e<=a&&n[r-e]===i[o-e];e++);return fr=i.slice(t,1<e?1-e:void 0)}var pr=Oe.extend({data:null}),hr=Oe.extend({data:null}),vr=[9,13,27,32],gr=Q&&"CompositionEvent"in window,mr=null;Q&&"documentMode"in document&&(mr=document.documentMode);var yr=Q&&"TextEvent"in window&&!mr,br=Q&&(!gr||mr&&8<mr&&11>=mr),xr=String.fromCharCode(32),wr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},kr=!1;function Mr(t,e){switch(t){case"keyup":return-1!==vr.indexOf(e.keyCode);case"keydown":return 229!==e.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Sr(t){return"object"==typeof(t=t.detail)&&"data"in t?t.data:null}var Er=!1;var _r={eventTypes:wr,extractEvents:function(t,e,n,r){var i;if(gr)t:{switch(t){case"compositionstart":var o=wr.compositionStart;break t;case"compositionend":o=wr.compositionEnd;break t;case"compositionupdate":o=wr.compositionUpdate;break t}o=void 0}else Er?Mr(t,n)&&(o=wr.compositionEnd):"keydown"===t&&229===n.keyCode&&(o=wr.compositionStart);return o?(br&&"ko"!==n.locale&&(Er||o!==wr.compositionStart?o===wr.compositionEnd&&Er&&(i=dr()):(sr="value"in(cr=r)?cr.value:cr.textContent,Er=!0)),o=pr.getPooled(o,e,n,r),i?o.data=i:null!==(i=Sr(n))&&(o.data=i),Ae(o),i=o):i=null,(t=yr?function(t,e){switch(t){case"compositionend":return Sr(e);case"keypress":return 32!==e.which?null:(kr=!0,xr);case"textInput":return(t=e.data)===xr&&kr?null:t;default:return null}}(t,n):function(t,e){if(Er)return"compositionend"===t||!gr&&Mr(t,e)?(t=dr(),fr=sr=cr=null,Er=!1,t):null;switch(t){case"paste":return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return br&&"ko"!==e.locale?null:e.data;default:return null}}(t,n))?((e=hr.getPooled(wr.beforeInput,e,n,r)).data=t,Ae(e)):e=null,null===i?e:null===e?i:[i,e]}},Cr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Tr(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return"input"===e?!!Cr[t.type]:"textarea"===e}var Ar={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Pr(t,e,n){return(t=Oe.getPooled(Ar.change,t,e,n)).type="change",rt(n),Ae(t),t}var Nr=null,Or=null;function Fr(t){A(t)}function Lr(t){if(St(ur(t)))return t}function Dr(t,e){if("change"===t)return e}var Rr=!1;function Ir(){Nr&&(Nr.detachEvent("onpropertychange",jr),Or=Nr=null)}function jr(t){if("value"===t.propertyName&&Lr(Or))if(t=Pr(Or,t,Me(t)),ct)A(t);else{ct=!0;try{ot(Fr,t)}finally{ct=!1,ft()}}}function zr(t,e,n){"focus"===t?(Ir(),Or=n,(Nr=e).attachEvent("onpropertychange",jr)):"blur"===t&&Ir()}function Wr(t){if("selectionchange"===t||"keyup"===t||"keydown"===t)return Lr(Or)}function Br(t,e){if("click"===t)return Lr(e)}function Ur(t,e){if("input"===t||"change"===t)return Lr(e)}Q&&(Rr=En("input")&&(!document.documentMode||9<document.documentMode));var Vr={eventTypes:Ar,_isInputEventSupported:Rr,extractEvents:function(t,e,n,r){var i=e?ur(e):window,o=i.nodeName&&i.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===i.type)var a=Dr;else if(Tr(i))if(Rr)a=Ur;else{a=Wr;var u=zr}else(o=i.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(a=Br);if(a&&(a=a(t,e)))return Pr(a,n,r);u&&u(t,i,e),"blur"===t&&(t=i._wrapperState)&&t.controlled&&"number"===i.type&&Pt(i,"number",i.value)}},Hr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},qr={eventTypes:Hr,extractEvents:function(t,e,n,r,i){var o="mouseover"===t||"pointerover"===t,a="mouseout"===t||"pointerout"===t;if(o&&0==(32&i)&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;if(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,a?(a=e,null!==(e=(e=n.relatedTarget||n.toElement)?or(e):null)&&(e!==(o=xe(e))||5!==e.tag&&6!==e.tag)&&(e=null)):a=null,a===e)return null;if("mouseout"===t||"mouseover"===t)var u=Ze,l=Hr.mouseLeave,c=Hr.mouseEnter,s="mouse";else"pointerout"!==t&&"pointerover"!==t||(u=Qe,l=Hr.pointerLeave,c=Hr.pointerEnter,s="pointer");if(t=null==a?i:ur(a),i=null==e?i:ur(e),(l=u.getPooled(l,a,n,r)).type=s+"leave",l.target=t,l.relatedTarget=i,(n=u.getPooled(c,e,n,r)).type=s+"enter",n.target=i,n.relatedTarget=t,s=e,(r=a)&&s)t:{for(c=s,t=0,a=u=r;a;a=Se(a))t++;for(a=0,e=c;e;e=Se(e))a++;for(;0<t-a;)u=Se(u),t--;for(;0<a-t;)c=Se(c),a--;for(;t--;){if(u===c||u===c.alternate)break t;u=Se(u),c=Se(c)}u=null}else u=null;for(c=u,u=[];r&&r!==c&&(null===(t=r.alternate)||t!==c);)u.push(r),r=Se(r);for(r=[];s&&s!==c&&(null===(t=s.alternate)||t!==c);)r.push(s),s=Se(s);for(s=0;s<u.length;s++)Ce(u[s],"bubbled",l);for(s=r.length;0<s--;)Ce(r[s],"captured",n);return[l,n]}};var Yr="function"==typeof Object.is?Object.is:function(t,e){return t===e&&(0!==t||1/t==1/e)||t!=t&&e!=e},Gr=Object.prototype.hasOwnProperty;function $r(t,e){if(Yr(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),r=Object.keys(e);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Gr.call(e,n[r])||!Yr(t[n[r]],e[n[r]]))return!1;return!0}var Xr=Q&&"documentMode"in document&&11>=document.documentMode,Kr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Zr=null,Qr=null,Jr=null,ti=!1;function ei(t,e){var n=e.window===e?e.document:9===e.nodeType?e:e.ownerDocument;return ti||null==Zr||Zr!==jn(n)?null:("selectionStart"in(n=Zr)&&Un(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Jr&&$r(Jr,n)?null:(Jr=n,(t=Oe.getPooled(Kr.select,Qr,t,e)).type="select",t.target=Zr,Ae(t),t))}var ni={eventTypes:Kr,extractEvents:function(t,e,n,r){var i,o=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(i=!o)){t:{o=Cn(o),i=h.onSelect;for(var a=0;a<i.length;a++)if(!o.has(i[a])){o=!1;break t}o=!0}i=!o}if(i)return null;switch(o=e?ur(e):window,t){case"focus":(Tr(o)||"true"===o.contentEditable)&&(Zr=o,Qr=e,Jr=null);break;case"blur":Jr=Qr=Zr=null;break;case"mousedown":ti=!0;break;case"contextmenu":case"mouseup":case"dragend":return ti=!1,ei(n,r);case"selectionchange":if(Xr)break;case"keydown":case"keyup":return ei(n,r)}return null}};P.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w=lr,k=ar,M=ur,P.injectEventPluginsByName({SimpleEventPlugin:hn,EnterLeaveEventPlugin:qr,ChangeEventPlugin:Vr,SelectEventPlugin:ni,BeforeInputEventPlugin:_r}),new Set;var ri=[],ii=-1;function oi(t){0>ii||(t.current=ri[ii],ri[ii]=null,ii--)}function ai(t,e){ri[++ii]=t.current,t.current=e}var ui={},li={current:ui},ci={current:!1},si=ui;function fi(t,e){var n=t.type.contextTypes;if(!n)return ui;var r=t.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===e)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=e[i];return r&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=o),o}function di(t){return null!=(t=t.childContextTypes)}function pi(t){oi(ci),oi(li)}function hi(t){oi(ci),oi(li)}function vi(t,e,n){if(li.current!==ui)throw a(Error(168));ai(li,e),ai(ci,n)}function gi(t,e,n){var r=t.stateNode;if(t=e.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw a(Error(108),K(e)||"Unknown",o);return i({},n,{},r)}function mi(t){var e=t.stateNode;return e=e&&e.__reactInternalMemoizedMergedChildContext||ui,si=li.current,ai(li,e),ai(ci,ci.current),!0}function yi(t,e,n){var r=t.stateNode;if(!r)throw a(Error(169));n?(e=gi(t,e,si),r.__reactInternalMemoizedMergedChildContext=e,oi(ci),oi(li),ai(li,e)):oi(ci),ai(ci,n)}var bi=o.unstable_runWithPriority,xi=o.unstable_scheduleCallback,wi=o.unstable_cancelCallback,ki=o.unstable_shouldYield,Mi=o.unstable_requestPaint,Si=o.unstable_now,Ei=o.unstable_getCurrentPriorityLevel,_i=o.unstable_ImmediatePriority,Ci=o.unstable_UserBlockingPriority,Ti=o.unstable_NormalPriority,Ai=o.unstable_LowPriority,Pi=o.unstable_IdlePriority,Ni={},Oi=void 0!==Mi?Mi:function(){},Fi=null,Li=null,Di=!1,Ri=Si(),Ii=1e4>Ri?Si:function(){return Si()-Ri};function ji(){switch(Ei()){case _i:return 99;case Ci:return 98;case Ti:return 97;case Ai:return 96;case Pi:return 95;default:throw a(Error(332))}}function zi(t){switch(t){case 99:return _i;case 98:return Ci;case 97:return Ti;case 96:return Ai;case 95:return Pi;default:throw a(Error(332))}}function Wi(t,e){return t=zi(t),bi(t,e)}function Bi(t,e,n){return t=zi(t),xi(t,e,n)}function Ui(t){return null===Fi?(Fi=[t],Li=xi(_i,Hi)):Fi.push(t),Ni}function Vi(){if(null!==Li){var t=Li;Li=null,wi(t)}Hi()}function Hi(){if(!Di&&null!==Fi){Di=!0;var t=0;try{var e=Fi;Wi(99,function(){for(;t<e.length;t++){var n=e[t];do{n=n(!0)}while(null!==n)}}),Fi=null}catch(e){throw null!==Fi&&(Fi=Fi.slice(t+1)),xi(_i,Vi),e}finally{Di=!1}}}function qi(t,e){if(t&&t.defaultProps)for(var n in e=i({},e),t=t.defaultProps)void 0===e[n]&&(e[n]=t[n]);return e}var Yi={current:null},Gi=null,$i=null,Xi=null;function Ki(){Xi=$i=Gi=null}function Zi(t,e){var n=t.type._context;ai(Yi,n._currentValue),n._currentValue=e}function Qi(t){var e=Yi.current;oi(Yi),t.type._context._currentValue=e}function Ji(t,e){for(;null!==t;){var n=t.alternate;if(t.childExpirationTime<e)t.childExpirationTime=e,null!==n&&n.childExpirationTime<e&&(n.childExpirationTime=e);else{if(!(null!==n&&n.childExpirationTime<e))break;n.childExpirationTime=e}t=t.return}}function to(t,e){Gi=t,Xi=$i=null,null!==(t=t.dependencies)&&null!==t.firstContext&&(t.expirationTime>=e&&(Ta=!0),t.firstContext=null)}function eo(t,e){if(Xi!==t&&!1!==e&&0!==e)if("number"==typeof e&&1073741823!==e||(Xi=t,e=1073741823),e={context:t,observedBits:e,next:null},null===$i){if(null===Gi)throw a(Error(308));$i=e,Gi.dependencies={expirationTime:0,firstContext:e,responders:null}}else $i=$i.next=e;return t._currentValue}var no=!1;function ro(t){return{baseState:t,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function io(t){return{baseState:t.baseState,firstUpdate:t.firstUpdate,lastUpdate:t.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function oo(t,e){return{expirationTime:t,suspenseConfig:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function ao(t,e){null===t.lastUpdate?t.firstUpdate=t.lastUpdate=e:(t.lastUpdate.next=e,t.lastUpdate=e)}function uo(t,e){var n=t.alternate;if(null===n){var r=t.updateQueue,i=null;null===r&&(r=t.updateQueue=ro(t.memoizedState))}else r=t.updateQueue,i=n.updateQueue,null===r?null===i?(r=t.updateQueue=ro(t.memoizedState),i=n.updateQueue=ro(n.memoizedState)):r=t.updateQueue=io(i):null===i&&(i=n.updateQueue=io(r));null===i||r===i?ao(r,e):null===r.lastUpdate||null===i.lastUpdate?(ao(r,e),ao(i,e)):(ao(r,e),i.lastUpdate=e)}function lo(t,e){var n=t.updateQueue;null===(n=null===n?t.updateQueue=ro(t.memoizedState):co(t,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=e:(n.lastCapturedUpdate.next=e,n.lastCapturedUpdate=e)}function co(t,e){var n=t.alternate;return null!==n&&e===n.updateQueue&&(e=t.updateQueue=io(e)),e}function so(t,e,n,r,o,a){switch(n.tag){case 1:return"function"==typeof(t=n.payload)?t.call(a,r,o):t;case 3:t.effectTag=-4097&t.effectTag|64;case 0:if(null==(o="function"==typeof(t=n.payload)?t.call(a,r,o):t))break;return i({},r,o);case 2:no=!0}return r}function fo(t,e,n,r,i){no=!1;for(var o=(e=co(t,e)).baseState,a=null,u=0,l=e.firstUpdate,c=o;null!==l;){var s=l.expirationTime;s<i?(null===a&&(a=l,o=c),u<s&&(u=s)):(pl(s,l.suspenseConfig),c=so(t,0,l,c,n,r),null!==l.callback&&(t.effectTag|=32,l.nextEffect=null,null===e.lastEffect?e.firstEffect=e.lastEffect=l:(e.lastEffect.nextEffect=l,e.lastEffect=l))),l=l.next}for(s=null,l=e.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<i?(null===s&&(s=l,null===a&&(o=c)),u<f&&(u=f)):(c=so(t,0,l,c,n,r),null!==l.callback&&(t.effectTag|=32,l.nextEffect=null,null===e.lastCapturedEffect?e.firstCapturedEffect=e.lastCapturedEffect=l:(e.lastCapturedEffect.nextEffect=l,e.lastCapturedEffect=l))),l=l.next}null===a&&(e.lastUpdate=null),null===s?e.lastCapturedUpdate=null:t.effectTag|=32,null===a&&null===s&&(o=c),e.baseState=o,e.firstUpdate=a,e.firstCapturedUpdate=s,hl(u),t.expirationTime=u,t.memoizedState=c}function po(t,e,n){null!==e.firstCapturedUpdate&&(null!==e.lastUpdate&&(e.lastUpdate.next=e.firstCapturedUpdate,e.lastUpdate=e.lastCapturedUpdate),e.firstCapturedUpdate=e.lastCapturedUpdate=null),ho(e.firstEffect,n),e.firstEffect=e.lastEffect=null,ho(e.firstCapturedEffect,n),e.firstCapturedEffect=e.lastCapturedEffect=null}function ho(t,e){for(;null!==t;){var n=t.callback;if(null!==n){t.callback=null;var r=e;if("function"!=typeof n)throw a(Error(191),n);n.call(r)}t=t.nextEffect}}var vo=O.ReactCurrentBatchConfig,go=(new r.Component).refs;function mo(t,e,n,r){n=null==(n=n(r,e=t.memoizedState))?e:i({},e,n),t.memoizedState=n,null!==(r=t.updateQueue)&&0===t.expirationTime&&(r.baseState=n)}var yo={isMounted:function(t){return!!(t=t._reactInternalFiber)&&xe(t)===t},enqueueSetState:function(t,e,n){t=t._reactInternalFiber;var r=Ku(),i=vo.suspense;(i=oo(r=Zu(r,t,i),i)).payload=e,null!=n&&(i.callback=n),uo(t,i),tl(t,r)},enqueueReplaceState:function(t,e,n){t=t._reactInternalFiber;var r=Ku(),i=vo.suspense;(i=oo(r=Zu(r,t,i),i)).tag=1,i.payload=e,null!=n&&(i.callback=n),uo(t,i),tl(t,r)},enqueueForceUpdate:function(t,e){t=t._reactInternalFiber;var n=Ku(),r=vo.suspense;(r=oo(n=Zu(n,t,r),r)).tag=2,null!=e&&(r.callback=e),uo(t,r),tl(t,n)}};function bo(t,e,n,r,i,o,a){return"function"==typeof(t=t.stateNode).shouldComponentUpdate?t.shouldComponentUpdate(r,o,a):!e.prototype||!e.prototype.isPureReactComponent||(!$r(n,r)||!$r(i,o))}function xo(t,e,n){var r=!1,i=ui,o=e.contextType;return"object"==typeof o&&null!==o?o=eo(o):(i=di(e)?si:li.current,o=(r=null!=(r=e.contextTypes))?fi(t,i):ui),e=new e(n,o),t.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,e.updater=yo,t.stateNode=e,e._reactInternalFiber=t,r&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,t.__reactInternalMemoizedMaskedChildContext=o),e}function wo(t,e,n,r){t=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(n,r),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(n,r),e.state!==t&&yo.enqueueReplaceState(e,e.state,null)}function ko(t,e,n,r){var i=t.stateNode;i.props=n,i.state=t.memoizedState,i.refs=go;var o=e.contextType;"object"==typeof o&&null!==o?i.context=eo(o):(o=di(e)?si:li.current,i.context=fi(t,o)),null!==(o=t.updateQueue)&&(fo(t,o,n,i,r),i.state=t.memoizedState),"function"==typeof(o=e.getDerivedStateFromProps)&&(mo(t,e,o,n),i.state=t.memoizedState),"function"==typeof e.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(e=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),e!==i.state&&yo.enqueueReplaceState(i,i.state,null),null!==(o=t.updateQueue)&&(fo(t,o,n,i,r),i.state=t.memoizedState)),"function"==typeof i.componentDidMount&&(t.effectTag|=4)}var Mo=Array.isArray;function So(t,e,n){if(null!==(t=n.ref)&&"function"!=typeof t&&"object"!=typeof t){if(n._owner){if(n=n._owner){if(1!==n.tag)throw a(Error(309));var r=n.stateNode}if(!r)throw a(Error(147),t);var i=""+t;return null!==e&&null!==e.ref&&"function"==typeof e.ref&&e.ref._stringRef===i?e.ref:((e=function(t){var e=r.refs;e===go&&(e=r.refs={}),null===t?delete e[i]:e[i]=t})._stringRef=i,e)}if("string"!=typeof t)throw a(Error(284));if(!n._owner)throw a(Error(290),t)}return t}function Eo(t,e){if("textarea"!==t.type)throw a(Error(31),"[object Object]"===Object.prototype.toString.call(e)?"object with keys {"+Object.keys(e).join(", ")+"}":e,"")}function _o(t){function e(e,n){if(t){var r=e.lastEffect;null!==r?(r.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!t)return null;for(;null!==r;)e(n,r),r=r.sibling;return null}function r(t,e){for(t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function i(t,e,n){return(t=Ol(t,e)).index=0,t.sibling=null,t}function o(e,n,r){return e.index=r,t?null!==(r=e.alternate)?(r=r.index)<n?(e.effectTag=ye,n):r:(e.effectTag=ye,n):n}function u(e){return t&&null===e.alternate&&(e.effectTag=ye),e}function l(t,e,n,r){return null===e||6!==e.tag?((e=Dl(n,t.mode,r)).return=t,e):((e=i(e,n)).return=t,e)}function c(t,e,n,r){return null!==e&&e.elementType===n.type?((r=i(e,n.props)).ref=So(t,e,n),r.return=t,r):((r=Fl(n.type,n.key,n.props,null,t.mode,r)).ref=So(t,e,n),r.return=t,r)}function s(t,e,n,r){return null===e||4!==e.tag||e.stateNode.containerInfo!==n.containerInfo||e.stateNode.implementation!==n.implementation?((e=Rl(n,t.mode,r)).return=t,e):((e=i(e,n.children||[])).return=t,e)}function f(t,e,n,r,o){return null===e||7!==e.tag?((e=Ll(n,t.mode,r,o)).return=t,e):((e=i(e,n)).return=t,e)}function d(t,e,n){if("string"==typeof e||"number"==typeof e)return(e=Dl(""+e,t.mode,n)).return=t,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case D:return(n=Fl(e.type,e.key,e.props,null,t.mode,n)).ref=So(t,null,e),n.return=t,n;case R:return(e=Rl(e,t.mode,n)).return=t,e}if(Mo(e)||X(e))return(e=Ll(e,t.mode,n,null)).return=t,e;Eo(t,e)}return null}function p(t,e,n,r){var i=null!==e?e.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(t,e,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case D:return n.key===i?n.type===I?f(t,e,n.props.children,r,i):c(t,e,n,r):null;case R:return n.key===i?s(t,e,n,r):null}if(Mo(n)||X(n))return null!==i?null:f(t,e,n,r,null);Eo(t,n)}return null}function h(t,e,n,r,i){if("string"==typeof r||"number"==typeof r)return l(e,t=t.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case D:return t=t.get(null===r.key?n:r.key)||null,r.type===I?f(e,t,r.props.children,i,r.key):c(e,t,r,i);case R:return s(e,t=t.get(null===r.key?n:r.key)||null,r,i)}if(Mo(r)||X(r))return f(e,t=t.get(n)||null,r,i,null);Eo(e,r)}return null}function v(i,a,u,l){for(var c=null,s=null,f=a,v=a=0,g=null;null!==f&&v<u.length;v++){f.index>v?(g=f,f=null):g=f.sibling;var m=p(i,f,u[v],l);if(null===m){null===f&&(f=g);break}t&&f&&null===m.alternate&&e(i,f),a=o(m,a,v),null===s?c=m:s.sibling=m,s=m,f=g}if(v===u.length)return n(i,f),c;if(null===f){for(;v<u.length;v++)null!==(f=d(i,u[v],l))&&(a=o(f,a,v),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(i,f);v<u.length;v++)null!==(g=h(f,i,v,u[v],l))&&(t&&null!==g.alternate&&f.delete(null===g.key?v:g.key),a=o(g,a,v),null===s?c=g:s.sibling=g,s=g);return t&&f.forEach(function(t){return e(i,t)}),c}function g(i,u,l,c){var s=X(l);if("function"!=typeof s)throw a(Error(150));if(null==(l=s.call(l)))throw a(Error(151));for(var f=s=null,v=u,g=u=0,m=null,y=l.next();null!==v&&!y.done;g++,y=l.next()){v.index>g?(m=v,v=null):m=v.sibling;var b=p(i,v,y.value,c);if(null===b){null===v&&(v=m);break}t&&v&&null===b.alternate&&e(i,v),u=o(b,u,g),null===f?s=b:f.sibling=b,f=b,v=m}if(y.done)return n(i,v),s;if(null===v){for(;!y.done;g++,y=l.next())null!==(y=d(i,y.value,c))&&(u=o(y,u,g),null===f?s=y:f.sibling=y,f=y);return s}for(v=r(i,v);!y.done;g++,y=l.next())null!==(y=h(v,i,g,y.value,c))&&(t&&null!==y.alternate&&v.delete(null===y.key?g:y.key),u=o(y,u,g),null===f?s=y:f.sibling=y,f=y);return t&&v.forEach(function(t){return e(i,t)}),s}return function(t,r,o,l){var c="object"==typeof o&&null!==o&&o.type===I&&null===o.key;c&&(o=o.props.children);var s="object"==typeof o&&null!==o;if(s)switch(o.$$typeof){case D:t:{for(s=o.key,c=r;null!==c;){if(c.key===s){if(7===c.tag?o.type===I:c.elementType===o.type){n(t,c.sibling),(r=i(c,o.type===I?o.props.children:o.props)).ref=So(t,c,o),r.return=t,t=r;break t}n(t,c);break}e(t,c),c=c.sibling}o.type===I?((r=Ll(o.props.children,t.mode,l,o.key)).return=t,t=r):((l=Fl(o.type,o.key,o.props,null,t.mode,l)).ref=So(t,r,o),l.return=t,t=l)}return u(t);case R:t:{for(c=o.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(t,r.sibling),(r=i(r,o.children||[])).return=t,t=r;break t}n(t,r);break}e(t,r),r=r.sibling}(r=Rl(o,t.mode,l)).return=t,t=r}return u(t)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(t,r.sibling),(r=i(r,o)).return=t,t=r):(n(t,r),(r=Dl(o,t.mode,l)).return=t,t=r),u(t);if(Mo(o))return v(t,r,o,l);if(X(o))return g(t,r,o,l);if(s&&Eo(t,o),void 0===o&&!c)switch(t.tag){case 1:case 0:throw t=t.type,a(Error(152),t.displayName||t.name||"Component")}return n(t,r)}}var Co=_o(!0),To=_o(!1),Ao={},Po={current:Ao},No={current:Ao},Oo={current:Ao};function Fo(t){if(t===Ao)throw a(Error(174));return t}function Lo(t,e){ai(Oo,e),ai(No,t),ai(Po,Ao);var n=e.nodeType;switch(n){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:zt(null,"");break;default:e=zt(e=(n=8===n?e.parentNode:e).namespaceURI||null,n=n.tagName)}oi(Po),ai(Po,e)}function Do(t){oi(Po),oi(No),oi(Oo)}function Ro(t){Fo(Oo.current);var e=Fo(Po.current),n=zt(e,t.type);e!==n&&(ai(No,t),ai(Po,n))}function Io(t){No.current===t&&(oi(Po),oi(No))}var jo={current:0};function zo(t){for(var e=t;null!==e;){if(13===e.tag){var n=e.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||n.data===qn||n.data===Yn))return e}else if(19===e.tag&&void 0!==e.memoizedProps.revealOrder){if((64&e.effectTag)!==me)return e}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}function Wo(t,e){return{responder:t,props:e}}var Bo=O.ReactCurrentDispatcher,Uo=0,Vo=null,Ho=null,qo=null,Yo=null,Go=null,$o=null,Xo=0,Ko=null,Zo=0,Qo=!1,Jo=null,ta=0;function ea(){throw a(Error(321))}function na(t,e){if(null===e)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(!Yr(t[n],e[n]))return!1;return!0}function ra(t,e,n,r,i,o){if(Uo=o,Vo=e,qo=null!==t?t.memoizedState:null,Bo.current=null===qo?ga:ma,e=n(r,i),Qo){do{Qo=!1,ta+=1,qo=null!==t?t.memoizedState:null,$o=Yo,Ko=Go=Ho=null,Bo.current=ma,e=n(r,i)}while(Qo);Jo=null,ta=0}if(Bo.current=va,(t=Vo).memoizedState=Yo,t.expirationTime=Xo,t.updateQueue=Ko,t.effectTag|=Zo,t=null!==Ho&&null!==Ho.next,Uo=0,$o=Go=Yo=qo=Ho=Vo=null,Xo=0,Ko=null,Zo=0,t)throw a(Error(300));return e}function ia(){Bo.current=va,Uo=0,$o=Go=Yo=qo=Ho=Vo=null,Xo=0,Ko=null,Zo=0,Qo=!1,Jo=null,ta=0}function oa(){var t={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Go?Yo=Go=t:Go=Go.next=t,Go}function aa(){if(null!==$o)$o=(Go=$o).next,qo=null!==(Ho=qo)?Ho.next:null;else{if(null===qo)throw a(Error(310));var t={memoizedState:(Ho=qo).memoizedState,baseState:Ho.baseState,queue:Ho.queue,baseUpdate:Ho.baseUpdate,next:null};Go=null===Go?Yo=t:Go.next=t,qo=Ho.next}return Go}function ua(t,e){return"function"==typeof e?e(t):e}function la(t){var e=aa(),n=e.queue;if(null===n)throw a(Error(311));if(n.lastRenderedReducer=t,0<ta){var r=n.dispatch;if(null!==Jo){var i=Jo.get(n);if(void 0!==i){Jo.delete(n);var o=e.memoizedState;do{o=t(o,i.action),i=i.next}while(null!==i);return Yr(o,e.memoizedState)||(Ta=!0),e.memoizedState=o,e.baseUpdate===n.last&&(e.baseState=o),n.lastRenderedState=o,[o,r]}}return[e.memoizedState,r]}r=n.last;var u=e.baseUpdate;if(o=e.baseState,null!==u?(null!==r&&(r.next=null),r=u.next):r=null!==r?r.next:null,null!==r){var l=i=null,c=r,s=!1;do{var f=c.expirationTime;f<Uo?(s||(s=!0,l=u,i=o),f>Xo&&hl(Xo=f)):(pl(f,c.suspenseConfig),o=c.eagerReducer===t?c.eagerState:t(o,c.action)),u=c,c=c.next}while(null!==c&&c!==r);s||(l=u,i=o),Yr(o,e.memoizedState)||(Ta=!0),e.memoizedState=o,e.baseUpdate=l,e.baseState=i,n.lastRenderedState=o}return[e.memoizedState,n.dispatch]}function ca(t,e,n,r){return t={tag:t,create:e,destroy:n,deps:r,next:null},null===Ko?(Ko={lastEffect:null}).lastEffect=t.next=t:null===(e=Ko.lastEffect)?Ko.lastEffect=t.next=t:(n=e.next,e.next=t,t.next=n,Ko.lastEffect=t),t}function sa(t,e,n,r){var i=oa();Zo|=t,i.memoizedState=ca(e,n,void 0,void 0===r?null:r)}function fa(t,e,n,r){var i=aa();r=void 0===r?null:r;var o=void 0;if(null!==Ho){var a=Ho.memoizedState;if(o=a.destroy,null!==r&&na(r,a.deps))return void ca(0,n,o,r)}Zo|=t,i.memoizedState=ca(e,n,o,r)}function da(t,e){return"function"==typeof e?(t=t(),e(t),function(){e(null)}):null!=e?(t=t(),e.current=t,function(){e.current=null}):void 0}function pa(){}function ha(t,e,n){if(!(25>ta))throw a(Error(301));var r=t.alternate;if(t===Vo||null!==r&&r===Vo)if(Qo=!0,t={expirationTime:Uo,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===Jo&&(Jo=new Map),void 0===(n=Jo.get(e)))Jo.set(e,t);else{for(e=n;null!==e.next;)e=e.next;e.next=t}else{var i=Ku(),o=vo.suspense;o={expirationTime:i=Zu(i,t,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var u=e.last;if(null===u)o.next=o;else{var l=u.next;null!==l&&(o.next=l),u.next=o}if(e.last=o,0===t.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=e.lastRenderedReducer))try{var c=e.lastRenderedState,s=r(c,n);if(o.eagerReducer=r,o.eagerState=s,Yr(s,c))return}catch(t){}tl(t,i)}}var va={readContext:eo,useCallback:ea,useContext:ea,useEffect:ea,useImperativeHandle:ea,useLayoutEffect:ea,useMemo:ea,useReducer:ea,useRef:ea,useState:ea,useDebugValue:ea,useResponder:ea},ga={readContext:eo,useCallback:function(t,e){return oa().memoizedState=[t,void 0===e?null:e],t},useContext:eo,useEffect:function(t,e){return sa(516,192,t,e)},useImperativeHandle:function(t,e,n){return n=null!=n?n.concat([t]):null,sa(4,36,da.bind(null,e,t),n)},useLayoutEffect:function(t,e){return sa(4,36,t,e)},useMemo:function(t,e){var n=oa();return e=void 0===e?null:e,t=t(),n.memoizedState=[t,e],t},useReducer:function(t,e,n){var r=oa();return e=void 0!==n?n(e):e,r.memoizedState=r.baseState=e,t=(t=r.queue={last:null,dispatch:null,lastRenderedReducer:t,lastRenderedState:e}).dispatch=ha.bind(null,Vo,t),[r.memoizedState,t]},useRef:function(t){return t={current:t},oa().memoizedState=t},useState:function(t){var e=oa();return"function"==typeof t&&(t=t()),e.memoizedState=e.baseState=t,t=(t=e.queue={last:null,dispatch:null,lastRenderedReducer:ua,lastRenderedState:t}).dispatch=ha.bind(null,Vo,t),[e.memoizedState,t]},useDebugValue:pa,useResponder:Wo},ma={readContext:eo,useCallback:function(t,e){var n=aa();e=void 0===e?null:e;var r=n.memoizedState;return null!==r&&null!==e&&na(e,r[1])?r[0]:(n.memoizedState=[t,e],t)},useContext:eo,useEffect:function(t,e){return fa(516,192,t,e)},useImperativeHandle:function(t,e,n){return n=null!=n?n.concat([t]):null,fa(4,36,da.bind(null,e,t),n)},useLayoutEffect:function(t,e){return fa(4,36,t,e)},useMemo:function(t,e){var n=aa();e=void 0===e?null:e;var r=n.memoizedState;return null!==r&&null!==e&&na(e,r[1])?r[0]:(t=t(),n.memoizedState=[t,e],t)},useReducer:la,useRef:function(){return aa().memoizedState},useState:function(t){return la(ua)},useDebugValue:pa,useResponder:Wo},ya=null,ba=null,xa=!1;function wa(t,e){var n=Pl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=e,n.return=t,n.effectTag=8,null!==t.lastEffect?(t.lastEffect.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n}function ka(t,e){switch(t.tag){case 5:var n=t.type;return null!==(e=1!==e.nodeType||n.toLowerCase()!==e.nodeName.toLowerCase()?null:e)&&(t.stateNode=e,!0);case 6:return null!==(e=""===t.pendingProps||3!==e.nodeType?null:e)&&(t.stateNode=e,!0);case 13:default:return!1}}function Ma(t){if(xa){var e=ba;if(e){var n=e;if(!ka(t,e)){if(!(e=Jn(n.nextSibling))||!ka(t,e))return t.effectTag=t.effectTag&~be|ye,xa=!1,void(ya=t);wa(ya,n)}ya=t,ba=Jn(e.firstChild)}else t.effectTag=t.effectTag&~be|ye,xa=!1,ya=t}}function Sa(t){for(t=t.return;null!==t&&5!==t.tag&&3!==t.tag&&13!==t.tag;)t=t.return;ya=t}function Ea(t){if(t!==ya)return!1;if(!xa)return Sa(t),xa=!0,!1;var e=t.type;if(5!==t.tag||"head"!==e&&"body"!==e&&!Kn(e,t.memoizedProps))for(e=ba;e;)wa(t,e),e=Jn(e.nextSibling);if(Sa(t),13===t.tag)if(null===(t=null!==(t=t.memoizedState)?t.dehydrated:null))t=ba;else t:{for(t=t.nextSibling,e=0;t;){if(8===t.nodeType){var n=t.data;if(n===Hn){if(0===e){t=Jn(t.nextSibling);break t}e--}else n!==Vn&&n!==Yn&&n!==qn||e++}t=t.nextSibling}t=null}else t=ya?Jn(t.stateNode.nextSibling):null;return ba=t,!0}function _a(){ba=ya=null,xa=!1}var Ca=O.ReactCurrentOwner,Ta=!1;function Aa(t,e,n,r){e.child=null===t?To(e,null,n,r):Co(e,t.child,n,r)}function Pa(t,e,n,r,i){n=n.render;var o=e.ref;return to(e,i),r=ra(t,e,n,r,o,i),null===t||Ta?(e.effectTag|=1,Aa(t,e,r,i),e.child):(e.updateQueue=t.updateQueue,e.effectTag&=-517,t.expirationTime<=i&&(t.expirationTime=0),Ya(t,e,i))}function Na(t,e,n,r,i,o){if(null===t){var a=n.type;return"function"!=typeof a||Nl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((t=Fl(n.type,null,r,null,e.mode,o)).ref=e.ref,t.return=e,e.child=t):(e.tag=15,e.type=a,Oa(t,e,a,r,i,o))}return a=t.child,i<o&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:$r)(i,r)&&t.ref===e.ref)?Ya(t,e,o):(e.effectTag|=1,(t=Ol(a,r)).ref=e.ref,t.return=e,e.child=t)}function Oa(t,e,n,r,i,o){return null!==t&&$r(t.memoizedProps,r)&&t.ref===e.ref&&(Ta=!1,i<o)?Ya(t,e,o):La(t,e,n,r,o)}function Fa(t,e){var n=e.ref;(null===t&&null!==n||null!==t&&t.ref!==n)&&(e.effectTag|=128)}function La(t,e,n,r,i){var o=di(n)?si:li.current;return o=fi(e,o),to(e,i),n=ra(t,e,n,r,o,i),null===t||Ta?(e.effectTag|=1,Aa(t,e,n,i),e.child):(e.updateQueue=t.updateQueue,e.effectTag&=-517,t.expirationTime<=i&&(t.expirationTime=0),Ya(t,e,i))}function Da(t,e,n,r,i){if(di(n)){var o=!0;mi(e)}else o=!1;if(to(e,i),null===e.stateNode)null!==t&&(t.alternate=null,e.alternate=null,e.effectTag|=ye),xo(e,n,r),ko(e,n,r,i),r=!0;else if(null===t){var a=e.stateNode,u=e.memoizedProps;a.props=u;var l=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=eo(c):c=fi(e,c=di(n)?si:li.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&wo(e,a,r,c),no=!1;var d=e.memoizedState;l=a.state=d;var p=e.updateQueue;null!==p&&(fo(e,p,r,a,i),l=e.memoizedState),u!==r||d!==l||ci.current||no?("function"==typeof s&&(mo(e,n,s,r),l=e.memoizedState),(u=no||bo(e,n,u,r,d,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(e.effectTag|=4)):("function"==typeof a.componentDidMount&&(e.effectTag|=4),e.memoizedProps=r,e.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(e.effectTag|=4),r=!1)}else a=e.stateNode,u=e.memoizedProps,a.props=e.type===e.elementType?u:qi(e.type,u),l=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=eo(c):c=fi(e,c=di(n)?si:li.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&wo(e,a,r,c),no=!1,l=e.memoizedState,d=a.state=l,null!==(p=e.updateQueue)&&(fo(e,p,r,a,i),d=e.memoizedState),u!==r||l!==d||ci.current||no?("function"==typeof s&&(mo(e,n,s,r),d=e.memoizedState),(s=no||bo(e,n,u,r,l,d,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,c)),"function"==typeof a.componentDidUpdate&&(e.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(e.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===t.memoizedProps&&l===t.memoizedState||(e.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===t.memoizedProps&&l===t.memoizedState||(e.effectTag|=256),e.memoizedProps=r,e.memoizedState=d),a.props=r,a.state=d,a.context=c,r=s):("function"!=typeof a.componentDidUpdate||u===t.memoizedProps&&l===t.memoizedState||(e.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===t.memoizedProps&&l===t.memoizedState||(e.effectTag|=256),r=!1);return Ra(t,e,n,r,o,i)}function Ra(t,e,n,r,i,o){Fa(t,e);var a=(64&e.effectTag)!==me;if(!r&&!a)return i&&yi(e,n,!1),Ya(t,e,o);r=e.stateNode,Ca.current=e;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return e.effectTag|=1,null!==t&&a?(e.child=Co(e,t.child,null,o),e.child=Co(e,null,u,o)):Aa(t,e,u,o),e.memoizedState=r.state,i&&yi(e,n,!0),e.child}function Ia(t){var e=t.stateNode;e.pendingContext?vi(0,e.pendingContext,e.pendingContext!==e.context):e.context&&vi(0,e.context,!1),Lo(t,e.containerInfo)}var ja,za,Wa,Ba,Ua={dehydrated:null,retryTime:1};function Va(t,e,n){var r,i=e.mode,o=e.pendingProps,a=jo.current,u=!1;if((r=(64&e.effectTag)!==me)||(r=0!=(2&a)&&(null===t||null!==t.memoizedState)),r?(u=!0,e.effectTag&=-65):null!==t&&null===t.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),ai(jo,1&a),null===t){if(u){if(u=o.fallback,(o=Ll(null,i,0,null)).return=e,0==(2&e.mode))for(t=null!==e.memoizedState?e.child.child:e.child,o.child=t;null!==t;)t.return=o,t=t.sibling;return(n=Ll(u,i,n,null)).return=e,o.sibling=n,e.memoizedState=Ua,e.child=o,n}return i=o.children,e.memoizedState=null,e.child=To(e,null,i,n)}if(null!==t.memoizedState){if(i=(t=t.child).sibling,u){if(o=o.fallback,(n=Ol(t,t.pendingProps)).return=e,0==(2&e.mode)&&(u=null!==e.memoizedState?e.child.child:e.child)!==t.child)for(n.child=u;null!==u;)u.return=n,u=u.sibling;return(i=Ol(i,o,i.expirationTime)).return=e,n.sibling=i,n.childExpirationTime=0,e.memoizedState=Ua,e.child=n,i}return n=Co(e,t.child,o.children,n),e.memoizedState=null,e.child=n}if(t=t.child,u){if(u=o.fallback,(o=Ll(null,i,0,null)).return=e,o.child=t,null!==t&&(t.return=o),0==(2&e.mode))for(t=null!==e.memoizedState?e.child.child:e.child,o.child=t;null!==t;)t.return=o,t=t.sibling;return(n=Ll(u,i,n,null)).return=e,o.sibling=n,n.effectTag|=ye,o.childExpirationTime=0,e.memoizedState=Ua,e.child=o,n}return e.memoizedState=null,e.child=Co(e,t,o.children,n)}function Ha(t,e,n,r,i){var o=t.memoizedState;null===o?t.memoizedState={isBackwards:e,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:i}:(o.isBackwards=e,o.rendering=null,o.last=r,o.tail=n,o.tailExpiration=0,o.tailMode=i)}function qa(t,e,n){var r=e.pendingProps,i=r.revealOrder,o=r.tail;if(Aa(t,e,r.children,n),0!=(2&(r=jo.current)))r=1&r|2,e.effectTag|=64;else{if(null!==t&&(64&t.effectTag)!==me)t:for(t=e.child;null!==t;){if(13===t.tag){if(null!==t.memoizedState){t.expirationTime<n&&(t.expirationTime=n);var a=t.alternate;null!==a&&a.expirationTime<n&&(a.expirationTime=n),Ji(t.return,n)}}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break t;for(;null===t.sibling;){if(null===t.return||t.return===e)break t;t=t.return}t.sibling.return=t.return,t=t.sibling}r&=1}if(ai(jo,r),0==(2&e.mode))e.memoizedState=null;else switch(i){case"forwards":for(n=e.child,i=null;null!==n;)null!==(r=n.alternate)&&null===zo(r)&&(i=n),n=n.sibling;null===(n=i)?(i=e.child,e.child=null):(i=n.sibling,n.sibling=null),Ha(e,!1,i,n,o);break;case"backwards":for(n=null,i=e.child,e.child=null;null!==i;){if(null!==(r=i.alternate)&&null===zo(r)){e.child=i;break}r=i.sibling,i.sibling=n,n=i,i=r}Ha(e,!0,n,null,o);break;case"together":Ha(e,!1,null,null,void 0);break;default:e.memoizedState=null}return e.child}function Ya(t,e,n){null!==t&&(e.dependencies=t.dependencies);var r=e.expirationTime;if(0!==r&&hl(r),e.childExpirationTime<n)return null;if(null!==t&&e.child!==t.child)throw a(Error(153));if(null!==e.child){for(n=Ol(t=e.child,t.pendingProps,t.expirationTime),e.child=n,n.return=e;null!==t.sibling;)t=t.sibling,(n=n.sibling=Ol(t,t.pendingProps,t.expirationTime)).return=e;n.sibling=null}return e.child}function Ga(t){t.effectTag|=4}function $a(t,e){switch(t.tailMode){case"hidden":e=t.tail;for(var n=null;null!==e;)null!==e.alternate&&(n=e),e=e.sibling;null===n?t.tail=null:n.sibling=null;break;case"collapsed":n=t.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?e||null===t.tail?t.tail=null:t.tail.sibling=null:r.sibling=null}}function Xa(t){switch(t.tag){case 1:di(t.type)&&pi();var e=t.effectTag;return 4096&e?(t.effectTag=-4097&e|64,t):null;case 3:if(Do(),hi(),(64&(e=t.effectTag))!==me)throw a(Error(285));return t.effectTag=-4097&e|64,t;case 5:return Io(t),null;case 13:return oi(jo),4096&(e=t.effectTag)?(t.effectTag=-4097&e|64,t):null;case 19:return oi(jo),null;case 4:return Do(),null;case 10:return Qi(t),null;default:return null}}function Ka(t,e){return{value:t,source:e,stack:Z(e)}}ja=function(t,e){for(var n=e.child;null!==n;){if(5===n.tag||6===n.tag)t.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},za=function(){},Wa=function(t,e,n,r,o){var a=t.memoizedProps;if(a!==r){var u,l,c=e.stateNode;switch(Fo(Po.current),t=null,n){case"input":a=Et(c,a),r=Et(c,r),t=[];break;case"option":a=Nt(c,a),r=Nt(c,r),t=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),t=[];break;case"textarea":a=Ft(c,a),r=Ft(c,r),t=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(c.onclick=In)}for(u in Ln(n,r),n=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u)for(l in c=a[u])c.hasOwnProperty(l)&&(n||(n={}),n[l]="");else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(p.hasOwnProperty(u)?t||(t=[]):(t=t||[]).push(u,null));for(u in r){var s=r[u];if(c=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&s!==c&&(null!=s||null!=c))if("style"===u)if(c){for(l in c)!c.hasOwnProperty(l)||s&&s.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in s)s.hasOwnProperty(l)&&c[l]!==s[l]&&(n||(n={}),n[l]=s[l])}else n||(t||(t=[]),t.push(u,n)),n=s;else"dangerouslySetInnerHTML"===u?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(t=t||[]).push(u,""+s)):"children"===u?c===s||"string"!=typeof s&&"number"!=typeof s||(t=t||[]).push(u,""+s):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(p.hasOwnProperty(u)?(null!=s&&Rn(o,u),t||c===s||(t=[])):(t=t||[]).push(u,s))}n&&(t=t||[]).push("style",n),o=t,(e.updateQueue=o)&&Ga(e)}},Ba=function(t,e,n,r){n!==r&&Ga(e)};var Za="function"==typeof WeakSet?WeakSet:Set;function Qa(t,e){var n=e.source,r=e.stack;null===r&&null!==n&&(r=Z(n)),null!==n&&K(n.type),e=e.value,null!==t&&1===t.tag&&K(t.type);try{console.error(e)}catch(t){setTimeout(function(){throw t})}}function Ja(t){var e=t.ref;if(null!==e)if("function"==typeof e)try{e(null)}catch(e){El(t,e)}else e.current=null}function tu(t,e){switch(e.tag){case 0:case 11:case 15:eu(2,0,e);break;case 1:if(256&e.effectTag&&null!==t){var n=t.memoizedProps,r=t.memoizedState;e=(t=e.stateNode).getSnapshotBeforeUpdate(e.elementType===e.type?n:qi(e.type,n),r),t.__reactInternalSnapshotBeforeUpdate=e}break;case 3:case 5:case 6:case 4:case 17:break;default:throw a(Error(163))}}function eu(t,e,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if(0!=(r.tag&t)){var i=r.destroy;r.destroy=void 0,void 0!==i&&i()}0!=(r.tag&e)&&(i=r.create,r.destroy=i()),r=r.next}while(r!==n)}}function nu(t,e,n){switch("function"==typeof Tl&&Tl(e),e.tag){case 0:case 11:case 14:case 15:if(null!==(t=e.updateQueue)&&null!==(t=t.lastEffect)){var r=t.next;Wi(97<n?97:n,function(){var t=r;do{var n=t.destroy;if(void 0!==n){var i=e;try{n()}catch(t){El(i,t)}}t=t.next}while(t!==r)})}break;case 1:Ja(e),"function"==typeof(n=e.stateNode).componentWillUnmount&&function(t,e){try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){El(t,e)}}(e,n);break;case 5:Ja(e);break;case 4:au(t,e,n)}}function ru(t){var e=t.alternate;t.return=null,t.child=null,t.memoizedState=null,t.updateQueue=null,t.dependencies=null,t.alternate=null,t.firstEffect=null,t.lastEffect=null,t.pendingProps=null,t.memoizedProps=null,null!==e&&ru(e)}function iu(t){return 5===t.tag||3===t.tag||4===t.tag}function ou(t){t:{for(var e=t.return;null!==e;){if(iu(e)){var n=e;break t}e=e.return}throw a(Error(160))}switch(e=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:e=e.containerInfo,r=!0;break;default:throw a(Error(161))}16&n.effectTag&&(Vt(e,""),n.effectTag&=-17);t:e:for(n=t;;){for(;null===n.sibling;){if(null===n.return||iu(n.return)){n=null;break t}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(n.effectTag&ye)continue e;if(null===n.child||4===n.tag)continue e;n.child.return=n,n=n.child}if(!(n.effectTag&ye)){n=n.stateNode;break t}}for(var i=t;;){var o=5===i.tag||6===i.tag;if(o){var u=o?i.stateNode:i.stateNode.instance;if(n)if(r){var l=u;u=n,8===(o=e).nodeType?o.parentNode.insertBefore(l,u):o.insertBefore(l,u)}else e.insertBefore(u,n);else r?(8===(l=e).nodeType?(o=l.parentNode).insertBefore(u,l):(o=l).appendChild(u),null!=(l=l._reactRootContainer)||null!==o.onclick||(o.onclick=In)):e.appendChild(u)}else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;i=i.return}i.sibling.return=i.return,i=i.sibling}}function au(t,e,n){for(var r,i,o=e,u=!1;;){if(!u){u=o.return;t:for(;;){if(null===u)throw a(Error(160));switch(r=u.stateNode,u.tag){case 5:i=!1;break t;case 3:case 4:r=r.containerInfo,i=!0;break t}u=u.return}u=!0}if(5===o.tag||6===o.tag){t:for(var l=t,c=o,s=n,f=c;;)if(nu(l,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break;for(;null===f.sibling;){if(null===f.return||f.return===c)break t;f=f.return}f.sibling.return=f.return,f=f.sibling}i?(l=r,c=o.stateNode,8===l.nodeType?l.parentNode.removeChild(c):l.removeChild(c)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,i=!0,o.child.return=o,o=o.child;continue}}else if(nu(t,o,n),null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;4===(o=o.return).tag&&(u=!1)}o.sibling.return=o.return,o=o.sibling}}function uu(t,e){switch(e.tag){case 0:case 11:case 14:case 15:eu(4,8,e);break;case 1:break;case 5:var n=e.stateNode;if(null!=n){var r=e.memoizedProps,i=null!==t?t.memoizedProps:r;t=e.type;var o=e.updateQueue;if(e.updateQueue=null,null!==o){for(n[rr]=r,"input"===t&&"radio"===r.type&&null!=r.name&&Ct(n,r),Dn(t,i),e=Dn(t,r),i=0;i<o.length;i+=2){var u=o[i],l=o[i+1];"style"===u?On(n,l):"dangerouslySetInnerHTML"===u?Ut(n,l):"children"===u?Vt(n,l):wt(n,u,l,e)}switch(t){case"input":Tt(n,r);break;case"textarea":Dt(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(t=r.value)?Ot(n,!!r.multiple,t,!1):e!==!!r.multiple&&(null!=r.defaultValue?Ot(n,!!r.multiple,r.defaultValue,!0):Ot(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===e.stateNode)throw a(Error(162));e.stateNode.nodeValue=e.memoizedProps;break;case 3:(e=e.stateNode).hydrate&&(e.hydrate=!1,ge(e.containerInfo));break;case 12:break;case 13:if(n=e,null===e.memoizedState?r=!1:(r=!0,n=e.child,Iu=Ii()),null!==n)t:for(t=n;;){if(5===t.tag)o=t.stateNode,r?"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=t.stateNode,i=null!=(i=t.memoizedProps.style)&&i.hasOwnProperty("display")?i.display:null,o.style.display=Nn("display",i));else if(6===t.tag)t.stateNode.nodeValue=r?"":t.memoizedProps;else{if(13===t.tag&&null!==t.memoizedState&&null===t.memoizedState.dehydrated){(o=t.child.sibling).return=t,t=o;continue}if(null!==t.child){t.child.return=t,t=t.child;continue}}if(t===n)break t;for(;null===t.sibling;){if(null===t.return||t.return===n)break t;t=t.return}t.sibling.return=t.return,t=t.sibling}lu(e);break;case 19:lu(e);break;case 17:case 20:case 21:break;default:throw a(Error(163))}}function lu(t){var e=t.updateQueue;if(null!==e){t.updateQueue=null;var n=t.stateNode;null===n&&(n=t.stateNode=new Za),e.forEach(function(e){var r=function(t,e){var n=t.stateNode;null!==n&&n.delete(e),1==(e=1)&&(e=Zu(e=Ku(),t,null)),null!==(t=el(t,e))&&rl(t)}.bind(null,t,e);n.has(e)||(n.add(e),e.then(r,r))})}}var cu="function"==typeof WeakMap?WeakMap:Map;function su(t,e,n){(n=oo(n,null)).tag=3,n.payload={element:null};var r=e.value;return n.callback=function(){Wu||(Wu=!0,Bu=r),Qa(t,e)},n}function fu(t,e,n){(n=oo(n,null)).tag=3;var r=t.type.getDerivedStateFromError;if("function"==typeof r){var i=e.value;n.payload=function(){return Qa(t,e),r(i)}}var o=t.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Uu?Uu=new Set([this]):Uu.add(this),Qa(t,e));var n=e.stack;this.componentDidCatch(e.value,{componentStack:null!==n?n:""})}),n}var du=Math.ceil,pu=O.ReactCurrentDispatcher,hu=O.ReactCurrentOwner,vu=0,gu=8,mu=16,yu=32,bu=0,xu=1,wu=2,ku=3,Mu=4,Su=5,Eu=6,_u=vu,Cu=null,Tu=null,Au=0,Pu=bu,Nu=null,Ou=1073741823,Fu=1073741823,Lu=null,Du=0,Ru=!1,Iu=0,ju=500,zu=null,Wu=!1,Bu=null,Uu=null,Vu=!1,Hu=null,qu=90,Yu=null,Gu=0,$u=null,Xu=0;function Ku(){return(_u&(mu|yu))!==vu?1073741821-(Ii()/10|0):0!==Xu?Xu:Xu=1073741821-(Ii()/10|0)}function Zu(t,e,n){if(0==(2&(e=e.mode)))return 1073741823;var r=ji();if(0==(4&e))return 99===r?1073741823:1073741822;if((_u&mu)!==vu)return Au;if(null!==n)t=1073741821-25*(1+((1073741821-t+(0|n.timeoutMs||5e3)/10)/25|0));else switch(r){case 99:t=1073741823;break;case 98:t=1073741821-10*(1+((1073741821-t+15)/10|0));break;case 97:case 96:t=1073741821-25*(1+((1073741821-t+500)/25|0));break;case 95:t=2;break;default:throw a(Error(326))}return null!==Cu&&t===Au&&--t,t}var Qu,Ju=0;function tl(t,e){if(50<Gu)throw Gu=0,$u=null,a(Error(185));if(null!==(t=el(t,e))){var n=ji();1073741823===e?(_u&gu)!==vu&&(_u&(mu|yu))===vu?il(t):(rl(t),_u===vu&&Vi()):rl(t),(4&_u)===vu||98!==n&&99!==n||(null===Yu?Yu=new Map([[t,e]]):(void 0===(n=Yu.get(t))||n>e)&&Yu.set(t,e))}}function el(t,e){t.expirationTime<e&&(t.expirationTime=e);var n=t.alternate;null!==n&&n.expirationTime<e&&(n.expirationTime=e);var r=t.return,i=null;if(null===r&&3===t.tag)i=t.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<e&&(r.childExpirationTime=e),null!==n&&n.childExpirationTime<e&&(n.childExpirationTime=e),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return null!==i&&(Cu===i&&(hl(e),Pu===Mu&&zl(i,Au)),Wl(i,e)),i}function nl(t){var e=t.lastExpiredTime;return 0!==e?e:jl(t,e=t.firstPendingTime)?(e=t.lastPingedTime)>(t=t.nextKnownPendingLevel)?e:t:e}function rl(t){if(0!==t.lastExpiredTime)t.callbackExpirationTime=1073741823,t.callbackPriority=99,t.callbackNode=Ui(il.bind(null,t));else{var e=nl(t),n=t.callbackNode;if(0===e)null!==n&&(t.callbackNode=null,t.callbackExpirationTime=0,t.callbackPriority=90);else{var r=Ku();if(1073741823===e?r=99:1===e||2===e?r=95:r=0>=(r=10*(1073741821-e)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var i=t.callbackPriority;if(t.callbackExpirationTime===e&&i>=r)return;n!==Ni&&wi(n)}t.callbackExpirationTime=e,t.callbackPriority=r,e=1073741823===e?Ui(il.bind(null,t)):Bi(r,function t(e,n){Xu=0;if(n)return n=Ku(),Bl(e,n),rl(e),null;var r=nl(e);if(0!==r){if(n=e.callbackNode,(_u&(mu|yu))!==vu)throw a(Error(327));if(kl(),e===Cu&&r===Au||sl(e,r),null!==Tu){var i=_u;_u|=mu;for(var o=dl();;)try{gl();break}catch(t){fl(e,t)}if(Ki(),_u=i,pu.current=o,Pu===xu)throw n=Nu,sl(e,r),zl(e,r),rl(e),n;if(null===Tu)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=r,al(e,r),i=Pu,Cu=null,i){case bu:case xu:throw a(Error(345));case wu:if(2!==r){Bl(e,2);break}xl(e);break;case ku:if(zl(e,r),i=e.lastSuspendedTime,r===i&&(e.nextKnownPendingLevel=bl(o)),1073741823===Ou&&10<(o=Iu+ju-Ii())){if(Ru){var u=e.lastPingedTime;if(0===u||u>=r){e.lastPingedTime=r,sl(e,r);break}}if(0!==(u=nl(e))&&u!==r)break;if(0!==i&&i!==r){e.lastPingedTime=i;break}e.timeoutHandle=Zn(xl.bind(null,e),o);break}xl(e);break;case Mu:if(zl(e,r),i=e.lastSuspendedTime,r===i&&(e.nextKnownPendingLevel=bl(o)),Ru&&(0===(o=e.lastPingedTime)||o>=r)){e.lastPingedTime=r,sl(e,r);break}if(0!==(o=nl(e))&&o!==r)break;if(0!==i&&i!==r){e.lastPingedTime=i;break}if(1073741823!==Fu?i=10*(1073741821-Fu)-Ii():1073741823===Ou?i=0:(i=10*(1073741821-Ou)-5e3,o=Ii(),r=10*(1073741821-r)-o,0>(i=o-i)&&(i=0),i=(120>i?120:480>i?480:1080>i?1080:1920>i?1920:3e3>i?3e3:4320>i?4320:1960*du(i/1960))-i,r<i&&(i=r)),10<i){e.timeoutHandle=Zn(xl.bind(null,e),i);break}xl(e);break;case Su:if(1073741823!==Ou&&null!==Lu){u=Ou;var l=Lu;if(0>=(i=0|l.busyMinDurationMs)?i=0:(o=0|l.busyDelayMs,u=Ii()-(10*(1073741821-u)-(0|l.timeoutMs||5e3)),i=u<=o?0:o+i-u),10<i){zl(e,r),e.timeoutHandle=Zn(xl.bind(null,e),i);break}}xl(e);break;case Eu:zl(e,r);break;default:throw a(Error(329))}if(rl(e),e.callbackNode===n)return t.bind(null,e)}}return null}.bind(null,t),{timeout:10*(1073741821-e)-Ii()}),t.callbackNode=e}}}function il(t){var e=t.lastExpiredTime;if(e=0!==e?e:1073741823,t.finishedExpirationTime===e)xl(t);else{if((_u&(mu|yu))!==vu)throw a(Error(327));if(kl(),t===Cu&&e===Au||sl(t,e),null!==Tu){var n=_u;_u|=mu;for(var r=dl();;)try{vl();break}catch(e){fl(t,e)}if(Ki(),_u=n,pu.current=r,Pu===xu)throw n=Nu,sl(t,e),zl(t,e),rl(t),n;if(null!==Tu)throw a(Error(261));t.finishedWork=t.current.alternate,t.finishedExpirationTime=e,al(t,e),Pu===Eu?zl(t,e):(Cu=null,xl(t)),rl(t)}}return null}function ol(){(_u&(1|mu|yu))===vu&&(function(){if(null!==Yu){var t=Yu;Yu=null,t.forEach(function(t,e){Bl(e,t),rl(e)}),Vi()}}(),kl())}function al(t,e){var n=t.firstBatch;null!==n&&n._defer&&n._expirationTime>=e&&(Bi(97,function(){return n._onComplete(),null}),Pu=Eu)}function ul(t,e){var n=_u;_u|=1;try{return t(e)}finally{(_u=n)===vu&&Vi()}}function ll(t,e,n,r){var i=_u;_u|=4;try{return Wi(98,t.bind(null,e,n,r))}finally{(_u=i)===vu&&Vi()}}function cl(t,e){var n=_u;_u&=-2,_u|=gu;try{return t(e)}finally{(_u=n)===vu&&Vi()}}function sl(t,e){t.finishedWork=null,t.finishedExpirationTime=0;var n=t.timeoutHandle;if(-1!==n&&(t.timeoutHandle=-1,Qn(n)),null!==Tu)for(n=Tu.return;null!==n;){var r=n;switch(r.tag){case 1:var i=r.type.childContextTypes;null!=i&&pi();break;case 3:Do(),hi();break;case 5:Io(r);break;case 4:Do();break;case 13:case 19:oi(jo);break;case 10:Qi(r)}n=n.return}Cu=t,Tu=Ol(t.current,null),Au=e,Pu=bu,Nu=null,Fu=Ou=1073741823,Lu=null,Du=0,Ru=!1}function fl(t,e){for(;;){try{if(Ki(),ia(),null===Tu||null===Tu.return)return Pu=xu,Nu=e,null;t:{var n=t,r=Tu.return,i=Tu,o=e;if(e=Au,i.effectTag|=2048,i.firstEffect=i.lastEffect=null,null!==o&&"object"==typeof o&&"function"==typeof o.then){var a=o,u=0!=(1&jo.current),l=r;do{var c;if(c=13===l.tag){var s=l.memoizedState;if(null!==s)c=null!==s.dehydrated;else{var f=l.memoizedProps;c=void 0!==f.fallback&&(!0!==f.unstable_avoidThisFallback||!u)}}if(c){var d=l.updateQueue;if(null===d){var p=new Set;p.add(a),l.updateQueue=p}else d.add(a);if(0==(2&l.mode)){if(l.effectTag|=64,i.effectTag&=-2981,1===i.tag)if(null===i.alternate)i.tag=17;else{var h=oo(1073741823,null);h.tag=2,uo(i,h)}i.expirationTime=1073741823;break t}o=void 0,i=e;var v=n.pingCache;if(null===v?(v=n.pingCache=new cu,o=new Set,v.set(a,o)):void 0===(o=v.get(a))&&(o=new Set,v.set(a,o)),!o.has(i)){o.add(i);var g=_l.bind(null,n,a,i);a.then(g,g)}l.effectTag|=4096,l.expirationTime=e;break t}l=l.return}while(null!==l);o=Error((K(i.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+Z(i))}Pu!==Su&&(Pu=wu),o=Ka(o,i),l=r;do{switch(l.tag){case 3:a=o,l.effectTag|=4096,l.expirationTime=e,lo(l,su(l,a,e));break t;case 1:a=o;var m=l.type,y=l.stateNode;if((64&l.effectTag)===me&&("function"==typeof m.getDerivedStateFromError||null!==y&&"function"==typeof y.componentDidCatch&&(null===Uu||!Uu.has(y)))){l.effectTag|=4096,l.expirationTime=e,lo(l,fu(l,a,e));break t}}l=l.return}while(null!==l)}Tu=yl(Tu)}catch(t){e=t;continue}break}}function dl(){var t=pu.current;return pu.current=va,null===t?va:t}function pl(t,e){t<Ou&&2<t&&(Ou=t),null!==e&&t<Fu&&2<t&&(Fu=t,Lu=e)}function hl(t){t>Du&&(Du=t)}function vl(){for(;null!==Tu;)Tu=ml(Tu)}function gl(){for(;null!==Tu&&!ki();)Tu=ml(Tu)}function ml(t){var e=Qu(t.alternate,t,Au);return t.memoizedProps=t.pendingProps,null===e&&(e=yl(t)),hu.current=null,e}function yl(t){Tu=t;do{var e=Tu.alternate;if(t=Tu.return,(2048&Tu.effectTag)===me){t:{var n=e,r=Au,o=(e=Tu).pendingProps;switch(e.tag){case 2:case 16:break;case 15:case 0:break;case 1:di(e.type)&&pi();break;case 3:Do(),hi(),(r=e.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),(null===n||null===n.child)&&Ea(e)&&Ga(e),za(e);break;case 5:Io(e),r=Fo(Oo.current);var u=e.type;if(null!==n&&null!=e.stateNode)Wa(n,e,u,o,r),n.ref!==e.ref&&(e.effectTag|=128);else if(o){var l=Fo(Po.current);if(Ea(e)){u=void 0,n=(o=e).stateNode;var c=o.type,s=o.memoizedProps;switch(n[nr]=o,n[rr]=s,c){case"iframe":case"object":case"embed":xn("load",n);break;case"video":case"audio":for(var f=0;f<Jt.length;f++)xn(Jt[f],n);break;case"source":xn("error",n);break;case"img":case"image":case"link":xn("error",n),xn("load",n);break;case"form":xn("reset",n),xn("submit",n);break;case"details":xn("toggle",n);break;case"input":_t(n,s),xn("invalid",n),Rn(r,"onChange");break;case"select":n._wrapperState={wasMultiple:!!s.multiple},xn("invalid",n),Rn(r,"onChange");break;case"textarea":Lt(n,s),xn("invalid",n),Rn(r,"onChange")}for(u in Ln(c,s),f=null,s)s.hasOwnProperty(u)&&(l=s[u],"children"===u?"string"==typeof l?n.textContent!==l&&(f=["children",l]):"number"==typeof l&&n.textContent!==""+l&&(f=["children",""+l]):p.hasOwnProperty(u)&&null!=l&&Rn(r,u));switch(c){case"input":Mt(n),At(n,s,!0);break;case"textarea":Mt(n),Rt(n);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(n.onclick=In)}r=f,o.updateQueue=r,null!==r&&Ga(e)}else{s=u,n=o,c=e,f=9===r.nodeType?r:r.ownerDocument,l===It.html&&(l=jt(s)),l===It.html?"script"===s?((s=f.createElement("div")).innerHTML="<script><\/script>",f=s.removeChild(s.firstChild)):"string"==typeof n.is?f=f.createElement(s,{is:n.is}):(f=f.createElement(s),"select"===s&&(s=f,n.multiple?s.multiple=!0:n.size&&(s.size=n.size))):f=f.createElementNS(l,s),(s=f)[nr]=c,s[rr]=n,ja(n=s,e,!1,!1),e.stateNode=n,l=r;var d=Dn(u,o);switch(u){case"iframe":case"object":case"embed":xn("load",n),r=o;break;case"video":case"audio":for(r=0;r<Jt.length;r++)xn(Jt[r],n);r=o;break;case"source":xn("error",n),r=o;break;case"img":case"image":case"link":xn("error",n),xn("load",n),r=o;break;case"form":xn("reset",n),xn("submit",n),r=o;break;case"details":xn("toggle",n),r=o;break;case"input":_t(n,o),r=Et(n,o),xn("invalid",n),Rn(l,"onChange");break;case"option":r=Nt(n,o);break;case"select":n._wrapperState={wasMultiple:!!o.multiple},r=i({},o,{value:void 0}),xn("invalid",n),Rn(l,"onChange");break;case"textarea":Lt(n,o),r=Ft(n,o),xn("invalid",n),Rn(l,"onChange");break;default:r=o}Ln(u,r),c=void 0,s=u,f=n;var h=r;for(c in h)if(h.hasOwnProperty(c)){var v=h[c];"style"===c?On(f,v):"dangerouslySetInnerHTML"===c?null!=(v=v?v.__html:void 0)&&Ut(f,v):"children"===c?"string"==typeof v?("textarea"!==s||""!==v)&&Vt(f,v):"number"==typeof v&&Vt(f,""+v):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(p.hasOwnProperty(c)?null!=v&&Rn(l,c):null!=v&&wt(f,c,v,d))}switch(u){case"input":Mt(n),At(n,o,!1);break;case"textarea":Mt(n),Rt(n);break;case"option":null!=o.value&&n.setAttribute("value",""+xt(o.value));break;case"select":r=n,n=o,r.multiple=!!n.multiple,null!=(c=n.value)?Ot(r,!!n.multiple,c,!1):null!=n.defaultValue&&Ot(r,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof r.onClick&&(n.onclick=In)}Xn(u,o)&&Ga(e)}null!==e.ref&&(e.effectTag|=128)}else if(null===e.stateNode)throw a(Error(166));break;case 6:if(n&&null!=e.stateNode)Ba(n,e,n.memoizedProps,o);else{if("string"!=typeof o&&null===e.stateNode)throw a(Error(166));u=Fo(Oo.current),Fo(Po.current),Ea(e)?(r=e.stateNode,o=e.memoizedProps,r[nr]=e,r.nodeValue!==o&&Ga(e)):(r=e,(o=(9===u.nodeType?u:u.ownerDocument).createTextNode(o))[nr]=e,r.stateNode=o)}break;case 11:break;case 13:if(oi(jo),o=e.memoizedState,(64&e.effectTag)!==me){e.expirationTime=r;break t}r=null!==o,o=!1,null===n?Ea(e):(o=null!==(u=n.memoizedState),r||null===u||null!==(u=n.child.sibling)&&(null!==(c=e.firstEffect)?(e.firstEffect=u,u.nextEffect=c):(e.firstEffect=e.lastEffect=u,u.nextEffect=null),u.effectTag=8)),r&&!o&&0!=(2&e.mode)&&(null===n&&!0!==e.memoizedProps.unstable_avoidThisFallback||0!=(1&jo.current)?Pu===bu&&(Pu=ku):(Pu!==bu&&Pu!==ku||(Pu=Mu),0!==Du&&null!==Cu&&(zl(Cu,Au),Wl(Cu,Du)))),(r||o)&&(e.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Do(),za(e);break;case 10:Qi(e);break;case 9:case 14:break;case 17:di(e.type)&&pi();break;case 19:if(oi(jo),null===(o=e.memoizedState))break;if(u=(64&e.effectTag)!==me,null===(c=o.rendering)){if(u)$a(o,!1);else if(Pu!==bu||null!==n&&(64&n.effectTag)!==me)for(n=e.child;null!==n;){if(null!==(c=zo(n))){for(e.effectTag|=64,$a(o,!1),null!==(o=c.updateQueue)&&(e.updateQueue=o,e.effectTag|=4),e.firstEffect=e.lastEffect=null,o=e.child;null!==o;)n=r,(u=o).effectTag&=ye,u.nextEffect=null,u.firstEffect=null,u.lastEffect=null,null===(c=u.alternate)?(u.childExpirationTime=0,u.expirationTime=n,u.child=null,u.memoizedProps=null,u.memoizedState=null,u.updateQueue=null,u.dependencies=null):(u.childExpirationTime=c.childExpirationTime,u.expirationTime=c.expirationTime,u.child=c.child,u.memoizedProps=c.memoizedProps,u.memoizedState=c.memoizedState,u.updateQueue=c.updateQueue,n=c.dependencies,u.dependencies=null===n?null:{expirationTime:n.expirationTime,firstContext:n.firstContext,responders:n.responders}),o=o.sibling;ai(jo,1&jo.current|2),e=e.child;break t}n=n.sibling}}else{if(!u)if(null!==(n=zo(c))){if(e.effectTag|=64,u=!0,$a(o,!0),null===o.tail&&"hidden"===o.tailMode){null!==(r=n.updateQueue)&&(e.updateQueue=r,e.effectTag|=4),null!==(e=e.lastEffect=o.lastEffect)&&(e.nextEffect=null);break}}else Ii()>o.tailExpiration&&1<r&&(e.effectTag|=64,u=!0,$a(o,!1),e.expirationTime=e.childExpirationTime=r-1);o.isBackwards?(c.sibling=e.child,e.child=c):(null!==(r=o.last)?r.sibling=c:e.child=c,o.last=c)}if(null!==o.tail){0===o.tailExpiration&&(o.tailExpiration=Ii()+500),r=o.tail,o.rendering=r,o.tail=r.sibling,o.lastEffect=e.lastEffect,r.sibling=null,o=jo.current,ai(jo,o=u?1&o|2:1&o),e=r;break t}break;case 20:case 21:break;default:throw a(Error(156),e.tag)}e=null}if(r=Tu,1===Au||1!==r.childExpirationTime){for(o=0,u=r.child;null!==u;)(n=u.expirationTime)>o&&(o=n),(c=u.childExpirationTime)>o&&(o=c),u=u.sibling;r.childExpirationTime=o}if(null!==e)return e;null!==t&&(2048&t.effectTag)===me&&(null===t.firstEffect&&(t.firstEffect=Tu.firstEffect),null!==Tu.lastEffect&&(null!==t.lastEffect&&(t.lastEffect.nextEffect=Tu.firstEffect),t.lastEffect=Tu.lastEffect),1<Tu.effectTag&&(null!==t.lastEffect?t.lastEffect.nextEffect=Tu:t.firstEffect=Tu,t.lastEffect=Tu))}else{if(null!==(e=Xa(Tu)))return e.effectTag&=2047,e;null!==t&&(t.firstEffect=t.lastEffect=null,t.effectTag|=2048)}if(null!==(e=Tu.sibling))return e;Tu=t}while(null!==Tu);return Pu===bu&&(Pu=Su),null}function bl(t){var e=t.expirationTime;return e>(t=t.childExpirationTime)?e:t}function xl(t){var e=ji();return Wi(99,function(t,e){if(kl(),(_u&(mu|yu))!==vu)throw a(Error(327));var n=t.finishedWork,r=t.finishedExpirationTime;if(null===n)return null;if(t.finishedWork=null,t.finishedExpirationTime=0,n===t.current)throw a(Error(177));t.callbackNode=null,t.callbackExpirationTime=0,t.callbackPriority=90,t.nextKnownPendingLevel=0;var i=bl(n);if(t.firstPendingTime=i,r<=t.lastSuspendedTime?t.firstSuspendedTime=t.lastSuspendedTime=t.nextKnownPendingLevel=0:r<=t.firstSuspendedTime&&(t.firstSuspendedTime=r-1),r<=t.lastPingedTime&&(t.lastPingedTime=0),r<=t.lastExpiredTime&&(t.lastExpiredTime=0),t===Cu&&(Tu=Cu=null,Au=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){var o=_u;_u|=yu,hu.current=null,Gn=bn;var u=Bn();if(Un(u)){if("selectionStart"in u)var l={start:u.selectionStart,end:u.selectionEnd};else t:{var c=(l=(l=u.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(c&&0!==c.rangeCount){l=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{l.nodeType,f.nodeType}catch(t){l=null;break t}var d=0,p=-1,h=-1,v=0,g=0,m=u,y=null;e:for(;;){for(var b;m!==l||0!==s&&3!==m.nodeType||(p=d+s),m!==f||0!==c&&3!==m.nodeType||(h=d+c),3===m.nodeType&&(d+=m.nodeValue.length),null!==(b=m.firstChild);)y=m,m=b;for(;;){if(m===u)break e;if(y===l&&++v===s&&(p=d),y===f&&++g===c&&(h=d),null!==(b=m.nextSibling))break;y=(m=y).parentNode}m=b}l=-1===p||-1===h?null:{start:p,end:h}}else l=null}l=l||{start:0,end:0}}else l=null;$n={focusedElem:u,selectionRange:l},bn=!1,zu=i;do{try{wl()}catch(t){if(null===zu)throw a(Error(330));El(zu,t),zu=zu.nextEffect}}while(null!==zu);zu=i;do{try{for(u=t,l=e;null!==zu;){var x=zu.effectTag;if(16&x&&Vt(zu.stateNode,""),128&x){var w=zu.alternate;if(null!==w){var k=w.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(x&(12|ye|be)){case ye:ou(zu),zu.effectTag&=~ye;break;case 6:ou(zu),zu.effectTag&=~ye,uu(zu.alternate,zu);break;case be:zu.effectTag&=~be;break;case 1028:zu.effectTag&=~be,uu(zu.alternate,zu);break;case 4:uu(zu.alternate,zu);break;case 8:au(u,s=zu,l),ru(s)}zu=zu.nextEffect}}catch(t){if(null===zu)throw a(Error(330));El(zu,t),zu=zu.nextEffect}}while(null!==zu);if(k=$n,w=Bn(),x=k.focusedElem,l=k.selectionRange,w!==x&&x&&x.ownerDocument&&function t(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?t(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}(x.ownerDocument.documentElement,x)){null!==l&&Un(x)&&(w=l.start,void 0===(k=l.end)&&(k=w),"selectionStart"in x?(x.selectionStart=w,x.selectionEnd=Math.min(k,x.value.length)):(k=(w=x.ownerDocument||document)&&w.defaultView||window).getSelection&&(k=k.getSelection(),s=x.textContent.length,u=Math.min(l.start,s),l=void 0===l.end?u:Math.min(l.end,s),!k.extend&&u>l&&(s=l,l=u,u=s),s=Wn(x,u),f=Wn(x,l),s&&f&&(1!==k.rangeCount||k.anchorNode!==s.node||k.anchorOffset!==s.offset||k.focusNode!==f.node||k.focusOffset!==f.offset)&&((w=w.createRange()).setStart(s.node,s.offset),k.removeAllRanges(),u>l?(k.addRange(w),k.extend(f.node,f.offset)):(w.setEnd(f.node,f.offset),k.addRange(w))))),w=[];for(k=x;k=k.parentNode;)1===k.nodeType&&w.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof x.focus&&x.focus(),x=0;x<w.length;x++)(k=w[x]).element.scrollLeft=k.left,k.element.scrollTop=k.top}$n=null,bn=!!Gn,Gn=null,t.current=n,zu=i;do{try{for(x=r;null!==zu;){var M=zu.effectTag;if(36&M){var S=zu.alternate;switch(k=x,(w=zu).tag){case 0:case 11:case 15:eu(16,32,w);break;case 1:var E=w.stateNode;if(4&w.effectTag)if(null===S)E.componentDidMount();else{var _=w.elementType===w.type?S.memoizedProps:qi(w.type,S.memoizedProps);E.componentDidUpdate(_,S.memoizedState,E.__reactInternalSnapshotBeforeUpdate)}var C=w.updateQueue;null!==C&&po(0,C,E);break;case 3:var T=w.updateQueue;if(null!==T){if(u=null,null!==w.child)switch(w.child.tag){case 5:u=w.child.stateNode;break;case 1:u=w.child.stateNode}po(0,T,u)}break;case 5:var A=w.stateNode;null===S&&4&w.effectTag&&(k=A,Xn(w.type,w.memoizedProps)&&k.focus());break;case 6:case 4:case 12:break;case 13:if(null===w.memoizedState){var P=w.alternate;if(null!==P){var N=P.memoizedState;if(null!==N){var O=N.dehydrated;null!==O&&ge(O)}}}break;case 19:case 17:case 20:case 21:break;default:throw a(Error(163))}}if(128&M){var F=(w=zu).ref;if(null!==F){var L=w.stateNode;switch(w.tag){case 5:var D=L;break;default:D=L}"function"==typeof F?F(D):F.current=D}}zu=zu.nextEffect}}catch(t){if(null===zu)throw a(Error(330));El(zu,t),zu=zu.nextEffect}}while(null!==zu);zu=null,Oi(),_u=o}else t.current=n;if(Vu)Vu=!1,Hu=t,qu=e;else for(zu=i;null!==zu;)e=zu.nextEffect,zu.nextEffect=null,zu=e;if(0===(e=t.firstPendingTime)&&(Uu=null),1073741823===e?t===$u?Gu++:(Gu=0,$u=t):Gu=0,"function"==typeof Cl&&Cl(n.stateNode,r),rl(t),Wu)throw Wu=!1,t=Bu,Bu=null,t;return(_u&gu)!==vu?null:(Vi(),null)}.bind(null,t,e)),null}function wl(){for(;null!==zu;){var t=zu.effectTag;(256&t)!==me&&tu(zu.alternate,zu),(512&t)===me||Vu||(Vu=!0,Bi(97,function(){return kl(),null})),zu=zu.nextEffect}}function kl(){if(90!==qu){var t=97<qu?97:qu;return qu=90,Wi(t,Ml)}}function Ml(){if(null===Hu)return!1;var t=Hu;if(Hu=null,(_u&(mu|yu))!==vu)throw a(Error(331));var e=_u;for(_u|=yu,t=t.current.firstEffect;null!==t;){try{var n=t;if((512&n.effectTag)!==me)switch(n.tag){case 0:case 11:case 15:eu(128,0,n),eu(0,64,n)}}catch(e){if(null===t)throw a(Error(330));El(t,e)}n=t.nextEffect,t.nextEffect=null,t=n}return _u=e,Vi(),!0}function Sl(t,e,n){uo(t,e=su(t,e=Ka(n,e),1073741823)),null!==(t=el(t,1073741823))&&rl(t)}function El(t,e){if(3===t.tag)Sl(t,t,e);else for(var n=t.return;null!==n;){if(3===n.tag){Sl(n,t,e);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Uu||!Uu.has(r))){uo(n,t=fu(n,t=Ka(e,t),1073741823)),null!==(n=el(n,1073741823))&&rl(n);break}}n=n.return}}function _l(t,e,n){var r=t.pingCache;null!==r&&r.delete(e),Cu===t&&Au===n?Pu===Mu||Pu===ku&&1073741823===Ou&&Ii()-Iu<ju?sl(t,Au):Ru=!0:jl(t,n)&&(0!==(e=t.lastPingedTime)&&e<n||(t.lastPingedTime=n,t.finishedExpirationTime===n&&(t.finishedExpirationTime=0,t.finishedWork=null),rl(t)))}Qu=function(t,e,n){var r=e.expirationTime;if(null!==t){var i=e.pendingProps;if(t.memoizedProps!==i||ci.current)Ta=!0;else{if(r<n){switch(Ta=!1,e.tag){case 3:Ia(e),_a();break;case 5:if(Ro(e),4&e.mode&&1!==n&&i.hidden)return e.expirationTime=e.childExpirationTime=1,null;break;case 1:di(e.type)&&mi(e);break;case 4:Lo(e,e.stateNode.containerInfo);break;case 10:Zi(e,e.memoizedProps.value);break;case 13:if(null!==e.memoizedState)return 0!==(r=e.child.childExpirationTime)&&r>=n?Va(t,e,n):(ai(jo,1&jo.current),null!==(e=Ya(t,e,n))?e.sibling:null);ai(jo,1&jo.current);break;case 19:if(r=e.childExpirationTime>=n,(64&t.effectTag)!==me){if(r)return qa(t,e,n);e.effectTag|=64}if(null!==(i=e.memoizedState)&&(i.rendering=null,i.tail=null),ai(jo,jo.current),!r)return null}return Ya(t,e,n)}Ta=!1}}else Ta=!1;switch(e.expirationTime=0,e.tag){case 2:if(r=e.type,null!==t&&(t.alternate=null,e.alternate=null,e.effectTag|=ye),t=e.pendingProps,i=fi(e,li.current),to(e,n),i=ra(null,e,r,t,i,n),e.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(e.tag=1,ia(),di(r)){var o=!0;mi(e)}else o=!1;e.memoizedState=null!==i.state&&void 0!==i.state?i.state:null;var u=r.getDerivedStateFromProps;"function"==typeof u&&mo(e,r,u,t),i.updater=yo,e.stateNode=i,i._reactInternalFiber=e,ko(e,r,t,n),e=Ra(null,e,r,!0,o,n)}else e.tag=0,Aa(null,e,i,n),e=e.child;return e;case 16:if(i=e.elementType,null!==t&&(t.alternate=null,e.alternate=null,e.effectTag|=ye),t=e.pendingProps,function(t){if(-1===t._status){t._status=0;var e=t._ctor;e=e(),t._result=e,e.then(function(e){0===t._status&&(e=e.default,t._status=1,t._result=e)},function(e){0===t._status&&(t._status=2,t._result=e)})}}(i),1!==i._status)throw i._result;switch(i=i._result,e.type=i,o=e.tag=function(t){if("function"==typeof t)return Nl(t)?1:0;if(null!=t){if((t=t.$$typeof)===V)return 11;if(t===Y)return 14}return 2}(i),t=qi(i,t),o){case 0:e=La(null,e,i,t,n);break;case 1:e=Da(null,e,i,t,n);break;case 11:e=Pa(null,e,i,t,n);break;case 14:e=Na(null,e,i,qi(i.type,t),r,n);break;default:throw a(Error(306),i,"")}return e;case 0:return r=e.type,i=e.pendingProps,La(t,e,r,i=e.elementType===r?i:qi(r,i),n);case 1:return r=e.type,i=e.pendingProps,Da(t,e,r,i=e.elementType===r?i:qi(r,i),n);case 3:if(Ia(e),null===(r=e.updateQueue))throw a(Error(282));if(i=null!==(i=e.memoizedState)?i.element:null,fo(e,r,e.pendingProps,null,n),(r=e.memoizedState.element)===i)_a(),e=Ya(t,e,n);else{if((i=e.stateNode.hydrate)&&(ba=Jn(e.stateNode.containerInfo.firstChild),ya=e,i=xa=!0),i)for(n=To(e,null,r,n),e.child=n;n;)n.effectTag=n.effectTag&~ye|be,n=n.sibling;else Aa(t,e,r,n),_a();e=e.child}return e;case 5:return Ro(e),null===t&&Ma(e),r=e.type,i=e.pendingProps,o=null!==t?t.memoizedProps:null,u=i.children,Kn(r,i)?u=null:null!==o&&Kn(r,o)&&(e.effectTag|=16),Fa(t,e),4&e.mode&&1!==n&&i.hidden?(e.expirationTime=e.childExpirationTime=1,e=null):(Aa(t,e,u,n),e=e.child),e;case 6:return null===t&&Ma(e),null;case 13:return Va(t,e,n);case 4:return Lo(e,e.stateNode.containerInfo),r=e.pendingProps,null===t?e.child=Co(e,null,r,n):Aa(t,e,r,n),e.child;case 11:return r=e.type,i=e.pendingProps,Pa(t,e,r,i=e.elementType===r?i:qi(r,i),n);case 7:return Aa(t,e,e.pendingProps,n),e.child;case 8:case 12:return Aa(t,e,e.pendingProps.children,n),e.child;case 10:t:{if(r=e.type._context,i=e.pendingProps,u=e.memoizedProps,Zi(e,o=i.value),null!==u){var l=u.value;if(0===(o=Yr(l,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(u.children===i.children&&!ci.current){e=Ya(t,e,n);break t}}else for(null!==(l=e.child)&&(l.return=e);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&o)){1===l.tag&&((s=oo(n,null)).tag=2,uo(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),Ji(l.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===e.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===e){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}}Aa(t,e,i.children,n),e=e.child}return e;case 9:return i=e.type,r=(o=e.pendingProps).children,to(e,n),r=r(i=eo(i,o.unstable_observedBits)),e.effectTag|=1,Aa(t,e,r,n),e.child;case 14:return o=qi(i=e.type,e.pendingProps),Na(t,e,i,o=qi(i.type,o),r,n);case 15:return Oa(t,e,e.type,e.pendingProps,r,n);case 17:return r=e.type,i=e.pendingProps,i=e.elementType===r?i:qi(r,i),null!==t&&(t.alternate=null,e.alternate=null,e.effectTag|=ye),e.tag=1,di(r)?(t=!0,mi(e)):t=!1,to(e,n),xo(e,r,i),ko(e,r,i,n),Ra(null,e,r,!0,t,n);case 19:return qa(t,e,n)}throw a(Error(156),e.tag)};var Cl=null,Tl=null;function Al(t,e,n,r){this.tag=t,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=me,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Pl(t,e,n,r){return new Al(t,e,n,r)}function Nl(t){return!(!(t=t.prototype)||!t.isReactComponent)}function Ol(t,e){var n=t.alternate;return null===n?((n=Pl(t.tag,e,t.key,t.mode)).elementType=t.elementType,n.type=t.type,n.stateNode=t.stateNode,n.alternate=t,t.alternate=n):(n.pendingProps=e,n.effectTag=me,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=t.childExpirationTime,n.expirationTime=t.expirationTime,n.child=t.child,n.memoizedProps=t.memoizedProps,n.memoizedState=t.memoizedState,n.updateQueue=t.updateQueue,e=t.dependencies,n.dependencies=null===e?null:{expirationTime:e.expirationTime,firstContext:e.firstContext,responders:e.responders},n.sibling=t.sibling,n.index=t.index,n.ref=t.ref,n}function Fl(t,e,n,r,i,o){var u=2;if(r=t,"function"==typeof t)Nl(t)&&(u=1);else if("string"==typeof t)u=5;else t:switch(t){case I:return Ll(n.children,i,o,e);case U:u=8,i|=7;break;case j:u=8,i|=1;break;case z:return(t=Pl(12,n,e,8|i)).elementType=z,t.type=z,t.expirationTime=o,t;case H:return(t=Pl(13,n,e,i)).type=H,t.elementType=H,t.expirationTime=o,t;case q:return(t=Pl(19,n,e,i)).elementType=q,t.expirationTime=o,t;default:if("object"==typeof t&&null!==t)switch(t.$$typeof){case W:u=10;break t;case B:u=9;break t;case V:u=11;break t;case Y:u=14;break t;case G:u=16,r=null;break t}throw a(Error(130),null==t?t:typeof t,"")}return(e=Pl(u,n,e,i)).elementType=t,e.type=r,e.expirationTime=o,e}function Ll(t,e,n,r){return(t=Pl(7,t,r,e)).expirationTime=n,t}function Dl(t,e,n){return(t=Pl(6,t,null,e)).expirationTime=n,t}function Rl(t,e,n){return(e=Pl(4,null!==t.children?t.children:[],t.key,e)).expirationTime=n,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function Il(t,e,n){this.tag=e,this.current=null,this.containerInfo=t,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=this.firstBatch=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function jl(t,e){var n=t.firstSuspendedTime;return t=t.lastSuspendedTime,0!==n&&n>=e&&t<=e}function zl(t,e){var n=t.firstSuspendedTime,r=t.lastSuspendedTime;n<e&&(t.firstSuspendedTime=e),(r>e||0===n)&&(t.lastSuspendedTime=e),e<=t.lastPingedTime&&(t.lastPingedTime=0),e<=t.lastExpiredTime&&(t.lastExpiredTime=0)}function Wl(t,e){e>t.firstPendingTime&&(t.firstPendingTime=e);var n=t.firstSuspendedTime;0!==n&&(e>=n?t.firstSuspendedTime=t.lastSuspendedTime=t.nextKnownPendingLevel=0:e>=t.lastSuspendedTime&&(t.lastSuspendedTime=e+1),e>t.nextKnownPendingLevel&&(t.nextKnownPendingLevel=e))}function Bl(t,e){var n=t.lastExpiredTime;(0===n||n>e)&&(t.lastExpiredTime=e)}function Ul(t,e,n,r,i,o){var u=e.current;t:if(n){e:{if(xe(n=n._reactInternalFiber)!==n||1!==n.tag)throw a(Error(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break e;case 1:if(di(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break e}}l=l.return}while(null!==l);throw a(Error(171))}if(1===n.tag){var c=n.type;if(di(c)){n=gi(n,c,l);break t}}n=l}else n=ui;return null===e.context?e.context=n:e.pendingContext=n,e=o,(i=oo(r,i)).payload={element:t},null!==(e=void 0===e?null:e)&&(i.callback=e),uo(u,i),tl(u,r),r}function Vl(t,e,n,r){var i=e.current,o=Ku(),a=vo.suspense;return Ul(t,e,n,i=Zu(o,i,a),a,r)}function Hl(t){if(!(t=t.current).child)return null;switch(t.child.tag){case 5:default:return t.child.stateNode}}function ql(t){var e=1073741821-25*(1+((1073741821-Ku()+500)/25|0));e<=Ju&&--e,this._expirationTime=Ju=e,this._root=t,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Yl(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Gl(t,e,n){var r=new Il(t,e,n=null!=n&&!0===n.hydrate),i=Pl(3,null,null,2===e?7:1===e?3:0);return r.current=i,i.stateNode=r,t[ir]=r.current,n&&0!==e&&function(t){var e=Cn(t);ue.forEach(function(n){Tn(n,t,e)}),le.forEach(function(n){Tn(n,t,e)})}(9===t.nodeType?t:t.ownerDocument),r}function $l(t,e,n){this._internalRoot=Gl(t,e,n)}function Xl(t,e){this._internalRoot=Gl(t,2,e)}function Kl(t){return!(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType&&(8!==t.nodeType||" react-mount-point-unstable "!==t.nodeValue))}function Zl(t,e,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var u=i;i=function(){var t=Hl(a);u.call(t)}}Vl(e,a,t,i)}else{if(o=n._reactRootContainer=function(t,e){if(e||(e=!(!(e=t?9===t.nodeType?t.documentElement:t.firstChild:null)||1!==e.nodeType||!e.hasAttribute("data-reactroot"))),!e)for(var n;n=t.lastChild;)t.removeChild(n);return new $l(t,0,e?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var l=i;i=function(){var t=Hl(a);l.call(t)}}cl(function(){Vl(e,a,t,i)})}return Hl(a)}function Ql(t,e){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Kl(e))throw a(Error(200));return function(t,e,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:R,key:null==r?null:""+r,children:t,containerInfo:e,implementation:n}}(t,e,null,n)}J=function(t,e,n){switch(e){case"input":if(Tt(t,n),e=n.name,"radio"===n.type&&null!=e){for(n=t;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<n.length;e++){var r=n[e];if(r!==t&&r.form===t.form){var i=lr(r);if(!i)throw a(Error(90));St(r),Tt(r,i)}}}break;case"textarea":Dt(t,n);break;case"select":null!=(e=n.value)&&Ot(t,!!n.multiple,e,!1)}},ql.prototype.render=function(t){if(!this._defer)throw a(Error(250));this._hasChildren=!0,this._children=t;var e=this._root._internalRoot,n=this._expirationTime,r=new Yl;return Ul(t,e,null,n,null,r._onCommit),r},ql.prototype.then=function(t){if(this._didComplete)t();else{var e=this._callbacks;null===e&&(e=this._callbacks=[]),e.push(t)}},ql.prototype.commit=function(){var t=this._root._internalRoot,e=t.firstBatch;if(!this._defer||null===e)throw a(Error(251));if(this._hasChildren){var n=this._expirationTime;if(e!==this){this._hasChildren&&(n=this._expirationTime=e._expirationTime,this.render(this._children));for(var r=null,i=e;i!==this;)r=i,i=i._next;if(null===r)throw a(Error(251));r._next=i._next,this._next=e,t.firstBatch=this}if(this._defer=!1,e=n,(_u&(mu|yu))!==vu)throw a(Error(253));Bl(t,e),rl(t),Vi(),e=this._next,this._next=null,null!==(e=t.firstBatch=e)&&e._hasChildren&&e.render(e._children)}else this._next=null,this._defer=!1},ql.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var t=this._callbacks;if(null!==t)for(var e=0;e<t.length;e++)(0,t[e])()}},Yl.prototype.then=function(t){if(this._didCommit)t();else{var e=this._callbacks;null===e&&(e=this._callbacks=[]),e.push(t)}},Yl.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var t=this._callbacks;if(null!==t)for(var e=0;e<t.length;e++){var n=t[e];if("function"!=typeof n)throw a(Error(191),n);n()}}},Xl.prototype.render=$l.prototype.render=function(t,e){var n=this._internalRoot,r=new Yl;return null!==(e=void 0===e?null:e)&&r.then(e),Vl(t,n,null,r._onCommit),r},Xl.prototype.unmount=$l.prototype.unmount=function(t){var e=this._internalRoot,n=new Yl;return null!==(t=void 0===t?null:t)&&n.then(t),Vl(null,e,null,n._onCommit),n},Xl.prototype.createBatch=function(){var t=new ql(this),e=t._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=t,t._next=null;else{for(n=null;null!==r&&r._expirationTime>=e;)n=r,r=r._next;t._next=r,null!==n&&(n._next=t)}return t},ot=ul,at=ll,ut=ol,lt=function(t,e){var n=_u;_u|=2;try{return t(e)}finally{(_u=n)===vu&&Vi()}};var Jl={createPortal:Ql,findDOMNode:function(t){if(null==t)t=null;else if(1!==t.nodeType){var e=t._reactInternalFiber;if(void 0===e){if("function"==typeof t.render)throw a(Error(188));throw a(Error(268),Object.keys(t))}t=null===(t=ke(e))?null:t.stateNode}return t},hydrate:function(t,e,n){if(!Kl(e))throw a(Error(200));return Zl(null,t,e,!0,n)},render:function(t,e,n){if(!Kl(e))throw a(Error(200));return Zl(null,t,e,!1,n)},unstable_renderSubtreeIntoContainer:function(t,e,n,r){if(!Kl(n))throw a(Error(200));if(null==t||void 0===t._reactInternalFiber)throw a(Error(38));return Zl(t,e,n,!1,r)},unmountComponentAtNode:function(t){if(!Kl(t))throw a(Error(40));return!!t._reactRootContainer&&(cl(function(){Zl(null,null,t,!1,function(){t._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Ql.apply(void 0,arguments)},unstable_batchedUpdates:ul,unstable_interactiveUpdates:function(t,e,n,r){return ol(),ll(t,e,n,r)},unstable_discreteUpdates:ll,unstable_flushDiscreteUpdates:ol,flushSync:function(t,e){if((_u&(mu|yu))!==vu)throw a(Error(187));var n=_u;_u|=1;try{return Wi(99,t.bind(null,e))}finally{_u=n,Vi()}},unstable_createRoot:function(t,e){if(!Kl(t))throw a(Error(299),"unstable_createRoot");return new Xl(t,e)},unstable_createSyncRoot:function(t,e){if(!Kl(t))throw a(Error(299),"unstable_createRoot");return new $l(t,1,e)},unstable_flushControlled:function(t){var e=_u;_u|=1;try{Wi(99,t)}finally{(_u=e)===vu&&Vi()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[ar,ur,lr,P.injectEventPluginsByName,d,Ae,function(t){_(t,Te)},rt,it,Mn,A,kl,{current:!1}]}};!function(t){var e=t.findFiberByHostInstance;(function(t){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var e=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(e.isDisabled||!e.supportsFiber)return!0;try{var n=e.inject(t);Cl=function(t){try{e.onCommitFiberRoot(n,t,void 0,64==(64&t.current.effectTag))}catch(t){}},Tl=function(t){try{e.onCommitFiberUnmount(n,t)}catch(t){}}}catch(t){}})(i({},t,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:O.ReactCurrentDispatcher,findHostInstanceByFiber:function(t){return null===(t=ke(t))?null:t.stateNode},findFiberByHostInstance:function(t){return e?e(t):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))}({findFiberByHostInstance:or,bundleType:0,version:"16.10.2",rendererPackageName:"react-dom"});var tc={default:Jl},ec=tc&&Jl||tc;t.exports=ec.default||ec},function(t,e,n){"use strict";t.exports=n(322)},function(t,e,n){"use strict";
/** @license React v0.16.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,i,o,a,u;if(Object.defineProperty(e,"__esModule",{value:!0}),"undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,c=null,s=function(){if(null!==l)try{var t=e.unstable_now();l(!0,t),l=null}catch(t){throw setTimeout(s,0),t}},f=Date.now();e.unstable_now=function(){return Date.now()-f},r=function(t){null!==l?setTimeout(r,0,t):(l=t,setTimeout(s,0))},i=function(t,e){c=setTimeout(t,e)},o=function(){clearTimeout(c)},a=function(){return!1},u=e.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,h=window.setTimeout,v=window.clearTimeout,g=window.requestAnimationFrame,m=window.cancelAnimationFrame;if("undefined"!=typeof console&&("function"!=typeof g&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")),"object"==typeof d&&"function"==typeof d.now)e.unstable_now=function(){return d.now()};else{var y=p.now();e.unstable_now=function(){return p.now()-y}}var b=!1,x=null,w=-1,k=5,M=0;a=function(){return e.unstable_now()>=M},u=function(){},e.unstable_forceFrameRate=function(t){0>t||125<t?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):k=0<t?Math.floor(1e3/t):33.33};var S=new MessageChannel,E=S.port2;S.port1.onmessage=function(){if(null!==x){var t=e.unstable_now();M=t+k;try{x(!0,t)?E.postMessage(null):(b=!1,x=null)}catch(t){throw E.postMessage(null),t}}else b=!1},r=function(t){x=t,b||(b=!0,E.postMessage(null))},i=function(t,n){w=h(function(){t(e.unstable_now())},n)},o=function(){v(w),w=-1}}function _(t,e){var n=t.length;t.push(e);t:for(;;){var r=Math.floor((n-1)/2),i=t[r];if(!(void 0!==i&&0<A(i,e)))break t;t[r]=e,t[n]=i,n=r}}function C(t){return void 0===(t=t[0])?null:t}function T(t){var e=t[0];if(void 0!==e){var n=t.pop();if(n!==e){t[0]=n;t:for(var r=0,i=t.length;r<i;){var o=2*(r+1)-1,a=t[o],u=o+1,l=t[u];if(void 0!==a&&0>A(a,n))void 0!==l&&0>A(l,a)?(t[r]=l,t[u]=n,r=u):(t[r]=a,t[o]=n,r=o);else{if(!(void 0!==l&&0>A(l,n)))break t;t[r]=l,t[u]=n,r=u}}}return e}return null}function A(t,e){var n=t.sortIndex-e.sortIndex;return 0!==n?n:t.id-e.id}var P=[],N=[],O=1,F=null,L=3,D=!1,R=!1,I=!1;function j(t){for(var e=C(N);null!==e;){if(null===e.callback)T(N);else{if(!(e.startTime<=t))break;T(N),e.sortIndex=e.expirationTime,_(P,e)}e=C(N)}}function z(t){if(I=!1,j(t),!R)if(null!==C(P))R=!0,r(W);else{var e=C(N);null!==e&&i(z,e.startTime-t)}}function W(t,n){R=!1,I&&(I=!1,o()),D=!0;var r=L;try{for(j(n),F=C(P);null!==F&&(!(F.expirationTime>n)||t&&!a());){var u=F.callback;if(null!==u){F.callback=null,L=F.priorityLevel;var l=u(F.expirationTime<=n);n=e.unstable_now(),"function"==typeof l?F.callback=l:F===C(P)&&T(P),j(n)}else T(P);F=C(P)}if(null!==F)var c=!0;else{var s=C(N);null!==s&&i(z,s.startTime-n),c=!1}return c}finally{F=null,L=r,D=!1}}function B(t){switch(t){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var U=u;e.unstable_ImmediatePriority=1,e.unstable_UserBlockingPriority=2,e.unstable_NormalPriority=3,e.unstable_IdlePriority=5,e.unstable_LowPriority=4,e.unstable_runWithPriority=function(t,e){switch(t){case 1:case 2:case 3:case 4:case 5:break;default:t=3}var n=L;L=t;try{return e()}finally{L=n}},e.unstable_next=function(t){switch(L){case 1:case 2:case 3:var e=3;break;default:e=L}var n=L;L=e;try{return t()}finally{L=n}},e.unstable_scheduleCallback=function(t,n,a){var u=e.unstable_now();if("object"==typeof a&&null!==a){var l=a.delay;l="number"==typeof l&&0<l?u+l:u,a="number"==typeof a.timeout?a.timeout:B(t)}else a=B(t),l=u;return t={id:O++,callback:n,priorityLevel:t,startTime:l,expirationTime:a=l+a,sortIndex:-1},l>u?(t.sortIndex=l,_(N,t),null===C(P)&&t===C(N)&&(I?o():I=!0,i(z,l-u))):(t.sortIndex=a,_(P,t),R||D||(R=!0,r(W))),t},e.unstable_cancelCallback=function(t){t.callback=null},e.unstable_wrapCallback=function(t){var e=L;return function(){var n=L;L=e;try{return t.apply(this,arguments)}finally{L=n}}},e.unstable_getCurrentPriorityLevel=function(){return L},e.unstable_shouldYield=function(){var t=e.unstable_now();j(t);var n=C(P);return n!==F&&null!==F&&null!==n&&null!==n.callback&&n.startTime<=t&&n.expirationTime<F.expirationTime||a()},e.unstable_requestPaint=U,e.unstable_continueExecution=function(){R||D||(R=!0,r(W))},e.unstable_pauseExecution=function(){},e.unstable_getFirstCallbackNode=function(){return C(P)},e.unstable_Profiling=null},function(t,e,n){"use strict";var r=n(324);function i(){}function o(){}o.resetWarningCache=i,t.exports=function(){function t(t,e,n,i,o,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function e(){return t}t.isRequired=t;var n={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},function(t,e,n){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(t,e,n){"use strict";t.exports=n(326)},function(t,e,n){"use strict";
/** @license React v16.8.6
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,i=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,v=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116;function m(t){if("object"==typeof t&&null!==t){var e=t.$$typeof;switch(e){case i:switch(t=t.type){case f:case d:case a:case l:case u:case h:return t;default:switch(t=t&&t.$$typeof){case s:case p:case c:return t;default:return e}}case g:case v:case o:return e}}}function y(t){return m(t)===d}e.typeOf=m,e.AsyncMode=f,e.ConcurrentMode=d,e.ContextConsumer=s,e.ContextProvider=c,e.Element=i,e.ForwardRef=p,e.Fragment=a,e.Lazy=g,e.Memo=v,e.Portal=o,e.Profiler=l,e.StrictMode=u,e.Suspense=h,e.isValidElementType=function(t){return"string"==typeof t||"function"==typeof t||t===a||t===d||t===l||t===u||t===h||"object"==typeof t&&null!==t&&(t.$$typeof===g||t.$$typeof===v||t.$$typeof===c||t.$$typeof===s||t.$$typeof===p)},e.isAsyncMode=function(t){return y(t)||m(t)===f},e.isConcurrentMode=y,e.isContextConsumer=function(t){return m(t)===s},e.isContextProvider=function(t){return m(t)===c},e.isElement=function(t){return"object"==typeof t&&null!==t&&t.$$typeof===i},e.isForwardRef=function(t){return m(t)===p},e.isFragment=function(t){return m(t)===a},e.isLazy=function(t){return m(t)===g},e.isMemo=function(t){return m(t)===v},e.isPortal=function(t){return m(t)===o},e.isProfiler=function(t){return m(t)===l},e.isStrictMode=function(t){return m(t)===u},e.isSuspense=function(t){return m(t)===h}},function(t,e,n){"use strict";
/** @license React v16.10.2
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,i=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,v=r?Symbol.for("react.suspense_list"):60120,g=r?Symbol.for("react.memo"):60115,m=r?Symbol.for("react.lazy"):60116,y=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118,x=r?Symbol.for("react.scope"):60119;function w(t){if("object"==typeof t&&null!==t){var e=t.$$typeof;switch(e){case i:switch(t=t.type){case f:case d:case a:case l:case u:case h:return t;default:switch(t=t&&t.$$typeof){case s:case p:case c:return t;default:return e}}case m:case g:case o:return e}}}function k(t){return w(t)===d}e.typeOf=w,e.AsyncMode=f,e.ConcurrentMode=d,e.ContextConsumer=s,e.ContextProvider=c,e.Element=i,e.ForwardRef=p,e.Fragment=a,e.Lazy=m,e.Memo=g,e.Portal=o,e.Profiler=l,e.StrictMode=u,e.Suspense=h,e.isValidElementType=function(t){return"string"==typeof t||"function"==typeof t||t===a||t===d||t===l||t===u||t===h||t===v||"object"==typeof t&&null!==t&&(t.$$typeof===m||t.$$typeof===g||t.$$typeof===c||t.$$typeof===s||t.$$typeof===p||t.$$typeof===y||t.$$typeof===b||t.$$typeof===x)},e.isAsyncMode=function(t){return k(t)||w(t)===f},e.isConcurrentMode=k,e.isContextConsumer=function(t){return w(t)===s},e.isContextProvider=function(t){return w(t)===c},e.isElement=function(t){return"object"==typeof t&&null!==t&&t.$$typeof===i},e.isForwardRef=function(t){return w(t)===p},e.isFragment=function(t){return w(t)===a},e.isLazy=function(t){return w(t)===m},e.isMemo=function(t){return w(t)===g},e.isPortal=function(t){return w(t)===o},e.isProfiler=function(t){return w(t)===l},e.isStrictMode=function(t){return w(t)===u},e.isSuspense=function(t){return w(t)===h}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e,n){"use strict";n.r(e);var r=n(0),i=n.n(r),o=n(63),a=n.n(o),u=n(40),l=n.n(u),c=i.a.createContext(null);var s=function(t){t()},f=function(){return s},d=null,p={notify:function(){}};var h=function(){function t(t,e){this.store=t,this.parentSub=e,this.unsubscribe=null,this.listeners=p,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var e=t.prototype;return e.addNestedSub=function(t){return this.trySubscribe(),this.listeners.subscribe(t)},e.notifyNestedSubs=function(){this.listeners.notify()},e.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},e.isSubscribed=function(){return Boolean(this.unsubscribe)},e.trySubscribe=function(){var t,e,n;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=(t=f(),e=[],n=[],{clear:function(){n=d,e=d},notify:function(){var r=e=n;t(function(){for(var t=0;t<r.length;t++)r[t]()})},get:function(){return n},subscribe:function(t){var r=!0;return n===e&&(n=e.slice()),n.push(t),function(){r&&e!==d&&(r=!1,n===e&&(n=e.slice()),n.splice(n.indexOf(t),1))}}}))},e.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=p)},t}();function v(t){var e=t.store,n=t.context,o=t.children,a=Object(r.useMemo)(function(){var t=new h(e);return t.onStateChange=t.notifyNestedSubs,{store:e,subscription:t}},[e]),u=Object(r.useMemo)(function(){return e.getState()},[e]);Object(r.useEffect)(function(){var t=a.subscription;return t.trySubscribe(),u!==e.getState()&&t.notifyNestedSubs(),function(){t.tryUnsubscribe(),t.onStateChange=null}},[a,u]);var l=n||c;return i.a.createElement(l.Provider,{value:a},o)}v.propTypes={store:l.a.shape({subscribe:l.a.func.isRequired,dispatch:l.a.func.isRequired,getState:l.a.func.isRequired}),context:l.a.object,children:l.a.any};var g=v;function m(){return(m=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function y(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}var b=n(93),x=n.n(b),w=n(27),k=n.n(w),M=n(130),S=[],E=[null,null];function _(t,e){var n=t[1];return[e.payload,n+1]}var C=function(){return[null,0]},T="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;function A(t,e){void 0===e&&(e={});var n=e,o=n.getDisplayName,a=void 0===o?function(t){return"ConnectAdvanced("+t+")"}:o,u=n.methodName,l=void 0===u?"connectAdvanced":u,s=n.renderCountProp,f=void 0===s?void 0:s,d=n.shouldHandleStateChanges,p=void 0===d||d,v=n.storeKey,g=void 0===v?"store":v,b=n.withRef,w=void 0!==b&&b,A=n.forwardRef,P=void 0!==A&&A,N=n.context,O=void 0===N?c:N,F=y(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);k()(void 0===f,"renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension"),k()(!w,"withRef is removed. To access the wrapped instance, use a ref on the connected component");k()("store"===g,"storeKey has been removed and does not do anything. To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect");var L=O;return function(e){var n=e.displayName||e.name||"Component",o=a(n),u=m({},F,{getDisplayName:a,methodName:l,renderCountProp:f,shouldHandleStateChanges:p,storeKey:g,displayName:o,wrappedComponentName:n,WrappedComponent:e}),c=F.pure;var s=c?r.useMemo:function(t){return t()};function d(n){var a=Object(r.useMemo)(function(){var t=n.forwardedRef,e=y(n,["forwardedRef"]);return[n.context,t,e]},[n]),l=a[0],c=a[1],f=a[2],d=Object(r.useMemo)(function(){return l&&l.Consumer&&Object(M.isContextConsumer)(i.a.createElement(l.Consumer,null))?l:L},[l,L]),v=Object(r.useContext)(d),g=Boolean(n.store),b=Boolean(v)&&Boolean(v.store);k()(g||b,'Could not find "store" in the context of "'+o+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+o+" in connect options.");var x=n.store||v.store,w=Object(r.useMemo)(function(){return function(e){return t(e.dispatch,u)}(x)},[x]),A=Object(r.useMemo)(function(){if(!p)return E;var t=new h(x,g?null:v.subscription),e=t.notifyNestedSubs.bind(t);return[t,e]},[x,g,v]),P=A[0],N=A[1],O=Object(r.useMemo)(function(){return g?v:m({},v,{subscription:P})},[g,v,P]),F=Object(r.useReducer)(_,S,C),D=F[0][0],R=F[1];if(D&&D.error)throw D.error;var I=Object(r.useRef)(),j=Object(r.useRef)(f),z=Object(r.useRef)(),W=Object(r.useRef)(!1),B=s(function(){return z.current&&f===j.current?z.current:w(x.getState(),f)},[x,D,f]);T(function(){j.current=f,I.current=B,W.current=!1,z.current&&(z.current=null,N())}),T(function(){if(p){var t=!1,e=null,n=function(){if(!t){var n,r,i=x.getState();try{n=w(i,j.current)}catch(t){r=t,e=t}r||(e=null),n===I.current?W.current||N():(I.current=n,z.current=n,W.current=!0,R({type:"STORE_UPDATED",payload:{latestStoreState:i,error:r}}))}};P.onStateChange=n,P.trySubscribe(),n();return function(){if(t=!0,P.tryUnsubscribe(),P.onStateChange=null,e)throw e}}},[x,P,w]);var U=Object(r.useMemo)(function(){return i.a.createElement(e,m({},B,{ref:c}))},[c,e,B]);return Object(r.useMemo)(function(){return p?i.a.createElement(d.Provider,{value:O},U):U},[d,U,O])}var v=c?i.a.memo(d):d;if(v.WrappedComponent=e,v.displayName=o,P){var b=i.a.forwardRef(function(t,e){return i.a.createElement(v,m({},t,{forwardedRef:e}))});return b.displayName=o,b.WrappedComponent=e,x()(b,e)}return x()(v,e)}}var P=Object.prototype.hasOwnProperty;function N(t,e){return t===e?0!==t||0!==e||1/t==1/e:t!=t&&e!=e}function O(t,e){if(N(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),r=Object.keys(e);if(n.length!==r.length)return!1;for(var i=0;i<n.length;i++)if(!P.call(e,n[i])||!N(t[n[i]],e[n[i]]))return!1;return!0}var F=n(94),L=function(){return Math.random().toString(36).substring(7).split("").join(".")},D={INIT:"@@redux/INIT"+L(),REPLACE:"@@redux/REPLACE"+L(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+L()}};function R(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function I(t,e){var n=e&&e.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+t+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function j(t,e){return function(){return e(t.apply(this,arguments))}}function z(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function W(t,e){var n=Object.keys(t);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(t)),e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n}function B(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce(function(t,e){return function(){return t(e.apply(void 0,arguments))}})}function U(t){return function(e,n){var r=t(e,n);function i(){return r}return i.dependsOnOwnProps=!1,i}}function V(t){return null!==t.dependsOnOwnProps&&void 0!==t.dependsOnOwnProps?Boolean(t.dependsOnOwnProps):1!==t.length}function H(t,e){return function(e,n){n.displayName;var r=function(t,e){return r.dependsOnOwnProps?r.mapToProps(t,e):r.mapToProps(t)};return r.dependsOnOwnProps=!0,r.mapToProps=function(e,n){r.mapToProps=t,r.dependsOnOwnProps=V(t);var i=r(e,n);return"function"==typeof i&&(r.mapToProps=i,r.dependsOnOwnProps=V(i),i=r(e,n)),i},r}}var q=[function(t){return"function"==typeof t?H(t):void 0},function(t){return t?void 0:U(function(t){return{dispatch:t}})},function(t){return t&&"object"==typeof t?U(function(e){return function(t,e){if("function"==typeof t)return j(t,e);if("object"!=typeof t||null===t)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===t?"null":typeof t)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in t){var i=t[r];"function"==typeof i&&(n[r]=j(i,e))}return n}(t,e)}):void 0}];var Y=[function(t){return"function"==typeof t?H(t):void 0},function(t){return t?void 0:U(function(){return{}})}];function G(t,e,n){return m({},n,{},t,{},e)}var $=[function(t){return"function"==typeof t?function(t){return function(e,n){n.displayName;var r,i=n.pure,o=n.areMergedPropsEqual,a=!1;return function(e,n,u){var l=t(e,n,u);return a?i&&o(l,r)||(r=l):(a=!0,r=l),r}}}(t):void 0},function(t){return t?void 0:function(){return G}}];function X(t,e,n,r){return function(i,o){return n(t(i,o),e(r,o),o)}}function K(t,e,n,r,i){var o,a,u,l,c,s=i.areStatesEqual,f=i.areOwnPropsEqual,d=i.areStatePropsEqual,p=!1;function h(i,p){var h,v,g=!f(p,a),m=!s(i,o);return o=i,a=p,g&&m?(u=t(o,a),e.dependsOnOwnProps&&(l=e(r,a)),c=n(u,l,a)):g?(t.dependsOnOwnProps&&(u=t(o,a)),e.dependsOnOwnProps&&(l=e(r,a)),c=n(u,l,a)):m?(h=t(o,a),v=!d(h,u),u=h,v&&(c=n(u,l,a)),c):c}return function(i,s){return p?h(i,s):(u=t(o=i,a=s),l=e(r,a),c=n(u,l,a),p=!0,c)}}function Z(t,e){var n=e.initMapStateToProps,r=e.initMapDispatchToProps,i=e.initMergeProps,o=y(e,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(t,o),u=r(t,o),l=i(t,o);return(o.pure?K:X)(a,u,l,t,o)}function Q(t,e,n){for(var r=e.length-1;r>=0;r--){var i=e[r](t);if(i)return i}return function(e,r){throw new Error("Invalid value of type "+typeof t+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function J(t,e){return t===e}var tt,et,nt,rt,it,ot,at,ut,lt,ct,st,ft;nt=(et=void 0===tt?{}:tt).connectHOC,rt=void 0===nt?A:nt,it=et.mapStateToPropsFactories,ot=void 0===it?Y:it,at=et.mapDispatchToPropsFactories,ut=void 0===at?q:at,lt=et.mergePropsFactories,ct=void 0===lt?$:lt,st=et.selectorFactory,ft=void 0===st?Z:st;function dt(){var t=Object(r.useContext)(c);return k()(t,"could not find react-redux context value; please ensure the component is wrapped in a <Provider>"),t}function pt(t){void 0===t&&(t=c);var e=t===c?dt:function(){return Object(r.useContext)(t)};return function(){return e().store}}var ht=pt();var vt=function(t){void 0===t&&(t=c);var e=t===c?ht:pt(t);return function(){return e().dispatch}}(),gt="undefined"!=typeof window?r.useLayoutEffect:r.useEffect,mt=function(t,e){return t===e};var yt,bt=function(t){void 0===t&&(t=c);var e=t===c?dt:function(){return Object(r.useContext)(t)};return function(t,n){void 0===n&&(n=mt),k()(t,"You must pass a selector to useSelectors");var i=e();return function(t,e,n,i){var o,a=Object(r.useReducer)(function(t){return t+1},0)[1],u=Object(r.useMemo)(function(){return new h(n,i)},[n,i]),l=Object(r.useRef)(),c=Object(r.useRef)(),s=Object(r.useRef)();try{o=t!==c.current||l.current?t(n.getState()):s.current}catch(t){var f="An error occured while selecting the store state: "+t.message+".";throw l.current&&(f+="\nThe error may be correlated with this previous error:\n"+l.current.stack+"\n\nOriginal stack trace:"),new Error(f)}return gt(function(){c.current=t,s.current=o,l.current=void 0}),gt(function(){function t(){try{var t=c.current(n.getState());if(e(t,s.current))return;s.current=t}catch(t){l.current=t}a({})}return u.onStateChange=t,u.trySubscribe(),t(),function(){return u.tryUnsubscribe()}},[n,u]),o}(t,n,i.store,i.subscription)}}();function xt(t){return function(e){var n=e.dispatch,r=e.getState;return function(e){return function(i){return"function"==typeof i?i(n,r,t):e(i)}}}}yt=o.unstable_batchedUpdates,s=yt;var wt=xt();wt.withExtraArgument=xt;var kt=wt;function Mt(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function St(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){Et(t,e,n[e])})}return t}function Et(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var _t={requestRunning:!1,error:null,greetings:[]};var Ct=function t(e,n,r){var i;if("function"==typeof n&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof n&&void 0===r&&(r=n,n=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(t)(e,n)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var o=e,a=n,u=[],l=u,c=!1;function s(){l===u&&(l=u.slice())}function f(){if(c)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return a}function d(t){if("function"!=typeof t)throw new Error("Expected the listener to be a function.");if(c)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var e=!0;return s(),l.push(t),function(){if(e){if(c)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");e=!1,s();var n=l.indexOf(t);l.splice(n,1)}}}function p(t){if(!R(t))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===t.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(c)throw new Error("Reducers may not dispatch actions.");try{c=!0,a=o(a,t)}finally{c=!1}for(var e=u=l,n=0;n<e.length;n++)(0,e[n])();return t}return p({type:D.INIT}),(i={dispatch:p,subscribe:d,getState:f,replaceReducer:function(t){if("function"!=typeof t)throw new Error("Expected the nextReducer to be a function.");o=t,p({type:D.REPLACE})}})[F.a]=function(){var t,e=d;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new TypeError("Expected the observer to be an object.");function n(){t.next&&t.next(f())}return n(),{unsubscribe:e(n)}}})[F.a]=function(){return this},t},i}(function(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++){var i=e[r];"function"==typeof t[i]&&(n[i]=t[i])}var o,a=Object.keys(n);try{!function(t){Object.keys(t).forEach(function(e){var n=t[e];if(void 0===n(void 0,{type:D.INIT}))throw new Error('Reducer "'+e+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:D.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+e+"\" returned undefined when probed with a random type. Don't try to handle "+D.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(t){o=t}return function(t,e){if(void 0===t&&(t={}),o)throw o;for(var r=!1,i={},u=0;u<a.length;u++){var l=a[u],c=n[l],s=t[l],f=c(s,e);if(void 0===f){var d=I(l,e);throw new Error(d)}i[l]=f,r=r||f!==s}return r?i:t}}({greetings:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:_t,e=arguments.length>1?arguments[1]:void 0;switch(e.type){case"API_REQUEST_START":return St({},t,{requestRunning:!0,requestDescription:e.description,error:null});case"API_REQUEST_SUCCESS":return St({},t,{requestRunning:!1,error:null});case"SET_GREETINGS":return St({},t,{greetings:e.greetings});case"API_REQUEST_FAILURE":return St({},t,{requestRunning:!1,error:e.error});case"ADD_GREETING":return St({},t,{greetings:[].concat(Mt(t.greetings),[e.greeting])})}return t},filter:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=arguments.length>1?arguments[1]:void 0;switch(e.type){case"SET_FILTER":var n=e.filter;return t===n?null:n;default:return t}},mode:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"MODE_MASTER",e=arguments.length>1?arguments[1]:void 0;switch(e.type){case"SET_MODE":return e.mode}return t}}),(window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({trace:!0})||B)(function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return function(){var n=t.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},i={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},o=e.map(function(t){return t(i)});return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?W(n,!0).forEach(function(e){z(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):W(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}({},n,{dispatch:r=B.apply(void 0,o)(n.dispatch)})}}}(kt)));function Tt(t){return(Tt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function At(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Pt(t,e){return!e||"object"!==Tt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Nt(t){return(Nt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Ot(t,e){return(Ot=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Ft(t){var e=t.msg,n=t.onRetry;return i.a.createElement("div",null,i.a.createElement("h1",null,"An error occured!"),i.a.createElement("pre",null,e),i.a.createElement("button",{onClick:n},"Try again"))}var Lt=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=Pt(this,Nt(e).call(this,t))).state={},n}var n,r,o;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ot(t,e)}(e,i.a.Component),n=e,o=[{key:"getDerivedStateFromError",value:function(t){return{error:t.toString()}}}],(r=[{key:"componentDidCatch",value:function(t,e){console.error("uups... we caught an error",t,e)}},{key:"render",value:function(){var t=this;return this.state.error?i.a.createElement(Ft,{msg:this.state.error,onRetry:function(){return t.setState({error:null})}}):this.props.children}}])&&At(n.prototype,r),o&&At(n,o),e}();var Dt=function(t){return{type:"SET_FILTER",filter:t}},Rt=function(t,e){return e?t.filter(function(t){return t.name===e}):t},It=function(t){var e=t.reduce(function(t,e){var n=e.name;return t[n]?t[n]=t[n]+1:t[n]=1,t},{});return Object.entries(e).map(function(t){return{label:t[0],value:t[1]}})};function jt(t){var e=t.greeting,n=t.onRowClicked;return i.a.createElement("tr",{onClick:function(){return n(e)}},i.a.createElement("td",null,e.name),i.a.createElement("td",null,e.greeting))}function zt(t){var e=t.filter,n=t.setFilter;return e?i.a.createElement("div",{className:"FilterPanel"},"(Shown are greetings for ",i.a.createElement("b",null,e),". ",i.a.createElement("a",{onClick:function(){return n(null)}},"Reset Filter"),")"):i.a.createElement("div",{className:"FilterPanel"},"(All greetings are shown. Click a row to filter)")}function Wt(t){var e=t.onAddClick,n=vt(),r=bt(function(t){return{greetings:t.greetings.greetings,filter:t.filter}}),o=r.greetings,a=r.filter;function u(t){n(Dt(t))}var l=Rt(o,a).map(function(t){return i.a.createElement(jt,{key:t.id,greeting:t,onRowClicked:function(t){return u(t.name)}})});return i.a.createElement("div",null,i.a.createElement("table",{className:"SelectableTable"},i.a.createElement("thead",null,i.a.createElement("tr",null,i.a.createElement("th",null,"Name"),i.a.createElement("th",null,"Greeting"))),i.a.createElement("tbody",null,l)),i.a.createElement(zt,{filter:a,setFilter:u}),i.a.createElement("button",{onClick:e},"Add"))}function Bt(){return(Bt=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function Ut(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Vt(t,e){var n=Ut(i.a.useState(e||""),2),r=n[0],o=n[1];return[{placeholder:t,name:t.toLowerCase(),onChange:function(t){return o(t.target.value)},value:r},function(){o("")}]}function Ht(t){var e=Ut(Vt("Name",t.initialName),2),n=e[0],r=e[1],o=Ut(Vt("Greeting",t.initialGreeting),2),a=o[0],u=o[1],l=i.a.useRef(),c=!(n.value&&a.value);return i.a.createElement("div",null,i.a.createElement("input",Bt({},n,{ref:l})),i.a.createElement("input",a),i.a.createElement("button",{onClick:function(){r(),u(),l.current.focus()}},"Clear"),i.a.createElement("button",{disabled:c,onClick:function(){t.onSave({name:n.value,greeting:a.value})}},"Save"))}function qt(t,e,n,r,i,o,a){try{var u=t[o](a),l=u.value}catch(t){return void n(t)}u.done?e(l):Promise.resolve(l).then(r,i)}function Yt(t){return function(){var e=this,n=arguments;return new Promise(function(r,i){var o=t.apply(e,n);function a(t){qt(o,r,i,a,u,"next",t)}function u(t){qt(o,r,i,a,u,"throw",t)}a(void 0)})}}var Gt="http://localhost:7000/greetings?slow";function $t(t){return{type:"API_REQUEST_START",description:t}}function Xt(t){return{type:"API_REQUEST_FAILURE",error:t}}function Kt(){return Zt.apply(this,arguments)}function Zt(){return(Zt=Yt(regeneratorRuntime.mark(function t(){var e;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch(Gt);case 2:if((e=t.sent).ok){t.next=5;break}throw new Error(e.statusText);case 5:return t.abrupt("return",e.json());case 6:case"end":return t.stop()}},t)}))).apply(this,arguments)}function Qt(){return function(){var t=Yt(regeneratorRuntime.mark(function t(e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:e($t("Loading")),Kt(Gt).then(function(t){return e((n=t,function(t){t({type:"SET_GREETINGS",greetings:n}),t({type:"API_REQUEST_SUCCESS"})}));var n},function(t){return e(Xt(t))});case 2:case"end":return t.stop()}},t)}));return function(e){return t.apply(this,arguments)}}()}function Jt(t){return te.apply(this,arguments)}function te(){return(te=Yt(regeneratorRuntime.mark(function t(e){var n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch(Gt,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(e)});case 2:if(201===(n=t.sent).status){t.next=5;break}throw new Error("Invalid status code: "+n.status);case 5:return t.abrupt("return",n.json());case 6:case"end":return t.stop()}},t)}))).apply(this,arguments)}function ee(t){return function(e){e({type:"API_REQUEST_SUCCESS"}),e({type:"ADD_GREETING",greeting:t})}}function ne(t){return function(){var e=Yt(regeneratorRuntime.mark(function e(n){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n($t("Saving")),e.abrupt("return",Jt(t).then(function(t){return n(ee(t))},function(t){return n(Xt(t))}));case 2:case"end":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}()}function re(t,e,n,r,i,o,a){try{var u=t[o](a),l=u.value}catch(t){return void n(t)}u.done?e(l):Promise.resolve(l).then(r,i)}var ie="MODE_MASTER";function oe(){var t=vt();function e(){var n;return n=regeneratorRuntime.mark(function e(n){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t(ne(n));case 2:t({type:"SET_MODE",mode:"MODE_MASTER"});case 3:case"end":return e.stop()}},e)}),(e=function(){var t=this,e=arguments;return new Promise(function(r,i){var o=n.apply(t,e);function a(t){re(o,r,i,a,u,"next",t)}function u(t){re(o,r,i,a,u,"throw",t)}a(void 0)})}).apply(this,arguments)}return bt(function(t){return t.mode})===ie?i.a.createElement(Wt,{onAddClick:function(){t({type:"SET_MODE",mode:"MODE_DETAIL"})}}):i.a.createElement(Ht,{onSave:function(t){return e.apply(this,arguments)}})}function ae(){var t=bt(function(t){return{greetings:t.greetings.greetings,filter:t.filter}}),e=t.greetings,n=t.filter,r=e.length,o=Rt(e,n).length;return i.a.createElement("div",{className:"Counter"},"Showing ",o," of ",r," Greetings")}var ue=n(92),le=n.n(ue),ce=n(95),se=n.n(ce);function fe(){var t=i.a.useRef(),e=i.a.useRef(),n=i.a.useRef(),r=vt(),o=bt(function(t){return t.greetings.greetings}),a=It(o);function u(t){var e=t.data.label;r(Dt(e))}i.a.useEffect(function(){n.current?t.current&&t.current.datum(a).call(n.current):se.a.addGraph(function(){var r=se.a.models.pieChart().x(function(t){return t.label}).y(function(t){return t.value}).showLabels(!0);return r.legend.updateState(!1),t.current=le.a.select(e.current),t.current.datum(a).call(r),n.current=r,r.pie.dispatch.on("elementClick",u),r})},[a]);return i.a.createElement("svg",{style:{height:"500px",width:"600px"},className:"with-3d-shadow with-transitions",ref:e})}function de(t){var e=t.label;return i.a.createElement(i.a.Fragment,null,i.a.createElement("div",{style:{textAlign:"center"}},i.a.createElement("h1",null,e)),i.a.createElement("div",{className:"Spinner"},i.a.createElement("div",{className:"bounce bounce1"}),i.a.createElement("div",{className:"bounce bounce2"}),i.a.createElement("div",{className:"bounce bounce3"})))}var pe=document.getElementById("mount");a.a.render(i.a.createElement(g,{store:Ct},i.a.createElement(Lt,null,i.a.createElement(function(){var t=vt(),e=bt(function(t){return t.greetings.requestRunning}),n=bt(function(t){return t.greetings.requestDescription}),r=bt(function(t){return t.greetings.error});return i.a.useEffect(function(){t(Qt())},[t]),r?i.a.createElement("div",{className:"Main"},i.a.createElement("div",{className:"Title"},i.a.createElement("h1",null,"Greeting App")),i.a.createElement("h1",null,"Error while loading data!"),i.a.createElement("p",null,r.toString()),i.a.createElement("button",{onClick:function(){return t(Qt())}},"Try again")):e?i.a.createElement("div",{className:"Main"},i.a.createElement("div",{className:"Title"},i.a.createElement("h1",null,"Greeting App")),i.a.createElement(de,{label:n})):i.a.createElement("div",{className:"Main"},i.a.createElement("div",{className:"Title"},i.a.createElement("h1",null,"Greeting App"),i.a.createElement(ae,null)),i.a.createElement("div",{className:"Left"},i.a.createElement(oe,null)),i.a.createElement("div",{className:"Right"},i.a.createElement(fe,null)))},null))),pe)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,