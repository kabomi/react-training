!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/dist",n(n.s=131)}([function(e,t,n){var r=n(2),o=n(8),i=n(15),u=n(12),a=n(18),l=function(e,t,n){var c,s,f,p,d=e&l.F,h=e&l.G,v=e&l.S,y=e&l.P,m=e&l.B,g=h?r:v?r[t]||(r[t]={}):(r[t]||{}).prototype,b=h?o:o[t]||(o[t]={}),w=b.prototype||(b.prototype={});for(c in h&&(n=t),n)f=((s=!d&&g&&void 0!==g[c])?g:n)[c],p=m&&s?a(f,r):y&&"function"==typeof f?a(Function.call,f):f,g&&u(g,c,f,e&l.U),b[c]!=f&&i(b,c,p),y&&w[c]!=f&&(w[c]=f)};r.core=o,l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,e.exports=l},function(e,t,n){"use strict";e.exports=n(318)},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(5);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var r=n(51)("wks"),o=n(31),i=n(2).Symbol,u="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=u&&i[e]||(u?i:o)("Symbol."+e))}).store=r},function(e,t,n){var r=n(20),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t){var n=e.exports={version:"2.6.6"};"number"==typeof __e&&(__e=n)},function(e,t,n){e.exports=!n(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(4),o=n(95),i=n(28),u=Object.defineProperty;t.f=n(9)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return u(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(25);e.exports=function(e){return Object(r(e))}},function(e,t,n){var r=n(2),o=n(15),i=n(14),u=n(31)("src"),a=n(136),l=(""+a).split("toString");n(8).inspectSource=function(e){return a.call(e)},(e.exports=function(e,t,n,a){var c="function"==typeof n;c&&(i(n,"name")||o(n,"name",t)),e[t]!==n&&(c&&(i(n,u)||o(n,u,e[t]?""+e[t]:l.join(String(t)))),e===r?e[t]=n:a?e[t]?e[t]=n:o(e,t,n):(delete e[t],o(e,t,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||a.call(this)})},function(e,t,n){var r=n(0),o=n(3),i=n(25),u=/"/g,a=function(e,t,n,r){var o=String(i(e)),a="<"+t;return""!==n&&(a+=" "+n+'="'+String(r).replace(u,"&quot;")+'"'),a+">"+o+"</"+t+">"};e.exports=function(e,t){var n={};n[e]=t(a),r(r.P+r.F*o(function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3}),"String",n)}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(10),o=n(30);e.exports=n(9)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(47),o=n(25);e.exports=function(e){return r(o(e))}},function(e,t,n){"use strict";var r=n(3);e.exports=function(e,t){return!!e&&r(function(){t?e.call(null,function(){},1):e.call(null)})}},function(e,t,n){var r=n(19);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(48),o=n(30),i=n(16),u=n(28),a=n(14),l=n(95),c=Object.getOwnPropertyDescriptor;t.f=n(9)?c:function(e,t){if(e=i(e),t=u(t,!0),l)try{return c(e,t)}catch(e){}if(a(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t,n){var r=n(0),o=n(8),i=n(3);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],u={};u[e]=t(n),r(r.S+r.F*i(function(){n(1)}),"Object",u)}},function(e,t,n){var r=n(18),o=n(47),i=n(11),u=n(7),a=n(111);e.exports=function(e,t){var n=1==e,l=2==e,c=3==e,s=4==e,f=6==e,p=5==e||f,d=t||a;return function(t,a,h){for(var v,y,m=i(t),g=o(m),b=r(a,h,3),w=u(g.length),x=0,S=n?d(t,w):l?d(t,0):void 0;w>x;x++)if((p||x in g)&&(y=b(v=g[x],x,m),e))if(n)S[x]=y;else if(y)switch(e){case 3:return!0;case 5:return v;case 6:return x;case 2:S.push(v)}else if(s)return!1;return f?-1:c||s?s:S}}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){"use strict";if(n(9)){var r=n(32),o=n(2),i=n(3),u=n(0),a=n(62),l=n(88),c=n(18),s=n(45),f=n(30),p=n(15),d=n(46),h=n(20),v=n(7),y=n(122),m=n(34),g=n(28),b=n(14),w=n(49),x=n(5),S=n(11),E=n(80),_=n(35),k=n(37),T=n(36).f,P=n(82),C=n(31),O=n(6),N=n(23),M=n(52),R=n(50),I=n(84),j=n(43),F=n(55),A=n(44),D=n(83),L=n(113),U=n(10),z=n(21),W=U.f,V=z.f,B=o.RangeError,$=o.TypeError,G=o.Uint8Array,H=Array.prototype,q=l.ArrayBuffer,K=l.DataView,Q=N(0),Y=N(2),X=N(3),J=N(4),Z=N(5),ee=N(6),te=M(!0),ne=M(!1),re=I.values,oe=I.keys,ie=I.entries,ue=H.lastIndexOf,ae=H.reduce,le=H.reduceRight,ce=H.join,se=H.sort,fe=H.slice,pe=H.toString,de=H.toLocaleString,he=O("iterator"),ve=O("toStringTag"),ye=C("typed_constructor"),me=C("def_constructor"),ge=a.CONSTR,be=a.TYPED,we=a.VIEW,xe=N(1,function(e,t){return Te(R(e,e[me]),t)}),Se=i(function(){return 1===new G(new Uint16Array([1]).buffer)[0]}),Ee=!!G&&!!G.prototype.set&&i(function(){new G(1).set({})}),_e=function(e,t){var n=h(e);if(n<0||n%t)throw B("Wrong offset!");return n},ke=function(e){if(x(e)&&be in e)return e;throw $(e+" is not a typed array!")},Te=function(e,t){if(!(x(e)&&ye in e))throw $("It is not a typed array constructor!");return new e(t)},Pe=function(e,t){return Ce(R(e,e[me]),t)},Ce=function(e,t){for(var n=0,r=t.length,o=Te(e,r);r>n;)o[n]=t[n++];return o},Oe=function(e,t,n){W(e,t,{get:function(){return this._d[n]}})},Ne=function(e){var t,n,r,o,i,u,a=S(e),l=arguments.length,s=l>1?arguments[1]:void 0,f=void 0!==s,p=P(a);if(null!=p&&!E(p)){for(u=p.call(a),r=[],t=0;!(i=u.next()).done;t++)r.push(i.value);a=r}for(f&&l>2&&(s=c(s,arguments[2],2)),t=0,n=v(a.length),o=Te(this,n);n>t;t++)o[t]=f?s(a[t],t):a[t];return o},Me=function(){for(var e=0,t=arguments.length,n=Te(this,t);t>e;)n[e]=arguments[e++];return n},Re=!!G&&i(function(){de.call(new G(1))}),Ie=function(){return de.apply(Re?fe.call(ke(this)):ke(this),arguments)},je={copyWithin:function(e,t){return L.call(ke(this),e,t,arguments.length>2?arguments[2]:void 0)},every:function(e){return J(ke(this),e,arguments.length>1?arguments[1]:void 0)},fill:function(e){return D.apply(ke(this),arguments)},filter:function(e){return Pe(this,Y(ke(this),e,arguments.length>1?arguments[1]:void 0))},find:function(e){return Z(ke(this),e,arguments.length>1?arguments[1]:void 0)},findIndex:function(e){return ee(ke(this),e,arguments.length>1?arguments[1]:void 0)},forEach:function(e){Q(ke(this),e,arguments.length>1?arguments[1]:void 0)},indexOf:function(e){return ne(ke(this),e,arguments.length>1?arguments[1]:void 0)},includes:function(e){return te(ke(this),e,arguments.length>1?arguments[1]:void 0)},join:function(e){return ce.apply(ke(this),arguments)},lastIndexOf:function(e){return ue.apply(ke(this),arguments)},map:function(e){return xe(ke(this),e,arguments.length>1?arguments[1]:void 0)},reduce:function(e){return ae.apply(ke(this),arguments)},reduceRight:function(e){return le.apply(ke(this),arguments)},reverse:function(){for(var e,t=ke(this).length,n=Math.floor(t/2),r=0;r<n;)e=this[r],this[r++]=this[--t],this[t]=e;return this},some:function(e){return X(ke(this),e,arguments.length>1?arguments[1]:void 0)},sort:function(e){return se.call(ke(this),e)},subarray:function(e,t){var n=ke(this),r=n.length,o=m(e,r);return new(R(n,n[me]))(n.buffer,n.byteOffset+o*n.BYTES_PER_ELEMENT,v((void 0===t?r:m(t,r))-o))}},Fe=function(e,t){return Pe(this,fe.call(ke(this),e,t))},Ae=function(e){ke(this);var t=_e(arguments[1],1),n=this.length,r=S(e),o=v(r.length),i=0;if(o+t>n)throw B("Wrong length!");for(;i<o;)this[t+i]=r[i++]},De={entries:function(){return ie.call(ke(this))},keys:function(){return oe.call(ke(this))},values:function(){return re.call(ke(this))}},Le=function(e,t){return x(e)&&e[be]&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},Ue=function(e,t){return Le(e,t=g(t,!0))?f(2,e[t]):V(e,t)},ze=function(e,t,n){return!(Le(e,t=g(t,!0))&&x(n)&&b(n,"value"))||b(n,"get")||b(n,"set")||n.configurable||b(n,"writable")&&!n.writable||b(n,"enumerable")&&!n.enumerable?W(e,t,n):(e[t]=n.value,e)};ge||(z.f=Ue,U.f=ze),u(u.S+u.F*!ge,"Object",{getOwnPropertyDescriptor:Ue,defineProperty:ze}),i(function(){pe.call({})})&&(pe=de=function(){return ce.call(this)});var We=d({},je);d(We,De),p(We,he,De.values),d(We,{slice:Fe,set:Ae,constructor:function(){},toString:pe,toLocaleString:Ie}),Oe(We,"buffer","b"),Oe(We,"byteOffset","o"),Oe(We,"byteLength","l"),Oe(We,"length","e"),W(We,ve,{get:function(){return this[be]}}),e.exports=function(e,t,n,l){var c=e+((l=!!l)?"Clamped":"")+"Array",f="get"+e,d="set"+e,h=o[c],m=h||{},g=h&&k(h),b=!h||!a.ABV,S={},E=h&&h.prototype,P=function(e,n){W(e,n,{get:function(){return function(e,n){var r=e._d;return r.v[f](n*t+r.o,Se)}(this,n)},set:function(e){return function(e,n,r){var o=e._d;l&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[d](n*t+o.o,r,Se)}(this,n,e)},enumerable:!0})};b?(h=n(function(e,n,r,o){s(e,h,c,"_d");var i,u,a,l,f=0,d=0;if(x(n)){if(!(n instanceof q||"ArrayBuffer"==(l=w(n))||"SharedArrayBuffer"==l))return be in n?Ce(h,n):Ne.call(h,n);i=n,d=_e(r,t);var m=n.byteLength;if(void 0===o){if(m%t)throw B("Wrong length!");if((u=m-d)<0)throw B("Wrong length!")}else if((u=v(o)*t)+d>m)throw B("Wrong length!");a=u/t}else a=y(n),i=new q(u=a*t);for(p(e,"_d",{b:i,o:d,l:u,e:a,v:new K(i)});f<a;)P(e,f++)}),E=h.prototype=_(We),p(E,"constructor",h)):i(function(){h(1)})&&i(function(){new h(-1)})&&F(function(e){new h,new h(null),new h(1.5),new h(e)},!0)||(h=n(function(e,n,r,o){var i;return s(e,h,c),x(n)?n instanceof q||"ArrayBuffer"==(i=w(n))||"SharedArrayBuffer"==i?void 0!==o?new m(n,_e(r,t),o):void 0!==r?new m(n,_e(r,t)):new m(n):be in n?Ce(h,n):Ne.call(h,n):new m(y(n))}),Q(g!==Function.prototype?T(m).concat(T(g)):T(m),function(e){e in h||p(h,e,m[e])}),h.prototype=E,r||(E.constructor=h));var C=E[he],O=!!C&&("values"==C.name||null==C.name),N=De.values;p(h,ye,!0),p(E,be,c),p(E,we,!0),p(E,me,h),(l?new h(1)[ve]==c:ve in E)||W(E,ve,{get:function(){return c}}),S[c]=h,u(u.G+u.W+u.F*(h!=m),S),u(u.S,c,{BYTES_PER_ELEMENT:t}),u(u.S+u.F*i(function(){m.of.call(h,1)}),c,{from:Ne,of:Me}),"BYTES_PER_ELEMENT"in E||p(E,"BYTES_PER_ELEMENT",t),u(u.P,c,je),A(c),u(u.P+u.F*Ee,c,{set:Ae}),u(u.P+u.F*!O,c,De),r||E.toString==pe||(E.toString=pe),u(u.P+u.F*i(function(){new h(1).slice()}),c,{slice:Fe}),u(u.P+u.F*(i(function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()})||!i(function(){E.toLocaleString.call([1,2])})),c,{toLocaleString:Ie}),j[c]=O?C:N,r||O||p(E,he,N)}}else e.exports=function(){}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,u,a){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,u,a],s=0;(l=new Error(t.replace(/%s/g,function(){return c[s++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){var r=n(5);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(31)("meta"),o=n(5),i=n(14),u=n(10).f,a=0,l=Object.isExtensible||function(){return!0},c=!n(3)(function(){return l(Object.preventExtensions({}))}),s=function(e){u(e,r,{value:{i:"O"+ ++a,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,r)){if(!l(e))return"F";if(!t)return"E";s(e)}return e[r].i},getWeak:function(e,t){if(!i(e,r)){if(!l(e))return!0;if(!t)return!1;s(e)}return e[r].w},onFreeze:function(e){return c&&f.NEED&&l(e)&&!i(e,r)&&s(e),e}}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t){e.exports=!1},function(e,t,n){var r=n(97),o=n(67);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(20),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){var r=n(4),o=n(98),i=n(67),u=n(66)("IE_PROTO"),a=function(){},l=function(){var e,t=n(64)("iframe"),r=i.length;for(t.style.display="none",n(68).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),l=e.F;r--;)delete l.prototype[i[r]];return l()};e.exports=Object.create||function(e,t){var n;return null!==e?(a.prototype=r(e),n=new a,a.prototype=null,n[u]=e):n=l(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(97),o=n(67).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(14),o=n(11),i=n(66)("IE_PROTO"),u=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?u:null}},function(e,t,n){var r=n(6)("unscopables"),o=Array.prototype;null==o[r]&&n(15)(o,r,{}),e.exports=function(e){o[r][e]=!0}},function(e,t,n){var r=n(5);e.exports=function(e,t){if(!r(e)||e._t!==t)throw TypeError("Incompatible receiver, "+t+" required!");return e}},function(e,t,n){e.exports=n(322)()},function(e,t,n){var r=n(10).f,o=n(14),i=n(6)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t,n){var r=n(0),o=n(25),i=n(3),u=n(70),a="["+u+"]",l=RegExp("^"+a+a+"*"),c=RegExp(a+a+"*$"),s=function(e,t,n){var o={},a=i(function(){return!!u[e]()||"​"!="​"[e]()}),l=o[e]=a?t(f):u[e];n&&(o[n]=l),r(r.P+r.F*a,"String",o)},f=s.trim=function(e,t){return e=String(o(e)),1&t&&(e=e.replace(l,"")),2&t&&(e=e.replace(c,"")),e};e.exports=s},function(e,t){e.exports={}},function(e,t,n){"use strict";var r=n(2),o=n(10),i=n(9),u=n(6)("species");e.exports=function(e){var t=r[e];i&&t&&!t[u]&&o.f(t,u,{configurable:!0,get:function(){return this}})}},function(e,t){e.exports=function(e,t,n,r){if(!(e instanceof t)||void 0!==r&&r in e)throw TypeError(n+": incorrect invocation!");return e}},function(e,t,n){var r=n(12);e.exports=function(e,t,n){for(var o in t)r(e,o,t[o],n);return e}},function(e,t,n){var r=n(24);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){var r=n(24),o=n(6)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,u;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:i?r(t):"Object"==(u=r(t))&&"function"==typeof t.callee?"Arguments":u}},function(e,t,n){var r=n(4),o=n(19),i=n(6)("species");e.exports=function(e,t){var n,u=r(e).constructor;return void 0===u||null==(n=r(u)[i])?t:o(n)}},function(e,t,n){var r=n(8),o=n(2),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(32)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t,n){var r=n(16),o=n(7),i=n(34);e.exports=function(e){return function(t,n,u){var a,l=r(t),c=o(l.length),s=i(u,c);if(e&&n!=n){for(;c>s;)if((a=l[s++])!=a)return!0}else for(;c>s;s++)if((e||s in l)&&l[s]===n)return e||s||0;return!e&&-1}}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(24);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(6)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var i=[7],u=i[r]();u.next=function(){return{done:n=!0}},i[r]=function(){return u},e(i)}catch(e){}return n}},function(e,t,n){"use strict";var r=n(4);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){"use strict";var r=n(49),o=RegExp.prototype.exec;e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var i=n.call(e,t);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(e))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(e,t)}},function(e,t,n){"use strict";n(115);var r=n(12),o=n(15),i=n(3),u=n(25),a=n(6),l=n(85),c=a("species"),s=!i(function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}),f=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(e,t,n){var p=a(e),d=!i(function(){var t={};return t[p]=function(){return 7},7!=""[e](t)}),h=d?!i(function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[c]=function(){return n}),n[p](""),!t}):void 0;if(!d||!h||"replace"===e&&!s||"split"===e&&!f){var v=/./[p],y=n(u,p,""[e],function(e,t,n,r,o){return t.exec===l?d&&!o?{done:!0,value:v.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}}),m=y[0],g=y[1];r(String.prototype,e,m),o(RegExp.prototype,p,2==t?function(e,t){return g.call(e,this,t)}:function(e){return g.call(e,this)})}}},function(e,t,n){var r=n(18),o=n(110),i=n(80),u=n(4),a=n(7),l=n(82),c={},s={};(t=e.exports=function(e,t,n,f,p){var d,h,v,y,m=p?function(){return e}:l(e),g=r(n,f,t?2:1),b=0;if("function"!=typeof m)throw TypeError(e+" is not iterable!");if(i(m)){for(d=a(e.length);d>b;b++)if((y=t?g(u(h=e[b])[0],h[1]):g(e[b]))===c||y===s)return y}else for(v=m.call(e);!(h=v.next()).done;)if((y=o(v,g,h.value,t))===c||y===s)return y}).BREAK=c,t.RETURN=s},function(e,t,n){var r=n(2).navigator;e.exports=r&&r.userAgent||""},function(e,t,n){"use strict";var r=n(2),o=n(0),i=n(12),u=n(46),a=n(29),l=n(59),c=n(45),s=n(5),f=n(3),p=n(55),d=n(41),h=n(71);e.exports=function(e,t,n,v,y,m){var g=r[e],b=g,w=y?"set":"add",x=b&&b.prototype,S={},E=function(e){var t=x[e];i(x,e,"delete"==e?function(e){return!(m&&!s(e))&&t.call(this,0===e?0:e)}:"has"==e?function(e){return!(m&&!s(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return m&&!s(e)?void 0:t.call(this,0===e?0:e)}:"add"==e?function(e){return t.call(this,0===e?0:e),this}:function(e,n){return t.call(this,0===e?0:e,n),this})};if("function"==typeof b&&(m||x.forEach&&!f(function(){(new b).entries().next()}))){var _=new b,k=_[w](m?{}:-0,1)!=_,T=f(function(){_.has(1)}),P=p(function(e){new b(e)}),C=!m&&f(function(){for(var e=new b,t=5;t--;)e[w](t,t);return!e.has(-0)});P||((b=t(function(t,n){c(t,b,e);var r=h(new g,t,b);return null!=n&&l(n,y,r[w],r),r})).prototype=x,x.constructor=b),(T||C)&&(E("delete"),E("has"),y&&E("get")),(C||k)&&E(w),m&&x.clear&&delete x.clear}else b=v.getConstructor(t,e,y,w),u(b.prototype,n),a.NEED=!0;return d(b,e),S[e]=b,o(o.G+o.W+o.F*(b!=g),S),m||v.setStrong(b,e,y),b}},function(e,t,n){for(var r,o=n(2),i=n(15),u=n(31),a=u("typed_array"),l=u("view"),c=!(!o.ArrayBuffer||!o.DataView),s=c,f=0,p="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=o[p[f++]])?(i(r.prototype,a,!0),i(r.prototype,l,!0)):s=!1;e.exports={ABV:c,CONSTR:s,TYPED:a,VIEW:l}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(319)},function(e,t,n){var r=n(5),o=n(2).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){t.f=n(6)},function(e,t,n){var r=n(51)("keys"),o=n(31);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(2).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(5),o=n(4),i=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(18)(Function.call,n(21).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return i(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:i}},function(e,t){e.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(e,t,n){var r=n(5),o=n(69).set;e.exports=function(e,t,n){var i,u=t.constructor;return u!==n&&"function"==typeof u&&(i=u.prototype)!==n.prototype&&r(i)&&o&&o(e,i),e}},function(e,t,n){"use strict";var r=n(20),o=n(25);e.exports=function(e){var t=String(o(this)),n="",i=r(e);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(t+=t))1&i&&(n+=t);return n}},function(e,t){e.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},function(e,t){var n=Math.expm1;e.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(e){return 0==(e=+e)?e:e>-1e-6&&e<1e-6?e+e*e/2:Math.exp(e)-1}:n},function(e,t,n){var r=n(20),o=n(25);e.exports=function(e){return function(t,n){var i,u,a=String(o(t)),l=r(n),c=a.length;return l<0||l>=c?e?"":void 0:(i=a.charCodeAt(l))<55296||i>56319||l+1===c||(u=a.charCodeAt(l+1))<56320||u>57343?e?a.charAt(l):i:e?a.slice(l,l+2):u-56320+(i-55296<<10)+65536}}},function(e,t,n){"use strict";var r=n(32),o=n(0),i=n(12),u=n(15),a=n(43),l=n(109),c=n(41),s=n(37),f=n(6)("iterator"),p=!([].keys&&"next"in[].keys()),d=function(){return this};e.exports=function(e,t,n,h,v,y,m){l(n,t,h);var g,b,w,x=function(e){if(!p&&e in k)return k[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},S=t+" Iterator",E="values"==v,_=!1,k=e.prototype,T=k[f]||k["@@iterator"]||v&&k[v],P=T||x(v),C=v?E?x("entries"):P:void 0,O="Array"==t&&k.entries||T;if(O&&(w=s(O.call(new e)))!==Object.prototype&&w.next&&(c(w,S,!0),r||"function"==typeof w[f]||u(w,f,d)),E&&T&&"values"!==T.name&&(_=!0,P=function(){return T.call(this)}),r&&!m||!p&&!_&&k[f]||u(k,f,P),a[t]=P,a[S]=d,v)if(g={values:E?P:x("values"),keys:y?P:x("keys"),entries:C},m)for(b in g)b in k||i(k,b,g[b]);else o(o.P+o.F*(p||_),t,g);return g}},function(e,t,n){var r=n(78),o=n(25);e.exports=function(e,t,n){if(r(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(e))}},function(e,t,n){var r=n(5),o=n(24),i=n(6)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[i])?!!t:"RegExp"==o(e))}},function(e,t,n){var r=n(6)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[r]=!1,!"/./"[e](t)}catch(e){}}return!0}},function(e,t,n){var r=n(43),o=n(6)("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||i[o]===e)}},function(e,t,n){"use strict";var r=n(10),o=n(30);e.exports=function(e,t,n){t in e?r.f(e,t,o(0,n)):e[t]=n}},function(e,t,n){var r=n(49),o=n(6)("iterator"),i=n(43);e.exports=n(8).getIteratorMethod=function(e){if(null!=e)return e[o]||e["@@iterator"]||i[r(e)]}},function(e,t,n){"use strict";var r=n(11),o=n(34),i=n(7);e.exports=function(e){for(var t=r(this),n=i(t.length),u=arguments.length,a=o(u>1?arguments[1]:void 0,n),l=u>2?arguments[2]:void 0,c=void 0===l?n:o(l,n);c>a;)t[a++]=e;return t}},function(e,t,n){"use strict";var r=n(38),o=n(114),i=n(43),u=n(16);e.exports=n(76)(Array,"Array",function(e,t){this._t=u(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t,n){"use strict";var r,o,i=n(56),u=RegExp.prototype.exec,a=String.prototype.replace,l=u,c=(r=/a/,o=/b*/g,u.call(r,"a"),u.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),s=void 0!==/()??/.exec("")[1];(c||s)&&(l=function(e){var t,n,r,o,l=this;return s&&(n=new RegExp("^"+l.source+"$(?!\\s)",i.call(l))),c&&(t=l.lastIndex),r=u.call(l,e),c&&r&&(l.lastIndex=l.global?r.index+r[0].length:t),s&&r&&r.length>1&&a.call(r[0],n,function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)}),r}),e.exports=l},function(e,t,n){"use strict";var r=n(75)(!0);e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},function(e,t,n){var r,o,i,u=n(18),a=n(103),l=n(68),c=n(64),s=n(2),f=s.process,p=s.setImmediate,d=s.clearImmediate,h=s.MessageChannel,v=s.Dispatch,y=0,m={},g=function(){var e=+this;if(m.hasOwnProperty(e)){var t=m[e];delete m[e],t()}},b=function(e){g.call(e.data)};p&&d||(p=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return m[++y]=function(){a("function"==typeof e?e:Function(e),t)},r(y),y},d=function(e){delete m[e]},"process"==n(24)(f)?r=function(e){f.nextTick(u(g,e,1))}:v&&v.now?r=function(e){v.now(u(g,e,1))}:h?(i=(o=new h).port2,o.port1.onmessage=b,r=u(i.postMessage,i,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(r=function(e){s.postMessage(e+"","*")},s.addEventListener("message",b,!1)):r="onreadystatechange"in c("script")?function(e){l.appendChild(c("script")).onreadystatechange=function(){l.removeChild(this),g.call(e)}}:function(e){setTimeout(u(g,e,1),0)}),e.exports={set:p,clear:d}},function(e,t,n){"use strict";var r=n(2),o=n(9),i=n(32),u=n(62),a=n(15),l=n(46),c=n(3),s=n(45),f=n(20),p=n(7),d=n(122),h=n(36).f,v=n(10).f,y=n(83),m=n(41),g="prototype",b="Wrong index!",w=r.ArrayBuffer,x=r.DataView,S=r.Math,E=r.RangeError,_=r.Infinity,k=w,T=S.abs,P=S.pow,C=S.floor,O=S.log,N=S.LN2,M=o?"_b":"buffer",R=o?"_l":"byteLength",I=o?"_o":"byteOffset";function j(e,t,n){var r,o,i,u=new Array(n),a=8*n-t-1,l=(1<<a)-1,c=l>>1,s=23===t?P(2,-24)-P(2,-77):0,f=0,p=e<0||0===e&&1/e<0?1:0;for((e=T(e))!=e||e===_?(o=e!=e?1:0,r=l):(r=C(O(e)/N),e*(i=P(2,-r))<1&&(r--,i*=2),(e+=r+c>=1?s/i:s*P(2,1-c))*i>=2&&(r++,i/=2),r+c>=l?(o=0,r=l):r+c>=1?(o=(e*i-1)*P(2,t),r+=c):(o=e*P(2,c-1)*P(2,t),r=0));t>=8;u[f++]=255&o,o/=256,t-=8);for(r=r<<t|o,a+=t;a>0;u[f++]=255&r,r/=256,a-=8);return u[--f]|=128*p,u}function F(e,t,n){var r,o=8*n-t-1,i=(1<<o)-1,u=i>>1,a=o-7,l=n-1,c=e[l--],s=127&c;for(c>>=7;a>0;s=256*s+e[l],l--,a-=8);for(r=s&(1<<-a)-1,s>>=-a,a+=t;a>0;r=256*r+e[l],l--,a-=8);if(0===s)s=1-u;else{if(s===i)return r?NaN:c?-_:_;r+=P(2,t),s-=u}return(c?-1:1)*r*P(2,s-t)}function A(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function D(e){return[255&e]}function L(e){return[255&e,e>>8&255]}function U(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]}function z(e){return j(e,52,8)}function W(e){return j(e,23,4)}function V(e,t,n){v(e[g],t,{get:function(){return this[n]}})}function B(e,t,n,r){var o=d(+n);if(o+t>e[R])throw E(b);var i=e[M]._b,u=o+e[I],a=i.slice(u,u+t);return r?a:a.reverse()}function $(e,t,n,r,o,i){var u=d(+n);if(u+t>e[R])throw E(b);for(var a=e[M]._b,l=u+e[I],c=r(+o),s=0;s<t;s++)a[l+s]=c[i?s:t-s-1]}if(u.ABV){if(!c(function(){w(1)})||!c(function(){new w(-1)})||c(function(){return new w,new w(1.5),new w(NaN),"ArrayBuffer"!=w.name})){for(var G,H=(w=function(e){return s(this,w),new k(d(e))})[g]=k[g],q=h(k),K=0;q.length>K;)(G=q[K++])in w||a(w,G,k[G]);i||(H.constructor=w)}var Q=new x(new w(2)),Y=x[g].setInt8;Q.setInt8(0,2147483648),Q.setInt8(1,2147483649),!Q.getInt8(0)&&Q.getInt8(1)||l(x[g],{setInt8:function(e,t){Y.call(this,e,t<<24>>24)},setUint8:function(e,t){Y.call(this,e,t<<24>>24)}},!0)}else w=function(e){s(this,w,"ArrayBuffer");var t=d(e);this._b=y.call(new Array(t),0),this[R]=t},x=function(e,t,n){s(this,x,"DataView"),s(e,w,"DataView");var r=e[R],o=f(t);if(o<0||o>r)throw E("Wrong offset!");if(o+(n=void 0===n?r-o:p(n))>r)throw E("Wrong length!");this[M]=e,this[I]=o,this[R]=n},o&&(V(w,"byteLength","_l"),V(x,"buffer","_b"),V(x,"byteLength","_l"),V(x,"byteOffset","_o")),l(x[g],{getInt8:function(e){return B(this,1,e)[0]<<24>>24},getUint8:function(e){return B(this,1,e)[0]},getInt16:function(e){var t=B(this,2,e,arguments[1]);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=B(this,2,e,arguments[1]);return t[1]<<8|t[0]},getInt32:function(e){return A(B(this,4,e,arguments[1]))},getUint32:function(e){return A(B(this,4,e,arguments[1]))>>>0},getFloat32:function(e){return F(B(this,4,e,arguments[1]),23,4)},getFloat64:function(e){return F(B(this,8,e,arguments[1]),52,8)},setInt8:function(e,t){$(this,1,e,D,t)},setUint8:function(e,t){$(this,1,e,D,t)},setInt16:function(e,t){$(this,2,e,L,t,arguments[2])},setUint16:function(e,t){$(this,2,e,L,t,arguments[2])},setInt32:function(e,t){$(this,4,e,U,t,arguments[2])},setUint32:function(e,t){$(this,4,e,U,t,arguments[2])},setFloat32:function(e,t){$(this,4,e,W,t,arguments[2])},setFloat64:function(e,t){$(this,8,e,z,t,arguments[2])}});m(w,"ArrayBuffer"),m(x,"DataView"),a(x[g],u.VIEW,!0),t.ArrayBuffer=w,t.DataView=x},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){e.exports=!n(127)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t,n){"use strict";e.exports=n(324)},function(e,t,n){"use strict";var r=n(92),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},u={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},a={};function l(e){return r.isMemo(e)?u:a[e.$$typeof]||o}a[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=d(n);o&&o!==h&&e(t,o,r)}var u=s(n);f&&(u=u.concat(f(n)));for(var a=l(t),v=l(n),y=0;y<u.length;++y){var m=u[y];if(!(i[m]||r&&r[m]||v&&v[m]||a&&a[m])){var g=p(n,m);try{c(t,m,g)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";(function(e,r){var o,i=n(130);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var u=Object(i.a)(o);t.a=u}).call(this,n(129),n(325)(e))},function(e,t,n){e.exports=!n(9)&&!n(3)(function(){return 7!=Object.defineProperty(n(64)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(2),o=n(8),i=n(32),u=n(65),a=n(10).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||a(t,e,{value:u.f(e)})}},function(e,t,n){var r=n(14),o=n(16),i=n(52)(!1),u=n(66)("IE_PROTO");e.exports=function(e,t){var n,a=o(e),l=0,c=[];for(n in a)n!=u&&r(a,n)&&c.push(n);for(;t.length>l;)r(a,n=t[l++])&&(~i(c,n)||c.push(n));return c}},function(e,t,n){var r=n(10),o=n(4),i=n(33);e.exports=n(9)?Object.defineProperties:function(e,t){o(e);for(var n,u=i(t),a=u.length,l=0;a>l;)r.f(e,n=u[l++],t[n]);return e}},function(e,t,n){var r=n(16),o=n(36).f,i={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return u&&"[object Window]"==i.call(e)?function(e){try{return o(e)}catch(e){return u.slice()}}(e):o(r(e))}},function(e,t,n){"use strict";var r=n(9),o=n(33),i=n(53),u=n(48),a=n(11),l=n(47),c=Object.assign;e.exports=!c||n(3)(function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach(function(e){t[e]=e}),7!=c({},e)[n]||Object.keys(c({},t)).join("")!=r})?function(e,t){for(var n=a(e),c=arguments.length,s=1,f=i.f,p=u.f;c>s;)for(var d,h=l(arguments[s++]),v=f?o(h).concat(f(h)):o(h),y=v.length,m=0;y>m;)d=v[m++],r&&!p.call(h,d)||(n[d]=h[d]);return n}:c},function(e,t){e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},function(e,t,n){"use strict";var r=n(19),o=n(5),i=n(103),u=[].slice,a={};e.exports=Function.bind||function(e){var t=r(this),n=u.call(arguments,1),l=function(){var r=n.concat(u.call(arguments));return this instanceof l?function(e,t,n){if(!(t in a)){for(var r=[],o=0;o<t;o++)r[o]="a["+o+"]";a[t]=Function("F,a","return new F("+r.join(",")+")")}return a[t](e,n)}(t,r.length,r):i(t,r,e)};return o(t.prototype)&&(l.prototype=t.prototype),l}},function(e,t){e.exports=function(e,t,n){var r=void 0===n;switch(t.length){case 0:return r?e():e.call(n);case 1:return r?e(t[0]):e.call(n,t[0]);case 2:return r?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return r?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return r?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},function(e,t,n){var r=n(2).parseInt,o=n(42).trim,i=n(70),u=/^[-+]?0[xX]/;e.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(e,t){var n=o(String(e),3);return r(n,t>>>0||(u.test(n)?16:10))}:r},function(e,t,n){var r=n(2).parseFloat,o=n(42).trim;e.exports=1/r(n(70)+"-0")!=-1/0?function(e){var t=o(String(e),3),n=r(t);return 0===n&&"-"==t.charAt(0)?-0:n}:r},function(e,t,n){var r=n(24);e.exports=function(e,t){if("number"!=typeof e&&"Number"!=r(e))throw TypeError(t);return+e}},function(e,t,n){var r=n(5),o=Math.floor;e.exports=function(e){return!r(e)&&isFinite(e)&&o(e)===e}},function(e,t){e.exports=Math.log1p||function(e){return(e=+e)>-1e-8&&e<1e-8?e-e*e/2:Math.log(1+e)}},function(e,t,n){"use strict";var r=n(35),o=n(30),i=n(41),u={};n(15)(u,n(6)("iterator"),function(){return this}),e.exports=function(e,t,n){e.prototype=r(u,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){var r=n(4);e.exports=function(e,t,n,o){try{return o?t(r(n)[0],n[1]):t(n)}catch(t){var i=e.return;throw void 0!==i&&r(i.call(e)),t}}},function(e,t,n){var r=n(226);e.exports=function(e,t){return new(r(e))(t)}},function(e,t,n){var r=n(19),o=n(11),i=n(47),u=n(7);e.exports=function(e,t,n,a,l){r(t);var c=o(e),s=i(c),f=u(c.length),p=l?f-1:0,d=l?-1:1;if(n<2)for(;;){if(p in s){a=s[p],p+=d;break}if(p+=d,l?p<0:f<=p)throw TypeError("Reduce of empty array with no initial value")}for(;l?p>=0:f>p;p+=d)p in s&&(a=t(a,s[p],p,c));return a}},function(e,t,n){"use strict";var r=n(11),o=n(34),i=n(7);e.exports=[].copyWithin||function(e,t){var n=r(this),u=i(n.length),a=o(e,u),l=o(t,u),c=arguments.length>2?arguments[2]:void 0,s=Math.min((void 0===c?u:o(c,u))-l,u-a),f=1;for(l<a&&a<l+s&&(f=-1,l+=s-1,a+=s-1);s-- >0;)l in n?n[a]=n[l]:delete n[a],a+=f,l+=f;return n}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){"use strict";var r=n(85);n(0)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(e,t,n){n(9)&&"g"!=/./g.flags&&n(10).f(RegExp.prototype,"flags",{configurable:!0,get:n(56)})},function(e,t,n){"use strict";var r,o,i,u,a=n(32),l=n(2),c=n(18),s=n(49),f=n(0),p=n(5),d=n(19),h=n(45),v=n(59),y=n(50),m=n(87).set,g=n(246)(),b=n(118),w=n(247),x=n(60),S=n(119),E=l.TypeError,_=l.process,k=_&&_.versions,T=k&&k.v8||"",P=l.Promise,C="process"==s(_),O=function(){},N=o=b.f,M=!!function(){try{var e=P.resolve(1),t=(e.constructor={})[n(6)("species")]=function(e){e(O,O)};return(C||"function"==typeof PromiseRejectionEvent)&&e.then(O)instanceof t&&0!==T.indexOf("6.6")&&-1===x.indexOf("Chrome/66")}catch(e){}}(),R=function(e){var t;return!(!p(e)||"function"!=typeof(t=e.then))&&t},I=function(e,t){if(!e._n){e._n=!0;var n=e._c;g(function(){for(var r=e._v,o=1==e._s,i=0,u=function(t){var n,i,u,a=o?t.ok:t.fail,l=t.resolve,c=t.reject,s=t.domain;try{a?(o||(2==e._h&&A(e),e._h=1),!0===a?n=r:(s&&s.enter(),n=a(r),s&&(s.exit(),u=!0)),n===t.promise?c(E("Promise-chain cycle")):(i=R(n))?i.call(n,l,c):l(n)):c(r)}catch(e){s&&!u&&s.exit(),c(e)}};n.length>i;)u(n[i++]);e._c=[],e._n=!1,t&&!e._h&&j(e)})}},j=function(e){m.call(l,function(){var t,n,r,o=e._v,i=F(e);if(i&&(t=w(function(){C?_.emit("unhandledRejection",o,e):(n=l.onunhandledrejection)?n({promise:e,reason:o}):(r=l.console)&&r.error&&r.error("Unhandled promise rejection",o)}),e._h=C||F(e)?2:1),e._a=void 0,i&&t.e)throw t.v})},F=function(e){return 1!==e._h&&0===(e._a||e._c).length},A=function(e){m.call(l,function(){var t;C?_.emit("rejectionHandled",e):(t=l.onrejectionhandled)&&t({promise:e,reason:e._v})})},D=function(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),I(t,!0))},L=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw E("Promise can't be resolved itself");(t=R(e))?g(function(){var r={_w:n,_d:!1};try{t.call(e,c(L,r,1),c(D,r,1))}catch(e){D.call(r,e)}}):(n._v=e,n._s=1,I(n,!1))}catch(e){D.call({_w:n,_d:!1},e)}}};M||(P=function(e){h(this,P,"Promise","_h"),d(e),r.call(this);try{e(c(L,this,1),c(D,this,1))}catch(e){D.call(this,e)}},(r=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(46)(P.prototype,{then:function(e,t){var n=N(y(this,P));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=C?_.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&I(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),i=function(){var e=new r;this.promise=e,this.resolve=c(L,e,1),this.reject=c(D,e,1)},b.f=N=function(e){return e===P||e===u?new i(e):o(e)}),f(f.G+f.W+f.F*!M,{Promise:P}),n(41)(P,"Promise"),n(44)("Promise"),u=n(8).Promise,f(f.S+f.F*!M,"Promise",{reject:function(e){var t=N(this);return(0,t.reject)(e),t.promise}}),f(f.S+f.F*(a||!M),"Promise",{resolve:function(e){return S(a&&this===u?P:this,e)}}),f(f.S+f.F*!(M&&n(55)(function(e){P.all(e).catch(O)})),"Promise",{all:function(e){var t=this,n=N(t),r=n.resolve,o=n.reject,i=w(function(){var n=[],i=0,u=1;v(e,!1,function(e){var a=i++,l=!1;n.push(void 0),u++,t.resolve(e).then(function(e){l||(l=!0,n[a]=e,--u||r(n))},o)}),--u||r(n)});return i.e&&o(i.v),n.promise},race:function(e){var t=this,n=N(t),r=n.reject,o=w(function(){v(e,!1,function(e){t.resolve(e).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}})},function(e,t,n){"use strict";var r=n(19);function o(e){var t,n;this.promise=new e(function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r}),this.resolve=r(t),this.reject=r(n)}e.exports.f=function(e){return new o(e)}},function(e,t,n){var r=n(4),o=n(5),i=n(118);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},function(e,t,n){"use strict";var r=n(10).f,o=n(35),i=n(46),u=n(18),a=n(45),l=n(59),c=n(76),s=n(114),f=n(44),p=n(9),d=n(29).fastKey,h=n(39),v=p?"_s":"size",y=function(e,t){var n,r=d(t);if("F"!==r)return e._i[r];for(n=e._f;n;n=n.n)if(n.k==t)return n};e.exports={getConstructor:function(e,t,n,c){var s=e(function(e,r){a(e,s,t,"_i"),e._t=t,e._i=o(null),e._f=void 0,e._l=void 0,e[v]=0,null!=r&&l(r,n,e[c],e)});return i(s.prototype,{clear:function(){for(var e=h(this,t),n=e._i,r=e._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];e._f=e._l=void 0,e[v]=0},delete:function(e){var n=h(this,t),r=y(n,e);if(r){var o=r.n,i=r.p;delete n._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),n._f==r&&(n._f=o),n._l==r&&(n._l=i),n[v]--}return!!r},forEach:function(e){h(this,t);for(var n,r=u(e,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(e){return!!y(h(this,t),e)}}),p&&r(s.prototype,"size",{get:function(){return h(this,t)[v]}}),s},def:function(e,t,n){var r,o,i=y(e,t);return i?i.v=n:(e._l=i={i:o=d(t,!0),k:t,v:n,p:r=e._l,n:void 0,r:!1},e._f||(e._f=i),r&&(r.n=i),e[v]++,"F"!==o&&(e._i[o]=i)),e},getEntry:y,setStrong:function(e,t,n){c(e,t,function(e,n){this._t=h(e,t),this._k=n,this._l=void 0},function(){for(var e=this._k,t=this._l;t&&t.r;)t=t.p;return this._t&&(this._l=t=t?t.n:this._t._f)?s(0,"keys"==e?t.k:"values"==e?t.v:[t.k,t.v]):(this._t=void 0,s(1))},n?"entries":"values",!n,!0),f(t)}}},function(e,t,n){"use strict";var r=n(46),o=n(29).getWeak,i=n(4),u=n(5),a=n(45),l=n(59),c=n(23),s=n(14),f=n(39),p=c(5),d=c(6),h=0,v=function(e){return e._l||(e._l=new y)},y=function(){this.a=[]},m=function(e,t){return p(e.a,function(e){return e[0]===t})};y.prototype={get:function(e){var t=m(this,e);if(t)return t[1]},has:function(e){return!!m(this,e)},set:function(e,t){var n=m(this,e);n?n[1]=t:this.a.push([e,t])},delete:function(e){var t=d(this.a,function(t){return t[0]===e});return~t&&this.a.splice(t,1),!!~t}},e.exports={getConstructor:function(e,t,n,i){var c=e(function(e,r){a(e,c,t,"_i"),e._t=t,e._i=h++,e._l=void 0,null!=r&&l(r,n,e[i],e)});return r(c.prototype,{delete:function(e){if(!u(e))return!1;var n=o(e);return!0===n?v(f(this,t)).delete(e):n&&s(n,this._i)&&delete n[this._i]},has:function(e){if(!u(e))return!1;var n=o(e);return!0===n?v(f(this,t)).has(e):n&&s(n,this._i)}}),c},def:function(e,t,n){var r=o(i(t),!0);return!0===r?v(e).set(t,n):r[e._i]=n,e},ufstore:v}},function(e,t,n){var r=n(20),o=n(7);e.exports=function(e){if(void 0===e)return 0;var t=r(e),n=o(t);if(t!==n)throw RangeError("Wrong length!");return n}},function(e,t,n){var r=n(36),o=n(53),i=n(4),u=n(2).Reflect;e.exports=u&&u.ownKeys||function(e){var t=r.f(i(e)),n=o.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(7),o=n(72),i=n(25);e.exports=function(e,t,n,u){var a=String(i(e)),l=a.length,c=void 0===n?" ":String(n),s=r(t);if(s<=l||""==c)return a;var f=s-l,p=o.call(c,Math.ceil(f/c.length));return p.length>f&&(p=p.slice(0,f)),u?p+a:a+p}},function(e,t,n){var r=n(9),o=n(33),i=n(16),u=n(48).f;e.exports=function(e){return function(t){for(var n,a=i(t),l=o(a),c=l.length,s=0,f=[];c>s;)n=l[s++],r&&!u.call(a,n)||f.push(e?[n,a[n]]:a[n]);return f}}},function(e,t){var n=e.exports={version:"2.6.6"};"number"==typeof __e&&(__e=n)},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,a=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))o.call(n,c)&&(a[c]=n[c]);if(r){u=r(n);for(var s=0;s<u.length;s++)i.call(n,u[s])&&(a[u[s]]=n[u[s]])}}return a}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){n(132),e.exports=n(326)},function(e,t,n){"use strict";n(133);var r,o=(r=n(305))&&r.__esModule?r:{default:r};o.default._babelPolyfill&&"undefined"!=typeof console&&console.warn&&console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."),o.default._babelPolyfill=!0},function(e,t,n){"use strict";n(134),n(277),n(279),n(282),n(284),n(286),n(288),n(290),n(292),n(294),n(296),n(298),n(300),n(304)},function(e,t,n){n(135),n(138),n(139),n(140),n(141),n(142),n(143),n(144),n(145),n(146),n(147),n(148),n(149),n(150),n(151),n(152),n(153),n(154),n(155),n(156),n(157),n(158),n(159),n(160),n(161),n(162),n(163),n(164),n(165),n(166),n(167),n(168),n(169),n(170),n(171),n(172),n(173),n(174),n(175),n(176),n(177),n(178),n(179),n(181),n(182),n(183),n(184),n(185),n(186),n(187),n(188),n(189),n(190),n(191),n(192),n(193),n(194),n(195),n(196),n(197),n(198),n(199),n(200),n(201),n(202),n(203),n(204),n(205),n(206),n(207),n(208),n(209),n(210),n(211),n(212),n(213),n(214),n(216),n(217),n(219),n(220),n(221),n(222),n(223),n(224),n(225),n(227),n(228),n(229),n(230),n(231),n(232),n(233),n(234),n(235),n(236),n(237),n(238),n(239),n(84),n(240),n(115),n(241),n(116),n(242),n(243),n(244),n(245),n(117),n(248),n(249),n(250),n(251),n(252),n(253),n(254),n(255),n(256),n(257),n(258),n(259),n(260),n(261),n(262),n(263),n(264),n(265),n(266),n(267),n(268),n(269),n(270),n(271),n(272),n(273),n(274),n(275),n(276),e.exports=n(8)},function(e,t,n){"use strict";var r=n(2),o=n(14),i=n(9),u=n(0),a=n(12),l=n(29).KEY,c=n(3),s=n(51),f=n(41),p=n(31),d=n(6),h=n(65),v=n(96),y=n(137),m=n(54),g=n(4),b=n(5),w=n(11),x=n(16),S=n(28),E=n(30),_=n(35),k=n(99),T=n(21),P=n(53),C=n(10),O=n(33),N=T.f,M=C.f,R=k.f,I=r.Symbol,j=r.JSON,F=j&&j.stringify,A=d("_hidden"),D=d("toPrimitive"),L={}.propertyIsEnumerable,U=s("symbol-registry"),z=s("symbols"),W=s("op-symbols"),V=Object.prototype,B="function"==typeof I,$=r.QObject,G=!$||!$.prototype||!$.prototype.findChild,H=i&&c(function(){return 7!=_(M({},"a",{get:function(){return M(this,"a",{value:7}).a}})).a})?function(e,t,n){var r=N(V,t);r&&delete V[t],M(e,t,n),r&&e!==V&&M(V,t,r)}:M,q=function(e){var t=z[e]=_(I.prototype);return t._k=e,t},K=B&&"symbol"==typeof I.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof I},Q=function(e,t,n){return e===V&&Q(W,t,n),g(e),t=S(t,!0),g(n),o(z,t)?(n.enumerable?(o(e,A)&&e[A][t]&&(e[A][t]=!1),n=_(n,{enumerable:E(0,!1)})):(o(e,A)||M(e,A,E(1,{})),e[A][t]=!0),H(e,t,n)):M(e,t,n)},Y=function(e,t){g(e);for(var n,r=y(t=x(t)),o=0,i=r.length;i>o;)Q(e,n=r[o++],t[n]);return e},X=function(e){var t=L.call(this,e=S(e,!0));return!(this===V&&o(z,e)&&!o(W,e))&&(!(t||!o(this,e)||!o(z,e)||o(this,A)&&this[A][e])||t)},J=function(e,t){if(e=x(e),t=S(t,!0),e!==V||!o(z,t)||o(W,t)){var n=N(e,t);return!n||!o(z,t)||o(e,A)&&e[A][t]||(n.enumerable=!0),n}},Z=function(e){for(var t,n=R(x(e)),r=[],i=0;n.length>i;)o(z,t=n[i++])||t==A||t==l||r.push(t);return r},ee=function(e){for(var t,n=e===V,r=R(n?W:x(e)),i=[],u=0;r.length>u;)!o(z,t=r[u++])||n&&!o(V,t)||i.push(z[t]);return i};B||(a((I=function(){if(this instanceof I)throw TypeError("Symbol is not a constructor!");var e=p(arguments.length>0?arguments[0]:void 0),t=function(n){this===V&&t.call(W,n),o(this,A)&&o(this[A],e)&&(this[A][e]=!1),H(this,e,E(1,n))};return i&&G&&H(V,e,{configurable:!0,set:t}),q(e)}).prototype,"toString",function(){return this._k}),T.f=J,C.f=Q,n(36).f=k.f=Z,n(48).f=X,P.f=ee,i&&!n(32)&&a(V,"propertyIsEnumerable",X,!0),h.f=function(e){return q(d(e))}),u(u.G+u.W+u.F*!B,{Symbol:I});for(var te="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ne=0;te.length>ne;)d(te[ne++]);for(var re=O(d.store),oe=0;re.length>oe;)v(re[oe++]);u(u.S+u.F*!B,"Symbol",{for:function(e){return o(U,e+="")?U[e]:U[e]=I(e)},keyFor:function(e){if(!K(e))throw TypeError(e+" is not a symbol!");for(var t in U)if(U[t]===e)return t},useSetter:function(){G=!0},useSimple:function(){G=!1}}),u(u.S+u.F*!B,"Object",{create:function(e,t){return void 0===t?_(e):Y(_(e),t)},defineProperty:Q,defineProperties:Y,getOwnPropertyDescriptor:J,getOwnPropertyNames:Z,getOwnPropertySymbols:ee});var ie=c(function(){P.f(1)});u(u.S+u.F*ie,"Object",{getOwnPropertySymbols:function(e){return P.f(w(e))}}),j&&u(u.S+u.F*(!B||c(function(){var e=I();return"[null]"!=F([e])||"{}"!=F({a:e})||"{}"!=F(Object(e))})),"JSON",{stringify:function(e){for(var t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=t=r[1],(b(t)||void 0!==e)&&!K(e))return m(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!K(t))return t}),r[1]=t,F.apply(j,r)}}),I.prototype[D]||n(15)(I.prototype,D,I.prototype.valueOf),f(I,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(e,t,n){e.exports=n(51)("native-function-to-string",Function.toString)},function(e,t,n){var r=n(33),o=n(53),i=n(48);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var u,a=n(e),l=i.f,c=0;a.length>c;)l.call(e,u=a[c++])&&t.push(u);return t}},function(e,t,n){var r=n(0);r(r.S,"Object",{create:n(35)})},function(e,t,n){var r=n(0);r(r.S+r.F*!n(9),"Object",{defineProperty:n(10).f})},function(e,t,n){var r=n(0);r(r.S+r.F*!n(9),"Object",{defineProperties:n(98)})},function(e,t,n){var r=n(16),o=n(21).f;n(22)("getOwnPropertyDescriptor",function(){return function(e,t){return o(r(e),t)}})},function(e,t,n){var r=n(11),o=n(37);n(22)("getPrototypeOf",function(){return function(e){return o(r(e))}})},function(e,t,n){var r=n(11),o=n(33);n(22)("keys",function(){return function(e){return o(r(e))}})},function(e,t,n){n(22)("getOwnPropertyNames",function(){return n(99).f})},function(e,t,n){var r=n(5),o=n(29).onFreeze;n(22)("freeze",function(e){return function(t){return e&&r(t)?e(o(t)):t}})},function(e,t,n){var r=n(5),o=n(29).onFreeze;n(22)("seal",function(e){return function(t){return e&&r(t)?e(o(t)):t}})},function(e,t,n){var r=n(5),o=n(29).onFreeze;n(22)("preventExtensions",function(e){return function(t){return e&&r(t)?e(o(t)):t}})},function(e,t,n){var r=n(5);n(22)("isFrozen",function(e){return function(t){return!r(t)||!!e&&e(t)}})},function(e,t,n){var r=n(5);n(22)("isSealed",function(e){return function(t){return!r(t)||!!e&&e(t)}})},function(e,t,n){var r=n(5);n(22)("isExtensible",function(e){return function(t){return!!r(t)&&(!e||e(t))}})},function(e,t,n){var r=n(0);r(r.S+r.F,"Object",{assign:n(100)})},function(e,t,n){var r=n(0);r(r.S,"Object",{is:n(101)})},function(e,t,n){var r=n(0);r(r.S,"Object",{setPrototypeOf:n(69).set})},function(e,t,n){"use strict";var r=n(49),o={};o[n(6)("toStringTag")]="z",o+""!="[object z]"&&n(12)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(e,t,n){var r=n(0);r(r.P,"Function",{bind:n(102)})},function(e,t,n){var r=n(10).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||n(9)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(e){return""}}})},function(e,t,n){"use strict";var r=n(5),o=n(37),i=n(6)("hasInstance"),u=Function.prototype;i in u||n(10).f(u,i,{value:function(e){if("function"!=typeof this||!r(e))return!1;if(!r(this.prototype))return e instanceof this;for(;e=o(e);)if(this.prototype===e)return!0;return!1}})},function(e,t,n){var r=n(0),o=n(104);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(e,t,n){var r=n(0),o=n(105);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(e,t,n){"use strict";var r=n(2),o=n(14),i=n(24),u=n(71),a=n(28),l=n(3),c=n(36).f,s=n(21).f,f=n(10).f,p=n(42).trim,d=r.Number,h=d,v=d.prototype,y="Number"==i(n(35)(v)),m="trim"in String.prototype,g=function(e){var t=a(e,!1);if("string"==typeof t&&t.length>2){var n,r,o,i=(t=m?t.trim():p(t,3)).charCodeAt(0);if(43===i||45===i){if(88===(n=t.charCodeAt(2))||120===n)return NaN}else if(48===i){switch(t.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+t}for(var u,l=t.slice(2),c=0,s=l.length;c<s;c++)if((u=l.charCodeAt(c))<48||u>o)return NaN;return parseInt(l,r)}}return+t};if(!d(" 0o1")||!d("0b1")||d("+0x1")){d=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof d&&(y?l(function(){v.valueOf.call(n)}):"Number"!=i(n))?u(new h(g(t)),n,d):g(t)};for(var b,w=n(9)?c(h):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),x=0;w.length>x;x++)o(h,b=w[x])&&!o(d,b)&&f(d,b,s(h,b));d.prototype=v,v.constructor=d,n(12)(r,"Number",d)}},function(e,t,n){"use strict";var r=n(0),o=n(20),i=n(106),u=n(72),a=1..toFixed,l=Math.floor,c=[0,0,0,0,0,0],s="Number.toFixed: incorrect invocation!",f=function(e,t){for(var n=-1,r=t;++n<6;)r+=e*c[n],c[n]=r%1e7,r=l(r/1e7)},p=function(e){for(var t=6,n=0;--t>=0;)n+=c[t],c[t]=l(n/e),n=n%e*1e7},d=function(){for(var e=6,t="";--e>=0;)if(""!==t||0===e||0!==c[e]){var n=String(c[e]);t=""===t?n:t+u.call("0",7-n.length)+n}return t},h=function(e,t,n){return 0===t?n:t%2==1?h(e,t-1,n*e):h(e*e,t/2,n)};r(r.P+r.F*(!!a&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(3)(function(){a.call({})})),"Number",{toFixed:function(e){var t,n,r,a,l=i(this,s),c=o(e),v="",y="0";if(c<0||c>20)throw RangeError(s);if(l!=l)return"NaN";if(l<=-1e21||l>=1e21)return String(l);if(l<0&&(v="-",l=-l),l>1e-21)if(n=(t=function(e){for(var t=0,n=e;n>=4096;)t+=12,n/=4096;for(;n>=2;)t+=1,n/=2;return t}(l*h(2,69,1))-69)<0?l*h(2,-t,1):l/h(2,t,1),n*=4503599627370496,(t=52-t)>0){for(f(0,n),r=c;r>=7;)f(1e7,0),r-=7;for(f(h(10,r,1),0),r=t-1;r>=23;)p(1<<23),r-=23;p(1<<r),f(1,1),p(2),y=d()}else f(0,n),f(1<<-t,0),y=d()+u.call("0",c);return y=c>0?v+((a=y.length)<=c?"0."+u.call("0",c-a)+y:y.slice(0,a-c)+"."+y.slice(a-c)):v+y}})},function(e,t,n){"use strict";var r=n(0),o=n(3),i=n(106),u=1..toPrecision;r(r.P+r.F*(o(function(){return"1"!==u.call(1,void 0)})||!o(function(){u.call({})})),"Number",{toPrecision:function(e){var t=i(this,"Number#toPrecision: incorrect invocation!");return void 0===e?u.call(t):u.call(t,e)}})},function(e,t,n){var r=n(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(e,t,n){var r=n(0),o=n(2).isFinite;r(r.S,"Number",{isFinite:function(e){return"number"==typeof e&&o(e)}})},function(e,t,n){var r=n(0);r(r.S,"Number",{isInteger:n(107)})},function(e,t,n){var r=n(0);r(r.S,"Number",{isNaN:function(e){return e!=e}})},function(e,t,n){var r=n(0),o=n(107),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(e){return o(e)&&i(e)<=9007199254740991}})},function(e,t,n){var r=n(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(e,t,n){var r=n(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(e,t,n){var r=n(0),o=n(105);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(e,t,n){var r=n(0),o=n(104);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(e,t,n){var r=n(0),o=n(108),i=Math.sqrt,u=Math.acosh;r(r.S+r.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(e){return(e=+e)<1?NaN:e>94906265.62425156?Math.log(e)+Math.LN2:o(e-1+i(e-1)*i(e+1))}})},function(e,t,n){var r=n(0),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function e(t){return isFinite(t=+t)&&0!=t?t<0?-e(-t):Math.log(t+Math.sqrt(t*t+1)):t}})},function(e,t,n){var r=n(0),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(e){return 0==(e=+e)?e:Math.log((1+e)/(1-e))/2}})},function(e,t,n){var r=n(0),o=n(73);r(r.S,"Math",{cbrt:function(e){return o(e=+e)*Math.pow(Math.abs(e),1/3)}})},function(e,t,n){var r=n(0);r(r.S,"Math",{clz32:function(e){return(e>>>=0)?31-Math.floor(Math.log(e+.5)*Math.LOG2E):32}})},function(e,t,n){var r=n(0),o=Math.exp;r(r.S,"Math",{cosh:function(e){return(o(e=+e)+o(-e))/2}})},function(e,t,n){var r=n(0),o=n(74);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(e,t,n){var r=n(0);r(r.S,"Math",{fround:n(180)})},function(e,t,n){var r=n(73),o=Math.pow,i=o(2,-52),u=o(2,-23),a=o(2,127)*(2-u),l=o(2,-126);e.exports=Math.fround||function(e){var t,n,o=Math.abs(e),c=r(e);return o<l?c*(o/l/u+1/i-1/i)*l*u:(n=(t=(1+u/i)*o)-(t-o))>a||n!=n?c*(1/0):c*n}},function(e,t,n){var r=n(0),o=Math.abs;r(r.S,"Math",{hypot:function(e,t){for(var n,r,i=0,u=0,a=arguments.length,l=0;u<a;)l<(n=o(arguments[u++]))?(i=i*(r=l/n)*r+1,l=n):i+=n>0?(r=n/l)*r:n;return l===1/0?1/0:l*Math.sqrt(i)}})},function(e,t,n){var r=n(0),o=Math.imul;r(r.S+r.F*n(3)(function(){return-5!=o(4294967295,5)||2!=o.length}),"Math",{imul:function(e,t){var n=+e,r=+t,o=65535&n,i=65535&r;return 0|o*i+((65535&n>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(e,t,n){var r=n(0);r(r.S,"Math",{log10:function(e){return Math.log(e)*Math.LOG10E}})},function(e,t,n){var r=n(0);r(r.S,"Math",{log1p:n(108)})},function(e,t,n){var r=n(0);r(r.S,"Math",{log2:function(e){return Math.log(e)/Math.LN2}})},function(e,t,n){var r=n(0);r(r.S,"Math",{sign:n(73)})},function(e,t,n){var r=n(0),o=n(74),i=Math.exp;r(r.S+r.F*n(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(e){return Math.abs(e=+e)<1?(o(e)-o(-e))/2:(i(e-1)-i(-e-1))*(Math.E/2)}})},function(e,t,n){var r=n(0),o=n(74),i=Math.exp;r(r.S,"Math",{tanh:function(e){var t=o(e=+e),n=o(-e);return t==1/0?1:n==1/0?-1:(t-n)/(i(e)+i(-e))}})},function(e,t,n){var r=n(0);r(r.S,"Math",{trunc:function(e){return(e>0?Math.floor:Math.ceil)(e)}})},function(e,t,n){var r=n(0),o=n(34),i=String.fromCharCode,u=String.fromCodePoint;r(r.S+r.F*(!!u&&1!=u.length),"String",{fromCodePoint:function(e){for(var t,n=[],r=arguments.length,u=0;r>u;){if(t=+arguments[u++],o(t,1114111)!==t)throw RangeError(t+" is not a valid code point");n.push(t<65536?i(t):i(55296+((t-=65536)>>10),t%1024+56320))}return n.join("")}})},function(e,t,n){var r=n(0),o=n(16),i=n(7);r(r.S,"String",{raw:function(e){for(var t=o(e.raw),n=i(t.length),r=arguments.length,u=[],a=0;n>a;)u.push(String(t[a++])),a<r&&u.push(String(arguments[a]));return u.join("")}})},function(e,t,n){"use strict";n(42)("trim",function(e){return function(){return e(this,3)}})},function(e,t,n){"use strict";var r=n(75)(!0);n(76)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})})},function(e,t,n){"use strict";var r=n(0),o=n(75)(!1);r(r.P,"String",{codePointAt:function(e){return o(this,e)}})},function(e,t,n){"use strict";var r=n(0),o=n(7),i=n(77),u="".endsWith;r(r.P+r.F*n(79)("endsWith"),"String",{endsWith:function(e){var t=i(this,e,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=o(t.length),a=void 0===n?r:Math.min(o(n),r),l=String(e);return u?u.call(t,l,a):t.slice(a-l.length,a)===l}})},function(e,t,n){"use strict";var r=n(0),o=n(77);r(r.P+r.F*n(79)("includes"),"String",{includes:function(e){return!!~o(this,e,"includes").indexOf(e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){var r=n(0);r(r.P,"String",{repeat:n(72)})},function(e,t,n){"use strict";var r=n(0),o=n(7),i=n(77),u="".startsWith;r(r.P+r.F*n(79)("startsWith"),"String",{startsWith:function(e){var t=i(this,e,"startsWith"),n=o(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),r=String(e);return u?u.call(t,r,n):t.slice(n,n+r.length)===r}})},function(e,t,n){"use strict";n(13)("anchor",function(e){return function(t){return e(this,"a","name",t)}})},function(e,t,n){"use strict";n(13)("big",function(e){return function(){return e(this,"big","","")}})},function(e,t,n){"use strict";n(13)("blink",function(e){return function(){return e(this,"blink","","")}})},function(e,t,n){"use strict";n(13)("bold",function(e){return function(){return e(this,"b","","")}})},function(e,t,n){"use strict";n(13)("fixed",function(e){return function(){return e(this,"tt","","")}})},function(e,t,n){"use strict";n(13)("fontcolor",function(e){return function(t){return e(this,"font","color",t)}})},function(e,t,n){"use strict";n(13)("fontsize",function(e){return function(t){return e(this,"font","size",t)}})},function(e,t,n){"use strict";n(13)("italics",function(e){return function(){return e(this,"i","","")}})},function(e,t,n){"use strict";n(13)("link",function(e){return function(t){return e(this,"a","href",t)}})},function(e,t,n){"use strict";n(13)("small",function(e){return function(){return e(this,"small","","")}})},function(e,t,n){"use strict";n(13)("strike",function(e){return function(){return e(this,"strike","","")}})},function(e,t,n){"use strict";n(13)("sub",function(e){return function(){return e(this,"sub","","")}})},function(e,t,n){"use strict";n(13)("sup",function(e){return function(){return e(this,"sup","","")}})},function(e,t,n){var r=n(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(e,t,n){"use strict";var r=n(0),o=n(11),i=n(28);r(r.P+r.F*n(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(e){var t=o(this),n=i(t);return"number"!=typeof n||isFinite(n)?t.toISOString():null}})},function(e,t,n){var r=n(0),o=n(215);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(e,t,n){"use strict";var r=n(3),o=Date.prototype.getTime,i=Date.prototype.toISOString,u=function(e){return e>9?e:"0"+e};e.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-5e13-1))})||!r(function(){i.call(new Date(NaN))})?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var e=this,t=e.getUTCFullYear(),n=e.getUTCMilliseconds(),r=t<0?"-":t>9999?"+":"";return r+("00000"+Math.abs(t)).slice(r?-6:-4)+"-"+u(e.getUTCMonth()+1)+"-"+u(e.getUTCDate())+"T"+u(e.getUTCHours())+":"+u(e.getUTCMinutes())+":"+u(e.getUTCSeconds())+"."+(n>99?n:"0"+u(n))+"Z"}:i},function(e,t,n){var r=Date.prototype,o=r.toString,i=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(12)(r,"toString",function(){var e=i.call(this);return e==e?o.call(this):"Invalid Date"})},function(e,t,n){var r=n(6)("toPrimitive"),o=Date.prototype;r in o||n(15)(o,r,n(218))},function(e,t,n){"use strict";var r=n(4),o=n(28);e.exports=function(e){if("string"!==e&&"number"!==e&&"default"!==e)throw TypeError("Incorrect hint");return o(r(this),"number"!=e)}},function(e,t,n){var r=n(0);r(r.S,"Array",{isArray:n(54)})},function(e,t,n){"use strict";var r=n(18),o=n(0),i=n(11),u=n(110),a=n(80),l=n(7),c=n(81),s=n(82);o(o.S+o.F*!n(55)(function(e){Array.from(e)}),"Array",{from:function(e){var t,n,o,f,p=i(e),d="function"==typeof this?this:Array,h=arguments.length,v=h>1?arguments[1]:void 0,y=void 0!==v,m=0,g=s(p);if(y&&(v=r(v,h>2?arguments[2]:void 0,2)),null==g||d==Array&&a(g))for(n=new d(t=l(p.length));t>m;m++)c(n,m,y?v(p[m],m):p[m]);else for(f=g.call(p),n=new d;!(o=f.next()).done;m++)c(n,m,y?u(f,v,[o.value,m],!0):o.value);return n.length=m,n}})},function(e,t,n){"use strict";var r=n(0),o=n(81);r(r.S+r.F*n(3)(function(){function e(){}return!(Array.of.call(e)instanceof e)}),"Array",{of:function(){for(var e=0,t=arguments.length,n=new("function"==typeof this?this:Array)(t);t>e;)o(n,e,arguments[e++]);return n.length=t,n}})},function(e,t,n){"use strict";var r=n(0),o=n(16),i=[].join;r(r.P+r.F*(n(47)!=Object||!n(17)(i)),"Array",{join:function(e){return i.call(o(this),void 0===e?",":e)}})},function(e,t,n){"use strict";var r=n(0),o=n(68),i=n(24),u=n(34),a=n(7),l=[].slice;r(r.P+r.F*n(3)(function(){o&&l.call(o)}),"Array",{slice:function(e,t){var n=a(this.length),r=i(this);if(t=void 0===t?n:t,"Array"==r)return l.call(this,e,t);for(var o=u(e,n),c=u(t,n),s=a(c-o),f=new Array(s),p=0;p<s;p++)f[p]="String"==r?this.charAt(o+p):this[o+p];return f}})},function(e,t,n){"use strict";var r=n(0),o=n(19),i=n(11),u=n(3),a=[].sort,l=[1,2,3];r(r.P+r.F*(u(function(){l.sort(void 0)})||!u(function(){l.sort(null)})||!n(17)(a)),"Array",{sort:function(e){return void 0===e?a.call(i(this)):a.call(i(this),o(e))}})},function(e,t,n){"use strict";var r=n(0),o=n(23)(0),i=n(17)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(e){return o(this,e,arguments[1])}})},function(e,t,n){var r=n(5),o=n(54),i=n(6)("species");e.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),r(t)&&null===(t=t[i])&&(t=void 0)),void 0===t?Array:t}},function(e,t,n){"use strict";var r=n(0),o=n(23)(1);r(r.P+r.F*!n(17)([].map,!0),"Array",{map:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),o=n(23)(2);r(r.P+r.F*!n(17)([].filter,!0),"Array",{filter:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),o=n(23)(3);r(r.P+r.F*!n(17)([].some,!0),"Array",{some:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),o=n(23)(4);r(r.P+r.F*!n(17)([].every,!0),"Array",{every:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),o=n(112);r(r.P+r.F*!n(17)([].reduce,!0),"Array",{reduce:function(e){return o(this,e,arguments.length,arguments[1],!1)}})},function(e,t,n){"use strict";var r=n(0),o=n(112);r(r.P+r.F*!n(17)([].reduceRight,!0),"Array",{reduceRight:function(e){return o(this,e,arguments.length,arguments[1],!0)}})},function(e,t,n){"use strict";var r=n(0),o=n(52)(!1),i=[].indexOf,u=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(u||!n(17)(i)),"Array",{indexOf:function(e){return u?i.apply(this,arguments)||0:o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),o=n(16),i=n(20),u=n(7),a=[].lastIndexOf,l=!!a&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(l||!n(17)(a)),"Array",{lastIndexOf:function(e){if(l)return a.apply(this,arguments)||0;var t=o(this),n=u(t.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in t&&t[r]===e)return r||0;return-1}})},function(e,t,n){var r=n(0);r(r.P,"Array",{copyWithin:n(113)}),n(38)("copyWithin")},function(e,t,n){var r=n(0);r(r.P,"Array",{fill:n(83)}),n(38)("fill")},function(e,t,n){"use strict";var r=n(0),o=n(23)(5),i=!0;"find"in[]&&Array(1).find(function(){i=!1}),r(r.P+r.F*i,"Array",{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(38)("find")},function(e,t,n){"use strict";var r=n(0),o=n(23)(6),i="findIndex",u=!0;i in[]&&Array(1)[i](function(){u=!1}),r(r.P+r.F*u,"Array",{findIndex:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(38)(i)},function(e,t,n){n(44)("Array")},function(e,t,n){var r=n(2),o=n(71),i=n(10).f,u=n(36).f,a=n(78),l=n(56),c=r.RegExp,s=c,f=c.prototype,p=/a/g,d=/a/g,h=new c(p)!==p;if(n(9)&&(!h||n(3)(function(){return d[n(6)("match")]=!1,c(p)!=p||c(d)==d||"/a/i"!=c(p,"i")}))){c=function(e,t){var n=this instanceof c,r=a(e),i=void 0===t;return!n&&r&&e.constructor===c&&i?e:o(h?new s(r&&!i?e.source:e,t):s((r=e instanceof c)?e.source:e,r&&i?l.call(e):t),n?this:f,c)};for(var v=function(e){e in c||i(c,e,{configurable:!0,get:function(){return s[e]},set:function(t){s[e]=t}})},y=u(s),m=0;y.length>m;)v(y[m++]);f.constructor=c,c.prototype=f,n(12)(r,"RegExp",c)}n(44)("RegExp")},function(e,t,n){"use strict";n(116);var r=n(4),o=n(56),i=n(9),u=/./.toString,a=function(e){n(12)(RegExp.prototype,"toString",e,!0)};n(3)(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?a(function(){var e=r(this);return"/".concat(e.source,"/","flags"in e?e.flags:!i&&e instanceof RegExp?o.call(e):void 0)}):"toString"!=u.name&&a(function(){return u.call(this)})},function(e,t,n){"use strict";var r=n(4),o=n(7),i=n(86),u=n(57);n(58)("match",1,function(e,t,n,a){return[function(n){var r=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=a(n,e,this);if(t.done)return t.value;var l=r(e),c=String(this);if(!l.global)return u(l,c);var s=l.unicode;l.lastIndex=0;for(var f,p=[],d=0;null!==(f=u(l,c));){var h=String(f[0]);p[d]=h,""===h&&(l.lastIndex=i(c,o(l.lastIndex),s)),d++}return 0===d?null:p}]})},function(e,t,n){"use strict";var r=n(4),o=n(11),i=n(7),u=n(20),a=n(86),l=n(57),c=Math.max,s=Math.min,f=Math.floor,p=/\$([$&`']|\d\d?|<[^>]*>)/g,d=/\$([$&`']|\d\d?)/g;n(58)("replace",2,function(e,t,n,h){return[function(r,o){var i=e(this),u=null==r?void 0:r[t];return void 0!==u?u.call(r,i,o):n.call(String(i),r,o)},function(e,t){var o=h(n,e,this,t);if(o.done)return o.value;var f=r(e),p=String(this),d="function"==typeof t;d||(t=String(t));var y=f.global;if(y){var m=f.unicode;f.lastIndex=0}for(var g=[];;){var b=l(f,p);if(null===b)break;if(g.push(b),!y)break;""===String(b[0])&&(f.lastIndex=a(p,i(f.lastIndex),m))}for(var w,x="",S=0,E=0;E<g.length;E++){b=g[E];for(var _=String(b[0]),k=c(s(u(b.index),p.length),0),T=[],P=1;P<b.length;P++)T.push(void 0===(w=b[P])?w:String(w));var C=b.groups;if(d){var O=[_].concat(T,k,p);void 0!==C&&O.push(C);var N=String(t.apply(void 0,O))}else N=v(_,p,k,T,C,t);k>=S&&(x+=p.slice(S,k)+N,S=k+_.length)}return x+p.slice(S)}];function v(e,t,r,i,u,a){var l=r+e.length,c=i.length,s=d;return void 0!==u&&(u=o(u),s=p),n.call(a,s,function(n,o){var a;switch(o.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,r);case"'":return t.slice(l);case"<":a=u[o.slice(1,-1)];break;default:var s=+o;if(0===s)return n;if(s>c){var p=f(s/10);return 0===p?n:p<=c?void 0===i[p-1]?o.charAt(1):i[p-1]+o.charAt(1):n}a=i[s-1]}return void 0===a?"":a})}})},function(e,t,n){"use strict";var r=n(4),o=n(101),i=n(57);n(58)("search",1,function(e,t,n,u){return[function(n){var r=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=u(n,e,this);if(t.done)return t.value;var a=r(e),l=String(this),c=a.lastIndex;o(c,0)||(a.lastIndex=0);var s=i(a,l);return o(a.lastIndex,c)||(a.lastIndex=c),null===s?-1:s.index}]})},function(e,t,n){"use strict";var r=n(78),o=n(4),i=n(50),u=n(86),a=n(7),l=n(57),c=n(85),s=n(3),f=Math.min,p=[].push,d=!s(function(){RegExp(4294967295,"y")});n(58)("split",2,function(e,t,n,s){var h;return h="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,t){var o=String(this);if(void 0===e&&0===t)return[];if(!r(e))return n.call(o,e,t);for(var i,u,a,l=[],s=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),f=0,d=void 0===t?4294967295:t>>>0,h=new RegExp(e.source,s+"g");(i=c.call(h,o))&&!((u=h.lastIndex)>f&&(l.push(o.slice(f,i.index)),i.length>1&&i.index<o.length&&p.apply(l,i.slice(1)),a=i[0].length,f=u,l.length>=d));)h.lastIndex===i.index&&h.lastIndex++;return f===o.length?!a&&h.test("")||l.push(""):l.push(o.slice(f)),l.length>d?l.slice(0,d):l}:"0".split(void 0,0).length?function(e,t){return void 0===e&&0===t?[]:n.call(this,e,t)}:n,[function(n,r){var o=e(this),i=null==n?void 0:n[t];return void 0!==i?i.call(n,o,r):h.call(String(o),n,r)},function(e,t){var r=s(h,e,this,t,h!==n);if(r.done)return r.value;var c=o(e),p=String(this),v=i(c,RegExp),y=c.unicode,m=(c.ignoreCase?"i":"")+(c.multiline?"m":"")+(c.unicode?"u":"")+(d?"y":"g"),g=new v(d?c:"^(?:"+c.source+")",m),b=void 0===t?4294967295:t>>>0;if(0===b)return[];if(0===p.length)return null===l(g,p)?[p]:[];for(var w=0,x=0,S=[];x<p.length;){g.lastIndex=d?x:0;var E,_=l(g,d?p:p.slice(x));if(null===_||(E=f(a(g.lastIndex+(d?0:x)),p.length))===w)x=u(p,x,y);else{if(S.push(p.slice(w,x)),S.length===b)return S;for(var k=1;k<=_.length-1;k++)if(S.push(_[k]),S.length===b)return S;x=w=E}}return S.push(p.slice(w)),S}]})},function(e,t,n){var r=n(2),o=n(87).set,i=r.MutationObserver||r.WebKitMutationObserver,u=r.process,a=r.Promise,l="process"==n(24)(u);e.exports=function(){var e,t,n,c=function(){var r,o;for(l&&(r=u.domain)&&r.exit();e;){o=e.fn,e=e.next;try{o()}catch(r){throw e?n():t=void 0,r}}t=void 0,r&&r.enter()};if(l)n=function(){u.nextTick(c)};else if(!i||r.navigator&&r.navigator.standalone)if(a&&a.resolve){var s=a.resolve(void 0);n=function(){s.then(c)}}else n=function(){o.call(r,c)};else{var f=!0,p=document.createTextNode("");new i(c).observe(p,{characterData:!0}),n=function(){p.data=f=!f}}return function(r){var o={fn:r,next:void 0};t&&(t.next=o),e||(e=o,n()),t=o}}},function(e,t){e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},function(e,t,n){"use strict";var r=n(120),o=n(39);e.exports=n(61)("Map",function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},{get:function(e){var t=r.getEntry(o(this,"Map"),e);return t&&t.v},set:function(e,t){return r.def(o(this,"Map"),0===e?0:e,t)}},r,!0)},function(e,t,n){"use strict";var r=n(120),o=n(39);e.exports=n(61)("Set",function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},{add:function(e){return r.def(o(this,"Set"),e=0===e?0:e,e)}},r)},function(e,t,n){"use strict";var r,o=n(2),i=n(23)(0),u=n(12),a=n(29),l=n(100),c=n(121),s=n(5),f=n(39),p=n(39),d=!o.ActiveXObject&&"ActiveXObject"in o,h=a.getWeak,v=Object.isExtensible,y=c.ufstore,m=function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},g={get:function(e){if(s(e)){var t=h(e);return!0===t?y(f(this,"WeakMap")).get(e):t?t[this._i]:void 0}},set:function(e,t){return c.def(f(this,"WeakMap"),e,t)}},b=e.exports=n(61)("WeakMap",m,g,c,!0,!0);p&&d&&(l((r=c.getConstructor(m,"WeakMap")).prototype,g),a.NEED=!0,i(["delete","has","get","set"],function(e){var t=b.prototype,n=t[e];u(t,e,function(t,o){if(s(t)&&!v(t)){this._f||(this._f=new r);var i=this._f[e](t,o);return"set"==e?this:i}return n.call(this,t,o)})}))},function(e,t,n){"use strict";var r=n(121),o=n(39);n(61)("WeakSet",function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},{add:function(e){return r.def(o(this,"WeakSet"),e,!0)}},r,!1,!0)},function(e,t,n){"use strict";var r=n(0),o=n(62),i=n(88),u=n(4),a=n(34),l=n(7),c=n(5),s=n(2).ArrayBuffer,f=n(50),p=i.ArrayBuffer,d=i.DataView,h=o.ABV&&s.isView,v=p.prototype.slice,y=o.VIEW;r(r.G+r.W+r.F*(s!==p),{ArrayBuffer:p}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(e){return h&&h(e)||c(e)&&y in e}}),r(r.P+r.U+r.F*n(3)(function(){return!new p(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(e,t){if(void 0!==v&&void 0===t)return v.call(u(this),e);for(var n=u(this).byteLength,r=a(e,n),o=a(void 0===t?n:t,n),i=new(f(this,p))(l(o-r)),c=new d(this),s=new d(i),h=0;r<o;)s.setUint8(h++,c.getUint8(r++));return i}}),n(44)("ArrayBuffer")},function(e,t,n){var r=n(0);r(r.G+r.W+r.F*!n(62).ABV,{DataView:n(88).DataView})},function(e,t,n){n(26)("Int8",1,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(26)("Uint8",1,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(26)("Uint8",1,function(e){return function(t,n,r){return e(this,t,n,r)}},!0)},function(e,t,n){n(26)("Int16",2,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(26)("Uint16",2,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(26)("Int32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(26)("Uint32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(26)("Float32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(26)("Float64",8,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){var r=n(0),o=n(19),i=n(4),u=(n(2).Reflect||{}).apply,a=Function.apply;r(r.S+r.F*!n(3)(function(){u(function(){})}),"Reflect",{apply:function(e,t,n){var r=o(e),l=i(n);return u?u(r,t,l):a.call(r,t,l)}})},function(e,t,n){var r=n(0),o=n(35),i=n(19),u=n(4),a=n(5),l=n(3),c=n(102),s=(n(2).Reflect||{}).construct,f=l(function(){function e(){}return!(s(function(){},[],e)instanceof e)}),p=!l(function(){s(function(){})});r(r.S+r.F*(f||p),"Reflect",{construct:function(e,t){i(e),u(t);var n=arguments.length<3?e:i(arguments[2]);if(p&&!f)return s(e,t,n);if(e==n){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var r=[null];return r.push.apply(r,t),new(c.apply(e,r))}var l=n.prototype,d=o(a(l)?l:Object.prototype),h=Function.apply.call(e,d,t);return a(h)?h:d}})},function(e,t,n){var r=n(10),o=n(0),i=n(4),u=n(28);o(o.S+o.F*n(3)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(e,t,n){i(e),t=u(t,!0),i(n);try{return r.f(e,t,n),!0}catch(e){return!1}}})},function(e,t,n){var r=n(0),o=n(21).f,i=n(4);r(r.S,"Reflect",{deleteProperty:function(e,t){var n=o(i(e),t);return!(n&&!n.configurable)&&delete e[t]}})},function(e,t,n){"use strict";var r=n(0),o=n(4),i=function(e){this._t=o(e),this._i=0;var t,n=this._k=[];for(t in e)n.push(t)};n(109)(i,"Object",function(){var e,t=this._k;do{if(this._i>=t.length)return{value:void 0,done:!0}}while(!((e=t[this._i++])in this._t));return{value:e,done:!1}}),r(r.S,"Reflect",{enumerate:function(e){return new i(e)}})},function(e,t,n){var r=n(21),o=n(37),i=n(14),u=n(0),a=n(5),l=n(4);u(u.S,"Reflect",{get:function e(t,n){var u,c,s=arguments.length<3?t:arguments[2];return l(t)===s?t[n]:(u=r.f(t,n))?i(u,"value")?u.value:void 0!==u.get?u.get.call(s):void 0:a(c=o(t))?e(c,n,s):void 0}})},function(e,t,n){var r=n(21),o=n(0),i=n(4);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(e,t){return r.f(i(e),t)}})},function(e,t,n){var r=n(0),o=n(37),i=n(4);r(r.S,"Reflect",{getPrototypeOf:function(e){return o(i(e))}})},function(e,t,n){var r=n(0);r(r.S,"Reflect",{has:function(e,t){return t in e}})},function(e,t,n){var r=n(0),o=n(4),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(e){return o(e),!i||i(e)}})},function(e,t,n){var r=n(0);r(r.S,"Reflect",{ownKeys:n(123)})},function(e,t,n){var r=n(0),o=n(4),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(e){o(e);try{return i&&i(e),!0}catch(e){return!1}}})},function(e,t,n){var r=n(10),o=n(21),i=n(37),u=n(14),a=n(0),l=n(30),c=n(4),s=n(5);a(a.S,"Reflect",{set:function e(t,n,a){var f,p,d=arguments.length<4?t:arguments[3],h=o.f(c(t),n);if(!h){if(s(p=i(t)))return e(p,n,a,d);h=l(0)}if(u(h,"value")){if(!1===h.writable||!s(d))return!1;if(f=o.f(d,n)){if(f.get||f.set||!1===f.writable)return!1;f.value=a,r.f(d,n,f)}else r.f(d,n,l(0,a));return!0}return void 0!==h.set&&(h.set.call(d,a),!0)}})},function(e,t,n){var r=n(0),o=n(69);o&&r(r.S,"Reflect",{setPrototypeOf:function(e,t){o.check(e,t);try{return o.set(e,t),!0}catch(e){return!1}}})},function(e,t,n){n(278),e.exports=n(8).Array.includes},function(e,t,n){"use strict";var r=n(0),o=n(52)(!0);r(r.P,"Array",{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(38)("includes")},function(e,t,n){n(280),e.exports=n(8).Array.flatMap},function(e,t,n){"use strict";var r=n(0),o=n(281),i=n(11),u=n(7),a=n(19),l=n(111);r(r.P,"Array",{flatMap:function(e){var t,n,r=i(this);return a(e),t=u(r.length),n=l(r,0),o(n,r,r,t,0,1,e,arguments[1]),n}}),n(38)("flatMap")},function(e,t,n){"use strict";var r=n(54),o=n(5),i=n(7),u=n(18),a=n(6)("isConcatSpreadable");e.exports=function e(t,n,l,c,s,f,p,d){for(var h,v,y=s,m=0,g=!!p&&u(p,d,3);m<c;){if(m in l){if(h=g?g(l[m],m,n):l[m],v=!1,o(h)&&(v=void 0!==(v=h[a])?!!v:r(h)),v&&f>0)y=e(t,n,h,i(h.length),y,f-1)-1;else{if(y>=9007199254740991)throw TypeError();t[y]=h}y++}m++}return y}},function(e,t,n){n(283),e.exports=n(8).String.padStart},function(e,t,n){"use strict";var r=n(0),o=n(124),i=n(60),u=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*u,"String",{padStart:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0,!0)}})},function(e,t,n){n(285),e.exports=n(8).String.padEnd},function(e,t,n){"use strict";var r=n(0),o=n(124),i=n(60),u=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*u,"String",{padEnd:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0,!1)}})},function(e,t,n){n(287),e.exports=n(8).String.trimLeft},function(e,t,n){"use strict";n(42)("trimLeft",function(e){return function(){return e(this,1)}},"trimStart")},function(e,t,n){n(289),e.exports=n(8).String.trimRight},function(e,t,n){"use strict";n(42)("trimRight",function(e){return function(){return e(this,2)}},"trimEnd")},function(e,t,n){n(291),e.exports=n(65).f("asyncIterator")},function(e,t,n){n(96)("asyncIterator")},function(e,t,n){n(293),e.exports=n(8).Object.getOwnPropertyDescriptors},function(e,t,n){var r=n(0),o=n(123),i=n(16),u=n(21),a=n(81);r(r.S,"Object",{getOwnPropertyDescriptors:function(e){for(var t,n,r=i(e),l=u.f,c=o(r),s={},f=0;c.length>f;)void 0!==(n=l(r,t=c[f++]))&&a(s,t,n);return s}})},function(e,t,n){n(295),e.exports=n(8).Object.values},function(e,t,n){var r=n(0),o=n(125)(!1);r(r.S,"Object",{values:function(e){return o(e)}})},function(e,t,n){n(297),e.exports=n(8).Object.entries},function(e,t,n){var r=n(0),o=n(125)(!0);r(r.S,"Object",{entries:function(e){return o(e)}})},function(e,t,n){"use strict";n(117),n(299),e.exports=n(8).Promise.finally},function(e,t,n){"use strict";var r=n(0),o=n(8),i=n(2),u=n(50),a=n(119);r(r.P+r.R,"Promise",{finally:function(e){var t=u(this,o.Promise||i.Promise),n="function"==typeof e;return this.then(n?function(n){return a(t,e()).then(function(){return n})}:e,n?function(n){return a(t,e()).then(function(){throw n})}:e)}})},function(e,t,n){n(301),n(302),n(303),e.exports=n(8)},function(e,t,n){var r=n(2),o=n(0),i=n(60),u=[].slice,a=/MSIE .\./.test(i),l=function(e){return function(t,n){var r=arguments.length>2,o=!!r&&u.call(arguments,2);return e(r?function(){("function"==typeof t?t:Function(t)).apply(this,o)}:t,n)}};o(o.G+o.B+o.F*a,{setTimeout:l(r.setTimeout),setInterval:l(r.setInterval)})},function(e,t,n){var r=n(0),o=n(87);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(e,t,n){for(var r=n(84),o=n(33),i=n(12),u=n(2),a=n(15),l=n(43),c=n(6),s=c("iterator"),f=c("toStringTag"),p=l.Array,d={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(d),v=0;v<h.length;v++){var y,m=h[v],g=d[m],b=u[m],w=b&&b.prototype;if(w&&(w[s]||a(w,s,p),w[f]||a(w,f,m),l[m]=p,g))for(y in r)w[y]||i(w,y,r[y],!0)}},function(e,t,n){var r=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",u=o.asyncIterator||"@@asyncIterator",a=o.toStringTag||"@@toStringTag";function l(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,i=Object.create(o.prototype),u=new P(r||[]);return i._invoke=function(e,t,n){var r=s;return function(o,i){if(r===p)throw new Error("Generator is already running");if(r===d){if("throw"===o)throw i;return O()}for(n.method=o,n.arg=i;;){var u=n.delegate;if(u){var a=_(u,n);if(a){if(a===h)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===s)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var l=c(e,t,n);if("normal"===l.type){if(r=n.done?d:f,l.arg===h)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r=d,n.method="throw",n.arg=l.arg)}}}(e,n,u),i}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var s="suspendedStart",f="suspendedYield",p="executing",d="completed",h={};function v(){}function y(){}function m(){}var g={};g[i]=function(){return this};var b=Object.getPrototypeOf,w=b&&b(b(C([])));w&&w!==n&&r.call(w,i)&&(g=w);var x=m.prototype=v.prototype=Object.create(g);function S(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function E(e){var t;this._invoke=function(n,o){function i(){return new Promise(function(t,i){!function t(n,o,i,u){var a=c(e[n],e,o);if("throw"!==a.type){var l=a.arg,s=l.value;return s&&"object"==typeof s&&r.call(s,"__await")?Promise.resolve(s.__await).then(function(e){t("next",e,i,u)},function(e){t("throw",e,i,u)}):Promise.resolve(s).then(function(e){l.value=e,i(l)},function(e){return t("throw",e,i,u)})}u(a.arg)}(n,o,t,i)})}return t=t?t.then(i,i):i()}}function _(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,_(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=c(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,h;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,h):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function P(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function C(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,u=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return u.next=u}}return{next:O}}function O(){return{value:t,done:!0}}return y.prototype=x.constructor=m,m.constructor=y,m[a]=y.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,a in e||(e[a]="GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},S(E.prototype),E.prototype[u]=function(){return this},e.AsyncIterator=E,e.async=function(t,n,r,o){var i=new E(l(t,n,r,o));return e.isGeneratorFunction(n)?i:i.next().then(function(e){return e.done?e.value:i.next()})},S(x),x[a]="Generator",x[i]=function(){return this},x.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=C,P.prototype={constructor:P,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return a.type="throw",a.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var u=this.tryEntries[i],a=u.completion;if("root"===u.tryLoc)return o("end");if(u.tryLoc<=this.prev){var l=r.call(u,"catchLoc"),c=r.call(u,"finallyLoc");if(l&&c){if(this.prev<u.catchLoc)return o(u.catchLoc,!0);if(this.prev<u.finallyLoc)return o(u.finallyLoc)}else if(l){if(this.prev<u.catchLoc)return o(u.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return o(u.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var u=i?i.completion:{};return u.type=e,u.arg=t,i?(this.method="next",this.next=i.finallyLoc,h):this.complete(u)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;T(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:C(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),h}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},function(e,t,n){n(306),e.exports=n(126).global},function(e,t,n){var r=n(307);r(r.G,{global:n(89)})},function(e,t,n){var r=n(89),o=n(126),i=n(308),u=n(310),a=n(317),l=function(e,t,n){var c,s,f,p=e&l.F,d=e&l.G,h=e&l.S,v=e&l.P,y=e&l.B,m=e&l.W,g=d?o:o[t]||(o[t]={}),b=g.prototype,w=d?r:h?r[t]:(r[t]||{}).prototype;for(c in d&&(n=t),n)(s=!p&&w&&void 0!==w[c])&&a(g,c)||(f=s?w[c]:n[c],g[c]=d&&"function"!=typeof w[c]?n[c]:y&&s?i(f,r):m&&w[c]==f?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(f):v&&"function"==typeof f?i(Function.call,f):f,v&&((g.virtual||(g.virtual={}))[c]=f,e&l.R&&b&&!b[c]&&u(b,c,f)))};l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,e.exports=l},function(e,t,n){var r=n(309);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var r=n(311),o=n(316);e.exports=n(91)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(312),o=n(313),i=n(315),u=Object.defineProperty;t.f=n(91)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return u(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(90);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){e.exports=!n(91)&&!n(127)(function(){return 7!=Object.defineProperty(n(314)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(90),o=n(89).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){var r=n(90);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(128),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,u=o?Symbol.for("react.portal"):60106,a=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.concurrent_mode"):60111,d=o?Symbol.for("react.forward_ref"):60112,h=o?Symbol.for("react.suspense"):60113,v=o?Symbol.for("react.memo"):60115,y=o?Symbol.for("react.lazy"):60116,m="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,u,a){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,u,a],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},w={};function x(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||b}function S(){}function E(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||b}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&g("85"),this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},S.prototype=x.prototype;var _=E.prototype=new S;_.constructor=E,r(_,x.prototype),_.isPureReactComponent=!0;var k={current:null},T={current:null},P=Object.prototype.hasOwnProperty,C={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r=void 0,o={},u=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(u=""+t.key),t)P.call(t,r)&&!C.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:u,ref:a,props:o,_owner:T.current}}function N(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var M=/\/+/g,R=[];function I(e,t,n,r){if(R.length){var o=R.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function j(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>R.length&&R.push(e)}function F(e,t,n){return null==e?0:function e(t,n,r,o){var a=typeof t;"undefined"!==a&&"boolean"!==a||(t=null);var l=!1;if(null===t)l=!0;else switch(a){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case i:case u:l=!0}}if(l)return r(o,t,""===n?"."+A(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+A(a=t[c],c);l+=e(a,s,r,o)}else if(s=null===t||"object"!=typeof t?null:"function"==typeof(s=m&&t[m]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(a=t.next()).done;)l+=e(a=a.value,s=n+A(a,c++),r,o);else"object"===a&&g("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?U(e,r,n,function(e){return e}):null!=e&&(N(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(M,"$&/")+"/")+n)),r.push(e))}function U(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(M,"$&/")+"/"),F(e,L,t=I(t,i,r,o)),j(t)}function z(){var e=k.current;return null===e&&g("321"),e}var W={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return U(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;F(e,D,t=I(null,null,t,n)),j(t)},count:function(e){return F(e,function(){return null},null)},toArray:function(e){var t=[];return U(e,t,null,function(e){return e}),t},only:function(e){return N(e)||g("143"),e}},createRef:function(){return{current:null}},Component:x,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:y,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:v,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return z().useCallback(e,t)},useContext:function(e,t){return z().useContext(e,t)},useEffect:function(e,t){return z().useEffect(e,t)},useImperativeHandle:function(e,t,n){return z().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return z().useLayoutEffect(e,t)},useMemo:function(e,t){return z().useMemo(e,t)},useReducer:function(e,t,n){return z().useReducer(e,t,n)},useRef:function(e){return z().useRef(e)},useState:function(e){return z().useState(e)},Fragment:a,StrictMode:l,Suspense:h,createElement:O,cloneElement:function(e,t,n){null==e&&g("267",e);var o=void 0,u=r({},e.props),a=e.key,l=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,c=T.current),void 0!==t.key&&(a=""+t.key);var s=void 0;for(o in e.type&&e.type.defaultProps&&(s=e.type.defaultProps),t)P.call(t,o)&&!C.hasOwnProperty(o)&&(u[o]=void 0===t[o]&&void 0!==s?s[o]:t[o])}if(1===(o=arguments.length-2))u.children=n;else if(1<o){s=Array(o);for(var f=0;f<o;f++)s[f]=arguments[f+2];u.children=s}return{$$typeof:i,type:e.type,key:a,ref:l,props:u,_owner:c}},createFactory:function(e){var t=O.bind(null,e);return t.type=e,t},isValidElement:N,version:"16.8.6",unstable_ConcurrentMode:p,unstable_Profiler:c,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:k,ReactCurrentOwner:T,assign:r}},V={default:W},B=V&&W||V;e.exports=B.default||B},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(1),o=n(128),i=n(320);function u(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,u,a){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,u,a],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||u("227");var a=!1,l=null,c=!1,s=null,f={onError:function(e){a=!0,l=e}};function p(e,t,n,r,o,i,u,c,s){a=!1,l=null,function(e,t,n,r,o,i,u,a,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}.apply(f,arguments)}var d=null,h={};function v(){if(d)for(var e in h){var t=h[e],n=d.indexOf(e);if(-1<n||u("96",e),!m[n])for(var r in t.extractEvents||u("97",e),m[n]=t,n=t.eventTypes){var o=void 0,i=n[r],a=t,l=r;g.hasOwnProperty(l)&&u("99",l),g[l]=i;var c=i.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&y(c[o],a,l);o=!0}else i.registrationName?(y(i.registrationName,a,l),o=!0):o=!1;o||u("98",r,e)}}}function y(e,t,n){b[e]&&u("100",e),b[e]=t,w[e]=t.eventTypes[n].dependencies}var m=[],g={},b={},w={},x=null,S=null,E=null;function _(e,t,n){var r=e.type||"unknown-event";e.currentTarget=E(n),function(e,t,n,r,o,i,f,d,h){if(p.apply(this,arguments),a){if(a){var v=l;a=!1,l=null}else u("198"),v=void 0;c||(c=!0,s=v)}}(r,t,void 0,e),e.currentTarget=null}function k(e,t){return null==t&&u("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function T(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var P=null;function C(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)_(e,t[r],n[r]);else t&&_(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var O={injectEventPluginOrder:function(e){d&&u("101"),d=Array.prototype.slice.call(e),v()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&u("102",t),h[t]=r,n=!0)}n&&v()}};function N(e,t){var n=e.stateNode;if(!n)return null;var r=x(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&u("231",t,typeof n),n)}function M(e){if(null!==e&&(P=k(P,e)),e=P,P=null,e&&(T(e,C),P&&u("95"),c))throw e=s,c=!1,s=null,e}var R=Math.random().toString(36).slice(2),I="__reactInternalInstance$"+R,j="__reactEventHandlers$"+R;function F(e){if(e[I])return e[I];for(;!e[I];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[I]).tag||6===e.tag?e:null}function A(e){return!(e=e[I])||5!==e.tag&&6!==e.tag?null:e}function D(e){if(5===e.tag||6===e.tag)return e.stateNode;u("33")}function L(e){return e[j]||null}function U(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function z(e,t,n){(t=N(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=k(n._dispatchListeners,t),n._dispatchInstances=k(n._dispatchInstances,e))}function W(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=U(t);for(t=n.length;0<t--;)z(n[t],"captured",e);for(t=0;t<n.length;t++)z(n[t],"bubbled",e)}}function V(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=N(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=k(n._dispatchListeners,t),n._dispatchInstances=k(n._dispatchInstances,e))}function B(e){e&&e.dispatchConfig.registrationName&&V(e._targetInst,null,e)}function $(e){T(e,W)}var G=!("undefined"==typeof window||!window.document||!window.document.createElement);function H(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var q={animationend:H("Animation","AnimationEnd"),animationiteration:H("Animation","AnimationIteration"),animationstart:H("Animation","AnimationStart"),transitionend:H("Transition","TransitionEnd")},K={},Q={};function Y(e){if(K[e])return K[e];if(!q[e])return e;var t,n=q[e];for(t in n)if(n.hasOwnProperty(t)&&t in Q)return K[e]=n[t];return e}G&&(Q=document.createElement("div").style,"AnimationEvent"in window||(delete q.animationend.animation,delete q.animationiteration.animation,delete q.animationstart.animation),"TransitionEvent"in window||delete q.transitionend.transition);var X=Y("animationend"),J=Y("animationiteration"),Z=Y("animationstart"),ee=Y("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,oe=null;function ie(){if(oe)return oe;var e,t,n=re,r=n.length,o="value"in ne?ne.value:ne.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var u=r-e;for(t=1;t<=u&&n[r-t]===o[i-t];t++);return oe=o.slice(e,1<t?1-t:void 0)}function ue(){return!0}function ae(){return!1}function le(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ue:ae,this.isPropagationStopped=ae,this}function ce(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function se(e){e instanceof this||u("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=ce,e.release=se}o(le.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ue)},persist:function(){this.isPersistent=ue},isPersistent:ae,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=ae,this._dispatchInstances=this._dispatchListeners=null}}),le.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},le.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(le);var pe=le.extend({data:null}),de=le.extend({data:null}),he=[9,13,27,32],ve=G&&"CompositionEvent"in window,ye=null;G&&"documentMode"in document&&(ye=document.documentMode);var me=G&&"TextEvent"in window&&!ye,ge=G&&(!ve||ye&&8<ye&&11>=ye),be=String.fromCharCode(32),we={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},xe=!1;function Se(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Ee(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var _e=!1;var ke={eventTypes:we,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(ve)e:{switch(e){case"compositionstart":o=we.compositionStart;break e;case"compositionend":o=we.compositionEnd;break e;case"compositionupdate":o=we.compositionUpdate;break e}o=void 0}else _e?Se(e,n)&&(o=we.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=we.compositionStart);return o?(ge&&"ko"!==n.locale&&(_e||o!==we.compositionStart?o===we.compositionEnd&&_e&&(i=ie()):(re="value"in(ne=r)?ne.value:ne.textContent,_e=!0)),o=pe.getPooled(o,t,n,r),i?o.data=i:null!==(i=Ee(n))&&(o.data=i),$(o),i=o):i=null,(e=me?function(e,t){switch(e){case"compositionend":return Ee(t);case"keypress":return 32!==t.which?null:(xe=!0,be);case"textInput":return(e=t.data)===be&&xe?null:e;default:return null}}(e,n):function(e,t){if(_e)return"compositionend"===e||!ve&&Se(e,t)?(e=ie(),oe=re=ne=null,_e=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ge&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=de.getPooled(we.beforeInput,t,n,r)).data=e,$(t)):t=null,null===i?t:null===t?i:[i,t]}},Te=null,Pe=null,Ce=null;function Oe(e){if(e=S(e)){"function"!=typeof Te&&u("280");var t=x(e.stateNode);Te(e.stateNode,e.type,t)}}function Ne(e){Pe?Ce?Ce.push(e):Ce=[e]:Pe=e}function Me(){if(Pe){var e=Pe,t=Ce;if(Ce=Pe=null,Oe(e),t)for(e=0;e<t.length;e++)Oe(t[e])}}function Re(e,t){return e(t)}function Ie(e,t,n){return e(t,n)}function je(){}var Fe=!1;function Ae(e,t){if(Fe)return e(t);Fe=!0;try{return Re(e,t)}finally{Fe=!1,(null!==Pe||null!==Ce)&&(je(),Me())}}var De={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Le(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!De[e.type]:"textarea"===t}function Ue(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ze(e){if(!G)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function We(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ve(e){e._valueTracker||(e._valueTracker=function(e){var t=We(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Be(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=We(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var $e=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;$e.hasOwnProperty("ReactCurrentDispatcher")||($e.ReactCurrentDispatcher={current:null});var Ge=/^(.*)[\\\/]/,He="function"==typeof Symbol&&Symbol.for,qe=He?Symbol.for("react.element"):60103,Ke=He?Symbol.for("react.portal"):60106,Qe=He?Symbol.for("react.fragment"):60107,Ye=He?Symbol.for("react.strict_mode"):60108,Xe=He?Symbol.for("react.profiler"):60114,Je=He?Symbol.for("react.provider"):60109,Ze=He?Symbol.for("react.context"):60110,et=He?Symbol.for("react.concurrent_mode"):60111,tt=He?Symbol.for("react.forward_ref"):60112,nt=He?Symbol.for("react.suspense"):60113,rt=He?Symbol.for("react.memo"):60115,ot=He?Symbol.for("react.lazy"):60116,it="function"==typeof Symbol&&Symbol.iterator;function ut(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=it&&e[it]||e["@@iterator"])?e:null}function at(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case Qe:return"Fragment";case Ke:return"Portal";case Xe:return"Profiler";case Ye:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Ze:return"Context.Consumer";case Je:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return at(e.type);case ot:if(e=1===e._status?e._result:null)return at(e)}return null}function lt(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=at(e.type);n=null,r&&(n=at(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(Ge,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var ct=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,st=Object.prototype.hasOwnProperty,ft={},pt={};function dt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new dt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new dt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new dt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ht[e]=new dt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new dt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new dt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){ht[e]=new dt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new dt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){ht[e]=new dt(e,5,!1,e.toLowerCase(),null)});var vt=/[\-:]([a-z])/g;function yt(e){return e[1].toUpperCase()}function mt(e,t,n,r){var o=ht.hasOwnProperty(t)?ht[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!st.call(pt,e)||!st.call(ft,e)&&(ct.test(e)?pt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function gt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function bt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function wt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=gt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function xt(e,t){null!=(t=t.checked)&&mt(e,"checked",t,!1)}function St(e,t){xt(e,t);var n=gt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?_t(e,t.type,n):t.hasOwnProperty("defaultValue")&&_t(e,t.type,gt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Et(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function _t(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(vt,yt);ht[t]=new dt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(vt,yt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(vt,yt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),["tabIndex","crossOrigin"].forEach(function(e){ht[e]=new dt(e,1,!1,e.toLowerCase(),null)});var kt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Tt(e,t,n){return(e=le.getPooled(kt.change,e,t,n)).type="change",Ne(n),$(e),e}var Pt=null,Ct=null;function Ot(e){M(e)}function Nt(e){if(Be(D(e)))return e}function Mt(e,t){if("change"===e)return t}var Rt=!1;function It(){Pt&&(Pt.detachEvent("onpropertychange",jt),Ct=Pt=null)}function jt(e){"value"===e.propertyName&&Nt(Ct)&&Ae(Ot,e=Tt(Ct,e,Ue(e)))}function Ft(e,t,n){"focus"===e?(It(),Ct=n,(Pt=t).attachEvent("onpropertychange",jt)):"blur"===e&&It()}function At(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Nt(Ct)}function Dt(e,t){if("click"===e)return Nt(t)}function Lt(e,t){if("input"===e||"change"===e)return Nt(t)}G&&(Rt=ze("input")&&(!document.documentMode||9<document.documentMode));var Ut={eventTypes:kt,_isInputEventSupported:Rt,extractEvents:function(e,t,n,r){var o=t?D(t):window,i=void 0,u=void 0,a=o.nodeName&&o.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===o.type?i=Mt:Le(o)?Rt?i=Lt:(i=At,u=Ft):(a=o.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Dt),i&&(i=i(e,t)))return Tt(i,n,r);u&&u(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&_t(o,"number",o.value)}},zt=le.extend({view:null,detail:null}),Wt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Vt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Wt[e])&&!!t[e]}function Bt(){return Vt}var $t=0,Gt=0,Ht=!1,qt=!1,Kt=zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Bt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=$t;return $t=e.screenX,Ht?"mousemove"===e.type?e.screenX-t:0:(Ht=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Gt;return Gt=e.screenY,qt?"mousemove"===e.type?e.screenY-t:0:(qt=!0,0)}}),Qt=Kt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Yt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Xt={eventTypes:Yt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?F(t):null):i=null,i===t)return null;var u=void 0,a=void 0,l=void 0,c=void 0;"mouseout"===e||"mouseover"===e?(u=Kt,a=Yt.mouseLeave,l=Yt.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(u=Qt,a=Yt.pointerLeave,l=Yt.pointerEnter,c="pointer");var s=null==i?o:D(i);if(o=null==t?o:D(t),(e=u.getPooled(a,i,n,r)).type=c+"leave",e.target=s,e.relatedTarget=o,(n=u.getPooled(l,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=s,r=t,i&&r)e:{for(o=r,c=0,u=t=i;u;u=U(u))c++;for(u=0,l=o;l;l=U(l))u++;for(;0<c-u;)t=U(t),c--;for(;0<u-c;)o=U(o),u--;for(;c--;){if(t===o||t===o.alternate)break e;t=U(t),o=U(o)}t=null}else t=null;for(o=t,t=[];i&&i!==o&&(null===(c=i.alternate)||c!==o);)t.push(i),i=U(i);for(i=[];r&&r!==o&&(null===(c=r.alternate)||c!==o);)i.push(r),r=U(r);for(r=0;r<t.length;r++)V(t[r],"bubbled",e);for(r=i.length;0<r--;)V(i[r],"captured",n);return[e,n]}};function Jt(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var Zt=Object.prototype.hasOwnProperty;function en(e,t){if(Jt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Zt.call(t,n[r])||!Jt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&u("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&u("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return nn(o),e;if(a===r)return nn(o),t;a=a.sibling}u("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var l=o.child;l;){if(l===n){a=!0,n=o,r=i;break}if(l===r){a=!0,r=o,n=i;break}l=l.sibling}if(!a){for(l=i.child;l;){if(l===n){a=!0,n=i,r=o;break}if(l===r){a=!0,r=i,n=o;break}l=l.sibling}a||u("189")}}n.alternate!==r&&u("190")}return 3!==n.tag&&u("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var on=le.extend({animationName:null,elapsedTime:null,pseudoElement:null}),un=le.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),an=zt.extend({relatedTarget:null});function ln(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn=zt.extend({key:function(e){if(e.key){var t=cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=ln(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?sn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Bt,charCode:function(e){return"keypress"===e.type?ln(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?ln(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),pn=Kt.extend({dataTransfer:null}),dn=zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Bt}),hn=le.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),vn=Kt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),yn=[["abort","abort"],[X,"animationEnd"],[J,"animationIteration"],[Z,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],mn={},gn={};function bn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},mn[e]=t,gn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){bn(e,!0)}),yn.forEach(function(e){bn(e,!1)});var wn={eventTypes:mn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=gn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=gn[e];if(!o)return null;switch(e){case"keypress":if(0===ln(n))return null;case"keydown":case"keyup":e=fn;break;case"blur":case"focus":e=an;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Kt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=pn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=dn;break;case X:case J:case Z:e=on;break;case ee:e=hn;break;case"scroll":e=zt;break;case"wheel":e=vn;break;case"copy":case"cut":case"paste":e=un;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Qt;break;default:e=le}return $(t=e.getPooled(o,t,n,r)),t}},xn=wn.isInteractiveTopLevelEventType,Sn=[];function En(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=F(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=Ue(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,u=null,a=0;a<m.length;a++){var l=m[a];l&&(l=l.extractEvents(r,t,i,o))&&(u=k(u,l))}M(u)}}var _n=!0;function kn(e,t){if(!t)return null;var n=(xn(e)?Pn:Cn).bind(null,e);t.addEventListener(e,n,!1)}function Tn(e,t){if(!t)return null;var n=(xn(e)?Pn:Cn).bind(null,e);t.addEventListener(e,n,!0)}function Pn(e,t){Ie(Cn,e,t)}function Cn(e,t){if(_n){var n=Ue(t);if(null===(n=F(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),Sn.length){var r=Sn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Ae(En,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Sn.length&&Sn.push(e)}}}var On={},Nn=0,Mn="_reactListenersID"+(""+Math.random()).slice(2);function Rn(e){return Object.prototype.hasOwnProperty.call(e,Mn)||(e[Mn]=Nn++,On[e[Mn]]={}),On[e[Mn]]}function In(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function jn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Fn(e,t){var n,r=jn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=jn(r)}}function An(){for(var e=window,t=In();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=In((e=t.contentWindow).document)}return t}function Dn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function Ln(e){var t=An(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(n.ownerDocument.documentElement,n)){if(null!==r&&Dn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=Fn(n,i);var u=Fn(n,r);o&&u&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==u.node||e.focusOffset!==u.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(u.node,u.offset)):(t.setEnd(u.node,u.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Un=G&&"documentMode"in document&&11>=document.documentMode,zn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Wn=null,Vn=null,Bn=null,$n=!1;function Gn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return $n||null==Wn||Wn!==In(n)?null:("selectionStart"in(n=Wn)&&Dn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Bn&&en(Bn,n)?null:(Bn=n,(e=le.getPooled(zn.select,Vn,e,t)).type="select",e.target=Wn,$(e),e))}var Hn={eventTypes:zn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=Rn(i),o=w.onSelect;for(var u=0;u<o.length;u++){var a=o[u];if(!i.hasOwnProperty(a)||!i[a]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?D(t):window,e){case"focus":(Le(i)||"true"===i.contentEditable)&&(Wn=i,Vn=t,Bn=null);break;case"blur":Bn=Vn=Wn=null;break;case"mousedown":$n=!0;break;case"contextmenu":case"mouseup":case"dragend":return $n=!1,Gn(n,r);case"selectionchange":if(Un)break;case"keydown":case"keyup":return Gn(n,r)}return null}};function qn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Kn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+gt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Qn(e,t){return null!=t.dangerouslySetInnerHTML&&u("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Yn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&u("92"),Array.isArray(t)&&(1>=t.length||u("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:gt(n)}}function Xn(e,t){var n=gt(t.value),r=gt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Jn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}O.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x=L,S=A,E=D,O.injectEventPluginsByName({SimpleEventPlugin:wn,EnterLeaveEventPlugin:Xt,ChangeEventPlugin:Ut,SelectEventPlugin:Hn,BeforeInputEventPlugin:ke});var Zn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function er(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function tr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?er(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var nr,rr=void 0,or=(nr=function(e,t){if(e.namespaceURI!==Zn.svg||"innerHTML"in e)e.innerHTML=t;else{for((rr=rr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=rr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return nr(e,t)})}:nr);function ir(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ur={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ar=["Webkit","ms","Moz","O"];function lr(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ur.hasOwnProperty(e)&&ur[e]?(""+t).trim():t+"px"}function cr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=lr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ur).forEach(function(e){ar.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ur[t]=ur[e]})});var sr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function fr(e,t){t&&(sr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&u("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&u("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||u("61")),null!=t.style&&"object"!=typeof t.style&&u("62",""))}function pr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function dr(e,t){var n=Rn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=w[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Tn("scroll",e);break;case"focus":case"blur":Tn("focus",e),Tn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":ze(o)&&Tn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(o)&&kn(o,e)}n[o]=!0}}}function hr(){}var vr=null,yr=null;function mr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function gr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var br="function"==typeof setTimeout?setTimeout:void 0,wr="function"==typeof clearTimeout?clearTimeout:void 0,xr=i.unstable_scheduleCallback,Sr=i.unstable_cancelCallback;function Er(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function _r(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var kr=[],Tr=-1;function Pr(e){0>Tr||(e.current=kr[Tr],kr[Tr]=null,Tr--)}function Cr(e,t){kr[++Tr]=e.current,e.current=t}var Or={},Nr={current:Or},Mr={current:!1},Rr=Or;function Ir(e,t){var n=e.type.contextTypes;if(!n)return Or;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function jr(e){return null!=(e=e.childContextTypes)}function Fr(e){Pr(Mr),Pr(Nr)}function Ar(e){Pr(Mr),Pr(Nr)}function Dr(e,t,n){Nr.current!==Or&&u("168"),Cr(Nr,t),Cr(Mr,n)}function Lr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in e||u("108",at(t)||"Unknown",i);return o({},n,r)}function Ur(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Or,Rr=Nr.current,Cr(Nr,t),Cr(Mr,Mr.current),!0}function zr(e,t,n){var r=e.stateNode;r||u("169"),n?(t=Lr(e,t,Rr),r.__reactInternalMemoizedMergedChildContext=t,Pr(Mr),Pr(Nr),Cr(Nr,t)):Pr(Mr),Cr(Mr,n)}var Wr=null,Vr=null;function Br(e){return function(t){try{return e(t)}catch(e){}}}function $r(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.contextDependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Gr(e,t,n,r){return new $r(e,t,n,r)}function Hr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function qr(e,t){var n=e.alternate;return null===n?((n=Gr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.contextDependencies=e.contextDependencies,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Kr(e,t,n,r,o,i){var a=2;if(r=e,"function"==typeof e)Hr(e)&&(a=1);else if("string"==typeof e)a=5;else e:switch(e){case Qe:return Qr(n.children,o,i,t);case et:return Yr(n,3|o,i,t);case Ye:return Yr(n,2|o,i,t);case Xe:return(e=Gr(12,n,t,4|o)).elementType=Xe,e.type=Xe,e.expirationTime=i,e;case nt:return(e=Gr(13,n,t,o)).elementType=nt,e.type=nt,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Je:a=10;break e;case Ze:a=9;break e;case tt:a=11;break e;case rt:a=14;break e;case ot:a=16,r=null;break e}u("130",null==e?e:typeof e,"")}return(t=Gr(a,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Qr(e,t,n,r){return(e=Gr(7,e,r,t)).expirationTime=n,e}function Yr(e,t,n,r){return e=Gr(8,e,r,t),t=0==(1&t)?Ye:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function Xr(e,t,n){return(e=Gr(6,e,null,t)).expirationTime=n,e}function Jr(e,t,n){return(t=Gr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Zr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),no(t,e)}function eo(e,t){e.didError=!1,e.latestPingedTime>=t&&(e.latestPingedTime=0);var n=e.earliestPendingTime,r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),no(t,e)}function to(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function no(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,i=t.latestPingedTime;0===(o=0!==o?o:i)&&(0===e||r<e)&&(o=r),0!==(e=o)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}function ro(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var oo=(new r.Component).refs;function io(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var uo={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Sa(),o=Yi(r=Qu(r,e));o.payload=t,null!=n&&(o.callback=n),Bu(),Ji(e,o),Ju(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Sa(),o=Yi(r=Qu(r,e));o.tag=$i,o.payload=t,null!=n&&(o.callback=n),Bu(),Ji(e,o),Ju(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Sa(),r=Yi(n=Qu(n,e));r.tag=Gi,null!=t&&(r.callback=t),Bu(),Ji(e,r),Ju(e,n)}};function ao(e,t,n,r,o,i,u){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,u):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(o,i))}function lo(e,t,n){var r=!1,o=Or,i=t.contextType;return"object"==typeof i&&null!==i?i=Vi(i):(o=jr(t)?Rr:Nr.current,i=(r=null!=(r=t.contextTypes))?Ir(e,o):Or),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=uo,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function co(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&uo.enqueueReplaceState(t,t.state,null)}function so(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=oo;var i=t.contextType;"object"==typeof i&&null!==i?o.context=Vi(i):(i=jr(t)?Rr:Nr.current,o.context=Ir(e,i)),null!==(i=e.updateQueue)&&(nu(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(io(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&uo.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(nu(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var fo=Array.isArray;function po(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&u("309"),r=n.stateNode),r||u("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===oo&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&u("284"),n._owner||u("290",e)}return e}function ho(e,t){"textarea"!==e.type&&u("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function vo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=qr(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Xr(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=po(e,t,n),r.return=e,r):((r=Kr(n.type,n.key,n.props,null,e.mode,r)).ref=po(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Jr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Qr(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case qe:return(n=Kr(t.type,t.key,t.props,null,e.mode,n)).ref=po(e,null,t),n.return=e,n;case Ke:return(t=Jr(t,e.mode,n)).return=e,t}if(fo(t)||ut(t))return(t=Qr(t,e.mode,n,null)).return=e,t;ho(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case qe:return n.key===o?n.type===Qe?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case Ke:return n.key===o?s(e,t,n,r):null}if(fo(n)||ut(n))return null!==o?null:f(e,t,n,r,null);ho(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case qe:return e=e.get(null===r.key?n:r.key)||null,r.type===Qe?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case Ke:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(fo(r)||ut(r))return f(t,e=e.get(n)||null,r,o,null);ho(t,r)}return null}function v(o,u,a,l){for(var c=null,s=null,f=u,v=u=0,y=null;null!==f&&v<a.length;v++){f.index>v?(y=f,f=null):y=f.sibling;var m=d(o,f,a[v],l);if(null===m){null===f&&(f=y);break}e&&f&&null===m.alternate&&t(o,f),u=i(m,u,v),null===s?c=m:s.sibling=m,s=m,f=y}if(v===a.length)return n(o,f),c;if(null===f){for(;v<a.length;v++)(f=p(o,a[v],l))&&(u=i(f,u,v),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);v<a.length;v++)(y=h(f,o,v,a[v],l))&&(e&&null!==y.alternate&&f.delete(null===y.key?v:y.key),u=i(y,u,v),null===s?c=y:s.sibling=y,s=y);return e&&f.forEach(function(e){return t(o,e)}),c}function y(o,a,l,c){var s=ut(l);"function"!=typeof s&&u("150"),null==(l=s.call(l))&&u("151");for(var f=s=null,v=a,y=a=0,m=null,g=l.next();null!==v&&!g.done;y++,g=l.next()){v.index>y?(m=v,v=null):m=v.sibling;var b=d(o,v,g.value,c);if(null===b){v||(v=m);break}e&&v&&null===b.alternate&&t(o,v),a=i(b,a,y),null===f?s=b:f.sibling=b,f=b,v=m}if(g.done)return n(o,v),s;if(null===v){for(;!g.done;y++,g=l.next())null!==(g=p(o,g.value,c))&&(a=i(g,a,y),null===f?s=g:f.sibling=g,f=g);return s}for(v=r(o,v);!g.done;y++,g=l.next())null!==(g=h(v,o,y,g.value,c))&&(e&&null!==g.alternate&&v.delete(null===g.key?y:g.key),a=i(g,a,y),null===f?s=g:f.sibling=g,f=g);return e&&v.forEach(function(e){return t(o,e)}),s}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===Qe&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case qe:e:{for(s=i.key,c=r;null!==c;){if(c.key===s){if(7===c.tag?i.type===Qe:c.elementType===i.type){n(e,c.sibling),(r=o(c,i.type===Qe?i.props.children:i.props)).ref=po(e,c,i),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}i.type===Qe?((r=Qr(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Kr(i.type,i.key,i.props,null,e.mode,l)).ref=po(e,r,i),l.return=e,e=l)}return a(e);case Ke:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Jr(i,e.mode,l)).return=e,e=r}return a(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Xr(i,e.mode,l)).return=e,e=r),a(e);if(fo(i))return v(e,r,i,l);if(ut(i))return y(e,r,i,l);if(s&&ho(e,i),void 0===i&&!c)switch(e.tag){case 1:case 0:u("152",(l=e.type).displayName||l.name||"Component")}return n(e,r)}}var yo=vo(!0),mo=vo(!1),go={},bo={current:go},wo={current:go},xo={current:go};function So(e){return e===go&&u("174"),e}function Eo(e,t){Cr(xo,t),Cr(wo,e),Cr(bo,go);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:tr(null,"");break;default:t=tr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Pr(bo),Cr(bo,t)}function _o(e){Pr(bo),Pr(wo),Pr(xo)}function ko(e){So(xo.current);var t=So(bo.current),n=tr(t,e.type);t!==n&&(Cr(wo,e),Cr(bo,n))}function To(e){wo.current===e&&(Pr(bo),Pr(wo))}var Po=0,Co=2,Oo=4,No=8,Mo=16,Ro=32,Io=64,jo=128,Fo=$e.ReactCurrentDispatcher,Ao=0,Do=null,Lo=null,Uo=null,zo=null,Wo=null,Vo=null,Bo=0,$o=null,Go=0,Ho=!1,qo=null,Ko=0;function Qo(){u("321")}function Yo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Jt(e[n],t[n]))return!1;return!0}function Xo(e,t,n,r,o,i){if(Ao=i,Do=t,Uo=null!==e?e.memoizedState:null,Fo.current=null===Uo?si:fi,t=n(r,o),Ho){do{Ho=!1,Ko+=1,Uo=null!==e?e.memoizedState:null,Vo=zo,$o=Wo=Lo=null,Fo.current=fi,t=n(r,o)}while(Ho);qo=null,Ko=0}return Fo.current=ci,(e=Do).memoizedState=zo,e.expirationTime=Bo,e.updateQueue=$o,e.effectTag|=Go,e=null!==Lo&&null!==Lo.next,Ao=0,Vo=Wo=zo=Uo=Lo=Do=null,Bo=0,$o=null,Go=0,e&&u("300"),t}function Jo(){Fo.current=ci,Ao=0,Vo=Wo=zo=Uo=Lo=Do=null,Bo=0,$o=null,Go=0,Ho=!1,qo=null,Ko=0}function Zo(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Wo?zo=Wo=e:Wo=Wo.next=e,Wo}function ei(){if(null!==Vo)Vo=(Wo=Vo).next,Uo=null!==(Lo=Uo)?Lo.next:null;else{null===Uo&&u("310");var e={memoizedState:(Lo=Uo).memoizedState,baseState:Lo.baseState,queue:Lo.queue,baseUpdate:Lo.baseUpdate,next:null};Wo=null===Wo?zo=e:Wo.next=e,Uo=Lo.next}return Wo}function ti(e,t){return"function"==typeof t?t(e):t}function ni(e){var t=ei(),n=t.queue;if(null===n&&u("311"),n.lastRenderedReducer=e,0<Ko){var r=n.dispatch;if(null!==qo){var o=qo.get(n);if(void 0!==o){qo.delete(n);var i=t.memoizedState;do{i=e(i,o.action),o=o.next}while(null!==o);return Jt(i,t.memoizedState)||(Si=!0),t.memoizedState=i,t.baseUpdate===n.last&&(t.baseState=i),n.lastRenderedState=i,[i,r]}}return[t.memoizedState,r]}r=n.last;var a=t.baseUpdate;if(i=t.baseState,null!==a?(null!==r&&(r.next=null),r=a.next):r=null!==r?r.next:null,null!==r){var l=o=null,c=r,s=!1;do{var f=c.expirationTime;f<Ao?(s||(s=!0,l=a,o=i),f>Bo&&(Bo=f)):i=c.eagerReducer===e?c.eagerState:e(i,c.action),a=c,c=c.next}while(null!==c&&c!==r);s||(l=a,o=i),Jt(i,t.memoizedState)||(Si=!0),t.memoizedState=i,t.baseUpdate=l,t.baseState=o,n.lastRenderedState=i}return[t.memoizedState,n.dispatch]}function ri(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===$o?($o={lastEffect:null}).lastEffect=e.next=e:null===(t=$o.lastEffect)?$o.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,$o.lastEffect=e),e}function oi(e,t,n,r){var o=Zo();Go|=e,o.memoizedState=ri(t,n,void 0,void 0===r?null:r)}function ii(e,t,n,r){var o=ei();r=void 0===r?null:r;var i=void 0;if(null!==Lo){var u=Lo.memoizedState;if(i=u.destroy,null!==r&&Yo(r,u.deps))return void ri(Po,n,i,r)}Go|=e,o.memoizedState=ri(t,n,i,r)}function ui(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ai(){}function li(e,t,n){25>Ko||u("301");var r=e.alternate;if(e===Do||null!==r&&r===Do)if(Ho=!0,e={expirationTime:Ao,action:n,eagerReducer:null,eagerState:null,next:null},null===qo&&(qo=new Map),void 0===(n=qo.get(t)))qo.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{Bu();var o=Sa(),i={expirationTime:o=Qu(o,e),action:n,eagerReducer:null,eagerState:null,next:null},a=t.last;if(null===a)i.next=i;else{var l=a.next;null!==l&&(i.next=l),a.next=i}if(t.last=i,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var c=t.lastRenderedState,s=r(c,n);if(i.eagerReducer=r,i.eagerState=s,Jt(s,c))return}catch(e){}Ju(e,o)}}var ci={readContext:Vi,useCallback:Qo,useContext:Qo,useEffect:Qo,useImperativeHandle:Qo,useLayoutEffect:Qo,useMemo:Qo,useReducer:Qo,useRef:Qo,useState:Qo,useDebugValue:Qo},si={readContext:Vi,useCallback:function(e,t){return Zo().memoizedState=[e,void 0===t?null:t],e},useContext:Vi,useEffect:function(e,t){return oi(516,jo|Io,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,oi(4,Oo|Ro,ui.bind(null,t,e),n)},useLayoutEffect:function(e,t){return oi(4,Oo|Ro,e,t)},useMemo:function(e,t){var n=Zo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Zo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=li.bind(null,Do,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Zo().memoizedState=e},useState:function(e){var t=Zo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:ti,lastRenderedState:e}).dispatch=li.bind(null,Do,e),[t.memoizedState,e]},useDebugValue:ai},fi={readContext:Vi,useCallback:function(e,t){var n=ei();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Yo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:Vi,useEffect:function(e,t){return ii(516,jo|Io,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ii(4,Oo|Ro,ui.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ii(4,Oo|Ro,e,t)},useMemo:function(e,t){var n=ei();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Yo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:ni,useRef:function(){return ei().memoizedState},useState:function(e){return ni(ti)},useDebugValue:ai},pi=null,di=null,hi=!1;function vi(e,t){var n=Gr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function yi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function mi(e){if(hi){var t=di;if(t){var n=t;if(!yi(e,t)){if(!(t=Er(n))||!yi(e,t))return e.effectTag|=2,hi=!1,void(pi=e);vi(pi,n)}pi=e,di=_r(t)}else e.effectTag|=2,hi=!1,pi=e}}function gi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;pi=e}function bi(e){if(e!==pi)return!1;if(!hi)return gi(e),hi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!gr(t,e.memoizedProps))for(t=di;t;)vi(e,t),t=Er(t);return gi(e),di=pi?Er(e.stateNode):null,!0}function wi(){di=pi=null,hi=!1}var xi=$e.ReactCurrentOwner,Si=!1;function Ei(e,t,n,r){t.child=null===e?mo(t,null,n,r):yo(t,e.child,n,r)}function _i(e,t,n,r,o){n=n.render;var i=t.ref;return Wi(t,o),r=Xo(e,t,n,r,i,o),null===e||Si?(t.effectTag|=1,Ei(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ii(e,t,o))}function ki(e,t,n,r,o,i){if(null===e){var u=n.type;return"function"!=typeof u||Hr(u)||void 0!==u.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Kr(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=u,Ti(e,t,u,r,o,i))}return u=e.child,o<i&&(o=u.memoizedProps,(n=null!==(n=n.compare)?n:en)(o,r)&&e.ref===t.ref)?Ii(e,t,i):(t.effectTag|=1,(e=qr(u,r)).ref=t.ref,e.return=t,t.child=e)}function Ti(e,t,n,r,o,i){return null!==e&&en(e.memoizedProps,r)&&e.ref===t.ref&&(Si=!1,o<i)?Ii(e,t,i):Ci(e,t,n,r,i)}function Pi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ci(e,t,n,r,o){var i=jr(n)?Rr:Nr.current;return i=Ir(t,i),Wi(t,o),n=Xo(e,t,n,r,i,o),null===e||Si?(t.effectTag|=1,Ei(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ii(e,t,o))}function Oi(e,t,n,r,o){if(jr(n)){var i=!0;Ur(t)}else i=!1;if(Wi(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),lo(t,n,r),so(t,n,r,o),r=!0;else if(null===e){var u=t.stateNode,a=t.memoizedProps;u.props=a;var l=u.context,c=n.contextType;"object"==typeof c&&null!==c?c=Vi(c):c=Ir(t,c=jr(n)?Rr:Nr.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof u.getSnapshotBeforeUpdate;f||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(a!==r||l!==c)&&co(t,u,r,c),qi=!1;var p=t.memoizedState;l=u.state=p;var d=t.updateQueue;null!==d&&(nu(t,d,r,u,o),l=t.memoizedState),a!==r||p!==l||Mr.current||qi?("function"==typeof s&&(io(t,n,s,r),l=t.memoizedState),(a=qi||ao(t,n,a,r,p,l,c))?(f||"function"!=typeof u.UNSAFE_componentWillMount&&"function"!=typeof u.componentWillMount||("function"==typeof u.componentWillMount&&u.componentWillMount(),"function"==typeof u.UNSAFE_componentWillMount&&u.UNSAFE_componentWillMount()),"function"==typeof u.componentDidMount&&(t.effectTag|=4)):("function"==typeof u.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),u.props=r,u.state=l,u.context=c,r=a):("function"==typeof u.componentDidMount&&(t.effectTag|=4),r=!1)}else u=t.stateNode,a=t.memoizedProps,u.props=t.type===t.elementType?a:ro(t.type,a),l=u.context,"object"==typeof(c=n.contextType)&&null!==c?c=Vi(c):c=Ir(t,c=jr(n)?Rr:Nr.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof u.getSnapshotBeforeUpdate)||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(a!==r||l!==c)&&co(t,u,r,c),qi=!1,l=t.memoizedState,p=u.state=l,null!==(d=t.updateQueue)&&(nu(t,d,r,u,o),p=t.memoizedState),a!==r||l!==p||Mr.current||qi?("function"==typeof s&&(io(t,n,s,r),p=t.memoizedState),(s=qi||ao(t,n,a,r,l,p,c))?(f||"function"!=typeof u.UNSAFE_componentWillUpdate&&"function"!=typeof u.componentWillUpdate||("function"==typeof u.componentWillUpdate&&u.componentWillUpdate(r,p,c),"function"==typeof u.UNSAFE_componentWillUpdate&&u.UNSAFE_componentWillUpdate(r,p,c)),"function"==typeof u.componentDidUpdate&&(t.effectTag|=4),"function"==typeof u.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof u.componentDidUpdate||a===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof u.getSnapshotBeforeUpdate||a===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),u.props=r,u.state=p,u.context=c,r=s):("function"!=typeof u.componentDidUpdate||a===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof u.getSnapshotBeforeUpdate||a===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return Ni(e,t,n,r,i,o)}function Ni(e,t,n,r,o,i){Pi(e,t);var u=0!=(64&t.effectTag);if(!r&&!u)return o&&zr(t,n,!1),Ii(e,t,i);r=t.stateNode,xi.current=t;var a=u&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&u?(t.child=yo(t,e.child,null,i),t.child=yo(t,null,a,i)):Ei(e,t,a,i),t.memoizedState=r.state,o&&zr(t,n,!0),t.child}function Mi(e){var t=e.stateNode;t.pendingContext?Dr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Dr(0,t.context,!1),Eo(e,t.containerInfo)}function Ri(e,t,n){var r=t.mode,o=t.pendingProps,i=t.memoizedState;if(0==(64&t.effectTag)){i=null;var u=!1}else i={timedOutAt:null!==i?i.timedOutAt:0},u=!0,t.effectTag&=-65;if(null===e)if(u){var a=o.fallback;e=Qr(null,r,0,null),0==(1&t.mode)&&(e.child=null!==t.memoizedState?t.child.child:t.child),r=Qr(a,r,n,null),e.sibling=r,(n=e).return=r.return=t}else n=r=mo(t,null,o.children,n);else null!==e.memoizedState?(a=(r=e.child).sibling,u?(n=o.fallback,o=qr(r,r.pendingProps),0==(1&t.mode)&&((u=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(o.child=u)),r=o.sibling=qr(a,n,a.expirationTime),n=o,o.childExpirationTime=0,n.return=r.return=t):n=r=yo(t,r.child,o.children,n)):(a=e.child,u?(u=o.fallback,(o=Qr(null,r,0,null)).child=a,0==(1&t.mode)&&(o.child=null!==t.memoizedState?t.child.child:t.child),(r=o.sibling=Qr(u,r,n,null)).effectTag|=2,n=o,o.childExpirationTime=0,n.return=r.return=t):r=n=yo(t,a,o.children,n)),t.stateNode=e.stateNode;return t.memoizedState=i,t.child=n,r}function Ii(e,t,n){if(null!==e&&(t.contextDependencies=e.contextDependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&u("153"),null!==t.child){for(n=qr(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=qr(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function ji(e,t,n){var r=t.expirationTime;if(null!==e){if(e.memoizedProps!==t.pendingProps||Mr.current)Si=!0;else if(r<n){switch(Si=!1,t.tag){case 3:Mi(t),wi();break;case 5:ko(t);break;case 1:jr(t.type)&&Ur(t);break;case 4:Eo(t,t.stateNode.containerInfo);break;case 10:Ui(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Ri(e,t,n):null!==(t=Ii(e,t,n))?t.sibling:null}return Ii(e,t,n)}}else Si=!1;switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var o=Ir(t,Nr.current);if(Wi(t,n),o=Xo(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,Jo(),jr(r)){var i=!0;Ur(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var a=r.getDerivedStateFromProps;"function"==typeof a&&io(t,r,a,e),o.updater=uo,t.stateNode=o,o._reactInternalFiber=t,so(t,r,e,n),t=Ni(null,t,r,!0,i,n)}else t.tag=0,Ei(null,t,o,n),t=t.child;return t;case 16:switch(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),i=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(o),t.type=e,o=t.tag=function(e){if("function"==typeof e)return Hr(e)?1:0;if(null!=e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),i=ro(e,i),a=void 0,o){case 0:a=Ci(null,t,e,i,n);break;case 1:a=Oi(null,t,e,i,n);break;case 11:a=_i(null,t,e,i,n);break;case 14:a=ki(null,t,e,ro(e.type,i),r,n);break;default:u("306",e,"")}return a;case 0:return r=t.type,o=t.pendingProps,Ci(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 1:return r=t.type,o=t.pendingProps,Oi(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 3:return Mi(t),null===(r=t.updateQueue)&&u("282"),o=null!==(o=t.memoizedState)?o.element:null,nu(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(wi(),t=Ii(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(di=_r(t.stateNode.containerInfo),pi=t,o=hi=!0),o?(t.effectTag|=2,t.child=mo(t,null,r,n)):(Ei(e,t,r,n),wi()),t=t.child),t;case 5:return ko(t),null===e&&mi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,a=o.children,gr(r,o)?a=null:null!==i&&gr(r,i)&&(t.effectTag|=16),Pi(e,t),1!==n&&1&t.mode&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Ei(e,t,a,n),t=t.child),t;case 6:return null===e&&mi(t),null;case 13:return Ri(e,t,n);case 4:return Eo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=yo(t,null,r,n):Ei(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,_i(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 7:return Ei(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ei(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,a=t.memoizedProps,Ui(t,i=o.value),null!==a){var l=a.value;if(0===(i=Jt(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(a.children===o.children&&!Mr.current){t=Ii(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.contextDependencies;if(null!==c){a=l.child;for(var s=c.first;null!==s;){if(s.context===r&&0!=(s.observedBits&i)){1===l.tag&&((s=Yi(n)).tag=Gi,Ji(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),s=n;for(var f=l.return;null!==f;){var p=f.alternate;if(f.childExpirationTime<s)f.childExpirationTime=s,null!==p&&p.childExpirationTime<s&&(p.childExpirationTime=s);else{if(!(null!==p&&p.childExpirationTime<s))break;p.childExpirationTime=s}f=f.return}c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else a=10===l.tag&&l.type===t.type?null:l.child;if(null!==a)a.return=l;else for(a=l;null!==a;){if(a===t){a=null;break}if(null!==(l=a.sibling)){l.return=a.return,a=l;break}a=a.return}l=a}}Ei(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,Wi(t,n),r=r(o=Vi(o,i.unstable_observedBits)),t.effectTag|=1,Ei(e,t,r,n),t.child;case 14:return i=ro(o=t.type,t.pendingProps),ki(e,t,o,i=ro(o.type,i),r,n);case 15:return Ti(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:ro(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,jr(r)?(e=!0,Ur(t)):e=!1,Wi(t,n),lo(t,r,o),so(t,r,o,n),Ni(null,t,r,!0,e,n)}u("156")}var Fi={current:null},Ai=null,Di=null,Li=null;function Ui(e,t){var n=e.type._context;Cr(Fi,n._currentValue),n._currentValue=t}function zi(e){var t=Fi.current;Pr(Fi),e.type._context._currentValue=t}function Wi(e,t){Ai=e,Li=Di=null;var n=e.contextDependencies;null!==n&&n.expirationTime>=t&&(Si=!0),e.contextDependencies=null}function Vi(e,t){return Li!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(Li=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Di?(null===Ai&&u("308"),Di=t,Ai.contextDependencies={first:t,expirationTime:0}):Di=Di.next=t),e._currentValue}var Bi=0,$i=1,Gi=2,Hi=3,qi=!1;function Ki(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Qi(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Yi(e){return{expirationTime:e,tag:Bi,payload:null,callback:null,next:null,nextEffect:null}}function Xi(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Ji(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=Ki(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=Ki(e.memoizedState),o=n.updateQueue=Ki(n.memoizedState)):r=e.updateQueue=Qi(o):null===o&&(o=n.updateQueue=Qi(r));null===o||r===o?Xi(r,t):null===r.lastUpdate||null===o.lastUpdate?(Xi(r,t),Xi(o,t)):(Xi(r,t),o.lastUpdate=t)}function Zi(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Ki(e.memoizedState):eu(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function eu(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Qi(t)),t}function tu(e,t,n,r,i,u){switch(n.tag){case $i:return"function"==typeof(e=n.payload)?e.call(u,r,i):e;case Hi:e.effectTag=-2049&e.effectTag|64;case Bi:if(null==(i="function"==typeof(e=n.payload)?e.call(u,r,i):e))break;return o({},r,i);case Gi:qi=!0}return r}function nu(e,t,n,r,o){qi=!1;for(var i=(t=eu(e,t)).baseState,u=null,a=0,l=t.firstUpdate,c=i;null!==l;){var s=l.expirationTime;s<o?(null===u&&(u=l,i=c),a<s&&(a=s)):(c=tu(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(s=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<o?(null===s&&(s=l,null===u&&(i=c)),a<f&&(a=f)):(c=tu(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===u&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===u&&null===s&&(i=c),t.baseState=i,t.firstUpdate=u,t.firstCapturedUpdate=s,e.expirationTime=a,e.memoizedState=c}function ru(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),ou(t.firstEffect,n),t.firstEffect=t.lastEffect=null,ou(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function ou(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&u("191",n),n.call(r)}e=e.nextEffect}}function iu(e,t){return{value:e,source:t,stack:lt(t)}}function uu(e){e.effectTag|=4}var au=void 0,lu=void 0,cu=void 0,su=void 0;au=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},lu=function(){},cu=function(e,t,n,r,i){var u=e.memoizedProps;if(u!==r){var a=t.stateNode;switch(So(bo.current),e=null,n){case"input":u=bt(a,u),r=bt(a,r),e=[];break;case"option":u=qn(a,u),r=qn(a,r),e=[];break;case"select":u=o({},u,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":u=Qn(a,u),r=Qn(a,r),e=[];break;default:"function"!=typeof u.onClick&&"function"==typeof r.onClick&&(a.onclick=hr)}fr(n,r),a=n=void 0;var l=null;for(n in u)if(!r.hasOwnProperty(n)&&u.hasOwnProperty(n)&&null!=u[n])if("style"===n){var c=u[n];for(a in c)c.hasOwnProperty(a)&&(l||(l={}),l[a]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(b.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var s=r[n];if(c=null!=u?u[n]:void 0,r.hasOwnProperty(n)&&s!==c&&(null!=s||null!=c))if("style"===n)if(c){for(a in c)!c.hasOwnProperty(a)||s&&s.hasOwnProperty(a)||(l||(l={}),l[a]="");for(a in s)s.hasOwnProperty(a)&&c[a]!==s[a]&&(l||(l={}),l[a]=s[a])}else l||(e||(e=[]),e.push(n,l)),l=s;else"dangerouslySetInnerHTML"===n?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(n,""+s)):"children"===n?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(n,""+s):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(b.hasOwnProperty(n)?(null!=s&&dr(i,n),e||c===s||(e=[])):(e=e||[]).push(n,s))}l&&(e=e||[]).push("style",l),i=e,(t.updateQueue=i)&&uu(t)}},su=function(e,t,n,r){n!==r&&uu(t)};var fu="function"==typeof WeakSet?WeakSet:Set;function pu(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=lt(n)),null!==n&&at(n.type),t=t.value,null!==e&&1===e.tag&&at(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function du(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ku(e,t)}else t.current=null}function hu(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==Po){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}(r.tag&t)!==Po&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function vu(e){switch("function"==typeof Vr&&Vr(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(void 0!==r){var o=e;try{r()}catch(e){Ku(o,e)}}n=n.next}while(n!==t)}break;case 1:if(du(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Ku(e,t)}break;case 5:du(e);break;case 4:gu(e)}}function yu(e){return 5===e.tag||3===e.tag||4===e.tag}function mu(e){e:{for(var t=e.return;null!==t;){if(yu(t)){var n=t;break e}t=t.return}u("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:u("161")}16&n.effectTag&&(ir(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||yu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=t,a=o.stateNode,l=n;8===i.nodeType?i.parentNode.insertBefore(a,l):i.insertBefore(a,l)}else t.insertBefore(o.stateNode,n);else r?(a=t,l=o.stateNode,8===a.nodeType?(i=a.parentNode).insertBefore(l,a):(i=a).appendChild(l),null!=(a=a._reactRootContainer)||null!==i.onclick||(i.onclick=hr)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function gu(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&u("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,a=i;;)if(vu(a),null!==a.child&&4!==a.tag)a.child.return=a,a=a.child;else{if(a===i)break;for(;null===a.sibling;){if(null===a.return||a.return===i)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}o?(i=r,a=t.stateNode,8===i.nodeType?i.parentNode.removeChild(a):i.removeChild(a)):r.removeChild(t.stateNode)}else if(4===t.tag){if(null!==t.child){r=t.stateNode.containerInfo,o=!0,t.child.return=t,t=t.child;continue}}else if(vu(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function bu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:hu(Oo,No,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&function(e,t,n,r,o){e[j]=o,"input"===n&&"radio"===o.type&&null!=o.name&&xt(e,o),pr(n,r),r=pr(n,o);for(var i=0;i<t.length;i+=2){var u=t[i],a=t[i+1];"style"===u?cr(e,a):"dangerouslySetInnerHTML"===u?or(e,a):"children"===u?ir(e,a):mt(e,u,a,r)}switch(n){case"input":St(e,o);break;case"textarea":Xn(e,o);break;case"select":t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Kn(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Kn(e,!!o.multiple,o.defaultValue,!0):Kn(e,!!o.multiple,o.multiple?[]:"",!1))}}(n,i,o,e,r)}break;case 6:null===t.stateNode&&u("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t.memoizedState,r=void 0,e=t,null===n?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=Sa())),null!==e&&function(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)r.style.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=lr("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(e,r),null!==(n=t.updateQueue)){t.updateQueue=null;var a=t.stateNode;null===a&&(a=t.stateNode=new fu),n.forEach(function(e){var n=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),t=Qu(t=Sa(),e),null!==(e=Xu(e,t))&&(Zr(e,t),0!==(t=e.expirationTime)&&Ea(e,t))}.bind(null,t,e);a.has(e)||(a.add(e),e.then(n,n))})}break;case 17:break;default:u("163")}}var wu="function"==typeof WeakMap?WeakMap:Map;function xu(e,t,n){(n=Yi(n)).tag=Hi,n.payload={element:null};var r=t.value;return n.callback=function(){Ra(r),pu(e,t)},n}function Su(e,t,n){(n=Yi(n)).tag=Hi;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Lu?Lu=new Set([this]):Lu.add(this));var n=t.value,o=t.stack;pu(e,t),this.componentDidCatch(n,{componentStack:null!==o?o:""})}),n}function Eu(e){switch(e.tag){case 1:jr(e.type)&&Fr();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return _o(),Ar(),0!=(64&(t=e.effectTag))&&u("285"),e.effectTag=-2049&t|64,e;case 5:return To(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 4:return _o(),null;case 10:return zi(e),null;default:return null}}var _u=$e.ReactCurrentDispatcher,ku=$e.ReactCurrentOwner,Tu=1073741822,Pu=!1,Cu=null,Ou=null,Nu=0,Mu=-1,Ru=!1,Iu=null,ju=!1,Fu=null,Au=null,Du=null,Lu=null;function Uu(){if(null!==Cu)for(var e=Cu.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!=n&&Fr();break;case 3:_o(),Ar();break;case 5:To(t);break;case 4:_o();break;case 10:zi(t)}e=e.return}Ou=null,Nu=0,Mu=-1,Ru=!1,Cu=null}function zu(){for(;null!==Iu;){var e=Iu.effectTag;if(16&e&&ir(Iu.stateNode,""),128&e){var t=Iu.alternate;null!==t&&(null!==(t=t.ref)&&("function"==typeof t?t(null):t.current=null))}switch(14&e){case 2:mu(Iu),Iu.effectTag&=-3;break;case 6:mu(Iu),Iu.effectTag&=-3,bu(Iu.alternate,Iu);break;case 4:bu(Iu.alternate,Iu);break;case 8:gu(e=Iu),e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,null!==(e=e.alternate)&&(e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null)}Iu=Iu.nextEffect}}function Wu(){for(;null!==Iu;){if(256&Iu.effectTag)e:{var e=Iu.alternate,t=Iu;switch(t.tag){case 0:case 11:case 15:hu(Co,Po,t);break e;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:ro(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break e;case 3:case 5:case 6:case 4:case 17:break e;default:u("163")}}Iu=Iu.nextEffect}}function Vu(e,t){for(;null!==Iu;){var n=Iu.effectTag;if(36&n){var r=Iu.alternate,o=Iu,i=t;switch(o.tag){case 0:case 11:case 15:hu(Mo,Ro,o);break;case 1:var a=o.stateNode;if(4&o.effectTag)if(null===r)a.componentDidMount();else{var l=o.elementType===o.type?r.memoizedProps:ro(o.type,r.memoizedProps);a.componentDidUpdate(l,r.memoizedState,a.__reactInternalSnapshotBeforeUpdate)}null!==(r=o.updateQueue)&&ru(0,r,a);break;case 3:if(null!==(r=o.updateQueue)){if(a=null,null!==o.child)switch(o.child.tag){case 5:a=o.child.stateNode;break;case 1:a=o.child.stateNode}ru(0,r,a)}break;case 5:i=o.stateNode,null===r&&4&o.effectTag&&mr(o.type,o.memoizedProps)&&i.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:u("163")}}128&n&&(null!==(o=Iu.ref)&&(i=Iu.stateNode,"function"==typeof o?o(i):o.current=i)),512&n&&(Fu=e),Iu=Iu.nextEffect}}function Bu(){null!==Au&&Sr(Au),null!==Du&&Du()}function $u(e,t){ju=Pu=!0,e.current===t&&u("177");var n=e.pendingCommitExpirationTime;0===n&&u("261"),e.pendingCommitExpirationTime=0;var r=t.expirationTime,o=t.childExpirationTime;for(function(e,t){if(e.didError=!1,0===t)e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0;else{t<e.latestPingedTime&&(e.latestPingedTime=0);var n=e.latestPendingTime;0!==n&&(n>t?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>t&&(e.earliestPendingTime=e.latestPendingTime)),0===(n=e.earliestSuspendedTime)?Zr(e,t):t<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Zr(e,t)):t>n&&Zr(e,t)}no(0,e)}(e,o>r?o:r),ku.current=null,r=void 0,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,vr=_n,yr=function(){var e=An();if(Dn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,u=-1,a=-1,l=0,c=0,s=e,f=null;t:for(;;){for(var p;s!==t||0!==r&&3!==s.nodeType||(u=i+r),s!==o||0!==n&&3!==s.nodeType||(a=i+n),3===s.nodeType&&(i+=s.nodeValue.length),null!==(p=s.firstChild);)f=s,s=p;for(;;){if(s===e)break t;if(f===t&&++l===r&&(u=i),f===o&&++c===n&&(a=i),null!==(p=s.nextSibling))break;f=(s=f).parentNode}s=p}t=-1===u||-1===a?null:{start:u,end:a}}else t=null}t=t||{start:0,end:0}}else t=null;return{focusedElem:e,selectionRange:t}}(),_n=!1,Iu=r;null!==Iu;){o=!1;var a=void 0;try{Wu()}catch(e){o=!0,a=e}o&&(null===Iu&&u("178"),Ku(Iu,a),null!==Iu&&(Iu=Iu.nextEffect))}for(Iu=r;null!==Iu;){o=!1,a=void 0;try{zu()}catch(e){o=!0,a=e}o&&(null===Iu&&u("178"),Ku(Iu,a),null!==Iu&&(Iu=Iu.nextEffect))}for(Ln(yr),yr=null,_n=!!vr,vr=null,e.current=t,Iu=r;null!==Iu;){o=!1,a=void 0;try{Vu(e,n)}catch(e){o=!0,a=e}o&&(null===Iu&&u("178"),Ku(Iu,a),null!==Iu&&(Iu=Iu.nextEffect))}if(null!==r&&null!==Fu){var l=function(e,t){Du=Au=Fu=null;var n=oa;oa=!0;do{if(512&t.effectTag){var r=!1,o=void 0;try{var i=t;hu(jo,Po,i),hu(Po,Io,i)}catch(e){r=!0,o=e}r&&Ku(t,o)}t=t.nextEffect}while(null!==t);oa=n,0!==(n=e.expirationTime)&&Ea(e,n),sa||oa||Ca(1073741823,!1)}.bind(null,e,r);Au=i.unstable_runWithPriority(i.unstable_NormalPriority,function(){return xr(l)}),Du=l}Pu=ju=!1,"function"==typeof Wr&&Wr(t.stateNode),n=t.expirationTime,0===(t=(t=t.childExpirationTime)>n?t:n)&&(Lu=null),function(e,t){e.expirationTime=t,e.finishedWork=null}(e,t)}function Gu(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){Cu=e;e:{var i=t,a=Nu,l=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:jr(t.type)&&Fr();break;case 3:_o(),Ar(),(l=t.stateNode).pendingContext&&(l.context=l.pendingContext,l.pendingContext=null),null!==i&&null!==i.child||(bi(t),t.effectTag&=-3),lu(t);break;case 5:To(t);var c=So(xo.current);if(a=t.type,null!==i&&null!=t.stateNode)cu(i,t,a,l,c),i.ref!==t.ref&&(t.effectTag|=128);else if(l){var s=So(bo.current);if(bi(t)){i=(l=t).stateNode;var f=l.type,p=l.memoizedProps,d=c;switch(i[I]=l,i[j]=p,a=void 0,c=f){case"iframe":case"object":kn("load",i);break;case"video":case"audio":for(f=0;f<te.length;f++)kn(te[f],i);break;case"source":kn("error",i);break;case"img":case"image":case"link":kn("error",i),kn("load",i);break;case"form":kn("reset",i),kn("submit",i);break;case"details":kn("toggle",i);break;case"input":wt(i,p),kn("invalid",i),dr(d,"onChange");break;case"select":i._wrapperState={wasMultiple:!!p.multiple},kn("invalid",i),dr(d,"onChange");break;case"textarea":Yn(i,p),kn("invalid",i),dr(d,"onChange")}for(a in fr(c,p),f=null,p)p.hasOwnProperty(a)&&(s=p[a],"children"===a?"string"==typeof s?i.textContent!==s&&(f=["children",s]):"number"==typeof s&&i.textContent!==""+s&&(f=["children",""+s]):b.hasOwnProperty(a)&&null!=s&&dr(d,a));switch(c){case"input":Ve(i),Et(i,p,!0);break;case"textarea":Ve(i),Jn(i);break;case"select":case"option":break;default:"function"==typeof p.onClick&&(i.onclick=hr)}a=f,l.updateQueue=a,(l=null!==a)&&uu(t)}else{p=t,d=a,i=l,f=9===c.nodeType?c:c.ownerDocument,s===Zn.html&&(s=er(d)),s===Zn.html?"script"===d?((i=f.createElement("div")).innerHTML="<script><\/script>",f=i.removeChild(i.firstChild)):"string"==typeof i.is?f=f.createElement(d,{is:i.is}):(f=f.createElement(d),"select"===d&&(d=f,i.multiple?d.multiple=!0:i.size&&(d.size=i.size))):f=f.createElementNS(s,d),(i=f)[I]=p,i[j]=l,au(i,t,!1,!1),d=i;var h=c,v=pr(f=a,p=l);switch(f){case"iframe":case"object":kn("load",d),c=p;break;case"video":case"audio":for(c=0;c<te.length;c++)kn(te[c],d);c=p;break;case"source":kn("error",d),c=p;break;case"img":case"image":case"link":kn("error",d),kn("load",d),c=p;break;case"form":kn("reset",d),kn("submit",d),c=p;break;case"details":kn("toggle",d),c=p;break;case"input":wt(d,p),c=bt(d,p),kn("invalid",d),dr(h,"onChange");break;case"option":c=qn(d,p);break;case"select":d._wrapperState={wasMultiple:!!p.multiple},c=o({},p,{value:void 0}),kn("invalid",d),dr(h,"onChange");break;case"textarea":Yn(d,p),c=Qn(d,p),kn("invalid",d),dr(h,"onChange");break;default:c=p}fr(f,c),s=void 0;var y=f,m=d,g=c;for(s in g)if(g.hasOwnProperty(s)){var w=g[s];"style"===s?cr(m,w):"dangerouslySetInnerHTML"===s?null!=(w=w?w.__html:void 0)&&or(m,w):"children"===s?"string"==typeof w?("textarea"!==y||""!==w)&&ir(m,w):"number"==typeof w&&ir(m,""+w):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(b.hasOwnProperty(s)?null!=w&&dr(h,s):null!=w&&mt(m,s,w,v))}switch(f){case"input":Ve(d),Et(d,p,!1);break;case"textarea":Ve(d),Jn(d);break;case"option":null!=p.value&&d.setAttribute("value",""+gt(p.value));break;case"select":(c=d).multiple=!!p.multiple,null!=(d=p.value)?Kn(c,!!p.multiple,d,!1):null!=p.defaultValue&&Kn(c,!!p.multiple,p.defaultValue,!0);break;default:"function"==typeof c.onClick&&(d.onclick=hr)}(l=mr(a,l))&&uu(t),t.stateNode=i}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&u("166");break;case 6:i&&null!=t.stateNode?su(i,t,i.memoizedProps,l):("string"!=typeof l&&(null===t.stateNode&&u("166")),i=So(xo.current),So(bo.current),bi(t)?(a=(l=t).stateNode,i=l.memoizedProps,a[I]=l,(l=a.nodeValue!==i)&&uu(t)):(a=t,(l=(9===i.nodeType?i:i.ownerDocument).createTextNode(l))[I]=t,a.stateNode=l));break;case 11:break;case 13:if(l=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=a,Cu=t;break e}l=null!==l,a=null!==i&&null!==i.memoizedState,null!==i&&!l&&a&&(null!==(i=i.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=i,i.nextEffect=c):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),(l||a)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:_o(),lu(t);break;case 10:zi(t);break;case 9:case 14:break;case 17:jr(t.type)&&Fr();break;case 18:break;default:u("156")}Cu=null}if(t=e,1===Nu||1!==t.childExpirationTime){for(l=0,a=t.child;null!==a;)(i=a.expirationTime)>l&&(l=i),(c=a.childExpirationTime)>l&&(l=c),a=a.sibling;t.childExpirationTime=l}if(null!==Cu)return Cu;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=Eu(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function Hu(e){var t=ji(e.alternate,e,Nu);return e.memoizedProps=e.pendingProps,null===t&&(t=Gu(e)),ku.current=null,t}function qu(e,t){Pu&&u("243"),Bu(),Pu=!0;var n=_u.current;_u.current=ci;var r=e.nextExpirationTimeToWorkOn;r===Nu&&e===Ou&&null!==Cu||(Uu(),Nu=r,Cu=qr((Ou=e).current,null),e.pendingCommitExpirationTime=0);for(var o=!1;;){try{if(t)for(;null!==Cu&&!Ta();)Cu=Hu(Cu);else for(;null!==Cu;)Cu=Hu(Cu)}catch(t){if(Li=Di=Ai=null,Jo(),null===Cu)o=!0,Ra(t);else{null===Cu&&u("271");var i=Cu,a=i.return;if(null!==a){e:{var l=e,c=a,s=i,f=t;if(a=Nu,s.effectTag|=1024,s.firstEffect=s.lastEffect=null,null!==f&&"object"==typeof f&&"function"==typeof f.then){var p=f;f=c;var d=-1,h=-1;do{if(13===f.tag){var v=f.alternate;if(null!==v&&null!==(v=v.memoizedState)){h=10*(1073741822-v.timedOutAt);break}"number"==typeof(v=f.pendingProps.maxDuration)&&(0>=v?d=0:(-1===d||v<d)&&(d=v))}f=f.return}while(null!==f);f=c;do{if((v=13===f.tag)&&(v=void 0!==f.memoizedProps.fallback&&null===f.memoizedState),v){if(null===(c=f.updateQueue)?((c=new Set).add(p),f.updateQueue=c):c.add(p),0==(1&f.mode)){f.effectTag|=64,s.effectTag&=-1957,1===s.tag&&(null===s.alternate?s.tag=17:((a=Yi(1073741823)).tag=Gi,Ji(s,a))),s.expirationTime=1073741823;break e}c=a;var y=(s=l).pingCache;null===y?(y=s.pingCache=new wu,v=new Set,y.set(p,v)):void 0===(v=y.get(p))&&(v=new Set,y.set(p,v)),v.has(c)||(v.add(c),s=Yu.bind(null,s,p,c),p.then(s,s)),-1===d?l=1073741823:(-1===h&&(h=10*(1073741822-to(l,a))-5e3),l=h+d),0<=l&&Mu<l&&(Mu=l),f.effectTag|=2048,f.expirationTime=a;break e}f=f.return}while(null!==f);f=Error((at(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+lt(s))}Ru=!0,f=iu(f,s),l=c;do{switch(l.tag){case 3:l.effectTag|=2048,l.expirationTime=a,Zi(l,a=xu(l,f,a));break e;case 1:if(d=f,h=l.type,s=l.stateNode,0==(64&l.effectTag)&&("function"==typeof h.getDerivedStateFromError||null!==s&&"function"==typeof s.componentDidCatch&&(null===Lu||!Lu.has(s)))){l.effectTag|=2048,l.expirationTime=a,Zi(l,a=Su(l,d,a));break e}}l=l.return}while(null!==l)}Cu=Gu(i);continue}o=!0,Ra(t)}}break}if(Pu=!1,_u.current=n,Li=Di=Ai=null,Jo(),o)Ou=null,e.finishedWork=null;else if(null!==Cu)e.finishedWork=null;else{if(null===(n=e.current.alternate)&&u("281"),Ou=null,Ru){if(o=e.latestPendingTime,i=e.latestSuspendedTime,a=e.latestPingedTime,0!==o&&o<r||0!==i&&i<r||0!==a&&a<r)return eo(e,r),void xa(e,n,r,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,r=e.nextExpirationTimeToWorkOn=r,t=e.expirationTime=1073741823,void xa(e,n,r,t,-1)}t&&-1!==Mu?(eo(e,r),(t=10*(1073741822-to(e,r)))<Mu&&(Mu=t),t=10*(1073741822-Sa()),t=Mu-t,xa(e,n,r,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=r,e.finishedWork=n)}}function Ku(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Lu||!Lu.has(r)))return Ji(n,e=Su(n,e=iu(t,e),1073741823)),void Ju(n,1073741823);break;case 3:return Ji(n,e=xu(n,e=iu(t,e),1073741823)),void Ju(n,1073741823)}n=n.return}3===e.tag&&(Ji(e,n=xu(e,n=iu(t,e),1073741823)),Ju(e,1073741823))}function Qu(e,t){var n=i.unstable_getCurrentPriorityLevel(),r=void 0;if(0==(1&t.mode))r=1073741823;else if(Pu&&!ju)r=Nu;else{switch(n){case i.unstable_ImmediatePriority:r=1073741823;break;case i.unstable_UserBlockingPriority:r=1073741822-10*(1+((1073741822-e+15)/10|0));break;case i.unstable_NormalPriority:r=1073741822-25*(1+((1073741822-e+500)/25|0));break;case i.unstable_LowPriority:case i.unstable_IdlePriority:r=1;break;default:u("313")}null!==Ou&&r===Nu&&--r}return n===i.unstable_UserBlockingPriority&&(0===aa||r<aa)&&(aa=r),r}function Yu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),null!==Ou&&Nu===n?Ou=null:(t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0!==t&&n<=t&&n>=r&&(e.didError=!1,(0===(t=e.latestPingedTime)||t>n)&&(e.latestPingedTime=n),no(n,e),0!==(n=e.expirationTime)&&Ea(e,n)))}function Xu(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return o}function Ju(e,t){null!==(e=Xu(e,t))&&(!Pu&&0!==Nu&&t>Nu&&Uu(),Zr(e,t),Pu&&!ju&&Ou===e||Ea(e,e.expirationTime),ma>ya&&(ma=0,u("185")))}function Zu(e,t,n,r,o){return i.unstable_runWithPriority(i.unstable_ImmediatePriority,function(){return e(t,n,r,o)})}var ea=null,ta=null,na=0,ra=void 0,oa=!1,ia=null,ua=0,aa=0,la=!1,ca=null,sa=!1,fa=!1,pa=null,da=i.unstable_now(),ha=1073741822-(da/10|0),va=ha,ya=50,ma=0,ga=null;function ba(){ha=1073741822-((i.unstable_now()-da)/10|0)}function wa(e,t){if(0!==na){if(t<na)return;null!==ra&&i.unstable_cancelCallback(ra)}na=t,e=i.unstable_now()-da,ra=i.unstable_scheduleCallback(Pa,{timeout:10*(1073741822-t)-e})}function xa(e,t,n,r,o){e.expirationTime=r,0!==o||Ta()?0<o&&(e.timeoutHandle=br(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,ba(),va=ha,Oa(e,n)}.bind(null,e,t,n),o)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function Sa(){return oa?va:(_a(),0!==ua&&1!==ua||(ba(),va=ha),va)}function Ea(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===ta?(ea=ta=e,e.nextScheduledRoot=e):(ta=ta.nextScheduledRoot=e).nextScheduledRoot=ea):t>e.expirationTime&&(e.expirationTime=t),oa||(sa?fa&&(ia=e,ua=1073741823,Na(e,1073741823,!1)):1073741823===t?Ca(1073741823,!1):wa(e,t))}function _a(){var e=0,t=null;if(null!==ta)for(var n=ta,r=ea;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===ta)&&u("244"),r===r.nextScheduledRoot){ea=ta=r.nextScheduledRoot=null;break}if(r===ea)ea=o=r.nextScheduledRoot,ta.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===ta){(ta=n).nextScheduledRoot=ea,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(o>e&&(e=o,t=r),r===ta)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}ia=t,ua=e}var ka=!1;function Ta(){return!!ka||!!i.unstable_shouldYield()&&(ka=!0)}function Pa(){try{if(!Ta()&&null!==ea){ba();var e=ea;do{var t=e.expirationTime;0!==t&&ha<=t&&(e.nextExpirationTimeToWorkOn=ha),e=e.nextScheduledRoot}while(e!==ea)}Ca(0,!0)}finally{ka=!1}}function Ca(e,t){if(_a(),t)for(ba(),va=ha;null!==ia&&0!==ua&&e<=ua&&!(ka&&ha>ua);)Na(ia,ua,ha>ua),_a(),ba(),va=ha;else for(;null!==ia&&0!==ua&&e<=ua;)Na(ia,ua,!1),_a();if(t&&(na=0,ra=null),0!==ua&&wa(ia,ua),ma=0,ga=null,null!==pa)for(e=pa,pa=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){la||(la=!0,ca=e)}}if(la)throw e=ca,ca=null,la=!1,e}function Oa(e,t){oa&&u("253"),ia=e,ua=t,Na(e,t,!1),Ca(1073741823,!1)}function Na(e,t,n){if(oa&&u("245"),oa=!0,n){var r=e.finishedWork;null!==r?Ma(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,wr(r)),qu(e,n),null!==(r=e.finishedWork)&&(Ta()?e.finishedWork=r:Ma(e,r,t)))}else null!==(r=e.finishedWork)?Ma(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,wr(r)),qu(e,n),null!==(r=e.finishedWork)&&Ma(e,r,t));oa=!1}function Ma(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===pa?pa=[r]:pa.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===ga?ma++:(ga=e,ma=0),i.unstable_runWithPriority(i.unstable_ImmediatePriority,function(){$u(e,t)})}function Ra(e){null===ia&&u("246"),ia.expirationTime=0,la||(la=!0,ca=e)}function Ia(e,t){var n=sa;sa=!0;try{return e(t)}finally{(sa=n)||oa||Ca(1073741823,!1)}}function ja(e,t){if(sa&&!fa){fa=!0;try{return e(t)}finally{fa=!1}}return e(t)}function Fa(e,t,n){sa||oa||0===aa||(Ca(aa,!1),aa=0);var r=sa;sa=!0;try{return i.unstable_runWithPriority(i.unstable_UserBlockingPriority,function(){return e(t,n)})}finally{(sa=r)||oa||Ca(1073741823,!1)}}function Aa(e,t,n,r,o){var i=t.current;e:if(n){t:{2===tn(n=n._reactInternalFiber)&&1===n.tag||u("170");var a=n;do{switch(a.tag){case 3:a=a.stateNode.context;break t;case 1:if(jr(a.type)){a=a.stateNode.__reactInternalMemoizedMergedChildContext;break t}}a=a.return}while(null!==a);u("171"),a=void 0}if(1===n.tag){var l=n.type;if(jr(l)){n=Lr(n,l,a);break e}}n=a}else n=Or;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Yi(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Bu(),Ji(i,o),Ju(i,r),r}function Da(e,t,n,r){var o=t.current;return Aa(e,t,n,o=Qu(Sa(),o),r)}function La(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Ua(e){var t=1073741822-25*(1+((1073741822-Sa()+500)/25|0));t>=Tu&&(t=Tu-1),this._expirationTime=Tu=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function za(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Wa(e,t,n){e={current:t=Gr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Va(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ba(e,t,n,r,o){var i=n._reactRootContainer;if(i){if("function"==typeof o){var u=o;o=function(){var e=La(i._internalRoot);u.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Wa(e,!1,t)}(n,r),"function"==typeof o){var a=o;o=function(){var e=La(i._internalRoot);a.call(e)}}ja(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return La(i._internalRoot)}function $a(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Va(t)||u("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ke,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Te=function(e,t,n){switch(t){case"input":if(St(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=L(r);o||u("90"),Be(r),St(r,o)}}}break;case"textarea":Xn(e,n);break;case"select":null!=(t=n.value)&&Kn(e,!!n.multiple,t,!1)}},Ua.prototype.render=function(e){this._defer||u("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new za;return Aa(e,t,null,n,r._onCommit),r},Ua.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Ua.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||u("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&u("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Oa(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Ua.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},za.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},za.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&u("191",n),n()}}},Wa.prototype.render=function(e,t){var n=this._internalRoot,r=new za;return null!==(t=void 0===t?null:t)&&r.then(t),Da(e,n,null,r._onCommit),r},Wa.prototype.unmount=function(e){var t=this._internalRoot,n=new za;return null!==(e=void 0===e?null:e)&&n.then(e),Da(null,t,null,n._onCommit),n},Wa.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new za;return null!==(n=void 0===n?null:n)&&o.then(n),Da(t,r,e,o._onCommit),o},Wa.prototype.createBatch=function(){var e=new Ua(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Re=Ia,Ie=Fa,je=function(){oa||0===aa||(Ca(aa,!1),aa=0)};var Ga={createPortal:$a,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?u("188"):u("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return Va(t)||u("200"),Ba(null,e,t,!0,n)},render:function(e,t,n){return Va(t)||u("200"),Ba(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return Va(n)||u("200"),(null==e||void 0===e._reactInternalFiber)&&u("38"),Ba(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Va(e)||u("40"),!!e._reactRootContainer&&(ja(function(){Ba(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return $a.apply(void 0,arguments)},unstable_batchedUpdates:Ia,unstable_interactiveUpdates:Fa,flushSync:function(e,t){oa&&u("187");var n=sa;sa=!0;try{return Zu(e,t)}finally{sa=n,Ca(1073741823,!1)}},unstable_createRoot:function(e,t){return Va(e)||u("299","unstable_createRoot"),new Wa(e,!0,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=sa;sa=!0;try{Zu(e)}finally{(sa=t)||oa||Ca(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[A,D,L,O.injectEventPluginsByName,g,$,function(e){T(e,B)},Ne,Me,Cn,M]}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Wr=Br(function(e){return t.onCommitFiberRoot(n,e)}),Vr=Br(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(o({},e,{overrideProps:null,currentDispatcherRef:$e.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:F,bundleType:0,version:"16.8.6",rendererPackageName:"react-dom"});var Ha={default:Ga},qa=Ha&&Ga||Ha;e.exports=qa.default||qa},function(e,t,n){"use strict";e.exports=n(321)},function(e,t,n){"use strict";(function(e){
/** @license React v0.13.6
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,o=3,i=-1,u=-1,a=!1,l=!1;function c(){if(!a){var e=n.expirationTime;l?E():l=!0,S(p,e)}}function s(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var i=o,a=u;o=e,u=t;try{var l=r()}finally{o=i,u=a}if("function"==typeof l)if(l={callback:l,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=l.next=l.previous=l;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=l,c()),(t=r.previous).next=r.previous=l,l.next=r,l.previous=t}}function f(){if(-1===i&&null!==n&&1===n.priorityLevel){a=!0;try{do{s()}while(null!==n&&1===n.priorityLevel)}finally{a=!1,null!==n?c():l=!1}}}function p(e){a=!0;var o=r;r=e;try{if(e)for(;null!==n;){var i=t.unstable_now();if(!(n.expirationTime<=i))break;do{s()}while(null!==n&&n.expirationTime<=i)}else if(null!==n)do{s()}while(null!==n&&!_())}finally{a=!1,r=o,null!==n?c():l=!1,f()}}var d,h,v=Date,y="function"==typeof setTimeout?setTimeout:void 0,m="function"==typeof clearTimeout?clearTimeout:void 0,g="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,b="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function w(e){d=g(function(t){m(h),e(t)}),h=y(function(){b(d),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var x=performance;t.unstable_now=function(){return x.now()}}else t.unstable_now=function(){return v.now()};var S,E,_,k=null;if("undefined"!=typeof window?k=window:void 0!==e&&(k=e),k&&k._schedMock){var T=k._schedMock;S=T[0],E=T[1],_=T[2],t.unstable_now=T[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var P=null,C=function(e){if(null!==P)try{P(e)}finally{P=null}};S=function(e){null!==P?setTimeout(S,0,e):(P=e,setTimeout(C,0,!1))},E=function(){P=null},_=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof g&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var O=null,N=!1,M=-1,R=!1,I=!1,j=0,F=33,A=33;_=function(){return j<=t.unstable_now()};var D=new MessageChannel,L=D.port2;D.port1.onmessage=function(){N=!1;var e=O,n=M;O=null,M=-1;var r=t.unstable_now(),o=!1;if(0>=j-r){if(!(-1!==n&&n<=r))return R||(R=!0,w(U)),O=e,void(M=n);o=!0}if(null!==e){I=!0;try{e(o)}finally{I=!1}}};var U=function(e){if(null!==O){w(U);var t=e-j+A;t<A&&F<A?(8>t&&(t=8),A=t<F?F:t):F=t,j=e+A,N||(N=!0,L.postMessage(void 0))}else R=!1};S=function(e,t){O=e,M=t,I||0>t?L.postMessage(void 0):R||(R=!0,w(U))},E=function(){O=null,N=!1,M=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=o,u=i;o=e,i=t.unstable_now();try{return n()}finally{o=r,i=u,f()}},t.unstable_next=function(e){switch(o){case 1:case 2:case 3:var n=3;break;default:n=o}var r=o,u=i;o=n,i=t.unstable_now();try{return e()}finally{o=r,i=u,f()}},t.unstable_scheduleCallback=function(e,r){var u=-1!==i?i:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=u+r.timeout;else switch(o){case 1:r=u+-1;break;case 2:r=u+250;break;case 5:r=u+1073741823;break;case 4:r=u+1e4;break;default:r=u+5e3}if(e={callback:e,priorityLevel:o,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,c();else{u=null;var a=n;do{if(a.expirationTime>r){u=a;break}a=a.next}while(a!==n);null===u?u=n:u===n&&(n=e,c()),(r=u.previous).next=u.previous=e,e.next=u,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=o;return function(){var r=o,u=i;o=n,i=t.unstable_now();try{return e.apply(this,arguments)}finally{o=r,i=u,f()}}},t.unstable_getCurrentPriorityLevel=function(){return o},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<u||_())},t.unstable_continueExecution=function(){null!==n&&c()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(129))},function(e,t,n){"use strict";var r=n(323);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,u){if(u!==r){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,u=r?Symbol.for("react.fragment"):60107,a=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,v=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116;function m(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case p:case u:case l:case a:case h:return e;default:switch(e=e&&e.$$typeof){case s:case d:case c:return e;default:return t}}case y:case v:case i:return t}}}function g(e){return m(e)===p}t.typeOf=m,t.AsyncMode=f,t.ConcurrentMode=p,t.ContextConsumer=s,t.ContextProvider=c,t.Element=o,t.ForwardRef=d,t.Fragment=u,t.Lazy=y,t.Memo=v,t.Portal=i,t.Profiler=l,t.StrictMode=a,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===u||e===p||e===l||e===a||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===c||e.$$typeof===s||e.$$typeof===d)},t.isAsyncMode=function(e){return g(e)||m(e)===f},t.isConcurrentMode=g,t.isContextConsumer=function(e){return m(e)===s},t.isContextProvider=function(e){return m(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return m(e)===d},t.isFragment=function(e){return m(e)===u},t.isLazy=function(e){return m(e)===y},t.isMemo=function(e){return m(e)===v},t.isPortal=function(e){return m(e)===i},t.isProfiler=function(e){return m(e)===l},t.isStrictMode=function(e){return m(e)===a},t.isSuspense=function(e){return m(e)===h}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";n.r(t);var r=n(1),o=n.n(r),i=n(63),u=n.n(i);var a=n(40),l=n.n(a),c=o.a.createContext(null);var s=function(e){e()},f=function(){return s},p=null,d={notify:function(){}};var h=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=d,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){var e,t,n;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=(e=f(),t=[],n=[],{clear:function(){n=p,t=p},notify:function(){var r=t=n;e(function(){for(var e=0;e<r.length;e++)r[e]()})},get:function(){return n},subscribe:function(e){var r=!0;return n===t&&(n=t.slice()),n.push(e),function(){r&&t!==p&&(r=!1,n===t&&(n=t.slice()),n.splice(n.indexOf(e),1))}}}))},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=d)},e}(),v=function(e){var t,n;function r(t){var n;n=e.call(this,t)||this;var r=t.store;n.notifySubscribers=n.notifySubscribers.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(n));var o=new h(r);return o.onStateChange=n.notifySubscribers,n.state={store:r,subscription:o},n.previousState=r.getState(),n}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=r.prototype;return i.componentDidMount=function(){this._isMounted=!0,this.state.subscription.trySubscribe(),this.previousState!==this.props.store.getState()&&this.state.subscription.notifyNestedSubs()},i.componentWillUnmount=function(){this.unsubscribe&&this.unsubscribe(),this.state.subscription.tryUnsubscribe(),this._isMounted=!1},i.componentDidUpdate=function(e){if(this.props.store!==e.store){this.state.subscription.tryUnsubscribe();var t=new h(this.props.store);t.onStateChange=this.notifySubscribers,this.setState({store:this.props.store,subscription:t})}},i.notifySubscribers=function(){this.state.subscription.notifyNestedSubs()},i.render=function(){var e=this.props.context||c;return o.a.createElement(e.Provider,{value:this.state},this.props.children)},r}(r.Component);v.propTypes={store:l.a.shape({subscribe:l.a.func.isRequired,dispatch:l.a.func.isRequired,getState:l.a.func.isRequired}),context:l.a.object,children:l.a.any};var y=v;function m(){return(m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function g(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var b=n(93),w=n.n(b),x=n(27),S=n.n(x),E=n(92),_=[],k=[null,null];function T(e,t){var n=e[1];return[t.payload,n+1]}var P=function(){return[null,0]},C="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;function O(e,t){void 0===t&&(t={});var n=t,i=n.getDisplayName,u=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,a=n.methodName,l=void 0===a?"connectAdvanced":a,s=n.renderCountProp,f=void 0===s?void 0:s,p=n.shouldHandleStateChanges,d=void 0===p||p,v=n.storeKey,y=void 0===v?"store":v,b=n.withRef,x=void 0!==b&&b,O=n.forwardRef,N=void 0!==O&&O,M=n.context,R=void 0===M?c:M,I=g(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);S()(void 0===f,"renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension"),S()(!x,"withRef is removed. To access the wrapped instance, use a ref on the connected component");S()("store"===y,"storeKey has been removed and does not do anything. To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect");var j=R;return function(t){var n=t.displayName||t.name||"Component",i=u(n),a=m({},I,{getDisplayName:u,methodName:l,renderCountProp:f,shouldHandleStateChanges:d,storeKey:y,displayName:i,wrappedComponentName:n,WrappedComponent:t}),c=I.pure;var s=c?r.useMemo:function(e){return e()};function p(n){var u=Object(r.useMemo)(function(){var e=n.forwardedRef,t=g(n,["forwardedRef"]);return[n.context,e,t]},[n]),l=u[0],c=u[1],f=u[2],p=Object(r.useMemo)(function(){return l&&l.Consumer&&Object(E.isContextConsumer)(o.a.createElement(l.Consumer,null))?l:j},[l,j]),v=Object(r.useContext)(p),y=Boolean(n.store),b=Boolean(v)&&Boolean(v.store);S()(y||b,'Could not find "store" in the context of "'+i+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+i+" in connect options.");var w=n.store||v.store,x=Object(r.useMemo)(function(){return function(t){return e(t.dispatch,a)}(w)},[w]),O=Object(r.useMemo)(function(){if(!d)return k;var e=new h(w,y?null:v.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]},[w,y,v]),N=O[0],M=O[1],R=Object(r.useMemo)(function(){return y?v:m({},v,{subscription:N})},[y,v,N]),I=Object(r.useReducer)(T,_,P),F=I[0][0],A=I[1];if(F&&F.error)throw F.error;var D=Object(r.useRef)(),L=Object(r.useRef)(f),U=Object(r.useRef)(),z=Object(r.useRef)(!1),W=s(function(){return U.current&&f===L.current?U.current:x(w.getState(),f)},[w,F,f]);C(function(){L.current=f,D.current=W,z.current=!1,U.current&&(U.current=null,M())}),C(function(){if(d){var e=!1,t=null,n=function(){if(!e){var n,r,o=w.getState();try{n=x(o,L.current)}catch(e){r=e,t=e}r||(t=null),n===D.current?z.current||M():(D.current=n,U.current=n,z.current=!0,A({type:"STORE_UPDATED",payload:{latestStoreState:o,error:r}}))}};N.onStateChange=n,N.trySubscribe(),n();return function(){if(e=!0,N.tryUnsubscribe(),t)throw t}}},[w,N,x]);var V=Object(r.useMemo)(function(){return o.a.createElement(t,m({},W,{ref:c}))},[c,t,W]);return Object(r.useMemo)(function(){return d?o.a.createElement(p.Provider,{value:R},V):V},[p,V,R])}var v=c?o.a.memo(p):p;if(v.WrappedComponent=t,v.displayName=i,N){var b=o.a.forwardRef(function(e,t){return o.a.createElement(v,m({},e,{forwardedRef:t}))});return b.displayName=i,b.WrappedComponent=t,w()(b,t)}return w()(v,t)}}var N=Object.prototype.hasOwnProperty;function M(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function R(e,t){if(M(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!N.call(t,n[o])||!M(e[n[o]],t[n[o]]))return!1;return!0}var I=n(94),j=function(){return Math.random().toString(36).substring(7).split("").join(".")},F={INIT:"@@redux/INIT"+j(),REPLACE:"@@redux/REPLACE"+j(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+j()}};function A(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function D(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function L(e,t){return function(){return t(e.apply(this,arguments))}}function U(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function z(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function W(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function V(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function B(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=V(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=V(o),o=r(t,n)),o},r}}var $=[function(e){return"function"==typeof e?B(e):void 0},function(e){return e?void 0:W(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?W(function(t){return function(e,t){if("function"==typeof e)return L(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var i=n[o],u=e[i];"function"==typeof u&&(r[i]=L(u,t))}return r}(e,t)}):void 0}];var G=[function(e){return"function"==typeof e?B(e):void 0},function(e){return e?void 0:W(function(){return{}})}];function H(e,t,n){return m({},n,e,t)}var q=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,u=!1;return function(t,n,a){var l=e(t,n,a);return u?o&&i(l,r)||(r=l):(u=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return H}}];function K(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function Q(e,t,n,r,o){var i,u,a,l,c,s=o.areStatesEqual,f=o.areOwnPropsEqual,p=o.areStatePropsEqual,d=!1;function h(o,d){var h,v,y=!f(d,u),m=!s(o,i);return i=o,u=d,y&&m?(a=e(i,u),t.dependsOnOwnProps&&(l=t(r,u)),c=n(a,l,u)):y?(e.dependsOnOwnProps&&(a=e(i,u)),t.dependsOnOwnProps&&(l=t(r,u)),c=n(a,l,u)):m?(h=e(i,u),v=!p(h,a),a=h,v&&(c=n(a,l,u)),c):c}return function(o,s){return d?h(o,s):(a=e(i=o,u=s),l=t(r,u),c=n(a,l,u),d=!0,c)}}function Y(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=g(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),u=n(e,i),a=r(e,i),l=o(e,i);return(i.pure?Q:K)(u,a,l,e,i)}function X(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function J(e,t){return e===t}var Z,ee,te,ne,re,oe,ie,ue,ae,le,ce,se;te=(ee=void 0===Z?{}:Z).connectHOC,ne=void 0===te?O:te,re=ee.mapStateToPropsFactories,oe=void 0===re?G:re,ie=ee.mapDispatchToPropsFactories,ue=void 0===ie?$:ie,ae=ee.mergePropsFactories,le=void 0===ae?q:ae,ce=ee.selectorFactory,se=void 0===ce?Y:ce;function fe(){var e=Object(r.useContext)(c);return S()(e,"could not find react-redux context value; please ensure the component is wrapped in a <Provider>"),e}function pe(){return fe().store.dispatch}var de,he="undefined"!=typeof window?r.useLayoutEffect:r.useEffect,ve=function(e,t){return e===t};function ye(e,t){void 0===t&&(t=ve),S()(e,"You must pass a selector to useSelectors");var n,o=fe(),i=o.store,u=o.subscription,a=Object(r.useReducer)(function(e){return e+1},0)[1],l=Object(r.useMemo)(function(){return new h(i,u)},[i,u]),c=Object(r.useRef)(),s=Object(r.useRef)(),f=Object(r.useRef)();try{n=e!==s.current||c.current?e(i.getState()):f.current}catch(e){var p="An error occured while selecting the store state: "+e.message+".";throw c.current&&(p+="\nThe error may be correlated with this previous error:\n"+c.current.stack+"\n\nOriginal stack trace:"),new Error(p)}return he(function(){s.current=e,f.current=n,c.current=void 0}),he(function(){function e(){try{var e=s.current(i.getState());if(t(e,f.current))return;f.current=e}catch(e){c.current=e}a({})}return l.onStateChange=e,l.trySubscribe(),e(),function(){return l.tryUnsubscribe()}},[i,l]),n}function me(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}de=i.unstable_batchedUpdates,s=de;var ge=me();ge.withExtraArgument=me;var be=ge;function we(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var xe=function e(t,n,r){var o;if("function"==typeof n&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function");if("function"==typeof n&&void 0===r&&(r=n,n=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(e)(t,n)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var i=t,u=n,a=[],l=a,c=!1;function s(){l===a&&(l=a.slice())}function f(){if(c)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return u}function p(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(c)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return s(),l.push(e),function(){if(t){if(c)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,s();var n=l.indexOf(e);l.splice(n,1)}}}function d(e){if(!A(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(c)throw new Error("Reducers may not dispatch actions.");try{c=!0,u=i(u,e)}finally{c=!1}for(var t=a=l,n=0;n<t.length;n++)(0,t[n])();return e}return d({type:F.INIT}),(o={dispatch:d,subscribe:p,getState:f,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");i=e,d({type:F.REPLACE})}})[I.a]=function(){var e,t=p;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(f())}return n(),{unsubscribe:t(n)}}})[I.a]=function(){return this},e},o}(function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var i,u=Object.keys(n);try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:F.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:F.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+F.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},a=0;a<u.length;a++){var l=u[a],c=n[l],s=e[l],f=c(s,t);if(void 0===f){var p=D(l,t);throw new Error(p)}o[l]=f,r=r||f!==s}return r?o:e}}({greetings:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_GREETINGS":return e=we(t.greetings)}return e},mode:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"MODE_MASTER",t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_MODE":return t.mode}return e}}),(window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||z)(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map(function(e){return e(o)});return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){U(e,t,n[t])})}return e}({},n,{dispatch:r=z.apply(void 0,i)(n.dispatch)})}}}(be)));var Se=function(e){var t=e.greetings,n=e.onAdd,r=t.map(function(e){return o.a.createElement("tr",{key:e.id},o.a.createElement("td",null,e.name),o.a.createElement("td",null,e.greeting))});return o.a.createElement("div",null,o.a.createElement("table",null,o.a.createElement("thead",null,o.a.createElement("tr",null,o.a.createElement("th",null,"Name"),o.a.createElement("th",null,"Greeting"))),o.a.createElement("tbody",null,r)),o.a.createElement("button",{onClick:n},"Add"))};function Ee(){return(Ee=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function _e(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var u,a=e[Symbol.iterator]();!(r=(u=a.next()).done)&&(n.push(u.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function ke(e,t){var n=_e(o.a.useState(t||""),2),r=n[0],i=n[1];return[{placeholder:e,name:e.toLowerCase(),onChange:function(e){return i(e.target.value)},value:r},function(){i("")}]}function Te(e){var t=_e(ke("Name",e.initialName),2),n=t[0],r=t[1],i=_e(ke("Greeting",e.initialGreeting),2),u=i[0],a=i[1],l=o.a.useRef(),c=!(n.value&&u.value);return o.a.createElement("div",null,o.a.createElement("input",Ee({},n,{ref:l})),o.a.createElement("input",u),o.a.createElement("button",{onClick:function(){r(),a(),l.current.focus()}},"Clear"),o.a.createElement("button",{disabled:c,onClick:function(){e.onSave({name:n.value,greeting:u.value})}},"Save"))}function Pe(e,t,n,r,o,i,u){try{var a=e[i](u),l=a.value}catch(e){return void n(e)}a.done?t(l):Promise.resolve(l).then(r,o)}function Ce(e){return{type:"ADD_GREETING",greeting:e}}var Oe="http://localhost:7000/greetings";function Ne(){return function(){var e,t=(e=regeneratorRuntime.mark(function e(t){var n,r;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,fetch(Oe);case 3:return n=e.sent,e.next=6,n.json();case 6:r=e.sent,t({type:"SET_GREETINGS",greetings:r}),e.next=14;break;case 10:e.prev=10,e.t0=e.catch(0),console.error("Loading Greetings failed",e.t0),t({type:"SET_GREETINGS_FAILED",err:e.t0});case 14:case"end":return e.stop()}},e,null,[[0,10]])}),function(){var t=this,n=arguments;return new Promise(function(r,o){var i=e.apply(t,n);function u(e){Pe(i,r,o,u,a,"next",e)}function a(e){Pe(i,r,o,u,a,"throw",e)}u(void 0)})});return function(e){return t.apply(this,arguments)}}()}function Me(e,t,n,r,o,i,u){try{var a=e[i](u),l=a.value}catch(e){return void n(e)}a.done?t(l):Promise.resolve(l).then(r,o)}var Re="http://localhost:7000/greetings",Ie="MODE_MASTER";function je(e){return(je="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Fe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ae(e,t){return!t||"object"!==je(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function De(e){return(De=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Le(e,t){return(Le=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ue(e){var t=e.msg,n=e.onRetry;return o.a.createElement("div",null,o.a.createElement("h1",null,"An error occured!"),o.a.createElement("pre",null,t),o.a.createElement("button",{onClick:n},"Try again"))}var ze=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Ae(this,De(t).call(this,e))).state={},n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Le(e,t)}(t,o.a.Component),n=t,i=[{key:"getDerivedStateFromError",value:function(e){return{error:e.toString()}}}],(r=[{key:"componentDidCatch",value:function(e,t){console.error("uups... we caught an error",e,t)}},{key:"render",value:function(){var e=this;return this.state.error?o.a.createElement(Ue,{msg:this.state.error,onRetry:function(){return e.setState({error:null})}}):this.props.children}}])&&Fe(n.prototype,r),i&&Fe(n,i),t}(),We=document.getElementById("mount");u.a.render(o.a.createElement(y,{store:xe},o.a.createElement(ze,null,o.a.createElement(function(){var e=pe(),t=ye(function(e){return e.mode}),n=ye(function(e){return console.log("REDUX STORE",e),e.greetings});function r(){var t;return t=regeneratorRuntime.mark(function t(n){var r,o;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch(Re,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(n)});case 3:if(201===(o=t.sent).status){t.next=6;break}throw new Error("Invalid status code: "+o.status);case 6:return t.next=8,o.json();case 8:r=t.sent,t.next=14;break;case 11:t.prev=11,t.t0=t.catch(0),console.error("LOADING GREETINGS FAILED:",t.t0);case 14:e(Ce(r)),e({type:"SET_MODE",mode:"MODE_MASTER"});case 16:case"end":return t.stop()}},t,null,[[0,11]])}),(r=function(){var e=this,n=arguments;return new Promise(function(r,o){var i=t.apply(e,n);function u(e){Me(i,r,o,u,a,"next",e)}function a(e){Me(i,r,o,u,a,"throw",e)}u(void 0)})}).apply(this,arguments)}return console.log("greetingsFromRedux",n),o.a.useEffect(function(){e(Ne())},[]),t===Ie?o.a.createElement(Se,{greetings:n,onAdd:function(){e({type:"SET_MODE",mode:"MODE_DETAIL"})}}):o.a.createElement(Te,{onSave:function(e){return r.apply(this,arguments)}})},null))),We)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3ZhbGlkYXRlLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNpZ24uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYnVmZmVyLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbnZva2UuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtbG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXdlYWsuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX293bi1rZXlzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL0BiYWJlbC9wb2x5ZmlsbC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvQGJhYmVsL3BvbHlmaWxsL2xpYi9ub0NvbmZsaWN0LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvZXM2L2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZnVuY3Rpb24tdG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNicnQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5leHBtMS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1mcm91bmQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRydW5jLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ibGluay5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1Yi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdXAuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWFwLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc2V0LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLXNldC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5oYXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL2FycmF5L2luY2x1ZGVzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9hcnJheS9mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhdHRlbi1pbnRvLWFycmF5LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3BhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvcGFkLWVuZC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3RyaW0tc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3RyaW0tZW5kLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zeW1ib2wvYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vb2JqZWN0L3ZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcHJvbWlzZS9maW5hbGx5LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvd2ViL2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmF0Y2guanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9yZWR1eC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwU3RhdGVUb1Byb3BzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L2Nvbm5lY3QuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlUmVkdXhDb250ZXh0LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZURpc3BhdGNoLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVN0b3JlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVNlbGVjdG9yLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlZHV4LXRodW5rL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9yZWR1Y2Vycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dyZWV0aW5nTWFzdGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9HcmVldGluZ0RldGFpbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvR3JlZXRpbmdDb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9FcnJvckhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4uanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnbG9iYWwiLCJjb3JlIiwiaGlkZSIsInJlZGVmaW5lIiwiY3R4IiwiJGV4cG9ydCIsInR5cGUiLCJzb3VyY2UiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiQiIsInRhcmdldCIsImV4cFByb3RvIiwidW5kZWZpbmVkIiwiRnVuY3Rpb24iLCJVIiwiVyIsIlIiLCJ3aW5kb3ciLCJNYXRoIiwic2VsZiIsIl9fZyIsImV4ZWMiLCJlIiwiaXNPYmplY3QiLCJpdCIsIlR5cGVFcnJvciIsInN0b3JlIiwidWlkIiwiVVNFX1NZTUJPTCIsInRvSW50ZWdlciIsIm1pbiIsInZlcnNpb24iLCJfX2UiLCJhIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiZFAiLCJmIiwiTyIsIkF0dHJpYnV0ZXMiLCJkZWZpbmVkIiwiaGFzIiwiU1JDIiwiJHRvU3RyaW5nIiwiVFBMIiwic3BsaXQiLCJpbnNwZWN0U291cmNlIiwidmFsIiwic2FmZSIsImlzRnVuY3Rpb24iLCJqb2luIiwiU3RyaW5nIiwidGhpcyIsImZhaWxzIiwicXVvdCIsImNyZWF0ZUhUTUwiLCJzdHJpbmciLCJ0YWciLCJhdHRyaWJ1dGUiLCJwMSIsInJlcGxhY2UiLCJOQU1FIiwidGVzdCIsInRvTG93ZXJDYXNlIiwibGVuZ3RoIiwiY3JlYXRlRGVzYyIsIklPYmplY3QiLCJtZXRob2QiLCJhcmciLCJhRnVuY3Rpb24iLCJmbiIsInRoYXQiLCJiIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsInBJRSIsInRvSU9iamVjdCIsImdPUEQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJLRVkiLCJ0b09iamVjdCIsInRvTGVuZ3RoIiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJyZXMiLCJpbmRleCIsInJlc3VsdCIsInB1c2giLCJ0b1N0cmluZyIsInNsaWNlIiwiTElCUkFSWSIsIiR0eXBlZCIsIiRidWZmZXIiLCJhbkluc3RhbmNlIiwicHJvcGVydHlEZXNjIiwicmVkZWZpbmVBbGwiLCJ0b0luZGV4IiwidG9BYnNvbHV0ZUluZGV4IiwiY2xhc3NvZiIsImlzQXJyYXlJdGVyIiwiZ2V0UHJvdG90eXBlT2YiLCJnT1BOIiwiZ2V0SXRlckZuIiwid2tzIiwiY3JlYXRlQXJyYXlNZXRob2QiLCJjcmVhdGVBcnJheUluY2x1ZGVzIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiQXJyYXlJdGVyYXRvcnMiLCJJdGVyYXRvcnMiLCIkaXRlckRldGVjdCIsInNldFNwZWNpZXMiLCJhcnJheUZpbGwiLCJhcnJheUNvcHlXaXRoaW4iLCIkRFAiLCIkR09QRCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiQXJyYXlQcm90byIsIkFycmF5IiwiJEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiYXJyYXlJbmNsdWRlcyIsImFycmF5SW5kZXhPZiIsImFycmF5VmFsdWVzIiwidmFsdWVzIiwiYXJyYXlLZXlzIiwia2V5cyIsImFycmF5RW50cmllcyIsImVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnJheVJlZHVjZSIsInJlZHVjZSIsImFycmF5UmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsImFycmF5Sm9pbiIsImFycmF5U29ydCIsInNvcnQiLCJhcnJheVNsaWNlIiwiYXJyYXlUb1N0cmluZyIsImFycmF5VG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIklURVJBVE9SIiwiVEFHIiwiVFlQRURfQ09OU1RSVUNUT1IiLCJERUZfQ09OU1RSVUNUT1IiLCJBTExfQ09OU1RSVUNUT1JTIiwiQ09OU1RSIiwiVFlQRURfQVJSQVkiLCJUWVBFRCIsIlZJRVciLCIkbWFwIiwiYWxsb2NhdGUiLCJMSVRUTEVfRU5ESUFOIiwiVWludDE2QXJyYXkiLCJidWZmZXIiLCJGT1JDRURfU0VUIiwic2V0IiwidG9PZmZzZXQiLCJCWVRFUyIsIm9mZnNldCIsInZhbGlkYXRlIiwiQyIsInNwZWNpZXNGcm9tTGlzdCIsImxpc3QiLCJmcm9tTGlzdCIsImFkZEdldHRlciIsImludGVybmFsIiwiX2QiLCIkZnJvbSIsInN0ZXAiLCJpdGVyYXRvciIsImFMZW4iLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCJuZXh0IiwiZG9uZSIsIiRvZiIsIlRPX0xPQ0FMRV9CVUciLCIkdG9Mb2NhbGVTdHJpbmciLCJwcm90byIsImNvcHlXaXRoaW4iLCJzdGFydCIsImV2ZXJ5IiwiZmlsbCIsImZpbHRlciIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJmb3JFYWNoIiwiaW5kZXhPZiIsInNlYXJjaEVsZW1lbnQiLCJpbmNsdWRlcyIsInNlcGFyYXRvciIsIm1hcCIsInJldmVyc2UiLCJtaWRkbGUiLCJzb21lIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsImVuZCIsIiRiZWdpbiIsImJ5dGVPZmZzZXQiLCJCWVRFU19QRVJfRUxFTUVOVCIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCJzcmMiLCJsZW4iLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsImRlc2MiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIiRUeXBlZEFycmF5UHJvdG90eXBlJCIsImNvbnN0cnVjdG9yIiwid3JhcHBlciIsIkNMQU1QRUQiLCJHRVRURVIiLCJTRVRURVIiLCJUeXBlZEFycmF5IiwiQmFzZSIsIlRBQyIsIkZPUkNFRCIsIkFCViIsIlR5cGVkQXJyYXlQcm90b3R5cGUiLCJhZGRFbGVtZW50IiwiZGF0YSIsInYiLCJyb3VuZCIsInNldHRlciIsIiRvZmZzZXQiLCIkbGVuZ3RoIiwiYnl0ZUxlbmd0aCIsImtsYXNzIiwiJGxlbiIsIml0ZXIiLCJjb25jYXQiLCIkbmF0aXZlSXRlcmF0b3IiLCJDT1JSRUNUX0lURVJfTkFNRSIsIiRpdGVyYXRvciIsIm9mIiwiZnJvbSIsImNvbmRpdGlvbiIsImZvcm1hdCIsImVycm9yIiwiRXJyb3IiLCJhcmdzIiwiYXJnSW5kZXgiLCJmcmFtZXNUb1BvcCIsInZhbHVlT2YiLCJNRVRBIiwic2V0RGVzYyIsImlkIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwidyIsIm1ldGEiLCJORUVEIiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsImJpdG1hcCIsInB4IiwicmFuZG9tIiwiJGtleXMiLCJlbnVtQnVnS2V5cyIsIm1heCIsImRQcyIsIklFX1BST1RPIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsImNvbnRlbnRXaW5kb3ciLCJkb2N1bWVudCIsIm9wZW4iLCJ3cml0ZSIsImx0IiwiY2xvc2UiLCJQcm9wZXJ0aWVzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJPYmplY3RQcm90byIsIlVOU0NPUEFCTEVTIiwiX3QiLCJkZWYiLCJzdGF0Iiwic3BhY2VzIiwic3BhY2UiLCJsdHJpbSIsIlJlZ0V4cCIsInJ0cmltIiwiZXhwb3J0ZXIiLCJBTElBUyIsIkZPUkNFIiwidHJpbSIsIkRFU0NSSVBUT1JTIiwiU1BFQ0lFUyIsIkNvbnN0cnVjdG9yIiwiZm9yYmlkZGVuRmllbGQiLCJjb2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkFSRyIsIlQiLCJ0cnlHZXQiLCJjYWxsZWUiLCJEIiwiY29weXJpZ2h0IiwiSVNfSU5DTFVERVMiLCJlbCIsImZyb21JbmRleCIsImdldE93blByb3BlcnR5U3ltYm9scyIsImlzQXJyYXkiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwiYXJyIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInVuaWNvZGUiLCJzdGlja3kiLCJidWlsdGluRXhlYyIsInJlZ2V4cEV4ZWMiLCJSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyIsInJlIiwiZ3JvdXBzIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwib3JpZ2luYWxFeGVjIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsIm5hdGl2ZVJlZ0V4cE1ldGhvZCIsImZucyIsIm5hdGl2ZU1ldGhvZCIsInJlZ2V4cCIsInN0ciIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsInN0cmZuIiwicnhmbiIsIkJSRUFLIiwiUkVUVVJOIiwiaXRlcmFibGUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJmb3JPZiIsInNldFRvU3RyaW5nVGFnIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJtZXRob2RzIiwiY29tbW9uIiwiSVNfV0VBSyIsIkFEREVSIiwiZml4TWV0aG9kIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJjbGVhciIsImdldENvbnN0cnVjdG9yIiwic2V0U3Ryb25nIiwiVHlwZWQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJlcnIiLCJjb25zb2xlIiwiaXMiLCJjcmVhdGVFbGVtZW50Iiwic2hhcmVkIiwiZG9jdW1lbnRFbGVtZW50IiwiY2hlY2siLCJzZXRQcm90b3R5cGVPZiIsImJ1Z2d5IiwiX19wcm90b19fIiwiY291bnQiLCJJbmZpbml0eSIsInNpZ24iLCJ4IiwiJGV4cG0xIiwiZXhwbTEiLCJUT19TVFJJTkciLCJwb3MiLCJjaGFyQ29kZUF0IiwiY2hhckF0IiwiJGl0ZXJDcmVhdGUiLCJCVUdHWSIsInJldHVyblRoaXMiLCJERUZBVUxUIiwiSVNfU0VUIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRNZXRob2QiLCJraW5kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJpc1JlZ0V4cCIsInNlYXJjaFN0cmluZyIsIk1BVENIIiwiJGRlZmluZVByb3BlcnR5IiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJlbmRQb3MiLCJhZGRUb1Vuc2NvcGFibGVzIiwiaXRlcmF0ZWQiLCJfaSIsIl9rIiwiQXJndW1lbnRzIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwiTlBDR19JTkNMVURFRCIsImxhc3RJbmRleCIsInJlQ29weSIsIm1hdGNoIiwiYXQiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiaW52b2tlIiwiaHRtbCIsImNlbCIsInByb2Nlc3MiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwicnVuIiwibGlzdGVuZXIiLCJldmVudCIsIm5leHRUaWNrIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJyZW1vdmVDaGlsZCIsInNldFRpbWVvdXQiLCJQUk9UT1RZUEUiLCJXUk9OR19JTkRFWCIsIkJhc2VCdWZmZXIiLCJhYnMiLCJwb3ciLCJsb2ciLCJMTjIiLCIkQlVGRkVSIiwiJExFTkdUSCIsIiRPRkZTRVQiLCJwYWNrSUVFRTc1NCIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwicnQiLCJ1bnBhY2tJRUVFNzU0IiwibkJpdHMiLCJOYU4iLCJ1bnBhY2tJMzIiLCJieXRlcyIsInBhY2tJOCIsInBhY2tJMTYiLCJwYWNrSTMyIiwicGFja0Y2NCIsInBhY2tGMzIiLCJ2aWV3IiwiaXNMaXR0bGVFbmRpYW4iLCJpbnRJbmRleCIsIl9iIiwicGFjayIsImNvbnZlcnNpb24iLCJBcnJheUJ1ZmZlclByb3RvIiwiaiIsIiRzZXRJbnQ4Iiwic2V0SW50OCIsImdldEludDgiLCJzZXRVaW50OCIsImJ1ZmZlckxlbmd0aCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0IiwiUmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCIkJHR5cGVvZiIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsInJlbmRlciIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJkZXNjcmlwdG9yIiwicm9vdCIsIl9wb255ZmlsbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIndrc0V4dCIsIiRTeW1ib2wiLCJuYW1lcyIsImdldEtleXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsImdPUFMiLCIkYXNzaWduIiwiYXNzaWduIiwiQSIsIksiLCJrIiwiZ2V0U3ltYm9scyIsImlzRW51bSIsInkiLCJmYWN0b3JpZXMiLCJwYXJ0QXJncyIsImJvdW5kIiwiY29uc3RydWN0IiwidW4iLCIkcGFyc2VJbnQiLCJwYXJzZUludCIsIiR0cmltIiwid3MiLCJoZXgiLCJyYWRpeCIsIiRwYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsIm1zZyIsImlzRmluaXRlIiwibG9nMXAiLCJyZXQiLCJvcmlnaW5hbCIsIm1lbW8iLCJpc1JpZ2h0IiwidG8iLCJpbmMiLCJmb3JjZWQiLCJmbGFncyIsIkludGVybmFsIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJXcmFwcGVyIiwidGFzayIsIm1pY3JvdGFzayIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsInByb21pc2VSZXNvbHZlIiwidmVyc2lvbnMiLCJ2OCIsIiRQcm9taXNlIiwiaXNOb2RlIiwiZW1wdHkiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsIlVTRV9OQVRJVkUiLCJwcm9taXNlIiwicmVzb2x2ZSIsIkZha2VQcm9taXNlIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwidGhlbiIsImlzVGhlbmFibGUiLCJub3RpZnkiLCJpc1JlamVjdCIsIl9uIiwiY2hhaW4iLCJfYyIsIl92Iiwib2siLCJfcyIsInJlYWN0aW9uIiwiZXhpdGVkIiwiaGFuZGxlciIsImZhaWwiLCJyZWplY3QiLCJkb21haW4iLCJfaCIsIm9uSGFuZGxlVW5oYW5kbGVkIiwiZW50ZXIiLCJleGl0Iiwib25VbmhhbmRsZWQiLCJ1bmhhbmRsZWQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsIl9hIiwib25yZWplY3Rpb25oYW5kbGVkIiwiJHJlamVjdCIsIl93IiwiJHJlc29sdmUiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhdGNoIiwiUHJvbWlzZSIsImNhcGFiaWxpdHkiLCIkJHJlamVjdCIsImFsbCIsInJlbWFpbmluZyIsIiRpbmRleCIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCIkJHJlc29sdmUiLCJwcm9taXNlQ2FwYWJpbGl0eSIsIiRpdGVyRGVmaW5lIiwiU0laRSIsImdldEVudHJ5IiwiZW50cnkiLCJfZiIsIl9sIiwiZGVsZXRlIiwicHJldiIsIiRoYXMiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImZpbmRVbmNhdWdodEZyb3plbiIsInNwbGljZSIsInVmc3RvcmUiLCJudW1iZXIiLCJSZWZsZWN0Iiwib3duS2V5cyIsInJlcGVhdCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJsZWZ0Iiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsImludE1heExlbmd0aCIsImZpbGxMZW4iLCJzdHJpbmdGaWxsZXIiLCJpc0VudHJpZXMiLCJwcm9wSXNFbnVtZXJhYmxlIiwidGVzdDEiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwic3ltYm9scyIsImciLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwib2JqIiwiX2dsb2JhbCIsImRlZmF1bHQiLCJfYmFiZWxQb2x5ZmlsbCIsIndhcm4iLCIkZmFpbHMiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEdPUFMiLCIkSlNPTiIsIkpTT04iLCJfc3RyaW5naWZ5Iiwic3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiUU9iamVjdCIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJwcm90b0Rlc2MiLCJ3cmFwIiwic3ltIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImZvciIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsIkZBSUxTX09OX1BSSU1JVElWRVMiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsIiRnZXRQcm90b3R5cGVPZiIsIiRmcmVlemUiLCIkc2VhbCIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsIiRpc0Zyb3plbiIsIiRpc1NlYWxlZCIsIiRpc0V4dGVuc2libGUiLCJGUHJvdG8iLCJuYW1lUkUiLCJIQVNfSU5TVEFOQ0UiLCJGdW5jdGlvblByb3RvIiwiJE51bWJlciIsIkJST0tFTl9DT0YiLCJUUklNIiwidG9OdW1iZXIiLCJhcmd1bWVudCIsInRoaXJkIiwibWF4Q29kZSIsImZpcnN0IiwiY29kZSIsImRpZ2l0cyIsImFOdW1iZXJWYWx1ZSIsIiR0b0ZpeGVkIiwidG9GaXhlZCIsIkVSUk9SIiwibXVsdGlwbHkiLCJjMiIsImRpdmlkZSIsIm51bVRvU3RyaW5nIiwiYWNjIiwiZnJhY3Rpb25EaWdpdHMiLCJ6IiwieDIiLCIkdG9QcmVjaXNpb24iLCJ0b1ByZWNpc2lvbiIsInByZWNpc2lvbiIsIkVQU0lMT04iLCJfaXNGaW5pdGUiLCJpc0ludGVnZXIiLCJpc1NhZmVJbnRlZ2VyIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJOdW1iZXIiLCJzcXJ0IiwiJGFjb3NoIiwiYWNvc2giLCJNQVhfVkFMVUUiLCIkYXNpbmgiLCJhc2luaCIsIiRhdGFuaCIsImF0YW5oIiwiY2JydCIsImNsejMyIiwiTE9HMkUiLCJjb3NoIiwiZnJvdW5kIiwiRVBTSUxPTjMyIiwiTUFYMzIiLCJNSU4zMiIsIiRhYnMiLCIkc2lnbiIsImh5cG90IiwidmFsdWUxIiwidmFsdWUyIiwiZGl2Iiwic3VtIiwibGFyZyIsIiRpbXVsIiwiaW11bCIsInhuIiwieW4iLCJ4bCIsInlsIiwibG9nMTAiLCJMT0cxMEUiLCJsb2cyIiwic2luaCIsInRhbmgiLCJ0cnVuYyIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsInJhdyIsImNhbGxTaXRlIiwidHBsIiwiJGF0IiwicG9pbnQiLCJjb2RlUG9pbnRBdCIsImNvbnRleHQiLCIkZW5kc1dpdGgiLCJlbmRzV2l0aCIsImVuZFBvc2l0aW9uIiwic2VhcmNoIiwiJHN0YXJ0c1dpdGgiLCJzdGFydHNXaXRoIiwiY29sb3IiLCJzaXplIiwidXJsIiwiRGF0ZSIsImdldFRpbWUiLCJ0b0pTT04iLCJ0b0lTT1N0cmluZyIsInB2IiwiJHRvSVNPU3RyaW5nIiwibHoiLCJudW0iLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01pbGxpc2Vjb25kcyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJEYXRlUHJvdG8iLCJoaW50IiwiY3JlYXRlUHJvcGVydHkiLCJ1cFRvIiwiY2xvbmVkIiwiJHNvcnQiLCIkZm9yRWFjaCIsIlNUUklDVCIsIiRmaWx0ZXIiLCIkc29tZSIsIiRldmVyeSIsIiRyZWR1Y2UiLCIkaW5kZXhPZiIsIk5FR0FUSVZFX1pFUk8iLCIkZmluZCIsIiRmbGFncyIsIiRSZWdFeHAiLCJDT1JSRUNUX05FVyIsInRpUkUiLCJwaVJFIiwiZmlVIiwicHJveHkiLCJkZWZpbmUiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJyZWdFeHBFeGVjIiwiJG1hdGNoIiwibWF5YmVDYWxsTmF0aXZlIiwicngiLCJmdWxsVW5pY29kZSIsIm1hdGNoU3RyIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIlJFUExBQ0UiLCIkcmVwbGFjZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJyZXN1bHRzIiwiYWNjdW11bGF0ZWRSZXN1bHQiLCJuZXh0U291cmNlUG9zaXRpb24iLCJtYXRjaGVkIiwicG9zaXRpb24iLCJjYXB0dXJlcyIsIm5hbWVkQ2FwdHVyZXMiLCJyZXBsYWNlckFyZ3MiLCJyZXBsYWNlbWVudCIsImdldFN1YnN0aXR1dGlvbiIsInRhaWxQb3MiLCJjaCIsImNhcHR1cmUiLCJzYW1lVmFsdWUiLCJTRUFSQ0giLCIkc2VhcmNoIiwicHJldmlvdXNMYXN0SW5kZXgiLCJjYWxsUmVnRXhwRXhlYyIsIiRtaW4iLCIkcHVzaCIsIlNVUFBPUlRTX1kiLCJTUExJVCIsIiRzcGxpdCIsImludGVybmFsU3BsaXQiLCJsaW1pdCIsImxhc3RMZW5ndGgiLCJvdXRwdXQiLCJsYXN0TGFzdEluZGV4Iiwic3BsaXRMaW1pdCIsInNlcGFyYXRvckNvcHkiLCJzcGxpdHRlciIsInVuaWNvZGVNYXRjaGluZyIsImxpbSIsInEiLCJtYWNyb3Rhc2siLCJPYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiaGVhZCIsImxhc3QiLCJmbHVzaCIsInBhcmVudCIsInN0YW5kYWxvbmUiLCJ0b2dnbGUiLCJub2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInN0cm9uZyIsImFkZCIsIkludGVybmFsTWFwIiwiZWFjaCIsIndlYWsiLCJOQVRJVkVfV0VBS19NQVAiLCJJU19JRTExIiwiQWN0aXZlWE9iamVjdCIsIiRXZWFrTWFwIiwiJGlzVmlldyIsImlzVmlldyIsImZpbiIsInZpZXdTIiwidmlld1QiLCJpbml0IiwickFwcGx5IiwiZkFwcGx5IiwidGhpc0FyZ3VtZW50IiwiYXJndW1lbnRzTGlzdCIsIkwiLCJyQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwicHJvcGVydHlLZXkiLCJhdHRyaWJ1dGVzIiwiZGVsZXRlUHJvcGVydHkiLCJFbnVtZXJhdGUiLCJlbnVtZXJhdGUiLCJyZWNlaXZlciIsImdldFByb3RvIiwiViIsImV4aXN0aW5nRGVzY3JpcHRvciIsIm93bkRlc2MiLCJzZXRQcm90byIsIiRpbmNsdWRlcyIsImZsYXRNYXAiLCJmbGF0dGVuSW50b0FycmF5IiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwic291cmNlTGVuIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEUiLCJkZXB0aCIsIm1hcHBlciIsInRoaXNBcmciLCJlbGVtZW50Iiwic3ByZWFkYWJsZSIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJtYXBGbiIsInBhZFN0YXJ0IiwiJHBhZCIsIldFQktJVF9CVUciLCJwYWRFbmQiLCJ0cmltTGVmdCIsInRyaW1SaWdodCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJnZXREZXNjIiwiJHZhbHVlcyIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCJNU0lFIiwidGltZSIsImJvdW5kQXJncyIsInNldEludGVydmFsIiwiJHRhc2siLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwicnVudGltZSIsIk9wIiwiaGFzT3duIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiQ29udGV4dCIsIl9pbnZva2UiLCJzdGF0ZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiX19hd2FpdCIsInVud3JhcHBlZCIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmF0b3JNZXRob2QiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJhd3JhcCIsImFzeW5jIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiSVNfV1JBUCIsInZpcnR1YWwiLCJ1IiwiYWEiLCJiYSIsImVuY29kZVVSSUNvbXBvbmVudCIsImgiLCJjYSIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJwcm9wcyIsInJlZnMiLCJ1cGRhdGVyIiwiaXNSZWFjdENvbXBvbmVudCIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJIIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJJIiwiY3VycmVudCIsIkoiLCJyZWYiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIk0iLCJjaGlsZHJlbiIsIl9vd25lciIsIk4iLCJRIiwia2V5UHJlZml4IiwiZnVuYyIsIj0iLCI6IiwiZXNjYXBlIiwiZWEiLCJmYSIsImRhIiwiWCIsIkNoaWxkcmVuIiwidG9BcnJheSIsIm9ubHkiLCJjcmVhdGVSZWYiLCJDb21wb25lbnQiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfY29udGV4dCIsImZvcndhcmRSZWYiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImlzVmFsaWRFbGVtZW50IiwidW5zdGFibGVfQ29uY3VycmVudE1vZGUiLCJ1bnN0YWJsZV9Qcm9maWxlciIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudE93bmVyIiwiWSIsIloiLCJoYSIsImlhIiwib25FcnJvciIsImphIiwibGEiLCJtYSIsIm5hIiwib2EiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInBhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJxYSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJyYSIsInNhIiwiZGVwZW5kZW5jaWVzIiwidGEiLCJ1YSIsInZhIiwid2EiLCJjdXJyZW50VGFyZ2V0Iiwia2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkJhIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIkNhIiwic3RhdGVOb2RlIiwiZGlzYWJsZWQiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwicGFyZW50Tm9kZSIsIklhIiwiSmEiLCJLYSIsIkxhIiwicmV0dXJuIiwiTWEiLCJkaXNwYXRjaENvbmZpZyIsIk5hIiwiX3RhcmdldEluc3QiLCJPYSIsIlBhIiwiUWEiLCJSYSIsIlNhIiwiVGEiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJVYSIsIlZhIiwiV2EiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiWGEiLCJZYSIsIlphIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJkYiIsImViIiwidGV4dENvbnRlbnQiLCJmYiIsImdiIiwibmF0aXZlRXZlbnQiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpYiIsImV2ZW50UG9vbCIsImpiIiwiZGVzdHJ1Y3RvciIsImhiIiwiZ2V0UG9vbGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwiZXh0ZW5kIiwia2IiLCJsYiIsIm1iIiwibmIiLCJvYiIsImRvY3VtZW50TW9kZSIsInBiIiwicWIiLCJyYiIsInNiIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsInRiIiwidWIiLCJrZXlDb2RlIiwidmIiLCJkZXRhaWwiLCJ3YiIsInpiIiwibG9jYWxlIiwid2hpY2giLCJ4YiIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsInliIiwiQWIiLCJCYiIsIkNiIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInRlbCIsInRleHQiLCJ3ZWVrIiwiTWIiLCJub2RlTmFtZSIsIk5iIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50Iiwibm9kZVR5cGUiLCJPYiIsInNldEF0dHJpYnV0ZSIsIlBiIiwiUmIiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlFiIiwiU2IiLCJjaGVja2VkIiwiVGIiLCJVYiIsIlZiIiwiV2IiLCJYYiIsIlliIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJjYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJrYyIsImxjIiwibWMiLCJuYyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJyYyIsInNjIiwidG9VcHBlckNhc2UiLCJ0YyIsInBjIiwicWMiLCJvYyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwidWMiLCJ2YyIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwid2MiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsIkJjIiwiY2hhbmdlIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsImRldGFjaEV2ZW50IiwiS2MiLCJMYyIsImF0dGFjaEV2ZW50IiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiUWMiLCJSYyIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJTYyIsImdldE1vZGlmaWVyU3RhdGUiLCJUYyIsIlVjIiwiVmMiLCJXYyIsIlhjIiwiWWMiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIlpjIiwicG9pbnRlcklkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiJGMiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsImFkIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJhbHRlcm5hdGUiLCJiZCIsImNkIiwiZGQiLCJlZCIsImVmZmVjdFRhZyIsImZkIiwiaGQiLCJjaGlsZCIsInNpYmxpbmciLCJnZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJqZCIsImNsaXBib2FyZERhdGEiLCJrZCIsImxkIiwiY2hhckNvZGUiLCJtZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJuZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJvZCIsImxvY2F0aW9uIiwicGQiLCJkYXRhVHJhbnNmZXIiLCJxZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJyZCIsInNkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ0ZCIsInVkIiwidmQiLCJ3ZCIsImlzSW50ZXJhY3RpdmUiLCJ4ZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsInlkIiwiemQiLCJBZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiQmQiLCJDZCIsIkRkIiwiRWQiLCJGZCIsIkdkIiwiSGQiLCJJZCIsIkpkIiwiYm9keSIsIktkIiwiZmlyc3RDaGlsZCIsIkxkIiwibmV4dFNpYmxpbmciLCJOZCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiaHJlZiIsIk9kIiwiY29udGVudEVkaXRhYmxlIiwiUWQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiTWQiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsImZvY3VzIiwiUmQiLCJTZCIsInNlbGVjdCIsIlRkIiwiVWQiLCJWZCIsIldkIiwiWGQiLCJZZCIsIm9uU2VsZWN0IiwiJGQiLCJaZCIsImFlIiwib3B0aW9ucyIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiYmUiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImNlIiwiZGUiLCJlZSIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJmZSIsIm1hdGhtbCIsInN2ZyIsImdlIiwiaGUiLCJpZSIsImplIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsImtlIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwibGUiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsIm1lIiwibmUiLCJvZSIsInNldFByb3BlcnR5Iiwic3Vic3RyaW5nIiwicGUiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInFlIiwic2UiLCJibHVyIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJhdXRvRm9jdXMiLCJ4ZSIsIl9faHRtbCIsInllIiwiemUiLCJjbGVhclRpbWVvdXQiLCJBZSIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJCZSIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiRGUiLCJFZSIsIlNldCIsIkZlIiwiR2UiLCJIZSIsIkllIiwiSmUiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJLZSIsIkxlIiwiTWUiLCJOZSIsImdldENoaWxkQ29udGV4dCIsIk9lIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlVlIiwiZWxlbWVudFR5cGUiLCJwZW5kaW5nUHJvcHMiLCJjb250ZXh0RGVwZW5kZW5jaWVzIiwibWVtb2l6ZWRTdGF0ZSIsInVwZGF0ZVF1ZXVlIiwibWVtb2l6ZWRQcm9wcyIsImxhc3RFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJWZSIsIlhlIiwiWWUiLCJaZSIsIiRlIiwiYWYiLCJiZiIsInBlbmRpbmdDaGlsZHJlbiIsImltcGxlbWVudGF0aW9uIiwiY2YiLCJkaWRFcnJvciIsImVhcmxpZXN0UGVuZGluZ1RpbWUiLCJsYXRlc3RQZW5kaW5nVGltZSIsImRmIiwiZmYiLCJsYXRlc3RQaW5nZWRUaW1lIiwiZWFybGllc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0U3VzcGVuZGVkVGltZSIsImdmIiwibmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24iLCJqZiIsImtmIiwiYmFzZVN0YXRlIiwidGYiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwibGYiLCJuZiIsIm1mIiwicGF5bG9hZCIsImNhbGxiYWNrIiwicGYiLCJxZiIsInJmIiwic2YiLCJ1ZiIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsInZmIiwid2YiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJ4ZiIsInlmIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJ6ZiIsIkFmIiwiX3N0cmluZ1JlZiIsIkJmIiwiQ2YiLCJNYXAiLCJEZiIsIkVmIiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJKZiIsInRhZ05hbWUiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJiYXNlVXBkYXRlIiwibmciLCJvZyIsInBnIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImRpc3BhdGNoIiwiYWN0aW9uIiwicWciLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJyZyIsImRlc3Ryb3kiLCJkZXBzIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInJlYWRDb250ZXh0IiwieGciLCJ5ZyIsInpnIiwiQWciLCJCZyIsIkNnIiwiRGciLCJFZyIsIkZnIiwiR2ciLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwiTWciLCJOZyIsIk9nIiwiUGciLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJRZyIsIlJnIiwicGVuZGluZ0NvbnRleHQiLCJTZyIsInRpbWVkT3V0QXQiLCJmYWxsYmFjayIsIlRnIiwiVWciLCJoZiIsIldlIiwiaHlkcmF0ZSIsImhpZGRlbiIsIm9ic2VydmVkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsImRoIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJpaCIsImpoIiwic3RhY2siLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwib25DbGljayIsIm9uY2xpY2siLCJwaCIsIldlYWtTZXQiLCJxaCIsInJoIiwic2giLCJ0aCIsInZoIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJ3aCIsInhoIiwieWgiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiemgiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwiQ2UiLCJ1aCIsImhpIiwiWGgiLCJCaCIsIldlYWtNYXAiLCJDaCIsIkRoIiwiRWgiLCJjb21wb25lbnREaWRDYXRjaCIsIkZoIiwiY29tcG9uZW50U3RhY2siLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwiVWgiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlZoIiwiWmgiLCJwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUiLCJlZiIsIlBkIiwiWWgiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImZpbmlzaGVkV29yayIsIiRoIiwiYWkiLCJjcmVhdGVFbGVtZW50TlMiLCJiaSIsImNpIiwiZGkiLCJtYXhEdXJhdGlvbiIsInBpbmdDYWNoZSIsImVpIiwiZmkiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsImdpIiwiaWkiLCJqaSIsImtpIiwibGkiLCJtaSIsIm5pIiwib2kiLCJwaSIsInFpIiwicmkiLCJzaSIsInRpIiwidW5zdGFibGVfbm93IiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwidGltZW91dCIsInRpbWVvdXRIYW5kbGUiLCJCaSIsIkNpIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJEaSIsIkVpIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJfb25Db21wbGV0ZSIsIkZpIiwiZmlyc3RCYXRjaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsIkdpIiwiSGkiLCJJaSIsIkppIiwiS2kiLCJMaSIsIk5pIiwiX3Jvb3QiLCJfY2FsbGJhY2tzIiwiX25leHQiLCJfaGFzQ2hpbGRyZW4iLCJfZGlkQ29tcGxldGUiLCJfY2hpbGRyZW4iLCJPaSIsIl9kaWRDb21taXQiLCJfb25Db21taXQiLCJQaSIsIl9pbnRlcm5hbFJvb3QiLCJRaSIsIlNpIiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiaGFzQXR0cmlidXRlIiwiUmkiLCJUaSIsIk1pIiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJjb21taXQiLCJ1bm1vdW50IiwiY3JlYXRlQmF0Y2giLCJWaSIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJ1bnN0YWJsZV9jcmVhdGVSb290IiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJUZSIsIm92ZXJyaWRlUHJvcHMiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJXaSIsIlhpIiwicHJldmlvdXMiLCJwcmlvcml0eUxldmVsIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJwZXJmb3JtYW5jZSIsIl9zY2hlZE1vY2siLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJvb2wiLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJ0eXBlT2YiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJMYXp5IiwiTWVtbyIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJSZWFjdFJlZHV4Q29udGV4dCIsInJlYWN0X2RlZmF1bHQiLCJiYXRjaF9iYXRjaCIsImdldEJhdGNoIiwiQ0xFQVJFRCIsIm51bGxMaXN0ZW5lcnMiLCJTdWJzY3JpcHRpb24iLCJwYXJlbnRTdWIiLCJ1bnN1YnNjcmliZSIsImxpc3RlbmVycyIsImhhbmRsZUNoYW5nZVdyYXBwZXIiLCJfcHJvdG8iLCJhZGROZXN0ZWRTdWIiLCJ0cnlTdWJzY3JpYmUiLCJzdWJzY3JpYmUiLCJub3RpZnlOZXN0ZWRTdWJzIiwib25TdGF0ZUNoYW5nZSIsImlzU3Vic2NyaWJlZCIsIkJvb2xlYW4iLCJiYXRjaCIsInRyeVVuc3Vic2NyaWJlIiwiUHJvdmlkZXJfUHJvdmlkZXIiLCJfQ29tcG9uZW50Iiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX3RoaXMiLCJub3RpZnlTdWJzY3JpYmVycyIsIlJlZmVyZW5jZUVycm9yIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsInN1YnNjcmlwdGlvbiIsInByZXZpb3VzU3RhdGUiLCJnZXRTdGF0ZSIsIl9pc01vdW50ZWQiLCJwcmV2UHJvcHMiLCJyZWFjdCIsInByb3BfdHlwZXNfZGVmYXVsdCIsImNvbXBvbmVudHNfUHJvdmlkZXIiLCJfZXh0ZW5kcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiRU1QVFlfQVJSQVkiLCJOT19TVUJTQ1JJUFRJT05fQVJSQVkiLCJzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIiLCJ1cGRhdGVDb3VudCIsImluaXRTdGF0ZVVwZGF0ZXMiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX3JlZiIsIl9yZWYyIiwiX3JlZjIkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYyJG1ldGhvZE5hbWUiLCJtZXRob2ROYW1lIiwiX3JlZjIkcmVuZGVyQ291bnRQcm9wIiwicmVuZGVyQ291bnRQcm9wIiwiX3JlZjIkc2hvdWxkSGFuZGxlU3RhIiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiX3JlZjIkc3RvcmVLZXkiLCJzdG9yZUtleSIsIl9yZWYyJHdpdGhSZWYiLCJ3aXRoUmVmIiwiX3JlZjIkZm9yd2FyZFJlZiIsIl9yZWYyJGNvbnRleHQiLCJjb25uZWN0T3B0aW9ucyIsImJyb3dzZXJfZGVmYXVsdCIsIldyYXBwZWRDb21wb25lbnQiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsInNlbGVjdG9yRmFjdG9yeU9wdGlvbnMiLCJwdXJlIiwidXNlUHVyZU9ubHlNZW1vIiwiQ29ubmVjdEZ1bmN0aW9uIiwiX3VzZU1lbW8iLCJmb3J3YXJkZWRSZWYiLCJ3cmFwcGVyUHJvcHMiLCJwcm9wc0NvbnRleHQiLCJDb250ZXh0VG9Vc2UiLCJyZWFjdF9pcyIsImNvbnRleHRWYWx1ZSIsImRpZFN0b3JlQ29tZUZyb21Qcm9wcyIsImRpZFN0b3JlQ29tZUZyb21Db250ZXh0IiwiY2hpbGRQcm9wc1NlbGVjdG9yIiwiY3JlYXRlQ2hpbGRTZWxlY3RvciIsIl91c2VNZW1vMiIsIm92ZXJyaWRkZW5Db250ZXh0VmFsdWUiLCJfdXNlUmVkdWNlciIsInByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQiLCJmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoIiwibGFzdENoaWxkUHJvcHMiLCJsYXN0V3JhcHBlclByb3BzIiwiY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSIsInJlbmRlcklzU2NoZWR1bGVkIiwiYWN0dWFsQ2hpbGRQcm9wcyIsImRpZFVuc3Vic2NyaWJlIiwibGFzdFRocm93bkVycm9yIiwiY2hlY2tGb3JVcGRhdGVzIiwibmV3Q2hpbGRQcm9wcyIsImxhdGVzdFN0b3JlU3RhdGUiLCJyZW5kZXJlZFdyYXBwZWRDb21wb25lbnQiLCJDb25uZWN0IiwiZm9yd2FyZGVkIiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfY2pzX2RlZmF1bHQiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJyYW5kb21TdHJpbmciLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsImlzUGxhaW5PYmplY3QiLCJnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZSIsImFjdGlvblR5cGUiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJfZGVmaW5lUHJvcGVydHkiLCJjb21wb3NlIiwiX2xlbiIsImZ1bmNzIiwiX2tleSIsIndyYXBNYXBUb1Byb3BzQ29uc3RhbnQiLCJnZXRDb25zdGFudCIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwic3RhdGVPckRpc3BhdGNoIiwib3duUHJvcHMiLCJjb25uZWN0X21hcERpc3BhdGNoVG9Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsImFjdGlvbkNyZWF0b3JzIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsImJpbmRBY3Rpb25DcmVhdG9ycyIsImNvbm5lY3RfbWFwU3RhdGVUb1Byb3BzIiwibWFwU3RhdGVUb1Byb3BzIiwiZGVmYXVsdE1lcmdlUHJvcHMiLCJzdGF0ZVByb3BzIiwiZGlzcGF0Y2hQcm9wcyIsImNvbm5lY3RfbWVyZ2VQcm9wcyIsIm1lcmdlUHJvcHMiLCJtZXJnZWRQcm9wcyIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibmV4dE1lcmdlZFByb3BzIiwid3JhcE1lcmdlUHJvcHNGdW5jIiwiaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsInB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiYXJlU3RhdGVzRXF1YWwiLCJhcmVPd25Qcm9wc0VxdWFsIiwiYXJlU3RhdGVQcm9wc0VxdWFsIiwiaGFzUnVuQXRMZWFzdE9uY2UiLCJoYW5kbGVTdWJzZXF1ZW50Q2FsbHMiLCJuZXh0U3RhdGUiLCJuZXh0T3duUHJvcHMiLCJuZXh0U3RhdGVQcm9wcyIsInN0YXRlUHJvcHNDaGFuZ2VkIiwicHJvcHNDaGFuZ2VkIiwic3RhdGVDaGFuZ2VkIiwiZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImluaXRNYXBTdGF0ZVRvUHJvcHMiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiaW5pdE1lcmdlUHJvcHMiLCJzdHJpY3RFcXVhbCIsIl90ZW1wIiwiX3JlZiRjb25uZWN0SE9DIiwiY29ubmVjdEhPQyIsIl9yZWYkbWFwU3RhdGVUb1Byb3BzRiIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWFwRGlzcGF0Y2hUb1BybyIsIm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWVyZ2VQcm9wc0ZhY3RvciIsIm1lcmdlUHJvcHNGYWN0b3JpZXMiLCJfcmVmJHNlbGVjdG9yRmFjdG9yeSIsInVzZVJlZHV4Q29udGV4dCIsInVzZURpc3BhdGNoIiwibmV3QmF0Y2giLCJ1c2VTZWxlY3Rvcl91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwicmVmRXF1YWxpdHkiLCJ1c2VTZWxlY3RvciIsInNlbGVjdG9yIiwiZXF1YWxpdHlGbiIsInNlbGVjdGVkU3RhdGUiLCJfdXNlUmVkdXhDb250ZXh0IiwiY29udGV4dFN1YiIsImZvcmNlUmVuZGVyIiwibGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciIsImxhdGVzdFNlbGVjdG9yIiwibGF0ZXN0U2VsZWN0ZWRTdGF0ZSIsImVycm9yTWVzc2FnZSIsIm1lc3NhZ2UiLCJuZXdTZWxlY3RlZFN0YXRlIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsInJlYWN0X2RvbSIsInRodW5rIiwid2l0aEV4dHJhQXJndW1lbnQiLCJyZWR1eF90aHVua19lcyIsImNyZWF0ZVN0b3JlIiwicmVkdWNlciIsInByZWxvYWRlZFN0YXRlIiwiZW5oYW5jZXIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwiZXMiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiY29tYmluZVJlZHVjZXJzIiwiZ3JlZXRpbmdzIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIiwibWlkZGxld2FyZXMiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwibWlkZGxld2FyZSIsIl9vYmplY3RTcHJlYWQiLCJhcHBseU1pZGRsZXdhcmUiLCJHcmVldGluZ01hc3RlciIsIm9uQWRkIiwiZ3JlZXRpbmciLCJ1c2VJbnB1dCIsInBsYWNlaG9sZGVyIiwiX1JlYWN0JHVzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5IiwiUmVhY3QiLCJvbkNoYW5nZSIsIkdyZWV0aW5nRGV0YWlsIiwiX3VzZUlucHV0MiIsImluaXRpYWxOYW1lIiwibmFtZUlucHV0IiwicmVzZXROYW1lIiwiX3VzZUlucHV0NCIsImluaXRpYWxHcmVldGluZyIsImdyZWV0aW5nSW5wdXQiLCJyZXNldEdyZWV0aW5nIiwiaW5wdXRSZWYiLCJzYXZlRGlzYWJsZWQiLCJHcmVldGluZ0RldGFpbF9leHRlbmRzIiwib25TYXZlIiwiYWRkR3JlZXRpbmciLCJuZXdHcmVldGluZyIsIkJBQ0tFTkRfVVJMIiwibG9hZEdyZWV0aW5nc0Zyb21TZXJ2ZXIiLCJfY2FsbGVlIiwicmVzcG9uc2UiLCJfZ3JlZXRpbmdzIiwiZmV0Y2giLCJqc29uIiwidDAiLCJfeCIsIk1PREVfTUFTVEVSIiwiRXJyb3JNZXNzYWdlIiwib25SZXRyeSIsIkVycm9ySGFuZGxlciIsIl9jbGFzc0NhbGxDaGVjayIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2dldFByb3RvdHlwZU9mIiwiX3RoaXMyIiwibW91bnROb2RlIiwiZ2V0RWxlbWVudEJ5SWQiLCJSZWFjdERPTSIsIkVycm9ySGFuZGxlcl9FcnJvckhhbmRsZXIiLCJfYWRkR3JlZXRpbmciLCJncmVldGluZ1RvQmVBZGRlZCIsImhlYWRlcnMiLCJBY2NlcHQiLCJDb250ZW50LVR5cGUiLCJzdGF0dXMiLCJhY3Rpb25zIiwic3JjX0dyZWV0aW5nTWFzdGVyIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFB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QyxRQUFBQyxnQkFBQSxnQ0NWQTl2QixFQUFRLEtBRVJBLEVBQVEsS0FFUkEsRUFBUSxLQUVSQSxFQUFRLEtBRVJBLEVBQVEsS0FFUkEsRUFBUSxLQUVSQSxFQUFRLEtBRVJBLEVBQVEsS0FFUkEsRUFBUSxLQUVSQSxFQUFRLEtBRVJBLEVBQVEsS0FFUkEsRUFBUSxLQUVSQSxFQUFRLEtBRVJBLEVBQVEsc0JDNUJSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxL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Y0lQLEVBZEpwdkMsRUFBQTdHLEtBQUE2RyxFQUFBcCtCLEtBQUEsaUJBQUFvK0IsRUFBQTVmLEtBQUEsR0FBQTRmLEVBQUE0dkMsR0FBQTV2QyxFQUFBLFNBZ0JJMXhCLFFBQVFqSSxNQUFNLDRCQUFkMjVCLEVBQUE0dkMsSUFoQkosUUFrQkVyakIsRUFBU3lrQixHQUFvQjVCLElBQzdCN2lCLEVEdEJLLENBQ0xyM0QsS0FBTSxXQUNObkIsS0FBTSxnQkNDUix5QkFBQWlzQyxFQUFBckUsU0FBQTR6QyxFQUFBLGtCQWQyQ21CLGlMQUFBejJFLE1BQUFyQixLQUFBc0IsV0FvQzNDLE9BNUJBb1UsUUFBUXlGLElBQUkscUJBQXNCcTVELEdBRWxDZ0IsSUFBTTV0QyxVQUFVLFdBQ2QrckIsRUFBU3lrQixPQUNSLElBd0JDajlFLElBQVMrN0UsR0FFVDVRLEVBQUExbkUsRUFBQWdYLGNBQUN5aUUsR0FBRCxDQUNFN0QsVUFBV0EsRUFDWFUsTUFBTyxXQUNMdmhCLEVEckNELENBQ0xyM0QsS0FBTSxXQUNObkIsS0FBTSxtQkN3Q0RtckUsRUFBQTFuRSxFQUFBZ1gsY0FBQzgvRCxHQUFELENBQWdCWSxPQTlDb0IsU0FBQVcsR0FBQSxPQUFBYSxFQUFBejJFLE1BQUFyQixLQUFBc0IsZUVFdkMsUUFHSm8yRSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvZGlzdFwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTMxKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuNicgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuL19mdW5jdGlvbi10by1zdHJpbmcnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHF1b3QgPSAvXCIvZztcbi8vIEIuMi4zLjIuMSBDcmVhdGVIVE1MKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKVxudmFyIGNyZWF0ZUhUTUwgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgdmFyIHAxID0gJzwnICsgdGFnO1xuICBpZiAoYXR0cmlidXRlICE9PSAnJykgcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJ1wiJztcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgZXhlYykge1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlc3QgPSAnJ1tOQU1FXSgnXCInKTtcbiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJ1wiJykubGVuZ3RoID4gMztcbiAgfSksICdTdHJpbmcnLCBPKTtcbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1ldGhvZCwgYXJnKSB7XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbFxuICAgIGFyZyA/IG1ldGhvZC5jYWxsKG51bGwsIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgMSkgOiBtZXRob2QuY2FsbChudWxsKTtcbiAgfSk7XG59O1xuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCJ2YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwiLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFzYyA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUWVBFLCAkY3JlYXRlKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgdmFyIGNyZWF0ZSA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsLCByZXM7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSByZXN1bHRbaW5kZXhdID0gcmVzOyAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXMpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiByZXN1bHQucHVzaCh2YWwpOyAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiBmYWxzZTsgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykpIHtcbiAgdmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG4gIHZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbiAgdmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbiAgdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiAgdmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG4gIHZhciAkYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG4gIHZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbiAgdmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xuICB2YXIgcHJvcGVydHlEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuICB2YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbiAgdmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG4gIHZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG4gIHZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuICB2YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG4gIHZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xuICB2YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbiAgdmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xuICB2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbiAgdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4gIHZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xuICB2YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG4gIHZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG4gIHZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbiAgdmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG4gIHZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuICB2YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG4gIHZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbiAgdmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xuICB2YXIgY3JlYXRlQXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJyk7XG4gIHZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG4gIHZhciBBcnJheUl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG4gIHZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbiAgdmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbiAgdmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xuICB2YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xuICB2YXIgYXJyYXlDb3B5V2l0aGluID0gcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKTtcbiAgdmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuICB2YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xuICB2YXIgZFAgPSAkRFAuZjtcbiAgdmFyIGdPUEQgPSAkR09QRC5mO1xuICB2YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuICB2YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbiAgdmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheTtcbiAgdmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG4gIHZhciBTSEFSRURfQlVGRkVSID0gJ1NoYXJlZCcgKyBBUlJBWV9CVUZGRVI7XG4gIHZhciBCWVRFU19QRVJfRUxFTUVOVCA9ICdCWVRFU19QRVJfRUxFTUVOVCc7XG4gIHZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheVtQUk9UT1RZUEVdO1xuICB2YXIgJEFycmF5QnVmZmVyID0gJGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbiAgdmFyICREYXRhVmlldyA9ICRidWZmZXIuRGF0YVZpZXc7XG4gIHZhciBhcnJheUZvckVhY2ggPSBjcmVhdGVBcnJheU1ldGhvZCgwKTtcbiAgdmFyIGFycmF5RmlsdGVyID0gY3JlYXRlQXJyYXlNZXRob2QoMik7XG4gIHZhciBhcnJheVNvbWUgPSBjcmVhdGVBcnJheU1ldGhvZCgzKTtcbiAgdmFyIGFycmF5RXZlcnkgPSBjcmVhdGVBcnJheU1ldGhvZCg0KTtcbiAgdmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xuICB2YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbiAgdmFyIGFycmF5SW5jbHVkZXMgPSBjcmVhdGVBcnJheUluY2x1ZGVzKHRydWUpO1xuICB2YXIgYXJyYXlJbmRleE9mID0gY3JlYXRlQXJyYXlJbmNsdWRlcyhmYWxzZSk7XG4gIHZhciBhcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JzLnZhbHVlcztcbiAgdmFyIGFycmF5S2V5cyA9IEFycmF5SXRlcmF0b3JzLmtleXM7XG4gIHZhciBhcnJheUVudHJpZXMgPSBBcnJheUl0ZXJhdG9ycy5lbnRyaWVzO1xuICB2YXIgYXJyYXlMYXN0SW5kZXhPZiA9IEFycmF5UHJvdG8ubGFzdEluZGV4T2Y7XG4gIHZhciBhcnJheVJlZHVjZSA9IEFycmF5UHJvdG8ucmVkdWNlO1xuICB2YXIgYXJyYXlSZWR1Y2VSaWdodCA9IEFycmF5UHJvdG8ucmVkdWNlUmlnaHQ7XG4gIHZhciBhcnJheUpvaW4gPSBBcnJheVByb3RvLmpvaW47XG4gIHZhciBhcnJheVNvcnQgPSBBcnJheVByb3RvLnNvcnQ7XG4gIHZhciBhcnJheVNsaWNlID0gQXJyYXlQcm90by5zbGljZTtcbiAgdmFyIGFycmF5VG9TdHJpbmcgPSBBcnJheVByb3RvLnRvU3RyaW5nO1xuICB2YXIgYXJyYXlUb0xvY2FsZVN0cmluZyA9IEFycmF5UHJvdG8udG9Mb2NhbGVTdHJpbmc7XG4gIHZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbiAgdmFyIFRBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbiAgdmFyIFRZUEVEX0NPTlNUUlVDVE9SID0gdWlkKCd0eXBlZF9jb25zdHJ1Y3RvcicpO1xuICB2YXIgREVGX0NPTlNUUlVDVE9SID0gdWlkKCdkZWZfY29uc3RydWN0b3InKTtcbiAgdmFyIEFMTF9DT05TVFJVQ1RPUlMgPSAkdHlwZWQuQ09OU1RSO1xuICB2YXIgVFlQRURfQVJSQVkgPSAkdHlwZWQuVFlQRUQ7XG4gIHZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG4gIHZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG5cbiAgdmFyICRtYXAgPSBjcmVhdGVBcnJheU1ldGhvZCgxLCBmdW5jdGlvbiAoTywgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGFsbG9jYXRlKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsZW5ndGgpO1xuICB9KTtcblxuICB2YXIgTElUVExFX0VORElBTiA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQxNkFycmF5KFsxXSkuYnVmZmVyKVswXSA9PT0gMTtcbiAgfSk7XG5cbiAgdmFyIEZPUkNFRF9TRVQgPSAhIVVpbnQ4QXJyYXkgJiYgISFVaW50OEFycmF5W1BST1RPVFlQRV0uc2V0ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgVWludDhBcnJheSgxKS5zZXQoe30pO1xuICB9KTtcblxuICB2YXIgdG9PZmZzZXQgPSBmdW5jdGlvbiAoaXQsIEJZVEVTKSB7XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihpdCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9O1xuXG4gIHZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIGlmIChpc09iamVjdChpdCkgJiYgVFlQRURfQVJSQVkgaW4gaXQpIHJldHVybiBpdDtcbiAgICB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIHR5cGVkIGFycmF5IScpO1xuICB9O1xuXG4gIHZhciBhbGxvY2F0ZSA9IGZ1bmN0aW9uIChDLCBsZW5ndGgpIHtcbiAgICBpZiAoIShpc09iamVjdChDKSAmJiBUWVBFRF9DT05TVFJVQ1RPUiBpbiBDKSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJdCBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvciEnKTtcbiAgICB9IHJldHVybiBuZXcgQyhsZW5ndGgpO1xuICB9O1xuXG4gIHZhciBzcGVjaWVzRnJvbUxpc3QgPSBmdW5jdGlvbiAoTywgbGlzdCkge1xuICAgIHJldHVybiBmcm9tTGlzdChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGlzdCk7XG4gIH07XG5cbiAgdmFyIGZyb21MaXN0ID0gZnVuY3Rpb24gKEMsIGxpc3QpIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUoQywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uIChpdCwga2V5LCBpbnRlcm5hbCkge1xuICAgIGRQKGl0LCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kW2ludGVybmFsXTsgfSB9KTtcbiAgfTtcblxuICB2YXIgJGZyb20gPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcGZuLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChzb3VyY2UpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgaSwgbGVuZ3RoLCB2YWx1ZXMsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIWlzQXJyYXlJdGVyKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgdmFsdWVzID0gW10sIGkgPSAwOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGkrKykge1xuICAgICAgICB2YWx1ZXMucHVzaChzdGVwLnZhbHVlKTtcbiAgICAgIH0gTyA9IHZhbHVlcztcbiAgICB9XG4gICAgaWYgKG1hcHBpbmcgJiYgYUxlbiA+IDIpIG1hcGZuID0gY3R4KG1hcGZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKSwgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTsgbGVuZ3RoID4gaTsgaSsrKSB7XG4gICAgICByZXN1bHRbaV0gPSBtYXBwaW5nID8gbWFwZm4oT1tpXSwgaSkgOiBPW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciAkb2YgPSBmdW5jdGlvbiBvZigvKiAuLi5pdGVtcyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gaU9TIFNhZmFyaSA2LnggZmFpbHMgaGVyZVxuICB2YXIgVE9fTE9DQUxFX0JVRyA9ICEhVWludDhBcnJheSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9Mb2NhbGVTdHJpbmcuY2FsbChuZXcgVWludDhBcnJheSgxKSk7IH0pO1xuXG4gIHZhciAkdG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b0xvY2FsZVN0cmluZygpIHtcbiAgICByZXR1cm4gYXJyYXlUb0xvY2FsZVN0cmluZy5hcHBseShUT19MT0NBTEVfQlVHID8gYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpKSA6IHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIHZhciBwcm90byA9IHtcbiAgICBjb3B5V2l0aGluOiBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQgLyogLCBlbmQgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUNvcHlXaXRoaW4uY2FsbCh2YWxpZGF0ZSh0aGlzKSwgdGFyZ2V0LCBzdGFydCwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlFdmVyeSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmlsbDogZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0LCBlbmQgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5RmlsbC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5RmlsdGVyKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLFxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCkpO1xuICAgIH0sXG4gICAgZmluZDogZnVuY3Rpb24gZmluZChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kKHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmRJbmRleCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICBhcnJheUZvckVhY2godmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5kZXhPZih2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluY2x1ZGVzKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlKb2luLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5TGFzdEluZGV4T2YuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBtYXA6IGZ1bmN0aW9uIG1hcChtYXBmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiAkbWFwKHZhbGlkYXRlKHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2VSaWdodC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIgbGVuZ3RoID0gdmFsaWRhdGUodGhhdCkubGVuZ3RoO1xuICAgICAgdmFyIG1pZGRsZSA9IE1hdGguZmxvb3IobGVuZ3RoIC8gMik7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgd2hpbGUgKGluZGV4IDwgbWlkZGxlKSB7XG4gICAgICAgIHZhbHVlID0gdGhhdFtpbmRleF07XG4gICAgICAgIHRoYXRbaW5kZXgrK10gPSB0aGF0Wy0tbGVuZ3RoXTtcbiAgICAgICAgdGhhdFtsZW5ndGhdID0gdmFsdWU7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH0sXG4gICAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5U29tZSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICAgIHJldHVybiBhcnJheVNvcnQuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgY29tcGFyZWZuKTtcbiAgICB9LFxuICAgIHN1YmFycmF5OiBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKSB7XG4gICAgICB2YXIgTyA9IHZhbGlkYXRlKHRoaXMpO1xuICAgICAgdmFyIGxlbmd0aCA9IE8ubGVuZ3RoO1xuICAgICAgdmFyICRiZWdpbiA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuZ3RoKTtcbiAgICAgIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pKShcbiAgICAgICAgTy5idWZmZXIsXG4gICAgICAgIE8uYnl0ZU9mZnNldCArICRiZWdpbiAqIE8uQllURVNfUEVSX0VMRU1FTlQsXG4gICAgICAgIHRvTGVuZ3RoKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCkpIC0gJGJlZ2luKVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyICRzbGljZSA9IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgc3RhcnQsIGVuZCkpO1xuICB9O1xuXG4gIHZhciAkc2V0ID0gZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiAsIG9mZnNldCAqLykge1xuICAgIHZhbGlkYXRlKHRoaXMpO1xuICAgIHZhciBvZmZzZXQgPSB0b09mZnNldChhcmd1bWVudHNbMV0sIDEpO1xuICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICB2YXIgc3JjID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgoc3JjLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBpZiAobGVuICsgb2Zmc2V0ID4gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgd2hpbGUgKGluZGV4IDwgbGVuKSB0aGlzW29mZnNldCArIGluZGV4XSA9IHNyY1tpbmRleCsrXTtcbiAgfTtcblxuICB2YXIgJGl0ZXJhdG9ycyA9IHtcbiAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5RW50cmllcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIGtleXM6IGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlLZXlzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlWYWx1ZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc1RBSW5kZXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICByZXR1cm4gaXNPYmplY3QodGFyZ2V0KVxuICAgICAgJiYgdGFyZ2V0W1RZUEVEX0FSUkFZXVxuICAgICAgJiYgdHlwZW9mIGtleSAhPSAnc3ltYm9sJ1xuICAgICAgJiYga2V5IGluIHRhcmdldFxuICAgICAgJiYgU3RyaW5nKCtrZXkpID09IFN0cmluZyhrZXkpO1xuICB9O1xuICB2YXIgJGdldERlc2MgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcbiAgICByZXR1cm4gaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgID8gcHJvcGVydHlEZXNjKDIsIHRhcmdldFtrZXldKVxuICAgICAgOiBnT1BEKHRhcmdldCwga2V5KTtcbiAgfTtcbiAgdmFyICRzZXREZXNjID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICBpZiAoaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgICYmIGlzT2JqZWN0KGRlc2MpXG4gICAgICAmJiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICAgICYmICFoYXMoZGVzYywgJ2dldCcpXG4gICAgICAmJiAhaGFzKGRlc2MsICdzZXQnKVxuICAgICAgLy8gVE9ETzogYWRkIHZhbGlkYXRpb24gZGVzY3JpcHRvciB3L28gY2FsbGluZyBhY2Nlc3NvcnNcbiAgICAgICYmICFkZXNjLmNvbmZpZ3VyYWJsZVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ3dyaXRhYmxlJykgfHwgZGVzYy53cml0YWJsZSlcbiAgICAgICYmICghaGFzKGRlc2MsICdlbnVtZXJhYmxlJykgfHwgZGVzYy5lbnVtZXJhYmxlKVxuICAgICkge1xuICAgICAgdGFyZ2V0W2tleV0gPSBkZXNjLnZhbHVlO1xuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9IHJldHVybiBkUCh0YXJnZXQsIGtleSwgZGVzYyk7XG4gIH07XG5cbiAgaWYgKCFBTExfQ09OU1RSVUNUT1JTKSB7XG4gICAgJEdPUEQuZiA9ICRnZXREZXNjO1xuICAgICREUC5mID0gJHNldERlc2M7XG4gIH1cblxuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFBTExfQ09OU1RSVUNUT1JTLCAnT2JqZWN0Jywge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldERlc2MsXG4gICAgZGVmaW5lUHJvcGVydHk6ICRzZXREZXNjXG4gIH0pO1xuXG4gIGlmIChmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9TdHJpbmcuY2FsbCh7fSk7IH0pKSB7XG4gICAgYXJyYXlUb1N0cmluZyA9IGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0aGlzKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyICRUeXBlZEFycmF5UHJvdG90eXBlJCA9IHJlZGVmaW5lQWxsKHt9LCBwcm90byk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJGl0ZXJhdG9ycyk7XG4gIGhpZGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBJVEVSQVRPUiwgJGl0ZXJhdG9ycy52YWx1ZXMpO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIHtcbiAgICBzbGljZTogJHNsaWNlLFxuICAgIHNldDogJHNldCxcbiAgICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gKCkgeyAvKiBub29wICovIH0sXG4gICAgdG9TdHJpbmc6IGFycmF5VG9TdHJpbmcsXG4gICAgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZ1xuICB9KTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J1ZmZlcicsICdiJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlT2Zmc2V0JywgJ28nKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVMZW5ndGgnLCAnbCcpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnbGVuZ3RoJywgJ2UnKTtcbiAgZFAoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBUQUcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbVFlQRURfQVJSQVldOyB9XG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50c1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIEJZVEVTLCB3cmFwcGVyLCBDTEFNUEVEKSB7XG4gICAgQ0xBTVBFRCA9ICEhQ0xBTVBFRDtcbiAgICB2YXIgTkFNRSA9IEtFWSArIChDTEFNUEVEID8gJ0NsYW1wZWQnIDogJycpICsgJ0FycmF5JztcbiAgICB2YXIgR0VUVEVSID0gJ2dldCcgKyBLRVk7XG4gICAgdmFyIFNFVFRFUiA9ICdzZXQnICsgS0VZO1xuICAgIHZhciBUeXBlZEFycmF5ID0gZ2xvYmFsW05BTUVdO1xuICAgIHZhciBCYXNlID0gVHlwZWRBcnJheSB8fCB7fTtcbiAgICB2YXIgVEFDID0gVHlwZWRBcnJheSAmJiBnZXRQcm90b3R5cGVPZihUeXBlZEFycmF5KTtcbiAgICB2YXIgRk9SQ0VEID0gIVR5cGVkQXJyYXkgfHwgISR0eXBlZC5BQlY7XG4gICAgdmFyIE8gPSB7fTtcbiAgICB2YXIgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXkgJiYgVHlwZWRBcnJheVtQUk9UT1RZUEVdO1xuICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIHJldHVybiBkYXRhLnZbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgsIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICBpZiAoQ0xBTVBFRCkgdmFsdWUgPSAodmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKSkgPCAwID8gMCA6IHZhbHVlID4gMHhmZiA/IDB4ZmYgOiB2YWx1ZSAmIDB4ZmY7XG4gICAgICBkYXRhLnZbU0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCB2YWx1ZSwgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgYWRkRWxlbWVudCA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgZFAodGhhdCwgaW5kZXgsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHNldHRlcih0aGlzLCBpbmRleCwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIHtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSwgJ19kJyk7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBvZmZzZXQgPSAwO1xuICAgICAgICB2YXIgYnVmZmVyLCBieXRlTGVuZ3RoLCBsZW5ndGgsIGtsYXNzO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgbGVuZ3RoID0gdG9JbmRleChkYXRhKTtcbiAgICAgICAgICBieXRlTGVuZ3RoID0gbGVuZ3RoICogQllURVM7XG4gICAgICAgICAgYnVmZmVyID0gbmV3ICRBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICBvZmZzZXQgPSB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyk7XG4gICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYgKCRsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCRsZW4gJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBvZmZzZXQ7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCA8IDApIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCArIG9mZnNldCA+ICRsZW4pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuZ3RoID0gYnl0ZUxlbmd0aCAvIEJZVEVTO1xuICAgICAgICB9IGVsc2UgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaGlkZSh0aGF0LCAnX2QnLCB7XG4gICAgICAgICAgYjogYnVmZmVyLFxuICAgICAgICAgIG86IG9mZnNldCxcbiAgICAgICAgICBsOiBieXRlTGVuZ3RoLFxuICAgICAgICAgIGU6IGxlbmd0aCxcbiAgICAgICAgICB2OiBuZXcgJERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkgYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IGNyZWF0ZSgkVHlwZWRBcnJheVByb3RvdHlwZSQpO1xuICAgICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5KTtcbiAgICB9IGVsc2UgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5KDEpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSkgfHwgISRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkobnVsbCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheSgxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoaXRlcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSwgdHJ1ZSkpIHtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSk7XG4gICAgICAgIHZhciBrbGFzcztcbiAgICAgICAgLy8gYHdzYCBtb2R1bGUgYnVnLCB0ZW1wb3JhcmlseSByZW1vdmUgdmFsaWRhdGlvbiBsZW5ndGggZm9yIFVpbnQ4QXJyYXlcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3MvcHVsbC82NDVcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkgcmV0dXJuIG5ldyBCYXNlKHRvSW5kZXgoZGF0YSkpO1xuICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIHJldHVybiAkbGVuZ3RoICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpLCAkbGVuZ3RoKVxuICAgICAgICAgICAgOiAkb2Zmc2V0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUykpXG4gICAgICAgICAgICAgIDogbmV3IEJhc2UoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICB9KTtcbiAgICAgIGFycmF5Rm9yRWFjaChUQUMgIT09IEZ1bmN0aW9uLnByb3RvdHlwZSA/IGdPUE4oQmFzZSkuY29uY2F0KGdPUE4oVEFDKSkgOiBnT1BOKEJhc2UpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghKGtleSBpbiBUeXBlZEFycmF5KSkgaGlkZShUeXBlZEFycmF5LCBrZXksIEJhc2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IFR5cGVkQXJyYXlQcm90b3R5cGU7XG4gICAgICBpZiAoIUxJQlJBUlkpIFR5cGVkQXJyYXlQcm90b3R5cGUuY29uc3RydWN0b3IgPSBUeXBlZEFycmF5O1xuICAgIH1cbiAgICB2YXIgJG5hdGl2ZUl0ZXJhdG9yID0gVHlwZWRBcnJheVByb3RvdHlwZVtJVEVSQVRPUl07XG4gICAgdmFyIENPUlJFQ1RfSVRFUl9OQU1FID0gISEkbmF0aXZlSXRlcmF0b3JcbiAgICAgICYmICgkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSAndmFsdWVzJyB8fCAkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSB1bmRlZmluZWQpO1xuICAgIHZhciAkaXRlcmF0b3IgPSAkaXRlcmF0b3JzLnZhbHVlcztcbiAgICBoaWRlKFR5cGVkQXJyYXksIFRZUEVEX0NPTlNUUlVDVE9SLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRZUEVEX0FSUkFZLCBOQU1FKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgREVGX0NPTlNUUlVDVE9SLCBUeXBlZEFycmF5KTtcblxuICAgIGlmIChDTEFNUEVEID8gbmV3IFR5cGVkQXJyYXkoMSlbVEFHXSAhPSBOQU1FIDogIShUQUcgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIHtcbiAgICAgIGRQKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRBRywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5BTUU7IH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9bTkFNRV0gPSBUeXBlZEFycmF5O1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheSAhPSBCYXNlKSwgTyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUywgTkFNRSwge1xuICAgICAgQllURVNfUEVSX0VMRU1FTlQ6IEJZVEVTXG4gICAgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgQmFzZS5vZi5jYWxsKFR5cGVkQXJyYXksIDEpOyB9KSwgTkFNRSwge1xuICAgICAgZnJvbTogJGZyb20sXG4gICAgICBvZjogJG9mXG4gICAgfSk7XG5cbiAgICBpZiAoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAsIE5BTUUsIHByb3RvKTtcblxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFRF9TRVQsIE5BTUUsIHsgc2V0OiAkc2V0IH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhQ09SUkVDVF9JVEVSX05BTUUsIE5BTUUsICRpdGVyYXRvcnMpO1xuXG4gICAgaWYgKCFMSUJSQVJZICYmIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgIT0gYXJyYXlUb1N0cmluZykgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyA9IGFycmF5VG9TdHJpbmc7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEpLnNsaWNlKCk7XG4gICAgfSksIE5BTUUsIHsgc2xpY2U6ICRzbGljZSB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBbMSwgMl0udG9Mb2NhbGVTdHJpbmcoKSAhPSBuZXcgVHlwZWRBcnJheShbMSwgMl0pLnRvTG9jYWxlU3RyaW5nKCk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwgMl0pO1xuICAgIH0pKSwgTkFNRSwgeyB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nIH0pO1xuXG4gICAgSXRlcmF0b3JzW05BTUVdID0gQ09SUkVDVF9JVEVSX05BTUUgPyAkbmF0aXZlSXRlcmF0b3IgOiAkaXRlcmF0b3I7XG4gICAgaWYgKCFMSUJSQVJZICYmICFDT1JSRUNUX0lURVJfTkFNRSkgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBJVEVSQVRPUiwgJGl0ZXJhdG9yKTtcbiAgfTtcbn0gZWxzZSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogTUVUQSxcbiAgTkVFRDogZmFsc2UsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWs6IGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzcGFjZXMgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBzcGFjZSA9ICdbJyArIHNwYWNlcyArICddJztcbnZhciBub24gPSAnXFx1MjAwYlxcdTAwODUnO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcblxudmFyIGV4cG9ydGVyID0gZnVuY3Rpb24gKEtFWSwgZXhlYywgQUxJQVMpIHtcbiAgdmFyIGV4cCA9IHt9O1xuICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjtcbiAgfSk7XG4gIHZhciBmbiA9IGV4cFtLRVldID0gRk9SQ0UgPyBleGVjKHRyaW0pIDogc3BhY2VzW0tFWV07XG4gIGlmIChBTElBUykgZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uIChzdHJpbmcsIFRZUEUpIHtcbiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZiAoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSkgZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgc2FmZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcbiIsIi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgRCkge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJ2YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7IGRvbmU6IHNhZmUgPSB0cnVlIH07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGJ1aWx0aW5FeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuXG4gLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpICE9PSAnUmVnRXhwJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuICByZXR1cm4gYnVpbHRpbkV4ZWMuY2FsbChSLCBTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZXhlYycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xuXG52YXIgU1BFQ0lFUyA9IHdrcygnc3BlY2llcycpO1xuXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyAjcmVwbGFjZSBuZWVkcyBidWlsdC1pbiBzdXBwb3J0IGZvciBuYW1lZCBncm91cHMuXG4gIC8vICNtYXRjaCB3b3JrcyBmaW5lIGJlY2F1c2UgaXQganVzdCByZXR1cm4gdGhlIGV4ZWMgcmVzdWx0cywgZXZlbiBpZiBpdCBoYXNcbiAgLy8gYSBcImdyb3BzXCIgcHJvcGVydHkuXG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMiAmJiByZXN1bHRbMF0gPT09ICdhJyAmJiByZXN1bHRbMV0gPT09ICdiJztcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcblxuICB2YXIgREVMRUdBVEVTX1RPX1NZTUJPTCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3RyaW5nIG1ldGhvZHMgY2FsbCBzeW1ib2wtbmFtZWQgUmVnRXAgbWV0aG9kc1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KTtcblxuICB2YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBERUxFR0FURVNfVE9fU1lNQk9MID8gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgfVxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSkgOiB1bmRlZmluZWQ7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgKEtFWSA9PT0gJ3JlcGxhY2UnICYmICFSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUykgfHxcbiAgICAoS0VZID09PSAnc3BsaXQnICYmICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgZm5zID0gZXhlYyhcbiAgICAgIGRlZmluZWQsXG4gICAgICBTWU1CT0wsXG4gICAgICAnJ1tLRVldLFxuICAgICAgZnVuY3Rpb24gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgIGlmIChyZWdleHAuZXhlYyA9PT0gcmVnZXhwRXhlYykge1xuICAgICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxuICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlTWV0aG9kLmNhbGwoc3RyLCByZWdleHAsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICAgIH1cbiAgICApO1xuICAgIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgICB2YXIgcnhmbiA9IGZuc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBCUkVBSyA9IHt9O1xudmFyIFJFVFVSTiA9IHt9O1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKSB7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKTtcbiAgdmFyIGYgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcbiAgaWYgKGlzQXJyYXlJdGVyKGl0ZXJGbikpIGZvciAobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7KSB7XG4gICAgcmVzdWx0ID0gY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5leHBvcnRzLkJSRUFLID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7IG5ldyBDKGl0ZXIpOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UoKSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpIGRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBUWVBFRCA9IHVpZCgndHlwZWRfYXJyYXknKTtcbnZhciBWSUVXID0gdWlkKCd2aWV3Jyk7XG52YXIgQUJWID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldyk7XG52YXIgQ09OU1RSID0gQUJWO1xudmFyIGkgPSAwO1xudmFyIGwgPSA5O1xudmFyIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZSAoaSA8IGwpIHtcbiAgaWYgKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pIHtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogVFlQRUQsXG4gIFZJRVc6IFZJRVdcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpO1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59O1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG0xID0gTWF0aC5leHBtMTtcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7XG59IDogJGV4cG0xO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIvLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKSB7XG4gIGlmIChpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKSB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZyMnICsgTkFNRSArIFwiIGRvZXNuJ3QgYWNjZXB0IHJlZ2V4IVwiKTtcbiAgcmV0dXJuIFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbn07XG4iLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCJ2YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgcmUgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbS0VZXShyZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2ggKGYpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiB0cnVlO1xufTtcbiIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcblxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbi8vIFN0cmluZyNyZXBsYWNlIHBvbHlmaWxsIHVzZXMgLi9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzLFxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvLFxuICAgICAgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTFbTEFTVF9JTkRFWF0gIT09IDAgfHwgcmUyW0xBU1RfSU5ERVhdICE9PSAwO1xufSkoKTtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQ7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgbGFzdEluZGV4LCByZUNvcHksIG1hdGNoLCBpO1xuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgcmUuc291cmNlICsgJyQoPyFcXFxccyknLCByZWdleHBGbGFncy5jYWxsKHJlKSk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlW0xBU1RfSU5ERVhdO1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwocmUsIHN0cik7XG5cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZVtMQVNUX0lOREVYXSA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xudmFyIFdST05HX0lOREVYID0gJ1dyb25nIGluZGV4ISc7XG52YXIgJEFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgTWF0aCA9IGdsb2JhbC5NYXRoO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3ctcmVzdHJpY3RlZC1uYW1lc1xudmFyIEluZmluaXR5ID0gZ2xvYmFsLkluZmluaXR5O1xudmFyIEJhc2VCdWZmZXIgPSAkQXJyYXlCdWZmZXI7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xudmFyIEJVRkZFUiA9ICdidWZmZXInO1xudmFyIEJZVEVfTEVOR1RIID0gJ2J5dGVMZW5ndGgnO1xudmFyIEJZVEVfT0ZGU0VUID0gJ2J5dGVPZmZzZXQnO1xudmFyICRCVUZGRVIgPSBERVNDUklQVE9SUyA/ICdfYicgOiBCVUZGRVI7XG52YXIgJExFTkdUSCA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RIO1xudmFyICRPRkZTRVQgPSBERVNDUklQVE9SUyA/ICdfbycgOiBCWVRFX09GRlNFVDtcblxuLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcbmZ1bmN0aW9uIHBhY2tJRUVFNzU0KHZhbHVlLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShuQnl0ZXMpO1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDA7XG4gIHZhciBlLCBtLCBjO1xuICB2YWx1ZSA9IGFicyh2YWx1ZSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XG4gICAgaWYgKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcbiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIHVucGFja0lFRUU3NTQoYnVmZmVyLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGVMZW4gLSA3O1xuICB2YXIgaSA9IG5CeXRlcyAtIDE7XG4gIHZhciBzID0gYnVmZmVyW2ktLV07XG4gIHZhciBlID0gcyAmIDEyNztcbiAgdmFyIG07XG4gIHMgPj49IDc7XG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xufVxuXG5mdW5jdGlvbiB1bnBhY2tJMzIoYnl0ZXMpIHtcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG59XG5mdW5jdGlvbiBwYWNrSTgoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kxNihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kzMihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tGNjQoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XG59XG5mdW5jdGlvbiBwYWNrRjMyKGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xufVxuXG5mdW5jdGlvbiBhZGRHZXR0ZXIoQywga2V5LCBpbnRlcm5hbCkge1xuICBkUChDW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9IH0pO1xufVxuXG5mdW5jdGlvbiBnZXQodmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59XG5mdW5jdGlvbiBzZXQodmlldywgYnl0ZXMsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKSBzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbn1cblxuaWYgKCEkdHlwZWQuQUJWKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHRoaXMuX2IgPSBhcnJheUZpbGwuY2FsbChuZXcgQXJyYXkoYnl0ZUxlbmd0aCksIDApO1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gICREYXRhVmlldyA9IGZ1bmN0aW9uIERhdGFWaWV3KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuICAgIGFuSW5zdGFuY2UoYnVmZmVyLCAkQXJyYXlCdWZmZXIsIERBVEFfVklFVyk7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJ1ZmZlclskTEVOR1RIXTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7XG4gICAgdGhpc1skT0ZGU0VUXSA9IG9mZnNldDtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpO1xuICB9XG5cbiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7XG4gICAgfSxcbiAgICBnZXRVaW50ODogZnVuY3Rpb24gZ2V0VWludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTtcbiAgICB9LFxuICAgIGdldEludDE2OiBmdW5jdGlvbiBnZXRJbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpID4+PiAwO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgNTIsIDgpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0YzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgcGFja0Y2NCwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICRBcnJheUJ1ZmZlcigxKTtcbiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcihOYU4pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIHJldHVybiAkQXJyYXlCdWZmZXIubmFtZSAhPSBBUlJBWV9CVUZGRVI7XG4gIH0pKSB7XG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlcik7XG4gICAgICByZXR1cm4gbmV3IEJhc2VCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBCYXNlQnVmZmVyW1BST1RPVFlQRV07XG4gICAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIGhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7XG4gICAgfVxuICAgIGlmICghTElCUkFSWSkgQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xuICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKSByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHRydWUpO1xufVxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuaGlkZSgkRGF0YVZpZXdbUFJPVE9UWVBFXSwgJHR5cGVkLlZJRVcsIHRydWUpO1xuZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyO1xuZXhwb3J0c1tEQVRBX1ZJRVddID0gJERhdGFWaWV3O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgICAnJCR0eXBlb2YnOiB0cnVlLFxuICAgIHJlbmRlcjogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlXG59O1xuXG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAgICckJHR5cGVvZic6IHRydWUsXG4gICAgY29tcGFyZTogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tSZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgICBpZiAoUmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgICAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICAgIH1cbiAgICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuXG4gICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgICAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQgcG9ueWZpbGwgZnJvbSAnLi9wb255ZmlsbC5qcyc7XG5cbnZhciByb290O1xuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHtcbiAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG5cbnZhciByZXN1bHQgPSBwb255ZmlsbChyb290KTtcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIvLyA3LjIuOSBTYW1lVmFsdWUoeCwgeSlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xudmFyIGZhY3RvcmllcyA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEYsIGxlbiwgYXJncykge1xuICBpZiAoIShsZW4gaW4gZmFjdG9yaWVzKSkge1xuICAgIGZvciAodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKykgbltpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7XG4gIHZhciBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbiAoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoZm4ucHJvdG90eXBlKSkgYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmQ7XG59O1xuIiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuIiwidmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlSW50O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgaGV4ID0gL15bLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuIiwidmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VGbG9hdDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcblxubW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQocmVxdWlyZSgnLi9fc3RyaW5nLXdzJykgKyAnLTAnKSAhPT0gLUluZmluaXR5ID8gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHIpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgdmFyIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDtcbn0gOiAkcGFyc2VGbG9hdDtcbiIsInZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBtc2cpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnbnVtYmVyJyAmJiBjb2YoaXQpICE9ICdOdW1iZXInKSB0aHJvdyBUeXBlRXJyb3IobXNnKTtcbiAgcmV0dXJuICtpdDtcbn07XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCkge1xuICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KSB7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBpID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYgKGFMZW4gPCAyKSBmb3IgKDs7KSB7XG4gICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZiAoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvciAoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xucmVxdWlyZSgnLi9fZXhwb3J0Jykoe1xuICB0YXJnZXQ6ICdSZWdFeHAnLFxuICBwcm90bzogdHJ1ZSxcbiAgZm9yY2VkOiByZWdleHBFeGVjICE9PSAvLi8uZXhlY1xufSwge1xuICBleGVjOiByZWdleHBFeGVjXG59KTtcbiIsIi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKClcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJylcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52OCB8fCAnJztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXG4gICAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcbiAgICAgIC8vIHY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICAgICYmIHY4LmluZGV4T2YoJzYuNicpICE9PSAwXG4gICAgICAmJiB1c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lLzY2JykgPT09IC0xO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIG1heSB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgcmV0dXJuIHByb21pc2UuX2ggIT09IDEgJiYgKHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYykubGVuZ3RoID09PSAwO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcblxuZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGZhc3RLZXkgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTSVpFID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gIHZhciBlbnRyeTtcbiAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvciAoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgaWYgKGVudHJ5LmsgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgZm9yICh2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnApIGVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uO1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZiAodGhhdC5fZiA9PSBlbnRyeSkgdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYgKHRoYXQuX2wgPT0gZW50cnkpIHRoYXQuX2wgPSBwcmV2O1xuICAgICAgICAgIHRoYXRbU0laRV0tLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2YpIHtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSwga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUodGhpcywgTkFNRSlbU0laRV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgIHZhciBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXlcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeVxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxuICAgICAgfTtcbiAgICAgIGlmICghdGhhdC5fZikgdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYgKHByZXYpIHByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgdGhhdC5faVtpbmRleF0gPSBlbnRyeTtcbiAgICB9IHJldHVybiB0aGF0O1xuICB9LFxuICBnZXRFbnRyeTogZ2V0RW50cnksXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIE5BTUUsIElTX01BUCkge1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHRoaXMuX3QgPSB2YWxpZGF0ZShpdGVyYXRlZCwgTkFNRSk7IC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgICAgICAgICAgICAgICAgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIga2luZCA9IHRoYXQuX2s7XG4gICAgICB2YXIgZW50cnkgPSB0aGF0Ll9sO1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghdGhhdC5fdCB8fCAhKHRoYXQuX2wgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoYXQuX3QuX2YpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2VhayA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xudmFyICRoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2luZGV4XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXIoaXQpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgobnVtYmVyKTtcbiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGghJyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuIiwiLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgUmVmbGVjdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnT1BOLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgdmFyIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChPLCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuNicgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiLi9ub0NvbmZsaWN0XCIpO1xuXG52YXIgX2dsb2JhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9nbG9iYWxcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5pZiAoX2dsb2JhbC5kZWZhdWx0Ll9iYWJlbFBvbHlmaWxsICYmIHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnNvbGUud2Fybikge1xuICBjb25zb2xlLndhcm4oXCJAYmFiZWwvcG9seWZpbGwgaXMgbG9hZGVkIG1vcmUgdGhhbiBvbmNlIG9uIHRoaXMgcGFnZS4gVGhpcyBpcyBwcm9iYWJseSBub3QgZGVzaXJhYmxlL2ludGVuZGVkIFwiICsgXCJhbmQgbWF5IGhhdmUgY29uc2VxdWVuY2VzIGlmIGRpZmZlcmVudCB2ZXJzaW9ucyBvZiB0aGUgcG9seWZpbGxzIGFyZSBhcHBsaWVkIHNlcXVlbnRpYWxseS4gXCIgKyBcIklmIHlvdSBkbyBuZWVkIHRvIGxvYWQgdGhlIHBvbHlmaWxsIG1vcmUgdGhhbiBvbmNlLCB1c2UgQGJhYmVsL3BvbHlmaWxsL25vQ29uZmxpY3QgXCIgKyBcImluc3RlYWQgdG8gYnlwYXNzIHRoZSB3YXJuaW5nLlwiKTtcbn1cblxuX2dsb2JhbC5kZWZhdWx0Ll9iYWJlbFBvbHlmaWxsID0gdHJ1ZTsiLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcImNvcmUtanMvZXM2XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9hcnJheS9pbmNsdWRlc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vYXJyYXkvZmxhdC1tYXBcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N0cmluZy9wYWQtc3RhcnRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N0cmluZy9wYWQtZW5kXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1zdGFydFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3RyaW0tZW5kXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zeW1ib2wvYXN5bmMtaXRlcmF0b3JcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9vYmplY3QvdmFsdWVzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9vYmplY3QvZW50cmllc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vcHJvbWlzZS9maW5hbGx5XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy93ZWJcIik7XG5cbnJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWVcIik7IiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hdGFuaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmNvc2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmh5cG90Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnNpbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmpvaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNvbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYud2Vhay1zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRHT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICAkR09QUy5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9ICRmYWlscyhmdW5jdGlvbiAoKSB7ICRHT1BTLmYoMSk7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIEZBSUxTX09OX1BSSU1JVElWRVMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuICRHT1BTLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcbiIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKS5mO1xufSk7XG4iLCIvLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2ZyZWV6ZScsIGZ1bmN0aW9uICgkZnJlZXplKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uICgkc2VhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gc2VhbChpdCkge1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uICgkcHJldmVudEV4dGVuc2lvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24gKCRpc0Zyb3plbikge1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbiAoJGlzU2VhbGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc1NlYWxlZChpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gKCRpc0V4dGVuc2libGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCIvLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBpczogcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpIH0pO1xuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG4iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywgeyBiaW5kOiByZXF1aXJlKCcuL19iaW5kJykgfSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICgnJyArIHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBIQVNfSU5TVEFOQ0UgPSByZXF1aXJlKCcuL193a3MnKSgnaGFzSW5zdGFuY2UnKTtcbnZhciBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xuICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlSW50ICE9ICRwYXJzZUludCksIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciAkTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgQmFzZSA9ICROdW1iZXI7XG52YXIgcHJvdG8gPSAkTnVtYmVyLnByb3RvdHlwZTtcbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DT0YgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSO1xudmFyIFRSSU0gPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTtcblxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHRoaXJkLCByYWRpeCwgbWF4Q29kZTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG5pZiAoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKSB7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24gKCkgeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSh0b051bWJlcihpdCkpLCB0aGF0LCAkTnVtYmVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXMoQmFzZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcygkTnVtYmVyLCBrZXkpKSB7XG4gICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciAkdG9GaXhlZCA9IDEuMC50b0ZpeGVkO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBkYXRhID0gWzAsIDAsIDAsIDAsIDAsIDBdO1xudmFyIEVSUk9SID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnO1xudmFyIFpFUk8gPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBpID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2kgPCA2KSB7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgcyA9ICcnO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKSB7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvRml4ZWQuY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvRml4ZWQ6IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpIHtcbiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUik7XG4gICAgdmFyIGYgPSB0b0ludGVnZXIoZnJhY3Rpb25EaWdpdHMpO1xuICAgIHZhciBzID0gJyc7XG4gICAgdmFyIG0gPSBaRVJPO1xuICAgIHZhciBlLCB6LCBqLCBrO1xuICAgIGlmIChmIDwgMCB8fCBmID4gMjApIHRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoeCAhPSB4KSByZXR1cm4gJ05hTic7XG4gICAgaWYgKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKSByZXR1cm4gU3RyaW5nKHgpO1xuICAgIGlmICh4IDwgMCkge1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYgKHggPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIGogPSBmO1xuICAgICAgICB3aGlsZSAoaiA+PSA3KSB7XG4gICAgICAgICAgbXVsdGlwbHkoMWU3LCAwKTtcbiAgICAgICAgICBqIC09IDc7XG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbHkocG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgIGogPSBlIC0gMTtcbiAgICAgICAgd2hpbGUgKGogPj0gMjMpIHtcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XG4gICAgICAgIGRpdmlkZSgyKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmID4gMCkge1xuICAgICAgayA9IG0ubGVuZ3RoO1xuICAgICAgbSA9IHMgKyAoayA8PSBmID8gJzAuJyArIHJlcGVhdC5jYWxsKFpFUk8sIGYgLSBrKSArIG0gOiBtLnNsaWNlKDAsIGsgLSBmKSArICcuJyArIG0uc2xpY2UoayAtIGYpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHMgKyBtO1xuICAgIH0gcmV0dXJuIG07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgRVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKSB9KTtcbiIsIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IGlzSW50ZWdlcjogcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpIH0pO1xuIiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpIHtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCIvLyAyMC4yLjIuMyBNYXRoLmFjb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgJGFjb3NoID0gTWF0aC5hY29zaDtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaFxuICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5XG4gICYmIE1hdGguZmxvb3IoJGFjb3NoKE51bWJlci5NQVhfVkFMVUUpKSA9PSA3MTBcbiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU5cbiAgJiYgJGFjb3NoKEluZmluaXR5KSA9PSBJbmZpbml0eVxuKSwgJ01hdGgnLCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NlxuICAgICAgPyBNYXRoLmxvZyh4KSArIE1hdGguTE4yXG4gICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xuXG5mdW5jdGlvbiBhc2luaCh4KSB7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7IGFzaW5oOiBhc2luaCB9KTtcbiIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpIHtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywgeyBleHBtMTogJGV4cG0xIH0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKSB9KTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7XG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcbnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBNYXRoLmFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCIvLyAyMC4yLjIuMTcgTWF0aC5oeXBvdChbdmFsdWUxWywgdmFsdWUyWywg4oCmIF1dXSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgc3VtID0gMDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBsYXJnID0gMDtcbiAgICB2YXIgYXJnLCBkaXY7XG4gICAgd2hpbGUgKGkgPCBhTGVuKSB7XG4gICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pO1xuICAgICAgaWYgKGxhcmcgPCBhcmcpIHtcbiAgICAgICAgZGl2ID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtID0gc3VtICogZGl2ICogZGl2ICsgMTtcbiAgICAgICAgbGFyZyA9IGFyZztcbiAgICAgIH0gZWxzZSBpZiAoYXJnID4gMCkge1xuICAgICAgICBkaXYgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGltdWwgPSBNYXRoLmltdWw7XG5cbi8vIHNvbWUgV2ViS2l0IHZlcnNpb25zIGZhaWxzIHdpdGggYmlnIG51bWJlcnMsIHNvbWUgaGFzIHdyb25nIGFyaXR5XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XG59KSwgJ01hdGgnLCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyIHhuID0gK3g7XG4gICAgdmFyIHluID0gK3k7XG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XG4gICAgdmFyIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGxvZzFwOiByZXF1aXJlKCcuL19tYXRoLWxvZzFwJykgfSk7XG4iLCIvLyAyMC4yLjIuMjIgTWF0aC5sb2cyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4yO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbjogcmVxdWlyZSgnLi9fbWF0aC1zaWduJykgfSk7XG4iLCIvLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDFcbiAgICAgID8gKGV4cG0xKHgpIC0gZXhwbTEoLXgpKSAvIDJcbiAgICAgIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoTWF0aC5FIC8gMik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreCk7XG4gICAgdmFyIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgY29kZTtcbiAgICB3aGlsZSAoYUxlbiA+IGkpIHtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZiAodG9BYnNvbHV0ZUluZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSkgdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7XG4gICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApXG4gICAgICApO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpIHtcbiAgICB2YXIgdHBsID0gdG9JT2JqZWN0KGNhbGxTaXRlLnJhdyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsZW4gPiBpKSB7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmIChpIDwgYUxlbikgcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltKClcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDMpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxufSk7XG4iLCIvLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIFNUQVJUU19XSVRIID0gJ3N0YXJ0c1dpdGgnO1xudmFyICRzdGFydHNXaXRoID0gJydbU1RBUlRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKFNUQVJUU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBTVEFSVFNfV0lUSCk7XG4gICAgdmFyIGluZGV4ID0gdG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkc3RhcnRzV2l0aFxuICAgICAgPyAkc3RhcnRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgaW5kZXgpXG4gICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4yIFN0cmluZy5wcm90b3R5cGUuYW5jaG9yKG5hbWUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdhbmNob3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmlnJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJpZygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjYgU3RyaW5nLnByb3RvdHlwZS5maXhlZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmaXhlZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmaXhlZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAndHQnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy43IFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yKGNvbG9yKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udGNvbG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy44IFN0cmluZy5wcm90b3R5cGUuZm9udHNpemUoc2l6ZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRzaXplJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2l0YWxpY3MnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjExIFN0cmluZy5wcm90b3R5cGUuc21hbGwoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc21hbGwnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTIgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2UoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5zdWIoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3ViJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1YigpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3VwJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7IG5vdzogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGxcbiAgICB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IHRvSVNPU3RyaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9IH0pICE9PSAxO1xufSksICdEYXRlJywge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgcHYgPSB0b1ByaW1pdGl2ZShPKTtcbiAgICByZXR1cm4gdHlwZW9mIHB2ID09ICdudW1iZXInICYmICFpc0Zpbml0ZShwdikgPyBudWxsIDogTy50b0lTT1N0cmluZygpO1xuICB9XG59KTtcbiIsIi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSVNPU3RyaW5nID0gcmVxdWlyZSgnLi9fZGF0ZS10by1pc28tc3RyaW5nJyk7XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgIT09IHRvSVNPU3RyaW5nKSwgJ0RhdGUnLCB7XG4gIHRvSVNPU3RyaW5nOiB0b0lTT1N0cmluZ1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcbnZhciAkdG9JU09TdHJpbmcgPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcblxudmFyIGx6ID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcbn07XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZCA9IHRoaXM7XG4gIHZhciB5ID0gZC5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHZhciBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xufSA6ICR0b0lTT1N0cmluZztcbiIsInZhciBEYXRlUHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IERhdGVQcm90b1tUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn1cbiIsInZhciBUT19QUklNSVRJVkUgPSByZXF1aXJlKCcuL193a3MnKSgndG9QcmltaXRpdmUnKTtcbnZhciBwcm90byA9IERhdGUucHJvdG90eXBlO1xuXG5pZiAoIShUT19QUklNSVRJVkUgaW4gcHJvdG8pKSByZXF1aXJlKCcuL19oaWRlJykocHJvdG8sIFRPX1BSSU1JVElWRSwgcmVxdWlyZSgnLi9fZGF0ZS10by1wcmltaXRpdmUnKSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIE5VTUJFUiA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGlmIChoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpO1xufTtcbiIsIi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5JywgeyBpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKVxuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pO1xuICAgIHdoaWxlIChhTGVuID4gaW5kZXgpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlKb2luID0gW10uam9pbjtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3NcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0b0lPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgaWYgKGh0bWwpIGFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKSB7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKTtcbiAgICB2YXIga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYgKGtsYXNzID09ICdBcnJheScpIHJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW4pO1xuICAgIHZhciB1cFRvID0gdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKTtcbiAgICB2YXIgc2l6ZSA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydCk7XG4gICAgdmFyIGNsb25lZCA9IG5ldyBBcnJheShzaXplKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBzaXplOyBpKyspIGNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcbiAgICAgIDogdGhpc1tzdGFydCArIGldO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJHNvcnQgPSBbXS5zb3J0O1xudmFyIHRlc3QgPSBbMSwgMiwgM107XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU4LVxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IGJ1Z1xuICB0ZXN0LnNvcnQobnVsbCk7XG4gIC8vIE9sZCBXZWJLaXRcbn0pIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJHNvcnQpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKVxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxuICAgICAgPyAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxuICAgICAgOiAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciBTVFJJQ1QgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uc29tZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRldmVyeSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg0KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmV2ZXJ5LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNSAvIDE1LjQuNC4xNiBBcnJheS5wcm90b3R5cGUuZXZlcnkoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTggLyAxNS40LjQuMjEgQXJyYXkucHJvdG90eXBlLnJlZHVjZShjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIGZhbHNlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciAkbmF0aXZlID0gW10uaW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyICRuYXRpdmUgPSBbXS5sYXN0SW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTykgaWYgKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gaW5kZXggfHwgMDtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn0pO1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBjb3B5V2l0aGluOiByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnY29weVdpdGhpbicpO1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBmaWxsOiByZXF1aXJlKCcuL19hcnJheS1maWxsJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmaWxsJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpO1xudmFyIEtFWSA9ICdmaW5kJztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDYpO1xudmFyIEtFWSA9ICdmaW5kSW5kZXgnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwicmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgQmFzZSA9ICRSZWdFeHA7XG52YXIgcHJvdG8gPSAkUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG4vLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbnZhciBDT1JSRUNUX05FVyA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmUyW3JlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSkge1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHtcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwO1xuICAgIHZhciBwaVJFID0gaXNSZWdFeHAocCk7XG4gICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOykgcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdSZWdFeHAnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAbWF0Y2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hcbiAgICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkbWF0Y2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoIXJ4Lmdsb2JhbCkgcmV0dXJuIHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBBW25dID0gbWF0Y2hTdHI7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJmAnXXxcXGRcXGQ/fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJmAnXXxcXGRcXGQ/KS9nO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG5cbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbiAgZnVuY3Rpb24gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgICB9XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgIHZhciBjYXB0dXJlO1xuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICAgIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgc2FtZVZhbHVlID0gcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQHNlYXJjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc2VhcmNoXG4gICAgZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc2VhcmNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkc2VhcmNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIHByZXZpb3VzTGFzdEluZGV4ID0gcngubGFzdEluZGV4O1xuICAgICAgaWYgKCFzYW1lVmFsdWUocHJldmlvdXNMYXN0SW5kZXgsIDApKSByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgaWYgKCFzYW1lVmFsdWUocngubGFzdEluZGV4LCBwcmV2aW91c0xhc3RJbmRleCkpIHJ4Lmxhc3RJbmRleCA9IHByZXZpb3VzTGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gbnVsbCA/IC0xIDogcmVzdWx0LmluZGV4O1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY2FsbFJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkbWluID0gTWF0aC5taW47XG52YXIgJHB1c2ggPSBbXS5wdXNoO1xudmFyICRTUExJVCA9ICdzcGxpdCc7XG52YXIgTEVOR1RIID0gJ2xlbmd0aCc7XG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xudmFyIE1BWF9VSU5UMzIgPSAweGZmZmZmZmZmO1xuXG4vLyBiYWJlbC1taW5pZnkgdHJhbnNwaWxlcyBSZWdFeHAoJ3gnLCAneScpIC0+IC94L3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyIFNVUFBPUlRTX1kgPSAhZmFpbHMoZnVuY3Rpb24gKCkgeyBSZWdFeHAoTUFYX1VJTlQzMiwgJ3knKTsgfSk7XG5cbi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgU1BMSVQsICRzcGxpdCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBpbnRlcm5hbFNwbGl0O1xuICBpZiAoXG4gICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAndGVzdCdbJFNQTElUXSgvKD86KS8sIC0xKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHxcbiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnLidbJFNQTElUXSgvKCkoKS8pW0xFTkdUSF0gPiAxIHx8XG4gICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdXG4gICkge1xuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkgcmV0dXJuICRzcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aDtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHJlZ2V4cEV4ZWMuY2FsbChzZXBhcmF0b3JDb3B5LCBzdHJpbmcpKSB7XG4gICAgICAgIGxhc3RJbmRleCA9IHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF07XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgaWYgKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pICRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnWyRTUExJVF0odW5kZWZpbmVkLCAwKVtMRU5HVEhdKSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6ICRzcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9ICRzcGxpdDtcbiAgfVxuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3BsaXRcbiAgICBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgc3BsaXR0ZXIgPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcbiAgICAgIHJldHVybiBzcGxpdHRlciAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gc3BsaXR0ZXIuY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KVxuICAgICAgICA6IGludGVybmFsU3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzcGxpdFxuICAgIC8vXG4gICAgLy8gTk9URTogVGhpcyBjYW5ub3QgYmUgcHJvcGVybHkgcG9seWZpbGxlZCBpbiBlbmdpbmVzIHRoYXQgZG9uJ3Qgc3VwcG9ydFxuICAgIC8vIHRoZSAneScgZmxhZy5cbiAgICBmdW5jdGlvbiAocmVnZXhwLCBsaW1pdCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShpbnRlcm5hbFNwbGl0LCByZWdleHAsIHRoaXMsIGxpbWl0LCBpbnRlcm5hbFNwbGl0ICE9PSAkc3BsaXQpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihyeCwgUmVnRXhwKTtcblxuICAgICAgdmFyIHVuaWNvZGVNYXRjaGluZyA9IHJ4LnVuaWNvZGU7XG4gICAgICB2YXIgZmxhZ3MgPSAocnguaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChTVVBQT1JUU19ZID8gJ3knIDogJ2cnKTtcblxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIFMgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHZhciBzcGxpdHRlciA9IG5ldyBDKFNVUFBPUlRTX1kgPyByeCA6ICdeKD86JyArIHJ4LnNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoUy5sZW5ndGggPT09IDApIHJldHVybiBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgUykgPT09IG51bGwgPyBbU10gOiBbXTtcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIHZhciBxID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB3aGlsZSAocSA8IFMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0dGVyLmxhc3RJbmRleCA9IFNVUFBPUlRTX1kgPyBxIDogMDtcbiAgICAgICAgdmFyIHogPSBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgU1VQUE9SVFNfWSA/IFMgOiBTLnNsaWNlKHEpKTtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB6ID09PSBudWxsIHx8XG4gICAgICAgICAgKGUgPSAkbWluKHRvTGVuZ3RoKHNwbGl0dGVyLmxhc3RJbmRleCArIChTVVBQT1JUU19ZID8gMCA6IHEpKSwgUy5sZW5ndGgpKSA9PT0gcFxuICAgICAgICApIHtcbiAgICAgICAgICBxID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHEsIHVuaWNvZGVNYXRjaGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQS5wdXNoKFMuc2xpY2UocCwgcSkpO1xuICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB6Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgQS5wdXNoKHpbaV0pO1xuICAgICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxID0gcCA9IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIEEucHVzaChTLnNsaWNlKHApKTtcbiAgICAgIHJldHVybiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChpc05vZGUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgU2FmYXJpIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE9ic2VydmVyICYmICEoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnN0YW5kYWxvbmUpKSB7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWU7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZiAoIWhlYWQpIHtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZTogZmFsc2UsIHY6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHsgZTogdHJ1ZSwgdjogZSB9O1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKE1BUCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTUFQKSwga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNFVCA9ICdTZXQnO1xuXG4vLyAyMy4yIFNldCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShTRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIFNFVCksIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBlYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKTtcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgSVNfSUUxMSA9ICFnbG9iYWwuQWN0aXZlWE9iamVjdCAmJiAnQWN0aXZlWE9iamVjdCcgaW4gZ2xvYmFsO1xudmFyIFdFQUtfTUFQID0gJ1dlYWtNYXAnO1xudmFyIGdldFdlYWsgPSBtZXRhLmdldFdlYWs7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlO1xudmFyIEludGVybmFsTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG52YXIgbWV0aG9kcyA9IHtcbiAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSkuZ2V0KGtleSk7XG4gICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCksIGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19NQVAsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG5pZiAoTkFUSVZFX1dFQUtfTUFQICYmIElTX0lFMTEpIHtcbiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIFdFQUtfTUFQKTtcbiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIG1ldGEuTkVFRCA9IHRydWU7XG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBwcm90byA9ICRXZWFrTWFwLnByb3RvdHlwZTtcbiAgICB2YXIgbWV0aG9kID0gcHJvdG9ba2V5XTtcbiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgLy8gc3RvcmUgZnJvemVuIG9iamVjdHMgb24gaW50ZXJuYWwgd2Vha21hcCBzaGltXG4gICAgICBpZiAoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSkge1xuICAgICAgICBpZiAoIXRoaXMuX2YpIHRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXAoKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Zba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpO1xuICAgIH0pO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19TRVQgPSAnV2Vha1NldCc7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19TRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfU0VUKSwgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXI7XG52YXIgJERhdGFWaWV3ID0gYnVmZmVyLkRhdGFWaWV3O1xudmFyICRpc1ZpZXcgPSAkdHlwZWQuQUJWICYmIEFycmF5QnVmZmVyLmlzVmlldztcbnZhciAkc2xpY2UgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlO1xudmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwgeyBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyIH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS4zLjEgQXJyYXlCdWZmZXIuaXNWaWV3KGFyZylcbiAgaXNWaWV3OiBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KSwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmICgkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIHZhciBsZW4gPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3UyA9IG5ldyAkRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluKSB7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7XG4gIERhdGFWaWV3OiByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKS5EYXRhVmlld1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0NjQnLCA4LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsIi8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciByQXBwbHkgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuYXBwbHk7XG52YXIgZkFwcGx5ID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KTtcbiAgICB2YXIgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vX2JpbmQnKTtcbnZhciByQ29uc3RydWN0ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDtcblxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIHJDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgJGFyZ3MucHVzaC5hcHBseSgkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKSgpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gPSBuZXdUYXJnZXQucHJvdG90eXBlO1xuICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcylcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS40IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgdmFyIGRlc2MgPSBnT1BEKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzYyAmJiAhZGVzYy5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI2LjEuNSBSZWZsZWN0LmVudW1lcmF0ZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdOyAgICAgIC8vIGtleXNcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gaXRlcmF0ZWQpIGtleXMucHVzaChrZXkpO1xufTtcbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBrZXlzID0gdGhhdC5faztcbiAgdmFyIGtleTtcbiAgZG8ge1xuICAgIGlmICh0aGF0Ll9pID49IGtleXMubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH0gd2hpbGUgKCEoKGtleSA9IGtleXNbdGhhdC5faSsrXSkgaW4gdGhhdC5fdCkpO1xuICByZXR1cm4geyB2YWx1ZToga2V5LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KSB7XG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGUodGFyZ2V0KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGRlc2MsIHByb3RvO1xuICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZiAoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgID8gZGVzYy52YWx1ZVxuICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZFxuICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSByZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IGdldDogZ2V0IH0pO1xuIiwiLy8gMjYuMS43IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2V0UHJvdG8gPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGdldFByb3RvKGFuT2JqZWN0KHRhcmdldCkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IG93bktleXM6IHJlcXVpcmUoJy4vX293bi1rZXlzJykgfSk7XG4iLCIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107XG4gIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmICghb3duRGVzYykge1xuICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZiAoaGFzKG93bkRlc2MsICd2YWx1ZScpKSB7XG4gICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkpIHtcbiAgICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IuZ2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci5zZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLndyaXRhYmxlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgY3JlYXRlRGVzYygwLCBWKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgc2V0OiBzZXQgfSk7XG4iLCIvLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2V0UHJvdG8gPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKTtcblxuaWYgKHNldFByb3RvKSAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7XG4gICAgc2V0UHJvdG8uY2hlY2sodGFyZ2V0LCBwcm90byk7XG4gICAgdHJ5IHtcbiAgICAgIHNldFByb3RvLnNldCh0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLkFycmF5LmluY2x1ZGVzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnaW5jbHVkZXMnKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5BcnJheS5mbGF0TWFwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXRNYXBcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgZmxhdE1hcDogZnVuY3Rpb24gZmxhdE1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiwgQTtcbiAgICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gICAgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIDEsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmxhdE1hcCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuZnVuY3Rpb24gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoLCBtYXBwZXIsIHRoaXNBcmcpIHtcbiAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XG4gIHZhciBtYXBGbiA9IG1hcHBlciA/IGN0eChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50LCBzcHJlYWRhYmxlO1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBzcHJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoaXNPYmplY3QoZWxlbWVudCkpIHtcbiAgICAgICAgc3ByZWFkYWJsZSA9IGVsZW1lbnRbSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICAgICAgICBzcHJlYWRhYmxlID0gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwcmVhZGFibGUgJiYgZGVwdGggPiAwKSB7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFmZmZmZmZmZmZmZmZmKSB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcucGFkU3RhcnQ7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBXRUJLSVRfQlVHLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcucGFkRW5kO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbnZhciBXRUJLSVRfQlVHID0gL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/KCBNb2JpbGVcXC9cXHcrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogV0VCS0lUX0JVRywgJ1N0cmluZycsIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZhbHNlKTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcudHJpbUxlZnQ7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltTGVmdCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbUxlZnQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDEpO1xuICB9O1xufSwgJ3RyaW1TdGFydCcpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy50cmltUmlnaHQ7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltUmlnaHQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMik7XG4gIH07XG59LCAndHJpbUVuZCcpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycztcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuL19vd24ta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXREZXNjID0gZ09QRC5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXksIGRlc2M7XG4gICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaSkge1xuICAgICAgZGVzYyA9IGdldERlc2MoTywga2V5ID0ga2V5c1tpKytdKTtcbiAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QudmFsdWVzO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmVudHJpZXM7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpIHtcbiAgICByZXR1cm4gJGVudHJpZXMoaXQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuUHJvbWlzZVsnZmluYWxseSddO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnUHJvbWlzZScsIHsgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSk7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHksXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICB9IDogb25GaW5hbGx5XG4gICk7XG59IH0pO1xuIiwicmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJyk7XG4iLCIvLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBzbGljZSA9IFtdLnNsaWNlO1xudmFyIE1TSUUgPSAvTVNJRSAuXFwuLy50ZXN0KHVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcbnZhciB3cmFwID0gZnVuY3Rpb24gKHNldCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGZuLCB0aW1lIC8qICwgLi4uYXJncyAqLykge1xuICAgIHZhciBib3VuZEFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICB2YXIgYXJncyA9IGJvdW5kQXJncyA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IGZhbHNlO1xuICAgIHJldHVybiBzZXQoYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSA6IGZuLCB0aW1lKTtcbiAgfTtcbn07XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiArICRleHBvcnQuRiAqIE1TSUUsIHtcbiAgc2V0VGltZW91dDogd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuIiwidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM3Lmdsb2JhbCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJykuZ2xvYmFsO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIElTX1dSQVAgPSB0eXBlICYgJGV4cG9ydC5XO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV07XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIga2V5LCBvd24sIG91dDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAob3duICYmIGhhcyhleHBvcnRzLCBrZXkpKSBjb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uIChDKSB7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgQykge1xuICAgICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEMoKTtcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDKGEpO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7XG4gICAgICAgICAgfSByZXR1cm4gbmV3IEMoYSwgYiwgYyk7XG4gICAgICAgIH0gcmV0dXJuIEMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG4gICAgICByZXR1cm4gRjtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLm1ldGhvZHMuJU5BTUUlXG4gICAgaWYgKElTX1BST1RPKSB7XG4gICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG4gICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuICAgICAgaWYgKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0pIGhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTtcbiAgICB9XG4gIH1cbn07XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjguNlxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGs9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSx5PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHo9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsYWE9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTpcbjYwMTE1LGJhPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gY2EoYSxiLGQsYyxlLGcsaCxmKXtpZighYSl7YT12b2lkIDA7aWYodm9pZCAwPT09YilhPUVycm9yKFwiTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7ZWxzZXt2YXIgbD1bZCxjLGUsZyxoLGZdLG09MDthPUVycm9yKGIucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBsW20rK119KSk7YS5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwifWEuZnJhbWVzVG9Qb3A9MTt0aHJvdyBhO319XG5mdW5jdGlvbiBCKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZD1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0wO2M8YjtjKyspZCs9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYysxXSk7Y2EoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixkKX12YXIgQz17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRD17fTtcbmZ1bmN0aW9uIEUoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZHx8Q31FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0UucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT9CKFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixkKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWR8fEN9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7ayhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPXtjdXJyZW50Om51bGx9LEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGQpe3ZhciBjPXZvaWQgMCxlPXt9LGc9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGVbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49ZDtlbHNlIGlmKDE8Zil7Zm9yKHZhciBsPUFycmF5KGYpLG09MDttPGY7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1sfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1lW2NdJiYoZVtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmgscHJvcHM6ZSxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIGRhKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBOKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE89L1xcLysvZyxQPVtdO2Z1bmN0aW9uIFEoYSxiLGQsYyl7aWYoUC5sZW5ndGgpe3ZhciBlPVAucG9wKCk7ZS5yZXN1bHQ9YTtlLmtleVByZWZpeD1iO2UuZnVuYz1kO2UuY29udGV4dD1jO2UuY291bnQ9MDtyZXR1cm4gZX1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpkLGNvbnRleHQ6Yyxjb3VudDowfX1cbmZ1bmN0aW9uIFIoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5QLmxlbmd0aCYmUC5wdXNoKGEpfVxuZnVuY3Rpb24gUyhhLGIsZCxjKXt2YXIgZT10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZXx8XCJib29sZWFuXCI9PT1lKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gZChjLGEsXCJcIj09PWI/XCIuXCIrVChhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaD0wO2g8YS5sZW5ndGg7aCsrKXtlPWFbaF07dmFyIGY9YitUKGUsaCk7Zys9UyhlLGYsZCxjKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUEmJmFbQV18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaD1cbjA7IShlPWEubmV4dCgpKS5kb25lOyllPWUudmFsdWUsZj1iK1QoZSxoKyspLGcrPVMoZSxmLGQsYyk7ZWxzZVwib2JqZWN0XCI9PT1lJiYoZD1cIlwiK2EsQihcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PWQ/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZCxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVShhLGIsZCl7cmV0dXJuIG51bGw9PWE/MDpTKGEsXCJcIixiLGQpfWZ1bmN0aW9uIFQoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIGVhKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGZhKGEsYixkKXt2YXIgYz1hLnJlc3VsdCxlPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1YoYSxjLGQsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTihhKSYmKGE9ZGEoYSxlKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStkKSksYy5wdXNoKGEpKX1mdW5jdGlvbiBWKGEsYixkLGMsZSl7dmFyIGc9XCJcIjtudWxsIT1kJiYoZz0oXCJcIitkKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsYyxlKTtVKGEsZmEsYik7UihiKX1mdW5jdGlvbiBXKCl7dmFyIGE9SS5jdXJyZW50O251bGw9PT1hP0IoXCIzMjFcIik6dm9pZCAwO3JldHVybiBhfVxudmFyIFg9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VihhLGMsbnVsbCxiLGQpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixkKXtpZihudWxsPT1hKXJldHVybiBhO2I9UShudWxsLG51bGwsYixkKTtVKGEsZWEsYik7UihiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFUoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtWKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TihhKT92b2lkIDA6QihcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RSxQdXJlQ29tcG9uZW50OkcsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsXG5fY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX0sZm9yd2FyZFJlZjpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eSxyZW5kZXI6YX19LGxhenk6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOmJhLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fSxtZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOmFhLHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX0sdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUNhbGxiYWNrKGEsYil9LHVzZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUNvbnRleHQoYSxiKX0sdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VFZmZlY3QoYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLFxuYixkKXtyZXR1cm4gVygpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGQpfSx1c2VEZWJ1Z1ZhbHVlOmZ1bmN0aW9uKCl7fSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUxheW91dEVmZmVjdChhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VNZW1vKGEsYil9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGQpe3JldHVybiBXKCkudXNlUmVkdWNlcihhLGIsZCl9LHVzZVJlZjpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVJlZihhKX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIFcoKS51c2VTdGF0ZShhKX0sRnJhZ21lbnQ6cixTdHJpY3RNb2RlOnQsU3VzcGVuc2U6eixjcmVhdGVFbGVtZW50Ok0sY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixkKXtudWxsPT09YXx8dm9pZCAwPT09YT9CKFwiMjY3XCIsYSk6dm9pZCAwO3ZhciBjPXZvaWQgMCxlPWsoe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9XG5iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1KLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgbD12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYobD1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGVbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09bD9sW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWUuY2hpbGRyZW49ZDtlbHNlIGlmKDE8Yyl7bD1BcnJheShjKTtmb3IodmFyIG09MDttPGM7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1sfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmUsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpOLHZlcnNpb246XCIxNi44LjZcIixcbnVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlOngsdW5zdGFibGVfUHJvZmlsZXI6dSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpJLFJlYWN0Q3VycmVudE93bmVyOkosYXNzaWduOmt9fSxZPXtkZWZhdWx0Olh9LFo9WSYmWHx8WTttb2R1bGUuZXhwb3J0cz1aLmRlZmF1bHR8fFo7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjguNlxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxuPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHI9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiBiYShhLGIsYyxkLGUsZixnLGgpe2lmKCFhKXthPXZvaWQgMDtpZih2b2lkIDA9PT1iKWE9RXJyb3IoXCJNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtlbHNle3ZhciBsPVtjLGQsZSxmLGcsaF0saz0wO2E9RXJyb3IoYi5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGxbaysrXX0pKTthLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCJ9YS5mcmFtZXNUb1BvcD0xO3Rocm93IGE7fX1cbmZ1bmN0aW9uIHgoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxkPTA7ZDxiO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTtiYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWFhP3ZvaWQgMDp4KFwiMjI3XCIpO2Z1bmN0aW9uIGNhKGEsYixjLGQsZSxmLGcsaCxsKXt2YXIgaz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxrKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fVxudmFyIGRhPSExLGVhPW51bGwsZmE9ITEsaGE9bnVsbCxpYT17b25FcnJvcjpmdW5jdGlvbihhKXtkYT0hMDtlYT1hfX07ZnVuY3Rpb24gamEoYSxiLGMsZCxlLGYsZyxoLGwpe2RhPSExO2VhPW51bGw7Y2EuYXBwbHkoaWEsYXJndW1lbnRzKX1mdW5jdGlvbiBrYShhLGIsYyxkLGUsZixnLGgsbCl7amEuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGRhKXtpZihkYSl7dmFyIGs9ZWE7ZGE9ITE7ZWE9bnVsbH1lbHNlIHgoXCIxOThcIiksaz12b2lkIDA7ZmF8fChmYT0hMCxoYT1rKX19dmFyIGxhPW51bGwsbWE9e307XG5mdW5jdGlvbiBuYSgpe2lmKGxhKWZvcih2YXIgYSBpbiBtYSl7dmFyIGI9bWFbYV0sYz1sYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOngoXCI5NlwiLGEpO2lmKCFvYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDp4KFwiOTdcIixhKTtvYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO3BhLmhhc093blByb3BlcnR5KGgpP3goXCI5OVwiLGgpOnZvaWQgMDtwYVtoXT1mO3ZhciBsPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYobCl7Zm9yKGUgaW4gbClsLmhhc093blByb3BlcnR5KGUpJiZxYShsW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8ocWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtlP3ZvaWQgMDp4KFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gcWEoYSxiLGMpe3JhW2FdP3goXCIxMDBcIixhKTp2b2lkIDA7cmFbYV09YjtzYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBvYT1bXSxwYT17fSxyYT17fSxzYT17fSx0YT1udWxsLHVhPW51bGwsdmE9bnVsbDtmdW5jdGlvbiB3YShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9dmEoYyk7a2EoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1mdW5jdGlvbiB4YShhLGIpe251bGw9PWI/eChcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19XG5mdW5jdGlvbiB5YShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgemE9bnVsbDtmdW5jdGlvbiBBYShhKXtpZihhKXt2YXIgYj1hLl9kaXNwYXRjaExpc3RlbmVycyxjPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBkPTA7ZDxiLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtkKyspd2EoYSxiW2RdLGNbZF0pO2Vsc2UgYiYmd2EoYSxiLGMpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fVxudmFyIEJhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKGEpe2xhP3goXCIxMDFcIik6dm9pZCAwO2xhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO25hKCl9LGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpmdW5jdGlvbihhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTttYS5oYXNPd25Qcm9wZXJ0eShjKSYmbWFbY109PT1kfHwobWFbY10/eChcIjEwMlwiLGMpOnZvaWQgMCxtYVtjXT1kLGI9ITApfWImJm5hKCl9fTtcbmZ1bmN0aW9uIENhKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9dGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/eChcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIERhKGEpe251bGwhPT1hJiYoemE9eGEoemEsYSkpO2E9emE7emE9bnVsbDtpZihhJiYoeWEoYSxBYSksemE/eChcIjk1XCIpOnZvaWQgMCxmYSkpdGhyb3cgYT1oYSxmYT0hMSxoYT1udWxsLGE7fXZhciBFYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxGYT1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0VhLEdhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrRWE7ZnVuY3Rpb24gSGEoYSl7aWYoYVtGYV0pcmV0dXJuIGFbRmFdO2Zvcig7IWFbRmFdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbRmFdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gSWEoYSl7YT1hW0ZhXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfVxuZnVuY3Rpb24gSmEoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3goXCIzM1wiKX1mdW5jdGlvbiBLYShhKXtyZXR1cm4gYVtHYV18fG51bGx9ZnVuY3Rpb24gTGEoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBNYShhLGIsYyl7aWYoYj1DYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPXhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfVxuZnVuY3Rpb24gTmEoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1MYShiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspTWEoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylNYShjW2JdLFwiYnViYmxlZFwiLGEpfX1mdW5jdGlvbiBPYShhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1DYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFBhKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmT2EoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfVxuZnVuY3Rpb24gUWEoYSl7eWEoYSxOYSl9dmFyIFJhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cuZG9jdW1lbnR8fCF3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7ZnVuY3Rpb24gU2EoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGE9e2FuaW1hdGlvbmVuZDpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNhKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWE9e30sVmE9e307XG5SYSYmKFZhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRhLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRhLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRhLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRhLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2EoYSl7aWYoVWFbYV0pcmV0dXJuIFVhW2FdO2lmKCFUYVthXSlyZXR1cm4gYTt2YXIgYj1UYVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYSlyZXR1cm4gVWFbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYT1XYShcImFuaW1hdGlvbmVuZFwiKSxZYT1XYShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYT1XYShcImFuaW1hdGlvbnN0YXJ0XCIpLCRhPVdhKFwidHJhbnNpdGlvbmVuZFwiKSxhYj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksYmI9bnVsbCxjYj1udWxsLGRiPW51bGw7XG5mdW5jdGlvbiBlYigpe2lmKGRiKXJldHVybiBkYjt2YXIgYSxiPWNiLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGJiP2JiLnZhbHVlOmJiLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIGRiPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gZmIoKXtyZXR1cm4hMH1mdW5jdGlvbiBnYigpe3JldHVybiExfVxuZnVuY3Rpb24geShhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/ZmI6Z2I7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1nYjtyZXR1cm4gdGhpc31cbm4oeS5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1mYil9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1mYil9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1mYn0saXNQZXJzaXN0ZW50OmdiLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWdiO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7eS5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG55LmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtuKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1uKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO2hiKGMpO3JldHVybiBjfTtoYih5KTtmdW5jdGlvbiBpYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiBqYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6eChcIjI3OVwiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9XG5mdW5jdGlvbiBoYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1pYjthLnJlbGVhc2U9amJ9dmFyIGtiPXkuZXh0ZW5kKHtkYXRhOm51bGx9KSxsYj15LmV4dGVuZCh7ZGF0YTpudWxsfSksbWI9WzksMTMsMjcsMzJdLG5iPVJhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxvYj1udWxsO1JhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihvYj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIHBiPVJhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhb2IscWI9UmEmJighbmJ8fG9iJiY4PG9iJiYxMT49b2IpLHJiPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLHNiPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHRiPSExO1xuZnVuY3Rpb24gdWIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1tYi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHZiKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHdiPSExO2Z1bmN0aW9uIHhiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiB2YihiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7dGI9ITA7cmV0dXJuIHJiO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PXJiJiZ0Yj9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiB5YihhLGIpe2lmKHdiKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFuYiYmdWIoYSxiKT8oYT1lYigpLGRiPWNiPWJiPW51bGwsd2I9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHFiJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciB6Yj17ZXZlbnRUeXBlczpzYixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZvaWQgMDt2YXIgZj12b2lkIDA7aWYobmIpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6ZT1zYi5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6ZT1zYi5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmU9c2IuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1lPXZvaWQgMH1lbHNlIHdiP3ViKGEsYykmJihlPXNiLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGU9c2IuY29tcG9zaXRpb25TdGFydCk7ZT8ocWImJlwia29cIiE9PWMubG9jYWxlJiYod2J8fGUhPT1zYi5jb21wb3NpdGlvblN0YXJ0P2U9PT1zYi5jb21wb3NpdGlvbkVuZCYmd2ImJihmPWViKCkpOihiYj1kLGNiPVwidmFsdWVcImluIGJiP2JiLnZhbHVlOmJiLnRleHRDb250ZW50LHdiPVxuITApKSxlPWtiLmdldFBvb2xlZChlLGIsYyxkKSxmP2UuZGF0YT1mOihmPXZiKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxRYShlKSxmPWUpOmY9bnVsbDsoYT1wYj94YihhLGMpOnliKGEsYykpPyhiPWxiLmdldFBvb2xlZChzYi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsUWEoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sQWI9bnVsbCxCYj1udWxsLENiPW51bGw7ZnVuY3Rpb24gRGIoYSl7aWYoYT11YShhKSl7XCJmdW5jdGlvblwiIT09dHlwZW9mIEFiP3goXCIyODBcIik6dm9pZCAwO3ZhciBiPXRhKGEuc3RhdGVOb2RlKTtBYihhLnN0YXRlTm9kZSxhLnR5cGUsYil9fWZ1bmN0aW9uIEViKGEpe0JiP0NiP0NiLnB1c2goYSk6Q2I9W2FdOkJiPWF9ZnVuY3Rpb24gRmIoKXtpZihCYil7dmFyIGE9QmIsYj1DYjtDYj1CYj1udWxsO0RiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylEYihiW2FdKX19XG5mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKGEsYixjKXtyZXR1cm4gYShiLGMpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj0hMTtmdW5jdGlvbiBLYihhLGIpe2lmKEpiKXJldHVybiBhKGIpO0piPSEwO3RyeXtyZXR1cm4gR2IoYSxiKX1maW5hbGx5e2lmKEpiPSExLG51bGwhPT1CYnx8bnVsbCE9PUNiKUliKCksRmIoKX19dmFyIExiPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIE1iKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhTGJbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfVxuZnVuY3Rpb24gTmIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIE9iKGEpe2lmKCFSYSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn1mdW5jdGlvbiBQYihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gUWIoYSl7dmFyIGI9UGIoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFJiKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1RYihhKSl9ZnVuY3Rpb24gU2IoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVBiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9dmFyIFRiPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1RiLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlclwiKXx8KFRiLlJlYWN0Q3VycmVudERpc3BhdGNoZXI9e2N1cnJlbnQ6bnVsbH0pO1xudmFyIFViPS9eKC4qKVtcXFxcXFwvXS8sej1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLFZiPXo/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsV2I9ej9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LFhiPXo/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LFliPXo/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LFpiPXo/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LCRiPXo/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGFjPXo/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsYmM9ej9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLGNjPXo/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLGRjPXo/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGVjPXo/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxmYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LGdjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBoYyhhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9Z2MmJmFbZ2NdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiBpYyhhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIGJjOnJldHVyblwiQ29uY3VycmVudE1vZGVcIjtjYXNlIFhiOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIFdiOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBaYjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSBZYjpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIGRjOnJldHVyblwiU3VzcGVuc2VcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgYWM6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSAkYjpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGNjOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXG5cIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBlYzpyZXR1cm4gaWMoYS50eXBlKTtjYXNlIGZjOmlmKGE9MT09PWEuX3N0YXR1cz9hLl9yZXN1bHQ6bnVsbClyZXR1cm4gaWMoYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gamMoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAzOmNhc2UgNDpjYXNlIDY6Y2FzZSA3OmNhc2UgMTA6Y2FzZSA5OnZhciBjPVwiXCI7YnJlYWsgYTtkZWZhdWx0OnZhciBkPWEuX2RlYnVnT3duZXIsZT1hLl9kZWJ1Z1NvdXJjZSxmPWljKGEudHlwZSk7Yz1udWxsO2QmJihjPWljKGQudHlwZSkpO2Q9ZjtmPVwiXCI7ZT9mPVwiIChhdCBcIitlLmZpbGVOYW1lLnJlcGxhY2UoVWIsXCJcIikrXCI6XCIrZS5saW5lTnVtYmVyK1wiKVwiOmMmJihmPVwiIChjcmVhdGVkIGJ5IFwiK2MrXCIpXCIpO2M9XCJcXG4gICAgaW4gXCIrKGR8fFwiVW5rbm93blwiKStmfWIrPWM7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbnZhciBrYz0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbGM9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxtYz17fSxuYz17fTtcbmZ1bmN0aW9uIG9jKGEpe2lmKGxjLmNhbGwobmMsYSkpcmV0dXJuITA7aWYobGMuY2FsbChtYyxhKSlyZXR1cm4hMTtpZihrYy50ZXN0KGEpKXJldHVybiBuY1thXT0hMDttY1thXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBwYyhhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHFjKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fHBjKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gQyhhLGIsYyxkLGUpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWJ9dmFyIEQ9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwwLCExLGEsbnVsbCl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07RFtiXT1uZXcgQyhiLDEsITEsYVsxXSxudWxsKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwyLCExLGEsbnVsbCl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMywhMCxhLG51bGwpfSk7XG5bXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSw0LCExLGEsbnVsbCl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDYsITEsYSxudWxsKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7dmFyIHJjPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gc2MoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmMsXG5zYyk7RFtiXT1uZXcgQyhiLDEsITEsYSxudWxsKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOmhyZWYgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmMsc2MpO0RbYl09bmV3IEMoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmMsc2MpO0RbYl09bmV3IEMoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIil9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbmZ1bmN0aW9uIHRjKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KHFjKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9vYyhiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24gdWMoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIHZjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIHdjKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPXVjKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24geGMoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZ0YyhhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24geWMoYSxiKXt4YyhhLGIpO3ZhciBjPXVjKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP3pjKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJnpjKGEsYi50eXBlLHVjKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gQWMoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gemMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBCYz17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBDYyhhLGIsYyl7YT15LmdldFBvb2xlZChCYy5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0ViKGMpO1FhKGEpO3JldHVybiBhfXZhciBEYz1udWxsLEVjPW51bGw7ZnVuY3Rpb24gRmMoYSl7RGEoYSl9XG5mdW5jdGlvbiBHYyhhKXt2YXIgYj1KYShhKTtpZihTYihiKSlyZXR1cm4gYX1mdW5jdGlvbiBIYyhhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBJYz0hMTtSYSYmKEljPU9iKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIEpjKCl7RGMmJihEYy5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixLYyksRWM9RGM9bnVsbCl9ZnVuY3Rpb24gS2MoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkdjKEVjKSYmKGE9Q2MoRWMsYSxOYihhKSksS2IoRmMsYSkpfWZ1bmN0aW9uIExjKGEsYixjKXtcImZvY3VzXCI9PT1hPyhKYygpLERjPWIsRWM9YyxEYy5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixLYykpOlwiYmx1clwiPT09YSYmSmMoKX1mdW5jdGlvbiBNYyhhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBHYyhFYyl9XG5mdW5jdGlvbiBOYyhhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIEdjKGIpfWZ1bmN0aW9uIE9jKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIEdjKGIpfVxudmFyIFBjPXtldmVudFR5cGVzOkJjLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6SWMsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP0phKGIpOndpbmRvdyxmPXZvaWQgMCxnPXZvaWQgMCxoPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09aHx8XCJpbnB1dFwiPT09aCYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1IYzpNYihlKT9JYz9mPU9jOihmPU1jLGc9TGMpOihoPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1oLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihmPU5jKTtpZihmJiYoZj1mKGEsYikpKXJldHVybiBDYyhmLGMsZCk7ZyYmZyhhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJnpjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LFFjPXkuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxSYz17QWx0OlwiYWx0S2V5XCIsXG5Db250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBTYyhhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPVJjW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gVGMoKXtyZXR1cm4gU2N9XG52YXIgVWM9MCxWYz0wLFdjPSExLFhjPSExLFljPVFjLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpUYyxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1VYztVYz1hLnNjcmVlblg7cmV0dXJuIFdjP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooV2M9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1WYztWYz1hLnNjcmVlblk7cmV0dXJuIFhjP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooWGM9ITAsMCl9fSksWmM9WWMuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLCRjPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxhZD17ZXZlbnRUeXBlczokYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGY9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGUmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZiYmIWUpcmV0dXJuIG51bGw7ZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztmPyhmPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9IYShiKTpudWxsKTpmPW51bGw7aWYoZj09PWIpcmV0dXJuIG51bGw7dmFyIGc9dm9pZCAwLGg9dm9pZCAwLGw9dm9pZCAwLGs9dm9pZCAwO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1hKWc9WWMsaD0kYy5tb3VzZUxlYXZlLGw9JGMubW91c2VFbnRlcixrPVwibW91c2VcIjtcbmVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWc9WmMsaD0kYy5wb2ludGVyTGVhdmUsbD0kYy5wb2ludGVyRW50ZXIsaz1cInBvaW50ZXJcIjt2YXIgbT1udWxsPT1mP2U6SmEoZik7ZT1udWxsPT1iP2U6SmEoYik7YT1nLmdldFBvb2xlZChoLGYsYyxkKTthLnR5cGU9aytcImxlYXZlXCI7YS50YXJnZXQ9bTthLnJlbGF0ZWRUYXJnZXQ9ZTtjPWcuZ2V0UG9vbGVkKGwsYixjLGQpO2MudHlwZT1rK1wiZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1tO2Q9YjtpZihmJiZkKWE6e2I9ZjtlPWQ7az0wO2ZvcihnPWI7ZztnPUxhKGcpKWsrKztnPTA7Zm9yKGw9ZTtsO2w9TGEobCkpZysrO2Zvcig7MDxrLWc7KWI9TGEoYiksay0tO2Zvcig7MDxnLWs7KWU9TGEoZSksZy0tO2Zvcig7ay0tOyl7aWYoYj09PWV8fGI9PT1lLmFsdGVybmF0ZSlicmVhayBhO2I9TGEoYik7ZT1MYShlKX1iPW51bGx9ZWxzZSBiPW51bGw7ZT1iO2ZvcihiPVtdO2YmJmYhPT1lOyl7az1cbmYuYWx0ZXJuYXRlO2lmKG51bGwhPT1rJiZrPT09ZSlicmVhaztiLnB1c2goZik7Zj1MYShmKX1mb3IoZj1bXTtkJiZkIT09ZTspe2s9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWsmJms9PT1lKWJyZWFrO2YucHVzaChkKTtkPUxhKGQpfWZvcihkPTA7ZDxiLmxlbmd0aDtkKyspT2EoYltkXSxcImJ1YmJsZWRcIixhKTtmb3IoZD1mLmxlbmd0aDswPGQtLTspT2EoZltkXSxcImNhcHR1cmVkXCIsYyk7cmV0dXJuW2EsY119fTtmdW5jdGlvbiBiZChhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIGNkPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBkZChhLGIpe2lmKGJkKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighY2QuY2FsbChiLGNbZF0pfHwhYmQoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBlZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXtpZigwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxO2Zvcig7Yi5yZXR1cm47KWlmKGI9Yi5yZXR1cm4sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiBmZChhKXsyIT09ZWQoYSk/eChcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBnZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj1lZChhKSwzPT09Yj94KFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuLGY9ZT9lLmFsdGVybmF0ZTpudWxsO2lmKCFlfHwhZilicmVhaztpZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKHZhciBnPWUuY2hpbGQ7Zzspe2lmKGc9PT1jKXJldHVybiBmZChlKSxhO2lmKGc9PT1kKXJldHVybiBmZChlKSxiO2c9Zy5zaWJsaW5nfXgoXCIxODhcIil9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zz0hMTtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9Zz9cbnZvaWQgMDp4KFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/eChcIjE5MFwiKTp2b2lkIDB9MyE9PWMudGFnP3goXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gaGQoYSl7YT1nZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbnZhciBpZD15LmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksamQ9eS5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxrZD1RYy5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIGxkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIG1kPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxuZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sb2Q9UWMuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPW1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPWxkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9uZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6VGMsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/bGQoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/bGQoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxwZD1ZYy5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSkscWQ9UWMuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6VGN9KSxyZD15LmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxzZD1ZYy5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHRkPVtbXCJhYm9ydFwiLFwiYWJvcnRcIl0sW1hhLFwiYW5pbWF0aW9uRW5kXCJdLFtZYSxcImFuaW1hdGlvbkl0ZXJhdGlvblwiXSxbWmEsXCJhbmltYXRpb25TdGFydFwiXSxbXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCJdLFtcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiXSxbXCJkcmFnXCIsXCJkcmFnXCJdLFtcImRyYWdlbnRlclwiLFwiZHJhZ0VudGVyXCJdLFtcImRyYWdleGl0XCIsXCJkcmFnRXhpdFwiXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiXSxbXCJkcmFnb3ZlclwiLFwiZHJhZ092ZXJcIl0sW1wiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCJdLFtcImVtcHRpZWRcIixcImVtcHRpZWRcIl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIl0sXG5bXCJlbmRlZFwiLFwiZW5kZWRcIl0sW1wiZXJyb3JcIixcImVycm9yXCJdLFtcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJsb2FkXCIsXCJsb2FkXCJdLFtcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIl0sW1wibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCJdLFtcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCJdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCJdLFtcIm1vdXNlb3V0XCIsXCJtb3VzZU91dFwiXSxbXCJtb3VzZW92ZXJcIixcIm1vdXNlT3ZlclwiXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCJdLFtcInBvaW50ZXJtb3ZlXCIsXCJwb2ludGVyTW92ZVwiXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCJdLFtcInBvaW50ZXJvdmVyXCIsXCJwb2ludGVyT3ZlclwiXSxbXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIl0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIl0sW1wic2Vla2luZ1wiLFwic2Vla2luZ1wiXSxbXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCJdLFxuW1wic3VzcGVuZFwiLFwic3VzcGVuZFwiXSxbXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCJdLFtcInRvZ2dsZVwiLFwidG9nZ2xlXCJdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCJdLFskYSxcInRyYW5zaXRpb25FbmRcIl0sW1wid2FpdGluZ1wiLFwid2FpdGluZ1wiXSxbXCJ3aGVlbFwiLFwid2hlZWxcIl1dLHVkPXt9LHZkPXt9O2Z1bmN0aW9uIHdkKGEsYil7dmFyIGM9YVswXTthPWFbMV07dmFyIGQ9XCJvblwiKyhhWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSk7Yj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZCxjYXB0dXJlZDpkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2NdLGlzSW50ZXJhY3RpdmU6Yn07dWRbYV09Yjt2ZFtjXT1ifVxuW1tcImJsdXJcIixcImJsdXJcIl0sW1wiY2FuY2VsXCIsXCJjYW5jZWxcIl0sW1wiY2xpY2tcIixcImNsaWNrXCJdLFtcImNsb3NlXCIsXCJjbG9zZVwiXSxbXCJjb250ZXh0bWVudVwiLFwiY29udGV4dE1lbnVcIl0sW1wiY29weVwiLFwiY29weVwiXSxbXCJjdXRcIixcImN1dFwiXSxbXCJhdXhjbGlja1wiLFwiYXV4Q2xpY2tcIl0sW1wiZGJsY2xpY2tcIixcImRvdWJsZUNsaWNrXCJdLFtcImRyYWdlbmRcIixcImRyYWdFbmRcIl0sW1wiZHJhZ3N0YXJ0XCIsXCJkcmFnU3RhcnRcIl0sW1wiZHJvcFwiLFwiZHJvcFwiXSxbXCJmb2N1c1wiLFwiZm9jdXNcIl0sW1wiaW5wdXRcIixcImlucHV0XCJdLFtcImludmFsaWRcIixcImludmFsaWRcIl0sW1wia2V5ZG93blwiLFwia2V5RG93blwiXSxbXCJrZXlwcmVzc1wiLFwia2V5UHJlc3NcIl0sW1wia2V5dXBcIixcImtleVVwXCJdLFtcIm1vdXNlZG93blwiLFwibW91c2VEb3duXCJdLFtcIm1vdXNldXBcIixcIm1vdXNlVXBcIl0sW1wicGFzdGVcIixcInBhc3RlXCJdLFtcInBhdXNlXCIsXCJwYXVzZVwiXSxbXCJwbGF5XCIsXCJwbGF5XCJdLFtcInBvaW50ZXJjYW5jZWxcIixcInBvaW50ZXJDYW5jZWxcIl0sXG5bXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIl0sW1wicG9pbnRlcnVwXCIsXCJwb2ludGVyVXBcIl0sW1wicmF0ZWNoYW5nZVwiLFwicmF0ZUNoYW5nZVwiXSxbXCJyZXNldFwiLFwicmVzZXRcIl0sW1wic2Vla2VkXCIsXCJzZWVrZWRcIl0sW1wic3VibWl0XCIsXCJzdWJtaXRcIl0sW1widG91Y2hjYW5jZWxcIixcInRvdWNoQ2FuY2VsXCJdLFtcInRvdWNoZW5kXCIsXCJ0b3VjaEVuZFwiXSxbXCJ0b3VjaHN0YXJ0XCIsXCJ0b3VjaFN0YXJ0XCJdLFtcInZvbHVtZWNoYW5nZVwiLFwidm9sdW1lQ2hhbmdlXCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3dkKGEsITApfSk7dGQuZm9yRWFjaChmdW5jdGlvbihhKXt3ZChhLCExKX0pO1xudmFyIHhkPXtldmVudFR5cGVzOnVkLGlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZTpmdW5jdGlvbihhKXthPXZkW2FdO3JldHVybiB2b2lkIDAhPT1hJiYhMD09PWEuaXNJbnRlcmFjdGl2ZX0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12ZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PWxkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT1vZDticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9a2Q7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1ZYzticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPVxucGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT1xZDticmVhaztjYXNlIFhhOmNhc2UgWWE6Y2FzZSBaYTphPWlkO2JyZWFrO2Nhc2UgJGE6YT1yZDticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1RYzticmVhaztjYXNlIFwid2hlZWxcIjphPXNkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9amQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1aYzticmVhaztkZWZhdWx0OmE9eX1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1FhKGIpO3JldHVybiBifX0seWQ9eGQuaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlLFxuemQ9W107ZnVuY3Rpb24gQWQoYSl7dmFyIGI9YS50YXJnZXRJbnN0LGM9Yjtkb3tpZighYyl7YS5hbmNlc3RvcnMucHVzaChjKTticmVha312YXIgZDtmb3IoZD1jO2QucmV0dXJuOylkPWQucmV0dXJuO2Q9MyE9PWQudGFnP251bGw6ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZighZClicmVhazthLmFuY2VzdG9ycy5wdXNoKGMpO2M9SGEoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9TmIoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTtmb3IodmFyIGY9YS5uYXRpdmVFdmVudCxnPW51bGwsaD0wO2g8b2EubGVuZ3RoO2grKyl7dmFyIGw9b2FbaF07bCYmKGw9bC5leHRyYWN0RXZlbnRzKGQsYixmLGUpKSYmKGc9eGEoZyxsKSl9RGEoZyl9fXZhciBCZD0hMDtcbmZ1bmN0aW9uIEUoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oeWQoYSk/Q2Q6RGQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCExKX1mdW5jdGlvbiBFZChhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPSh5ZChhKT9DZDpEZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITApfWZ1bmN0aW9uIENkKGEsYil7SGIoRGQsYSxiKX1cbmZ1bmN0aW9uIERkKGEsYil7aWYoQmQpe3ZhciBjPU5iKGIpO2M9SGEoYyk7bnVsbD09PWN8fFwibnVtYmVyXCIhPT10eXBlb2YgYy50YWd8fDI9PT1lZChjKXx8KGM9bnVsbCk7aWYoemQubGVuZ3RoKXt2YXIgZD16ZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YjtkLnRhcmdldEluc3Q9YzthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119O3RyeXtLYihBZCxhKX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPnpkLmxlbmd0aCYmemQucHVzaChhKX19fXZhciBGZD17fSxHZD0wLEhkPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtcbmZ1bmN0aW9uIElkKGEpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLEhkKXx8KGFbSGRdPUdkKyssRmRbYVtIZF1dPXt9KTtyZXR1cm4gRmRbYVtIZF1dfWZ1bmN0aW9uIEpkKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiBLZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBMZChhLGIpe3ZhciBjPUtkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUtkKGMpfX1mdW5jdGlvbiBNZChhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP01kKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE5kKCl7Zm9yKHZhciBhPXdpbmRvdyxiPUpkKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPUpkKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE9kKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBQZCgpe3ZhciBhPU5kKCk7aWYoT2QoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGI9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2I9KGI9YS5vd25lckRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBjPWIuZ2V0U2VsZWN0aW9uJiZiLmdldFNlbGVjdGlvbigpO2lmKGMmJjAhPT1jLnJhbmdlQ291bnQpe2I9Yy5hbmNob3JOb2RlO3ZhciBkPWMuYW5jaG9yT2Zmc2V0LGU9Yy5mb2N1c05vZGU7Yz1jLmZvY3VzT2Zmc2V0O3RyeXtiLm5vZGVUeXBlLGUubm9kZVR5cGV9Y2F0Y2goQSl7Yj1udWxsO2JyZWFrIGF9dmFyIGY9MCxnPS0xLGg9LTEsbD0wLGs9MCxtPWEscD1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHQ7Oyl7bSE9PWJ8fDAhPT1kJiYzIT09bS5ub2RlVHlwZXx8KGc9ZitkKTttIT09ZXx8MCE9PWMmJjMhPT1tLm5vZGVUeXBlfHwoaD1mK2MpOzM9PT1tLm5vZGVUeXBlJiYoZis9bS5ub2RlVmFsdWUubGVuZ3RoKTtcbmlmKG51bGw9PT0odD1tLmZpcnN0Q2hpbGQpKWJyZWFrO3A9bTttPXR9Zm9yKDs7KXtpZihtPT09YSlicmVhayBiO3A9PT1iJiYrK2w9PT1kJiYoZz1mKTtwPT09ZSYmKytrPT09YyYmKGg9Zik7aWYobnVsbCE9PSh0PW0ubmV4dFNpYmxpbmcpKWJyZWFrO209cDtwPW0ucGFyZW50Tm9kZX1tPXR9Yj0tMT09PWd8fC0xPT09aD9udWxsOntzdGFydDpnLGVuZDpofX1lbHNlIGI9bnVsbH1iPWJ8fHtzdGFydDowLGVuZDowfX1lbHNlIGI9bnVsbDtyZXR1cm57Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpifX1cbmZ1bmN0aW9uIFFkKGEpe3ZhciBiPU5kKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmYyYmYy5vd25lckRvY3VtZW50JiZNZChjLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihudWxsIT09ZCYmT2QoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZihhPShiPWMub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3csYS5nZXRTZWxlY3Rpb24pe2E9YS5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jLnRleHRDb250ZW50Lmxlbmd0aCxmPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9mOk1hdGgubWluKGQuZW5kLGUpOyFhLmV4dGVuZCYmZj5kJiYoZT1kLGQ9ZixmPWUpO2U9TGQoYyxmKTt2YXIgZz1MZChjLFxuZCk7ZSYmZyYmKDEhPT1hLnJhbmdlQ291bnR8fGEuYW5jaG9yTm9kZSE9PWUubm9kZXx8YS5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8YS5mb2N1c05vZGUhPT1nLm5vZGV8fGEuZm9jdXNPZmZzZXQhPT1nLm9mZnNldCkmJihiPWIuY3JlYXRlUmFuZ2UoKSxiLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCksYS5yZW1vdmVBbGxSYW5nZXMoKSxmPmQ/KGEuYWRkUmFuZ2UoYiksYS5leHRlbmQoZy5ub2RlLGcub2Zmc2V0KSk6KGIuc2V0RW5kKGcubm9kZSxnLm9mZnNldCksYS5hZGRSYW5nZShiKSkpfWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmZvY3VzJiZjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LGEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9fVxudmFyIFJkPVJhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsU2Q9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LFRkPW51bGwsVWQ9bnVsbCxWZD1udWxsLFdkPSExO1xuZnVuY3Rpb24gWGQoYSxiKXt2YXIgYz1iLndpbmRvdz09PWI/Yi5kb2N1bWVudDo5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudDtpZihXZHx8bnVsbD09VGR8fFRkIT09SmQoYykpcmV0dXJuIG51bGw7Yz1UZDtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZPZChjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06KGM9KGMub3duZXJEb2N1bWVudCYmYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pO3JldHVybiBWZCYmZGQoVmQsYyk/bnVsbDooVmQ9YyxhPXkuZ2V0UG9vbGVkKFNkLnNlbGVjdCxVZCxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PVRkLFFhKGEpLGEpfVxudmFyIFlkPXtldmVudFR5cGVzOlNkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPUlkKGUpO2Y9c2Eub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspe3ZhciBoPWZbZ107aWYoIWUuaGFzT3duUHJvcGVydHkoaCl8fCFlW2hdKXtlPSExO2JyZWFrIGF9fWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9KYShiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKE1iKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKVRkPWUsVWQ9YixWZD1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6VmQ9VWQ9VGQ9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6V2Q9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiBXZD0hMSxYZChjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihSZClicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIFhkKGMsZCl9cmV0dXJuIG51bGx9fTtCYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3RhPUthO3VhPUlhO3ZhPUphO0JhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46eGQsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOmFkLENoYW5nZUV2ZW50UGx1Z2luOlBjLFNlbGVjdEV2ZW50UGx1Z2luOllkLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46emJ9KTtmdW5jdGlvbiBaZChhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1cbmZ1bmN0aW9uICRkKGEsYil7YT1uKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9WmQoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfWZ1bmN0aW9uIGFlKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIit1YyhjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gYmUoYSxiKXtudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3goXCI5MVwiKTp2b2lkIDA7cmV0dXJuIG4oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gY2UoYSxiKXt2YXIgYz1iLnZhbHVlO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz94KFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6eChcIjkzXCIpLGI9YlswXSksYz1iKSxudWxsPT1jJiYoYz1cIlwiKSk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6dWMoYyl9fVxuZnVuY3Rpb24gZGUoYSxiKXt2YXIgYz11YyhiLnZhbHVlKSxkPXVjKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gZWUoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIGZlPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIGdlKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gaGUoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2dlKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIGllPXZvaWQgMCxqZT1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1mZS5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtpZT1pZXx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtpZS5pbm5lckhUTUw9XCI8c3ZnPlwiK2IrXCI8L3N2Zz5cIjtmb3IoYj1pZS5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBrZShhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIGxlPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LG1lPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhsZSkuZm9yRWFjaChmdW5jdGlvbihhKXttZS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO2xlW2JdPWxlW2FdfSl9KTtmdW5jdGlvbiBuZShhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8bGUuaGFzT3duUHJvcGVydHkoYSkmJmxlW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIG9lKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPW5lKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHBlPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBxZShhLGIpe2ImJihwZVthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/eChcIjEzN1wiLGEsXCJcIik6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj94KFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOngoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP3goXCI2MlwiLFwiXCIpOnZvaWQgMCl9XG5mdW5jdGlvbiByZShhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19XG5mdW5jdGlvbiBzZShhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1JZChhKTtiPXNhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2lmKCFjLmhhc093blByb3BlcnR5KGUpfHwhY1tlXSl7c3dpdGNoKGUpe2Nhc2UgXCJzY3JvbGxcIjpFZChcInNjcm9sbFwiLGEpO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6RWQoXCJmb2N1c1wiLGEpO0VkKFwiYmx1clwiLGEpO2MuYmx1cj0hMDtjLmZvY3VzPSEwO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpPYihlKSYmRWQoZSxhKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09YWIuaW5kZXhPZihlKSYmRShlLGEpfWNbZV09ITB9fX1mdW5jdGlvbiB0ZSgpe312YXIgdWU9bnVsbCx2ZT1udWxsO1xuZnVuY3Rpb24gd2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfWZ1bmN0aW9uIHhlKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1cbnZhciB5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCx6ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsQWU9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLEJlPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s7XG5mdW5jdGlvbiBDZShhLGIsYyxkLGUpe2FbR2FdPWU7XCJpbnB1dFwiPT09YyYmXCJyYWRpb1wiPT09ZS50eXBlJiZudWxsIT1lLm5hbWUmJnhjKGEsZSk7cmUoYyxkKTtkPXJlKGMsZSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKz0yKXt2YXIgZz1iW2ZdLGg9YltmKzFdO1wic3R5bGVcIj09PWc/b2UoYSxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP2plKGEsaCk6XCJjaGlsZHJlblwiPT09Zz9rZShhLGgpOnRjKGEsZyxoLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjp5YyhhLGUpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmRlKGEsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9YS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWUubXVsdGlwbGUsYz1lLnZhbHVlLG51bGwhPWM/YWUoYSwhIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPWUuZGVmYXVsdFZhbHVlP2FlKGEsISFlLm11bHRpcGxlLGUuZGVmYXVsdFZhbHVlLFxuITApOmFlKGEsISFlLm11bHRpcGxlLGUubXVsdGlwbGU/W106XCJcIiwhMSkpfX1mdW5jdGlvbiBEZShhKXtmb3IoYT1hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIEVlKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1uZXcgU2V0O3ZhciBGZT1bXSxHZT0tMTtmdW5jdGlvbiBGKGEpezA+R2V8fChhLmN1cnJlbnQ9RmVbR2VdLEZlW0dlXT1udWxsLEdlLS0pfWZ1bmN0aW9uIEcoYSxiKXtHZSsrO0ZlW0dlXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIEhlPXt9LEg9e2N1cnJlbnQ6SGV9LEk9e2N1cnJlbnQ6ITF9LEllPUhlO1xuZnVuY3Rpb24gSmUoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBIZTt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBKKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gS2UoYSl7RihJLGEpO0YoSCxhKX1mdW5jdGlvbiBMZShhKXtGKEksYSk7RihILGEpfVxuZnVuY3Rpb24gTWUoYSxiLGMpe0guY3VycmVudCE9PUhlP3goXCIxNjhcIik6dm9pZCAwO0coSCxiLGEpO0coSSxjLGEpfWZ1bmN0aW9uIE5lKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZCllIGluIGE/dm9pZCAwOngoXCIxMDhcIixpYyhiKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIG4oe30sYyxkKX1mdW5jdGlvbiBPZShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEhlO0llPUguY3VycmVudDtHKEgsYixhKTtHKEksSS5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gUGUoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2Q/dm9pZCAwOngoXCIxNjlcIik7Yz8oYj1OZShhLGIsSWUpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YixGKEksYSksRihILGEpLEcoSCxiLGEpKTpGKEksYSk7RyhJLGMsYSl9dmFyIFFlPW51bGwsUmU9bnVsbDtmdW5jdGlvbiBTZShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dHJ5e3JldHVybiBhKGIpfWNhdGNoKGMpe319fVxuZnVuY3Rpb24gVGUoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7UWU9U2UoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO1JlPVNlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBVZShhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuY29udGV4dERlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBLKGEsYixjLGQpe3JldHVybiBuZXcgVWUoYSxiLGMsZCl9XG5mdW5jdGlvbiBWZShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIFdlKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBWZShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Y2MpcmV0dXJuIDExO2lmKGE9PT1lYylyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBYZShhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPUsoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy5lZmZlY3RUYWc9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7Yy5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2MuY29udGV4dERlcGVuZGVuY2llcz1hLmNvbnRleHREZXBlbmRlbmNpZXM7Yy5zaWJsaW5nPWEuc2libGluZztcbmMuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFllKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlWZShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBYYjpyZXR1cm4gWmUoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBiYzpyZXR1cm4gJGUoYyxlfDMsZixiKTtjYXNlIFliOnJldHVybiAkZShjLGV8MixmLGIpO2Nhc2UgWmI6cmV0dXJuIGE9SygxMixjLGIsZXw0KSxhLmVsZW1lbnRUeXBlPVpiLGEudHlwZT1aYixhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGRjOnJldHVybiBhPUsoMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9ZGMsYS50eXBlPWRjLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSAkYjpnPTEwO2JyZWFrIGE7Y2FzZSBhYzpnPTk7YnJlYWsgYTtjYXNlIGNjOmc9MTE7YnJlYWsgYTtjYXNlIGVjOmc9XG4xNDticmVhayBhO2Nhc2UgZmM6Zz0xNjtkPW51bGw7YnJlYWsgYX14KFwiMTMwXCIsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpfWI9SyhnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIFplKGEsYixjLGQpe2E9Syg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gJGUoYSxiLGMsZCl7YT1LKDgsYSxkLGIpO2I9MD09PShiJjEpP1liOmJjO2EuZWxlbWVudFR5cGU9YjthLnR5cGU9YjthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gYWYoYSxiLGMpe2E9Syg2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBiZihhLGIsYyl7Yj1LKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifWZ1bmN0aW9uIGNmKGEsYil7YS5kaWRFcnJvcj0hMTt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7MD09PWM/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWU9YjpjPGI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWI6YS5sYXRlc3RQZW5kaW5nVGltZT5iJiYoYS5sYXRlc3RQZW5kaW5nVGltZT1iKTtkZihiLGEpfVxuZnVuY3Rpb24gZWYoYSxiKXthLmRpZEVycm9yPSExO2lmKDA9PT1iKWEuZWFybGllc3RQZW5kaW5nVGltZT0wLGEubGF0ZXN0UGVuZGluZ1RpbWU9MCxhLmVhcmxpZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0UGluZ2VkVGltZT0wO2Vsc2V7YjxhLmxhdGVzdFBpbmdlZFRpbWUmJihhLmxhdGVzdFBpbmdlZFRpbWU9MCk7dmFyIGM9YS5sYXRlc3RQZW5kaW5nVGltZTswIT09YyYmKGM+Yj9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZT0wOmEuZWFybGllc3RQZW5kaW5nVGltZT5iJiYoYS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWUpKTtjPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lOzA9PT1jP2NmKGEsYik6YjxhLmxhdGVzdFN1c3BlbmRlZFRpbWU/KGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RQaW5nZWRUaW1lPTAsY2YoYSxiKSk6XG5iPmMmJmNmKGEsYil9ZGYoMCxhKX1mdW5jdGlvbiBmZihhLGIpe2EuZGlkRXJyb3I9ITE7YS5sYXRlc3RQaW5nZWRUaW1lPj1iJiYoYS5sYXRlc3RQaW5nZWRUaW1lPTApO3ZhciBjPWEuZWFybGllc3RQZW5kaW5nVGltZSxkPWEubGF0ZXN0UGVuZGluZ1RpbWU7Yz09PWI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWQ9PT1iP2EubGF0ZXN0UGVuZGluZ1RpbWU9MDpkOmQ9PT1iJiYoYS5sYXRlc3RQZW5kaW5nVGltZT1jKTtjPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lO2Q9YS5sYXRlc3RTdXNwZW5kZWRUaW1lOzA9PT1jP2EuZWFybGllc3RTdXNwZW5kZWRUaW1lPWEubGF0ZXN0U3VzcGVuZGVkVGltZT1iOmM8Yj9hLmVhcmxpZXN0U3VzcGVuZGVkVGltZT1iOmQ+YiYmKGEubGF0ZXN0U3VzcGVuZGVkVGltZT1iKTtkZihiLGEpfVxuZnVuY3Rpb24gZ2YoYSxiKXt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7YT1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTtjPmImJihiPWMpO2E+YiYmKGI9YSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZGYoYSxiKXt2YXIgYz1iLmVhcmxpZXN0U3VzcGVuZGVkVGltZSxkPWIubGF0ZXN0U3VzcGVuZGVkVGltZSxlPWIuZWFybGllc3RQZW5kaW5nVGltZSxmPWIubGF0ZXN0UGluZ2VkVGltZTtlPTAhPT1lP2U6ZjswPT09ZSYmKDA9PT1hfHxkPGEpJiYoZT1kKTthPWU7MCE9PWEmJmM+YSYmKGE9Yyk7Yi5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj1lO2IuZXhwaXJhdGlvblRpbWU9YX1mdW5jdGlvbiBMKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bih7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifVxuZnVuY3Rpb24gaGYoYSl7dmFyIGI9YS5fcmVzdWx0O3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYjtjYXNlIDI6dGhyb3cgYjtjYXNlIDA6dGhyb3cgYjtkZWZhdWx0OmEuX3N0YXR1cz0wO2I9YS5fY3RvcjtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pO3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYS5fcmVzdWx0O2Nhc2UgMjp0aHJvdyBhLl9yZXN1bHQ7fWEuX3Jlc3VsdD1iO3Rocm93IGI7fX12YXIgamY9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBrZihhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jO2Q9YS51cGRhdGVRdWV1ZTtudWxsIT09ZCYmMD09PWEuZXhwaXJhdGlvblRpbWUmJihkLmJhc2VTdGF0ZT1jKX1cbnZhciB0Zj17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PWVkKGEpOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPWxmKCk7ZD1tZihkLGEpO3ZhciBlPW5mKGQpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtvZigpO3BmKGEsZSk7cWYoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9bGYoKTtkPW1mKGQsYSk7dmFyIGU9bmYoZCk7ZS50YWc9cmY7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO29mKCk7cGYoYSxlKTtxZihhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1sZigpO2M9bWYoYyxhKTt2YXIgZD1uZihjKTtkLnRhZz1cbnNmO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTtvZigpO3BmKGEsZCk7cWYoYSxjKX19O2Z1bmN0aW9uIHVmKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWRkKGMsZCl8fCFkZChlLGYpOiEwfVxuZnVuY3Rpb24gdmYoYSxiLGMpe3ZhciBkPSExLGU9SGU7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9TShmKTooZT1KKGIpP0llOkguY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0plKGEsZSk6SGUpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj10ZjthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiB3ZihhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmdGYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiB4ZihhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPWpmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9TShmKTooZj1KKGIpP0llOkguY3VycmVudCxlLmNvbnRleHQ9SmUoYSxmKSk7Zj1hLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoeWYoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKGtmKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJnRmLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGY9YS51cGRhdGVRdWV1ZSxudWxsIT09ZiYmKHlmKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgemY9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIEFmKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDEhPT1jLnRhZz94KFwiMzA5XCIpOnZvaWQgMCxkPWMuc3RhdGVOb2RlKTtkP3ZvaWQgMDp4KFwiMTQ3XCIsYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1qZiYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifVwic3RyaW5nXCIhPT10eXBlb2YgYT94KFwiMjg0XCIpOnZvaWQgMDtjLl9vd25lcj92b2lkIDA6eChcIjI5MFwiLGEpfXJldHVybiBhfVxuZnVuY3Rpb24gQmYoYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJngoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIENmKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9WGUoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1hZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9QWYoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVllKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPUFmKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1cbmMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9YmYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9WmUoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHAoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPWFmKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFZiOnJldHVybiBjPVllKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPUFmKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSBXYjpyZXR1cm4gYj1iZihiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoemYoYil8fFxuaGMoYikpcmV0dXJuIGI9WmUoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7QmYoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB0KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIFZiOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09WGI/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmwoYSxiLGMsZCk6bnVsbDtjYXNlIFdiOnJldHVybiBjLmtleT09PWU/ayhhLGIsYyxkKTpudWxsfWlmKHpmKGMpfHxoYyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7QmYoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBBKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgVmI6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PVhiP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6bChiLGEsZCxlKTtjYXNlIFdiOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxrKGIsYSxkLGUpfWlmKHpmKGQpfHxoYyhkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7QmYoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB2KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCxxPWcsdT1nPTAsQj1udWxsO251bGwhPT1xJiZ1PGgubGVuZ3RoO3UrKyl7cS5pbmRleD51PyhCPXEscT1udWxsKTpCPXEuc2libGluZzt2YXIgdz10KGUscSxoW3VdLGspO2lmKG51bGw9PT13KXtudWxsPT09cSYmKHE9Qik7YnJlYWt9YSYmXG5xJiZudWxsPT09dy5hbHRlcm5hdGUmJmIoZSxxKTtnPWYodyxnLHUpO251bGw9PT1tP2w9dzptLnNpYmxpbmc9dzttPXc7cT1CfWlmKHU9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHEpLGw7aWYobnVsbD09PXEpe2Zvcig7dTxoLmxlbmd0aDt1KyspaWYocT1wKGUsaFt1XSxrKSlnPWYocSxnLHUpLG51bGw9PT1tP2w9cTptLnNpYmxpbmc9cSxtPXE7cmV0dXJuIGx9Zm9yKHE9ZChlLHEpO3U8aC5sZW5ndGg7dSsrKWlmKEI9QShxLGUsdSxoW3VdLGspKWEmJm51bGwhPT1CLmFsdGVybmF0ZSYmcS5kZWxldGUobnVsbD09PUIua2V5P3U6Qi5rZXkpLGc9ZihCLGcsdSksbnVsbD09PW0/bD1COm0uc2libGluZz1CLG09QjthJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIFIoZSxnLGgsayl7dmFyIGw9aGMoaCk7XCJmdW5jdGlvblwiIT09dHlwZW9mIGw/eChcIjE1MFwiKTp2b2lkIDA7aD1sLmNhbGwoaCk7bnVsbD09aD94KFwiMTUxXCIpOnZvaWQgMDtcbmZvcih2YXIgbT1sPW51bGwscT1nLHU9Zz0wLEI9bnVsbCx3PWgubmV4dCgpO251bGwhPT1xJiYhdy5kb25lO3UrKyx3PWgubmV4dCgpKXtxLmluZGV4PnU/KEI9cSxxPW51bGwpOkI9cS5zaWJsaW5nO3ZhciB2PXQoZSxxLHcudmFsdWUsayk7aWYobnVsbD09PXYpe3F8fChxPUIpO2JyZWFrfWEmJnEmJm51bGw9PT12LmFsdGVybmF0ZSYmYihlLHEpO2c9Zih2LGcsdSk7bnVsbD09PW0/bD12Om0uc2libGluZz12O209djtxPUJ9aWYody5kb25lKXJldHVybiBjKGUscSksbDtpZihudWxsPT09cSl7Zm9yKDshdy5kb25lO3UrKyx3PWgubmV4dCgpKXc9cChlLHcudmFsdWUsayksbnVsbCE9PXcmJihnPWYodyxnLHUpLG51bGw9PT1tP2w9dzptLnNpYmxpbmc9dyxtPXcpO3JldHVybiBsfWZvcihxPWQoZSxxKTshdy5kb25lO3UrKyx3PWgubmV4dCgpKXc9QShxLGUsdSx3LnZhbHVlLGspLG51bGwhPT13JiYoYSYmbnVsbCE9PXcuYWx0ZXJuYXRlJiZxLmRlbGV0ZShudWxsPT09dy5rZXk/dTpcbncua2V5KSxnPWYodyxnLHUpLG51bGw9PT1tP2w9dzptLnNpYmxpbmc9dyxtPXcpO2EmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PVhiJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFZiOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bClpZig3PT09ay50YWc/Zi50eXBlPT09WGI6ay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi50eXBlPT09WGI/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGgpO2QucmVmPUFmKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9XG5rLnNpYmxpbmd9Zi50eXBlPT09WGI/KGQ9WmUoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVllKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPUFmKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSBXYjphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10saCk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPWJmKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVxuXCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1hZihmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZih6ZihmKSlyZXR1cm4gdihhLGQsZixoKTtpZihoYyhmKSlyZXR1cm4gUihhLGQsZixoKTtsJiZCZihhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOmg9YS50eXBlLHgoXCIxNTJcIixoLmRpc3BsYXlOYW1lfHxoLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciBEZj1DZighMCksRWY9Q2YoITEpLEZmPXt9LE49e2N1cnJlbnQ6RmZ9LEdmPXtjdXJyZW50OkZmfSxIZj17Y3VycmVudDpGZn07ZnVuY3Rpb24gSWYoYSl7YT09PUZmP3goXCIxNzRcIik6dm9pZCAwO3JldHVybiBhfVxuZnVuY3Rpb24gSmYoYSxiKXtHKEhmLGIsYSk7RyhHZixhLGEpO0coTixGZixhKTt2YXIgYz1iLm5vZGVUeXBlO3N3aXRjaChjKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpoZShudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yz04PT09Yz9iLnBhcmVudE5vZGU6YixiPWMubmFtZXNwYWNlVVJJfHxudWxsLGM9Yy50YWdOYW1lLGI9aGUoYixjKX1GKE4sYSk7RyhOLGIsYSl9ZnVuY3Rpb24gS2YoYSl7RihOLGEpO0YoR2YsYSk7RihIZixhKX1mdW5jdGlvbiBMZihhKXtJZihIZi5jdXJyZW50KTt2YXIgYj1JZihOLmN1cnJlbnQpO3ZhciBjPWhlKGIsYS50eXBlKTtiIT09YyYmKEcoR2YsYSxhKSxHKE4sYyxhKSl9ZnVuY3Rpb24gTWYoYSl7R2YuY3VycmVudD09PWEmJihGKE4sYSksRihHZixhKSl9XG52YXIgTmY9MCxPZj0yLFBmPTQsUWY9OCxSZj0xNixTZj0zMixUZj02NCxVZj0xMjgsVmY9VGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixXZj0wLFhmPW51bGwsTz1udWxsLFA9bnVsbCxZZj1udWxsLFE9bnVsbCxaZj1udWxsLCRmPTAsYWc9bnVsbCxiZz0wLGNnPSExLGRnPW51bGwsZWc9MDtmdW5jdGlvbiBmZygpe3goXCIzMjFcIil9ZnVuY3Rpb24gZ2coYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighYmQoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIGhnKGEsYixjLGQsZSxmKXtXZj1mO1hmPWI7UD1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtWZi5jdXJyZW50PW51bGw9PT1QP2lnOmpnO2I9YyhkLGUpO2lmKGNnKXtkbyBjZz0hMSxlZys9MSxQPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsLFpmPVlmLGFnPVE9Tz1udWxsLFZmLmN1cnJlbnQ9amcsYj1jKGQsZSk7d2hpbGUoY2cpO2RnPW51bGw7ZWc9MH1WZi5jdXJyZW50PWtnO2E9WGY7YS5tZW1vaXplZFN0YXRlPVlmO2EuZXhwaXJhdGlvblRpbWU9JGY7YS51cGRhdGVRdWV1ZT1hZzthLmVmZmVjdFRhZ3w9Ymc7YT1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDtXZj0wO1pmPVE9WWY9UD1PPVhmPW51bGw7JGY9MDthZz1udWxsO2JnPTA7YT94KFwiMzAwXCIpOnZvaWQgMDtyZXR1cm4gYn1mdW5jdGlvbiBsZygpe1ZmLmN1cnJlbnQ9a2c7V2Y9MDtaZj1RPVlmPVA9Tz1YZj1udWxsOyRmPTA7YWc9bnVsbDtiZz0wO2NnPSExO2RnPW51bGw7ZWc9MH1cbmZ1bmN0aW9uIG1nKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxxdWV1ZTpudWxsLGJhc2VVcGRhdGU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1RP1lmPVE9YTpRPVEubmV4dD1hO3JldHVybiBRfWZ1bmN0aW9uIG5nKCl7aWYobnVsbCE9PVpmKVE9WmYsWmY9US5uZXh0LE89UCxQPW51bGwhPT1PP08ubmV4dDpudWxsO2Vsc2V7bnVsbD09PVA/eChcIjMxMFwiKTp2b2lkIDA7Tz1QO3ZhciBhPXttZW1vaXplZFN0YXRlOk8ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ty5iYXNlU3RhdGUscXVldWU6Ty5xdWV1ZSxiYXNlVXBkYXRlOk8uYmFzZVVwZGF0ZSxuZXh0Om51bGx9O1E9bnVsbD09PVE/WWY9YTpRLm5leHQ9YTtQPU8ubmV4dH1yZXR1cm4gUX1mdW5jdGlvbiBvZyhhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIHBnKGEpe3ZhciBiPW5nKCksYz1iLnF1ZXVlO251bGw9PT1jP3goXCIzMTFcIik6dm9pZCAwO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO2lmKDA8ZWcpe3ZhciBkPWMuZGlzcGF0Y2g7aWYobnVsbCE9PWRnKXt2YXIgZT1kZy5nZXQoYyk7aWYodm9pZCAwIT09ZSl7ZGcuZGVsZXRlKGMpO3ZhciBmPWIubWVtb2l6ZWRTdGF0ZTtkbyBmPWEoZixlLmFjdGlvbiksZT1lLm5leHQ7d2hpbGUobnVsbCE9PWUpO2JkKGYsYi5tZW1vaXplZFN0YXRlKXx8KHFnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9PT1jLmxhc3QmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWY7cmV0dXJuW2YsZF19fXJldHVybltiLm1lbW9pemVkU3RhdGUsZF19ZD1jLmxhc3Q7dmFyIGc9Yi5iYXNlVXBkYXRlO2Y9Yi5iYXNlU3RhdGU7bnVsbCE9PWc/KG51bGwhPT1kJiYoZC5uZXh0PW51bGwpLGQ9Zy5uZXh0KTpkPW51bGwhPT1kP2QubmV4dDpudWxsO2lmKG51bGwhPT1cbmQpe3ZhciBoPWU9bnVsbCxsPWQsaz0hMTtkb3t2YXIgbT1sLmV4cGlyYXRpb25UaW1lO208V2Y/KGt8fChrPSEwLGg9ZyxlPWYpLG0+JGYmJigkZj1tKSk6Zj1sLmVhZ2VyUmVkdWNlcj09PWE/bC5lYWdlclN0YXRlOmEoZixsLmFjdGlvbik7Zz1sO2w9bC5uZXh0fXdoaWxlKG51bGwhPT1sJiZsIT09ZCk7a3x8KGg9ZyxlPWYpO2JkKGYsYi5tZW1vaXplZFN0YXRlKXx8KHFnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9aDtiLmJhc2VTdGF0ZT1lO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gcmcoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O251bGw9PT1hZz8oYWc9e2xhc3RFZmZlY3Q6bnVsbH0sYWcubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGI9YWcubGFzdEVmZmVjdCxudWxsPT09Yj9hZy5sYXN0RWZmZWN0PWEubmV4dD1hOihjPWIubmV4dCxiLm5leHQ9YSxhLm5leHQ9YyxhZy5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBzZyhhLGIsYyxkKXt2YXIgZT1tZygpO2JnfD1hO2UubWVtb2l6ZWRTdGF0ZT1yZyhiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIHRnKGEsYixjLGQpe3ZhciBlPW5nKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU8pe3ZhciBnPU8ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmZ2coZCxnLmRlcHMpKXtyZyhOZixjLGYsZCk7cmV0dXJufX1iZ3w9YTtlLm1lbW9pemVkU3RhdGU9cmcoYixjLGYsZCl9ZnVuY3Rpb24gdWcoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiB2Zygpe31cbmZ1bmN0aW9uIHdnKGEsYixjKXsyNT5lZz92b2lkIDA6eChcIjMwMVwiKTt2YXIgZD1hLmFsdGVybmF0ZTtpZihhPT09WGZ8fG51bGwhPT1kJiZkPT09WGYpaWYoY2c9ITAsYT17ZXhwaXJhdGlvblRpbWU6V2YsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sbnVsbD09PWRnJiYoZGc9bmV3IE1hcCksYz1kZy5nZXQoYiksdm9pZCAwPT09YylkZy5zZXQoYixhKTtlbHNle2ZvcihiPWM7bnVsbCE9PWIubmV4dDspYj1iLm5leHQ7Yi5uZXh0PWF9ZWxzZXtvZigpO3ZhciBlPWxmKCk7ZT1tZihlLGEpO3ZhciBmPXtleHBpcmF0aW9uVGltZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5sYXN0O2lmKG51bGw9PT1nKWYubmV4dD1mO2Vsc2V7dmFyIGg9Zy5uZXh0O251bGwhPT1oJiYoZi5uZXh0PWgpO2cubmV4dD1mfWIubGFzdD1mO2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lJiYobnVsbD09PVxuZHx8MD09PWQuZXhwaXJhdGlvblRpbWUpJiYoZD1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWQpKXRyeXt2YXIgbD1iLmxhc3RSZW5kZXJlZFN0YXRlLGs9ZChsLGMpO2YuZWFnZXJSZWR1Y2VyPWQ7Zi5lYWdlclN0YXRlPWs7aWYoYmQoayxsKSlyZXR1cm59Y2F0Y2gobSl7fWZpbmFsbHl7fXFmKGEsZSl9fVxudmFyIGtnPXtyZWFkQ29udGV4dDpNLHVzZUNhbGxiYWNrOmZnLHVzZUNvbnRleHQ6ZmcsdXNlRWZmZWN0OmZnLHVzZUltcGVyYXRpdmVIYW5kbGU6ZmcsdXNlTGF5b3V0RWZmZWN0OmZnLHVzZU1lbW86ZmcsdXNlUmVkdWNlcjpmZyx1c2VSZWY6ZmcsdXNlU3RhdGU6ZmcsdXNlRGVidWdWYWx1ZTpmZ30saWc9e3JlYWRDb250ZXh0Ok0sdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXttZygpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0Ok0sdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHNnKDUxNixVZnxUZixhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gc2coNCxQZnxTZix1Zy5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHNnKDQsUGZ8U2YsYSxiKX0sXG51c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9bWcoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9bWcoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD13Zy5iaW5kKG51bGwsWGYsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPW1nKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOmZ1bmN0aW9uKGEpe3ZhciBiPW1nKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtsYXN0Om51bGwsZGlzcGF0Y2g6bnVsbCxcbmxhc3RSZW5kZXJlZFJlZHVjZXI6b2csbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPXdnLmJpbmQobnVsbCxYZixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfSx1c2VEZWJ1Z1ZhbHVlOnZnfSxqZz17cmVhZENvbnRleHQ6TSx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3ZhciBjPW5nKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZnZyhiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpNLHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB0Zyg1MTYsVWZ8VGYsYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHRnKDQsUGZ8U2YsdWcuYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLFxuYil7cmV0dXJuIHRnKDQsUGZ8U2YsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPW5nKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZnZyhiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpwZyx1c2VSZWY6ZnVuY3Rpb24oKXtyZXR1cm4gbmcoKS5tZW1vaXplZFN0YXRlfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXtyZXR1cm4gcGcob2csYSl9LHVzZURlYnVnVmFsdWU6dmd9LHhnPW51bGwseWc9bnVsbCx6Zz0hMTtcbmZ1bmN0aW9uIEFnKGEsYil7dmFyIGM9Syg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIEJnKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBDZyhhKXtpZih6Zyl7dmFyIGI9eWc7aWYoYil7dmFyIGM9YjtpZighQmcoYSxiKSl7Yj1EZShjKTtpZighYnx8IUJnKGEsYikpe2EuZWZmZWN0VGFnfD0yO3pnPSExO3hnPWE7cmV0dXJufUFnKHhnLGMpfXhnPWE7eWc9RWUoYil9ZWxzZSBhLmVmZmVjdFRhZ3w9Mix6Zz0hMSx4Zz1hfX1mdW5jdGlvbiBEZyhhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjE4IT09YS50YWc7KWE9YS5yZXR1cm47eGc9YX1mdW5jdGlvbiBFZyhhKXtpZihhIT09eGcpcmV0dXJuITE7aWYoIXpnKXJldHVybiBEZyhhKSx6Zz0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIXhlKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj15ZztiOylBZyhhLGIpLGI9RGUoYik7RGcoYSk7eWc9eGc/RGUoYS5zdGF0ZU5vZGUpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gRmcoKXt5Zz14Zz1udWxsO3pnPSExfVxudmFyIEdnPVRiLlJlYWN0Q3VycmVudE93bmVyLHFnPSExO2Z1bmN0aW9uIFMoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9FZihiLG51bGwsYyxkKTpEZihiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBIZyhhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7SWcoYixlKTtkPWhnKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXFnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksSmcoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1MoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBLZyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIVZlKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLExnKGEsYixnLGQsZSxmKTthPVllKGMudHlwZSxudWxsLGQsbnVsbCxiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZihlPGYmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6ZGQsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gSmcoYSxiLGYpO2IuZWZmZWN0VGFnfD0xO2E9WGUoZyxkLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIExnKGEsYixjLGQsZSxmKXtyZXR1cm4gbnVsbCE9PWEmJmRkKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZiYmKHFnPSExLGU8Zik/SmcoYSxiLGYpOk1nKGEsYixjLGQsZil9ZnVuY3Rpb24gTmcoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBNZyhhLGIsYyxkLGUpe3ZhciBmPUooYyk/SWU6SC5jdXJyZW50O2Y9SmUoYixmKTtJZyhiLGUpO2M9aGcoYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhcWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSxKZyhhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UyhhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIE9nKGEsYixjLGQsZSl7aWYoSihjKSl7dmFyIGY9ITA7T2UoYil9ZWxzZSBmPSExO0lnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSx2ZihiLGMsZCxlKSx4ZihiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgbD1nLmNvbnRleHQsaz1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az1NKGspOihrPUooYyk/SWU6SC5jdXJyZW50LGs9SmUoYixrKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxsIT09aykmJndmKGIsZyxkLGspO1BnPSExO3ZhciB0PWIubWVtb2l6ZWRTdGF0ZTtsPWcuc3RhdGU9dDt2YXIgQT1iLnVwZGF0ZVF1ZXVlO251bGwhPT1BJiYoeWYoYixBLGQsZyxlKSxsPWIubWVtb2l6ZWRTdGF0ZSk7aCE9PWR8fHQhPT1sfHxJLmN1cnJlbnR8fFBnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKGtmKGIsYyxtLGQpLGw9Yi5tZW1vaXplZFN0YXRlKSwoaD1QZ3x8dWYoYixjLGgsZCx0LGwsaykpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXG5nLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9bCksZy5wcm9wcz1kLGcuc3RhdGU9bCxnLmNvbnRleHQ9ayxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6TChiLnR5cGUsaCksbD1nLmNvbnRleHQsaz1jLmNvbnRleHRUeXBlLFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az1NKGspOihrPUooYyk/SWU6SC5jdXJyZW50LGs9SmUoYixrKSksbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywocD1cImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGwhPT1rKSYmd2YoYixnLGQsayksUGc9ITEsbD1iLm1lbW9pemVkU3RhdGUsdD1nLnN0YXRlPWwsQT1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1BJiYoeWYoYixBLGQsZyxlKSx0PWIubWVtb2l6ZWRTdGF0ZSksaCE9PWR8fGwhPT10fHxJLmN1cnJlbnR8fFBnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKGtmKGIsYyxtLGQpLHQ9Yi5tZW1vaXplZFN0YXRlKSwobT1QZ3x8dWYoYixjLGgsZCxsLHQsaykpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsdCxrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHQsaykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPVxudCksZy5wcm9wcz1kLGcuc3RhdGU9dCxnLmNvbnRleHQ9ayxkPW0pOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJmw9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJmw9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gUWcoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gUWcoYSxiLGMsZCxlLGYpe05nKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZQZShiLGMsITEpLEpnKGEsYixmKTtkPWIuc3RhdGVOb2RlO0dnLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPURmKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9RGYoYixudWxsLGgsZikpOlMoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmUGUoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBSZyhhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P01lKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJk1lKGEsYi5jb250ZXh0LCExKTtKZihhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBTZyhhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1iLm1lbW9pemVkU3RhdGU7aWYoMD09PShiLmVmZmVjdFRhZyY2NCkpe2Y9bnVsbDt2YXIgZz0hMX1lbHNlIGY9e3RpbWVkT3V0QXQ6bnVsbCE9PWY/Zi50aW1lZE91dEF0OjB9LGc9ITAsYi5lZmZlY3RUYWcmPS02NTtpZihudWxsPT09YSlpZihnKXt2YXIgaD1lLmZhbGxiYWNrO2E9WmUobnVsbCxkLDAsbnVsbCk7MD09PShiLm1vZGUmMSkmJihhLmNoaWxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkKTtkPVplKGgsZCxjLG51bGwpO2Euc2libGluZz1kO2M9YTtjLnJldHVybj1kLnJldHVybj1ifWVsc2UgYz1kPUVmKGIsbnVsbCxlLmNoaWxkcmVuLGMpO2Vsc2UgbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZT8oZD1hLmNoaWxkLGg9ZC5zaWJsaW5nLGc/KGM9ZS5mYWxsYmFjayxlPVhlKGQsZC5wZW5kaW5nUHJvcHMsMCksMD09PShiLm1vZGUmMSkmJihnPW51bGwhPT1cbmIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZyE9PWQuY2hpbGQmJihlLmNoaWxkPWcpKSxkPWUuc2libGluZz1YZShoLGMsaC5leHBpcmF0aW9uVGltZSksYz1lLGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGMucmV0dXJuPWQucmV0dXJuPWIpOmM9ZD1EZihiLGQuY2hpbGQsZS5jaGlsZHJlbixjKSk6KGg9YS5jaGlsZCxnPyhnPWUuZmFsbGJhY2ssZT1aZShudWxsLGQsMCxudWxsKSxlLmNoaWxkPWgsMD09PShiLm1vZGUmMSkmJihlLmNoaWxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkKSxkPWUuc2libGluZz1aZShnLGQsYyxudWxsKSxkLmVmZmVjdFRhZ3w9MixjPWUsZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsYy5yZXR1cm49ZC5yZXR1cm49Yik6ZD1jPURmKGIsaCxlLmNoaWxkcmVuLGMpKSxiLnN0YXRlTm9kZT1hLnN0YXRlTm9kZTtiLm1lbW9pemVkU3RhdGU9ZjtiLmNoaWxkPWM7cmV0dXJuIGR9XG5mdW5jdGlvbiBKZyhhLGIsYyl7bnVsbCE9PWEmJihiLmNvbnRleHREZXBlbmRlbmNpZXM9YS5jb250ZXh0RGVwZW5kZW5jaWVzKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/eChcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVhlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVhlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIFRnKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxJLmN1cnJlbnQpcWc9ITA7ZWxzZXtpZihkPGMpe3FnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOlJnKGIpO0ZnKCk7YnJlYWs7Y2FzZSA1OkxmKGIpO2JyZWFrO2Nhc2UgMTpKKGIudHlwZSkmJk9lKGIpO2JyZWFrO2Nhc2UgNDpKZihiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6VWcoYixiLm1lbW9pemVkUHJvcHMudmFsdWUpO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7ZD1iLmNoaWxkLmNoaWxkRXhwaXJhdGlvblRpbWU7aWYoMCE9PWQmJmQ+PWMpcmV0dXJuIFNnKGEsYixjKTtiPUpnKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9fXJldHVybiBKZyhhLGIsYyl9fWVsc2UgcWc9ITE7Yi5leHBpcmF0aW9uVGltZT0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9XG5iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPUplKGIsSC5jdXJyZW50KTtJZyhiLGMpO2U9aGcobnVsbCxiLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtsZygpO2lmKEooZCkpe3ZhciBmPSEwO09lKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZrZihiLGQsZyxhKTtlLnVwZGF0ZXI9dGY7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFsRmliZXI9Yjt4ZihiLGQsYSxjKTtiPVFnKG51bGwsYixkLCEwLGYsXG5jKX1lbHNlIGIudGFnPTAsUyhudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2Y9Yi5wZW5kaW5nUHJvcHM7YT1oZihlKTtiLnR5cGU9YTtlPWIudGFnPVdlKGEpO2Y9TChhLGYpO2c9dm9pZCAwO3N3aXRjaChlKXtjYXNlIDA6Zz1NZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTpnPU9nKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxMTpnPUhnKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxNDpnPUtnKG51bGwsYixhLEwoYS50eXBlLGYpLGQsYyk7YnJlYWs7ZGVmYXVsdDp4KFwiMzA2XCIsYSxcIlwiKX1yZXR1cm4gZztjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkwoZCxlKSxNZyhhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxcbmU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMKGQsZSksT2coYSxiLGQsZSxjKTtjYXNlIDM6UmcoYik7ZD1iLnVwZGF0ZVF1ZXVlO251bGw9PT1kP3goXCIyODJcIik6dm9pZCAwO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWYoYixkLGIucGVuZGluZ1Byb3BzLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlGZygpLGI9SmcoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihlPShudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZlLmh5ZHJhdGUpeWc9RWUoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbykseGc9YixlPXpnPSEwO2U/KGIuZWZmZWN0VGFnfD0yLGIuY2hpbGQ9RWYoYixudWxsLGQsYykpOihTKGEsYixkLGMpLEZnKCkpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIExmKGIpLG51bGw9PT1hJiZDZyhiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsXG5nPWUuY2hpbGRyZW4seGUoZCxlKT9nPW51bGw6bnVsbCE9PWYmJnhlKGQsZikmJihiLmVmZmVjdFRhZ3w9MTYpLE5nKGEsYiksMSE9PWMmJmIubW9kZSYxJiZlLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOihTKGEsYixnLGMpLGI9Yi5jaGlsZCksYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZDZyhiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIFNnKGEsYixjKTtjYXNlIDQ6cmV0dXJuIEpmKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPURmKGIsbnVsbCxkLGMpOlMoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMKGQsZSksSGcoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbmMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUyhhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO1VnKGIsZik7aWYobnVsbCE9PWcpe3ZhciBoPWcudmFsdWU7Zj1iZChoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDA7aWYoMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhSS5jdXJyZW50KXtiPUpnKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBsPWguY29udGV4dERlcGVuZGVuY2llcztpZihudWxsIT09bCl7Zz1oLmNoaWxkO2Zvcih2YXIgaz1sLmZpcnN0O251bGwhPT1rOyl7aWYoay5jb250ZXh0PT09ZCYmMCE9PVxuKGsub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihrPW5mKGMpLGsudGFnPXNmLHBmKGgsaykpO2guZXhwaXJhdGlvblRpbWU8YyYmKGguZXhwaXJhdGlvblRpbWU9Yyk7az1oLmFsdGVybmF0ZTtudWxsIT09ayYmay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTtrPWM7Zm9yKHZhciBtPWgucmV0dXJuO251bGwhPT1tOyl7dmFyIHA9bS5hbHRlcm5hdGU7aWYobS5jaGlsZEV4cGlyYXRpb25UaW1lPGspbS5jaGlsZEV4cGlyYXRpb25UaW1lPWssbnVsbCE9PXAmJnAuY2hpbGRFeHBpcmF0aW9uVGltZTxrJiYocC5jaGlsZEV4cGlyYXRpb25UaW1lPWspO2Vsc2UgaWYobnVsbCE9PXAmJnAuY2hpbGRFeHBpcmF0aW9uVGltZTxrKXAuY2hpbGRFeHBpcmF0aW9uVGltZT1rO2Vsc2UgYnJlYWs7bT1tLnJldHVybn1sLmV4cGlyYXRpb25UaW1lPGMmJihsLmV4cGlyYXRpb25UaW1lPWMpO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/XG5udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9Z319UyhhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbixJZyhiLGMpLGU9TShlLGYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5lZmZlY3RUYWd8PTEsUyhhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9TChlLGIucGVuZGluZ1Byb3BzKSxmPUwoZS50eXBlLGYpLEtnKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBMZyhhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1cbmQ/ZTpMKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsSihkKT8oYT0hMCxPZShiKSk6YT0hMSxJZyhiLGMpLHZmKGIsZCxlLGMpLHhmKGIsZCxlLGMpLFFnKG51bGwsYixkLCEwLGEsYyl9eChcIjE1NlwiKX12YXIgVmc9e2N1cnJlbnQ6bnVsbH0sV2c9bnVsbCxYZz1udWxsLFlnPW51bGw7ZnVuY3Rpb24gVWcoYSxiKXt2YXIgYz1hLnR5cGUuX2NvbnRleHQ7RyhWZyxjLl9jdXJyZW50VmFsdWUsYSk7Yy5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gWmcoYSl7dmFyIGI9VmcuY3VycmVudDtGKFZnLGEpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gSWcoYSxiKXtXZz1hO1lnPVhnPW51bGw7dmFyIGM9YS5jb250ZXh0RGVwZW5kZW5jaWVzO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPj1iJiYocWc9ITApO2EuY29udGV4dERlcGVuZGVuY2llcz1udWxsfVxuZnVuY3Rpb24gTShhLGIpe2lmKFlnIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilZZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtudWxsPT09WGc/KG51bGw9PT1XZz94KFwiMzA4XCIpOnZvaWQgMCxYZz1iLFdnLmNvbnRleHREZXBlbmRlbmNpZXM9e2ZpcnN0OmIsZXhwaXJhdGlvblRpbWU6MH0pOlhnPVhnLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciAkZz0wLHJmPTEsc2Y9MixhaD0zLFBnPSExO2Z1bmN0aW9uIGJoKGEpe3JldHVybntiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1cbmZ1bmN0aW9uIGNoKGEpe3JldHVybntiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RVcGRhdGU6YS5maXJzdFVwZGF0ZSxsYXN0VXBkYXRlOmEubGFzdFVwZGF0ZSxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiBuZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YSx0YWc6JGcscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsLG5leHRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gZGgoYSxiKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gcGYoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtpZihudWxsPT09Yyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTt2YXIgZT1udWxsO251bGw9PT1kJiYoZD1hLnVwZGF0ZVF1ZXVlPWJoKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZD1hLnVwZGF0ZVF1ZXVlLGU9Yy51cGRhdGVRdWV1ZSxudWxsPT09ZD9udWxsPT09ZT8oZD1hLnVwZGF0ZVF1ZXVlPWJoKGEubWVtb2l6ZWRTdGF0ZSksZT1jLnVwZGF0ZVF1ZXVlPWJoKGMubWVtb2l6ZWRTdGF0ZSkpOmQ9YS51cGRhdGVRdWV1ZT1jaChlKTpudWxsPT09ZSYmKGU9Yy51cGRhdGVRdWV1ZT1jaChkKSk7bnVsbD09PWV8fGQ9PT1lP2RoKGQsYik6bnVsbD09PWQubGFzdFVwZGF0ZXx8bnVsbD09PWUubGFzdFVwZGF0ZT8oZGgoZCxiKSxkaChlLGIpKTooZGgoZCxiKSxlLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBlaChhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7Yz1udWxsPT09Yz9hLnVwZGF0ZVF1ZXVlPWJoKGEubWVtb2l6ZWRTdGF0ZSk6ZmgoYSxjKTtudWxsPT09Yy5sYXN0Q2FwdHVyZWRVcGRhdGU/Yy5maXJzdENhcHR1cmVkVXBkYXRlPWMubGFzdENhcHR1cmVkVXBkYXRlPWI6KGMubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixjLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKX1mdW5jdGlvbiBmaChhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1jaChiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBnaChhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIHJmOnJldHVybiBhPWMucGF5bG9hZCxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7Y2FzZSBhaDphLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMjA0OXw2NDtjYXNlICRnOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBuKHt9LGQsZSk7Y2FzZSBzZjpQZz0hMH1yZXR1cm4gZH1cbmZ1bmN0aW9uIHlmKGEsYixjLGQsZSl7UGc9ITE7Yj1maChhLGIpO2Zvcih2YXIgZj1iLmJhc2VTdGF0ZSxnPW51bGwsaD0wLGw9Yi5maXJzdFVwZGF0ZSxrPWY7bnVsbCE9PWw7KXt2YXIgbT1sLmV4cGlyYXRpb25UaW1lO208ZT8obnVsbD09PWcmJihnPWwsZj1rKSxoPG0mJihoPW0pKTooaz1naChhLGIsbCxrLGMsZCksbnVsbCE9PWwuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsbC5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdEVmZmVjdD9iLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1sOihiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1sLGIubGFzdEVmZmVjdD1sKSkpO2w9bC5uZXh0fW09bnVsbDtmb3IobD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGU7bnVsbCE9PWw7KXt2YXIgcD1sLmV4cGlyYXRpb25UaW1lO3A8ZT8obnVsbD09PW0mJihtPWwsbnVsbD09PWcmJihmPWspKSxoPHAmJihoPXApKTooaz1naChhLGIsbCxrLGMsZCksbnVsbCE9PWwuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9XG4zMixsLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q/Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PWw6KGIubGFzdENhcHR1cmVkRWZmZWN0Lm5leHRFZmZlY3Q9bCxiLmxhc3RDYXB0dXJlZEVmZmVjdD1sKSkpO2w9bC5uZXh0fW51bGw9PT1nJiYoYi5sYXN0VXBkYXRlPW51bGwpO251bGw9PT1tP2IubGFzdENhcHR1cmVkVXBkYXRlPW51bGw6YS5lZmZlY3RUYWd8PTMyO251bGw9PT1nJiZudWxsPT09bSYmKGY9ayk7Yi5iYXNlU3RhdGU9ZjtiLmZpcnN0VXBkYXRlPWc7Yi5maXJzdENhcHR1cmVkVXBkYXRlPW07YS5leHBpcmF0aW9uVGltZT1oO2EubWVtb2l6ZWRTdGF0ZT1rfVxuZnVuY3Rpb24gaGgoYSxiLGMpe251bGwhPT1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUmJihudWxsIT09Yi5sYXN0VXBkYXRlJiYoYi5sYXN0VXBkYXRlLm5leHQ9Yi5maXJzdENhcHR1cmVkVXBkYXRlLGIubGFzdFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZSksYi5maXJzdENhcHR1cmVkVXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlPW51bGwpO2loKGIuZmlyc3RFZmZlY3QsYyk7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtpaChiLmZpcnN0Q2FwdHVyZWRFZmZlY3QsYyk7Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PW51bGx9ZnVuY3Rpb24gaWgoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5jYWxsYmFjaztpZihudWxsIT09Yyl7YS5jYWxsYmFjaz1udWxsO3ZhciBkPWI7XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/eChcIjE5MVwiLGMpOnZvaWQgMDtjLmNhbGwoZCl9YT1hLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gamgoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazpqYyhiKX19ZnVuY3Rpb24ga2goYSl7YS5lZmZlY3RUYWd8PTR9dmFyIGxoPXZvaWQgMCxtaD12b2lkIDAsbmg9dm9pZCAwLG9oPXZvaWQgMDtsaD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07bWg9ZnVuY3Rpb24oKXt9O1xubmg9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoZiE9PWQpe3ZhciBnPWIuc3RhdGVOb2RlO0lmKE4uY3VycmVudCk7YT1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpmPXZjKGcsZik7ZD12YyhnLGQpO2E9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9JGQoZyxmKTtkPSRkKGcsZCk7YT1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Zj1uKHt9LGYse3ZhbHVlOnZvaWQgMH0pO2Q9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTthPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmY9YmUoZyxmKTtkPWJlKGcsZCk7YT1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBmLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihnLm9uY2xpY2s9dGUpfXFlKGMsZCk7Zz1jPXZvaWQgMDt2YXIgaD1udWxsO2ZvcihjIGluIGYpaWYoIWQuaGFzT3duUHJvcGVydHkoYykmJmYuaGFzT3duUHJvcGVydHkoYykmJm51bGwhPWZbY10paWYoXCJzdHlsZVwiPT09XG5jKXt2YXIgbD1mW2NdO2ZvcihnIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShnKSYmKGh8fChoPXt9KSxoW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1jJiZcImNoaWxkcmVuXCIhPT1jJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWMmJlwiYXV0b0ZvY3VzXCIhPT1jJiYocmEuaGFzT3duUHJvcGVydHkoYyk/YXx8KGE9W10pOihhPWF8fFtdKS5wdXNoKGMsbnVsbCkpO2ZvcihjIGluIGQpe3ZhciBrPWRbY107bD1udWxsIT1mP2ZbY106dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoYykmJmshPT1sJiYobnVsbCE9a3x8bnVsbCE9bCkpaWYoXCJzdHlsZVwiPT09YylpZihsKXtmb3IoZyBpbiBsKSFsLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoaHx8KGg9e30pLGhbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZsW2ddIT09a1tnXSYmKGh8fFxuKGg9e30pLGhbZ109a1tnXSl9ZWxzZSBofHwoYXx8KGE9W10pLGEucHVzaChjLGgpKSxoPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWM/KGs9az9rLl9faHRtbDp2b2lkIDAsbD1sP2wuX19odG1sOnZvaWQgMCxudWxsIT1rJiZsIT09ayYmKGE9YXx8W10pLnB1c2goYyxcIlwiK2spKTpcImNoaWxkcmVuXCI9PT1jP2w9PT1rfHxcInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGE9YXx8W10pLnB1c2goYyxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1jJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YyYmKHJhLmhhc093blByb3BlcnR5KGMpPyhudWxsIT1rJiZzZShlLGMpLGF8fGw9PT1rfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGMsaykpfWgmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixoKTtlPWE7KGIudXBkYXRlUXVldWU9ZSkmJmtoKGIpfX07b2g9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJmtoKGIpfTtcbnZhciBwaD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBxaChhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPWpjKGMpKTtudWxsIT09YyYmaWMoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmaWMoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gcmgoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7c2goYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gdGgoYSxiLGMpe2M9Yy51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkb3tpZigoZC50YWcmYSkhPT1OZil7dmFyIGU9ZC5kZXN0cm95O2QuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZSYmZSgpfShkLnRhZyZiKSE9PU5mJiYoZT1kLmNyZWF0ZSxkLmRlc3Ryb3k9ZSgpKTtkPWQubmV4dH13aGlsZShkIT09Yyl9fVxuZnVuY3Rpb24gdWgoYSxiKXtmb3IodmFyIGM9YTs7KXtpZig1PT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKGIpZC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO2Vsc2V7ZD1jLnN0YXRlTm9kZTt2YXIgZT1jLm1lbW9pemVkUHJvcHMuc3R5bGU7ZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGw7ZC5zdHlsZS5kaXNwbGF5PW5lKFwiZGlzcGxheVwiLGUpfX1lbHNlIGlmKDY9PT1jLnRhZyljLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yj9cIlwiOmMubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDEzPT09Yy50YWcmJm51bGwhPT1jLm1lbW9pemVkU3RhdGUpe2Q9Yy5jaGlsZC5zaWJsaW5nO2QucmV0dXJuPWM7Yz1kO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8XG5jLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiB2aChhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgUmUmJlJlKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OnZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIubGFzdEVmZmVjdCxudWxsIT09Yikpe3ZhciBjPWI9Yi5uZXh0O2Rve3ZhciBkPWMuZGVzdHJveTtpZih2b2lkIDAhPT1kKXt2YXIgZT1hO3RyeXtkKCl9Y2F0Y2goZil7c2goZSxmKX19Yz1jLm5leHR9d2hpbGUoYyE9PWIpfWJyZWFrO2Nhc2UgMTpyaChhKTtiPWEuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxiLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goZil7c2goYSxmKX1icmVhaztjYXNlIDU6cmgoYSk7YnJlYWs7Y2FzZSA0OndoKGEpfX1cbmZ1bmN0aW9uIHhoKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24geWgoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoeGgoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXgoXCIxNjBcIik7Yz12b2lkIDB9dmFyIGQ9Yj12b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6Yj1jLnN0YXRlTm9kZTtkPSExO2JyZWFrO2Nhc2UgMzpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp4KFwiMTYxXCIpfWMuZWZmZWN0VGFnJjE2JiYoa2UoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fHhoKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJlxuMiljb250aW51ZSBiO2lmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNT09PWUudGFnfHw2PT09ZS50YWcpaWYoYylpZihkKXt2YXIgZj1iLGc9ZS5zdGF0ZU5vZGUsaD1jOzg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZyxoKTpmLmluc2VydEJlZm9yZShnLGgpfWVsc2UgYi5pbnNlcnRCZWZvcmUoZS5zdGF0ZU5vZGUsYyk7ZWxzZSBkPyhnPWIsaD1lLnN0YXRlTm9kZSw4PT09Zy5ub2RlVHlwZT8oZj1nLnBhcmVudE5vZGUsZi5pbnNlcnRCZWZvcmUoaCxnKSk6KGY9ZyxmLmFwcGVuZENoaWxkKGgpKSxnPWcuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09ZyYmdm9pZCAwIT09Z3x8bnVsbCE9PWYub25jbGlja3x8KGYub25jbGljaz10ZSkpOmIuYXBwZW5kQ2hpbGQoZS5zdGF0ZU5vZGUpO1xuZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkLnJldHVybj1lO2U9ZS5jaGlsZDtjb250aW51ZX1pZihlPT09YSlicmVhaztmb3IoO251bGw9PT1lLnNpYmxpbmc7KXtpZihudWxsPT09ZS5yZXR1cm58fGUucmV0dXJuPT09YSlyZXR1cm47ZT1lLnJldHVybn1lLnNpYmxpbmcucmV0dXJuPWUucmV0dXJuO2U9ZS5zaWJsaW5nfX1cbmZ1bmN0aW9uIHdoKGEpe2Zvcih2YXIgYj1hLGM9ITEsZD12b2lkIDAsZT12b2lkIDA7Oyl7aWYoIWMpe2M9Yi5yZXR1cm47YTpmb3IoOzspe251bGw9PT1jP3goXCIxNjBcIik6dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmQ9Yy5zdGF0ZU5vZGU7ZT0hMTticmVhayBhO2Nhc2UgMzpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhO2Nhc2UgNDpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhfWM9Yy5yZXR1cm59Yz0hMH1pZig1PT09Yi50YWd8fDY9PT1iLnRhZyl7YTpmb3IodmFyIGY9YixnPWY7OylpZih2aChnKSxudWxsIT09Zy5jaGlsZCYmNCE9PWcudGFnKWcuY2hpbGQucmV0dXJuPWcsZz1nLmNoaWxkO2Vsc2V7aWYoZz09PWYpYnJlYWs7Zm9yKDtudWxsPT09Zy5zaWJsaW5nOyl7aWYobnVsbD09PWcucmV0dXJufHxnLnJldHVybj09PWYpYnJlYWsgYTtnPWcucmV0dXJufWcuc2libGluZy5yZXR1cm49Zy5yZXR1cm47Zz1nLnNpYmxpbmd9ZT9cbihmPWQsZz1iLnN0YXRlTm9kZSw4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZyk6Zi5yZW1vdmVDaGlsZChnKSk6ZC5yZW1vdmVDaGlsZChiLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09Yi50YWcpe2lmKG51bGwhPT1iLmNoaWxkKXtkPWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX19ZWxzZSBpZih2aChiKSxudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuO2I9Yi5yZXR1cm47ND09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319XG5mdW5jdGlvbiB6aChhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OnRoKFBmLFFmLGIpO2JyZWFrO2Nhc2UgMTpicmVhaztjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzO2E9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7dmFyIGU9Yi50eXBlLGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7bnVsbCE9PWYmJkNlKGMsZixlLGEsZCxiKX1icmVhaztjYXNlIDY6bnVsbD09PWIuc3RhdGVOb2RlP3goXCIxNjJcIik6dm9pZCAwO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7YnJlYWs7Y2FzZSAzOmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzpjPWIubWVtb2l6ZWRTdGF0ZTtkPXZvaWQgMDthPWI7bnVsbD09PWM/ZD0hMTooZD0hMCxhPWIuY2hpbGQsMD09PWMudGltZWRPdXRBdCYmKGMudGltZWRPdXRBdD1sZigpKSk7bnVsbCE9PWEmJnVoKGEsZCk7Yz1cbmIudXBkYXRlUXVldWU7aWYobnVsbCE9PWMpe2IudXBkYXRlUXVldWU9bnVsbDt2YXIgZz1iLnN0YXRlTm9kZTtudWxsPT09ZyYmKGc9Yi5zdGF0ZU5vZGU9bmV3IHBoKTtjLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGM9QWguYmluZChudWxsLGIsYSk7Zy5oYXMoYSl8fChnLmFkZChhKSxhLnRoZW4oYyxjKSl9KX1icmVhaztjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6eChcIjE2M1wiKX19dmFyIEJoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIENoKGEsYixjKXtjPW5mKGMpO2MudGFnPWFoO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtEaChkKTtxaChhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIEVoKGEsYixjKXtjPW5mKGMpO2MudGFnPWFoO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1GaD9GaD1uZXcgU2V0KFt0aGlzXSk6RmguYWRkKHRoaXMpKTt2YXIgYz1iLnZhbHVlLGU9Yi5zdGFjaztxaChhLGIpO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYyx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWU/ZTpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIEdoKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkooYS50eXBlKSYmS2UoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMjA0OD8oYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhKTpudWxsO2Nhc2UgMzpyZXR1cm4gS2YoYSksTGUoYSksYj1hLmVmZmVjdFRhZywwIT09KGImNjQpP3goXCIyODVcIik6dm9pZCAwLGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYTtjYXNlIDU6cmV0dXJuIE1mKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gYj1hLmVmZmVjdFRhZyxiJjIwNDg/KGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYSk6bnVsbDtjYXNlIDE4OnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gS2YoYSksbnVsbDtjYXNlIDEwOnJldHVybiBaZyhhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIEhoPVRiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsSWg9VGIuUmVhY3RDdXJyZW50T3duZXIsSmg9MTA3Mzc0MTgyMixLaD0hMSxUPW51bGwsTGg9bnVsbCxVPTAsTWg9LTEsTmg9ITEsVj1udWxsLE9oPSExLFBoPW51bGwsUWg9bnVsbCxSaD1udWxsLEZoPW51bGw7ZnVuY3Rpb24gU2goKXtpZihudWxsIT09VClmb3IodmFyIGE9VC5yZXR1cm47bnVsbCE9PWE7KXt2YXIgYj1hO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnZhciBjPWIudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09YyYmdm9pZCAwIT09YyYmS2UoYik7YnJlYWs7Y2FzZSAzOktmKGIpO0xlKGIpO2JyZWFrO2Nhc2UgNTpNZihiKTticmVhaztjYXNlIDQ6S2YoYik7YnJlYWs7Y2FzZSAxMDpaZyhiKX1hPWEucmV0dXJufUxoPW51bGw7VT0wO01oPS0xO05oPSExO1Q9bnVsbH1cbmZ1bmN0aW9uIFRoKCl7Zm9yKDtudWxsIT09Vjspe3ZhciBhPVYuZWZmZWN0VGFnO2EmMTYmJmtlKFYuc3RhdGVOb2RlLFwiXCIpO2lmKGEmMTI4KXt2YXIgYj1WLmFsdGVybmF0ZTtudWxsIT09YiYmKGI9Yi5yZWYsbnVsbCE9PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKG51bGwpOmIuY3VycmVudD1udWxsKSl9c3dpdGNoKGEmMTQpe2Nhc2UgMjp5aChWKTtWLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OnloKFYpO1YuZWZmZWN0VGFnJj0tMzt6aChWLmFsdGVybmF0ZSxWKTticmVhaztjYXNlIDQ6emgoVi5hbHRlcm5hdGUsVik7YnJlYWs7Y2FzZSA4OmE9Vix3aChhKSxhLnJldHVybj1udWxsLGEuY2hpbGQ9bnVsbCxhLm1lbW9pemVkU3RhdGU9bnVsbCxhLnVwZGF0ZVF1ZXVlPW51bGwsYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGEucmV0dXJuPW51bGwsYS5jaGlsZD1udWxsLGEubWVtb2l6ZWRTdGF0ZT1udWxsLGEudXBkYXRlUXVldWU9bnVsbCl9Vj1WLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gVWgoKXtmb3IoO251bGwhPT1WOyl7aWYoVi5lZmZlY3RUYWcmMjU2KWE6e3ZhciBhPVYuYWx0ZXJuYXRlLGI9Vjtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dGgoT2YsTmYsYik7YnJlYWsgYTtjYXNlIDE6aWYoYi5lZmZlY3RUYWcmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpMKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9YnJlYWsgYTtjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhayBhO2RlZmF1bHQ6eChcIjE2M1wiKX19Vj1WLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gVmgoYSxiKXtmb3IoO251bGwhPT1WOyl7dmFyIGM9Vi5lZmZlY3RUYWc7aWYoYyYzNil7dmFyIGQ9Vi5hbHRlcm5hdGUsZT1WLGY9Yjtzd2l0Y2goZS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dGgoUmYsU2YsZSk7YnJlYWs7Y2FzZSAxOnZhciBnPWUuc3RhdGVOb2RlO2lmKGUuZWZmZWN0VGFnJjQpaWYobnVsbD09PWQpZy5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGg9ZS5lbGVtZW50VHlwZT09PWUudHlwZT9kLm1lbW9pemVkUHJvcHM6TChlLnR5cGUsZC5tZW1vaXplZFByb3BzKTtnLmNvbXBvbmVudERpZFVwZGF0ZShoLGQubWVtb2l6ZWRTdGF0ZSxnLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX1kPWUudXBkYXRlUXVldWU7bnVsbCE9PWQmJmhoKGUsZCxnLGYpO2JyZWFrO2Nhc2UgMzpkPWUudXBkYXRlUXVldWU7aWYobnVsbCE9PWQpe2c9bnVsbDtpZihudWxsIT09ZS5jaGlsZClzd2l0Y2goZS5jaGlsZC50YWcpe2Nhc2UgNTpnPVxuZS5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmc9ZS5jaGlsZC5zdGF0ZU5vZGV9aGgoZSxkLGcsZil9YnJlYWs7Y2FzZSA1OmY9ZS5zdGF0ZU5vZGU7bnVsbD09PWQmJmUuZWZmZWN0VGFnJjQmJndlKGUudHlwZSxlLm1lbW9pemVkUHJvcHMpJiZmLmZvY3VzKCk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6YnJlYWs7Y2FzZSAxNzpicmVhaztkZWZhdWx0OngoXCIxNjNcIil9fWMmMTI4JiYoZT1WLnJlZixudWxsIT09ZSYmKGY9Vi5zdGF0ZU5vZGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGU/ZShmKTplLmN1cnJlbnQ9ZikpO2MmNTEyJiYoUGg9YSk7Vj1WLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gV2goYSxiKXtSaD1RaD1QaD1udWxsO3ZhciBjPVc7Vz0hMDtkb3tpZihiLmVmZmVjdFRhZyY1MTIpe3ZhciBkPSExLGU9dm9pZCAwO3RyeXt2YXIgZj1iO3RoKFVmLE5mLGYpO3RoKE5mLFRmLGYpfWNhdGNoKGcpe2Q9ITAsZT1nfWQmJnNoKGIsZSl9Yj1iLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PWIpO1c9YztjPWEuZXhwaXJhdGlvblRpbWU7MCE9PWMmJlhoKGEsYyk7WHx8V3x8WWgoMTA3Mzc0MTgyMywhMSl9ZnVuY3Rpb24gb2YoKXtudWxsIT09UWgmJkJlKFFoKTtudWxsIT09UmgmJlJoKCl9XG5mdW5jdGlvbiBaaChhLGIpe09oPUtoPSEwO2EuY3VycmVudD09PWI/eChcIjE3N1wiKTp2b2lkIDA7dmFyIGM9YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU7MD09PWM/eChcIjI2MVwiKTp2b2lkIDA7YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZD1iLmV4cGlyYXRpb25UaW1lLGU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lO2VmKGEsZT5kP2U6ZCk7SWguY3VycmVudD1udWxsO2Q9dm9pZCAwOzE8Yi5lZmZlY3RUYWc/bnVsbCE9PWIubGFzdEVmZmVjdD8oYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YixkPWIuZmlyc3RFZmZlY3QpOmQ9YjpkPWIuZmlyc3RFZmZlY3Q7dWU9QmQ7dmU9UGQoKTtCZD0hMTtmb3IoVj1kO251bGwhPT1WOyl7ZT0hMTt2YXIgZj12b2lkIDA7dHJ5e1VoKCl9Y2F0Y2goaCl7ZT0hMCxmPWh9ZSYmKG51bGw9PT1WP3goXCIxNzhcIik6dm9pZCAwLHNoKFYsZiksbnVsbCE9PVYmJihWPVYubmV4dEVmZmVjdCkpfWZvcihWPWQ7bnVsbCE9PVY7KXtlPSExO1xuZj12b2lkIDA7dHJ5e1RoKCl9Y2F0Y2goaCl7ZT0hMCxmPWh9ZSYmKG51bGw9PT1WP3goXCIxNzhcIik6dm9pZCAwLHNoKFYsZiksbnVsbCE9PVYmJihWPVYubmV4dEVmZmVjdCkpfVFkKHZlKTt2ZT1udWxsO0JkPSEhdWU7dWU9bnVsbDthLmN1cnJlbnQ9Yjtmb3IoVj1kO251bGwhPT1WOyl7ZT0hMTtmPXZvaWQgMDt0cnl7VmgoYSxjKX1jYXRjaChoKXtlPSEwLGY9aH1lJiYobnVsbD09PVY/eChcIjE3OFwiKTp2b2lkIDAsc2goVixmKSxudWxsIT09ViYmKFY9Vi5uZXh0RWZmZWN0KSl9aWYobnVsbCE9PWQmJm51bGwhPT1QaCl7dmFyIGc9V2guYmluZChudWxsLGEsZCk7UWg9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxmdW5jdGlvbigpe3JldHVybiBBZShnKX0pO1JoPWd9S2g9T2g9ITE7XCJmdW5jdGlvblwiPT09dHlwZW9mIFFlJiZRZShiLnN0YXRlTm9kZSk7Yz1iLmV4cGlyYXRpb25UaW1lO2I9Yi5jaGlsZEV4cGlyYXRpb25UaW1lO2I9XG5iPmM/YjpjOzA9PT1iJiYoRmg9bnVsbCk7JGgoYSxiKX1cbmZ1bmN0aW9uIGFpKGEpe2Zvcig7Oyl7dmFyIGI9YS5hbHRlcm5hdGUsYz1hLnJldHVybixkPWEuc2libGluZztpZigwPT09KGEuZWZmZWN0VGFnJjEwMjQpKXtUPWE7YTp7dmFyIGU9YjtiPWE7dmFyIGY9VTt2YXIgZz1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpicmVhaztjYXNlIDE2OmJyZWFrO2Nhc2UgMTU6Y2FzZSAwOmJyZWFrO2Nhc2UgMTpKKGIudHlwZSkmJktlKGIpO2JyZWFrO2Nhc2UgMzpLZihiKTtMZShiKTtnPWIuc3RhdGVOb2RlO2cucGVuZGluZ0NvbnRleHQmJihnLmNvbnRleHQ9Zy5wZW5kaW5nQ29udGV4dCxnLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1lfHxudWxsPT09ZS5jaGlsZClFZyhiKSxiLmVmZmVjdFRhZyY9LTM7bWgoYik7YnJlYWs7Y2FzZSA1Ok1mKGIpO3ZhciBoPUlmKEhmLmN1cnJlbnQpO2Y9Yi50eXBlO2lmKG51bGwhPT1lJiZudWxsIT1iLnN0YXRlTm9kZSluaChlLGIsZixnLGgpLGUucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9XG4xMjgpO2Vsc2UgaWYoZyl7dmFyIGw9SWYoTi5jdXJyZW50KTtpZihFZyhiKSl7Zz1iO2U9Zy5zdGF0ZU5vZGU7dmFyIGs9Zy50eXBlLG09Zy5tZW1vaXplZFByb3BzLHA9aDtlW0ZhXT1nO2VbR2FdPW07Zj12b2lkIDA7aD1rO3N3aXRjaChoKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkUoXCJsb2FkXCIsZSk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGs9MDtrPGFiLmxlbmd0aDtrKyspRShhYltrXSxlKTticmVhaztjYXNlIFwic291cmNlXCI6RShcImVycm9yXCIsZSk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RShcImVycm9yXCIsZSk7RShcImxvYWRcIixlKTticmVhaztjYXNlIFwiZm9ybVwiOkUoXCJyZXNldFwiLGUpO0UoXCJzdWJtaXRcIixlKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkUoXCJ0b2dnbGVcIixlKTticmVhaztjYXNlIFwiaW5wdXRcIjp3YyhlLG0pO0UoXCJpbnZhbGlkXCIsZSk7c2UocCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFtLm11bHRpcGxlfTtFKFwiaW52YWxpZFwiLGUpO3NlKHAsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjZShlLG0pLEUoXCJpbnZhbGlkXCIsZSksc2UocCxcIm9uQ2hhbmdlXCIpfXFlKGgsbSk7az1udWxsO2ZvcihmIGluIG0pbS5oYXNPd25Qcm9wZXJ0eShmKSYmKGw9bVtmXSxcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgbD9lLnRleHRDb250ZW50IT09bCYmKGs9W1wiY2hpbGRyZW5cIixsXSk6XCJudW1iZXJcIj09PXR5cGVvZiBsJiZlLnRleHRDb250ZW50IT09XCJcIitsJiYoaz1bXCJjaGlsZHJlblwiLFwiXCIrbF0pOnJhLmhhc093blByb3BlcnR5KGYpJiZudWxsIT1sJiZzZShwLGYpKTtzd2l0Y2goaCl7Y2FzZSBcImlucHV0XCI6UmIoZSk7QWMoZSxtLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpSYihlKTtlZShlLG0pO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgbS5vbkNsaWNrJiZcbihlLm9uY2xpY2s9dGUpfWY9aztnLnVwZGF0ZVF1ZXVlPWY7Zz1udWxsIT09Zj8hMDohMTtnJiZraChiKX1lbHNle209YjtwPWY7ZT1nO2s9OT09PWgubm9kZVR5cGU/aDpoLm93bmVyRG9jdW1lbnQ7bD09PWZlLmh0bWwmJihsPWdlKHApKTtsPT09ZmUuaHRtbD9cInNjcmlwdFwiPT09cD8oZT1rLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksZS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixrPWUucmVtb3ZlQ2hpbGQoZS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBlLmlzP2s9ay5jcmVhdGVFbGVtZW50KHAse2lzOmUuaXN9KTooaz1rLmNyZWF0ZUVsZW1lbnQocCksXCJzZWxlY3RcIj09PXAmJihwPWssZS5tdWx0aXBsZT9wLm11bHRpcGxlPSEwOmUuc2l6ZSYmKHAuc2l6ZT1lLnNpemUpKSk6az1rLmNyZWF0ZUVsZW1lbnROUyhsLHApO2U9aztlW0ZhXT1tO2VbR2FdPWc7bGgoZSxiLCExLCExKTtwPWU7az1mO209Zzt2YXIgdD1oLEE9cmUoayxtKTtzd2l0Y2goayl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpFKFwibG9hZFwiLFxucCk7aD1tO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihoPTA7aDxhYi5sZW5ndGg7aCsrKUUoYWJbaF0scCk7aD1tO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpFKFwiZXJyb3JcIixwKTtoPW07YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RShcImVycm9yXCIscCk7RShcImxvYWRcIixwKTtoPW07YnJlYWs7Y2FzZSBcImZvcm1cIjpFKFwicmVzZXRcIixwKTtFKFwic3VibWl0XCIscCk7aD1tO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RShcInRvZ2dsZVwiLHApO2g9bTticmVhaztjYXNlIFwiaW5wdXRcIjp3YyhwLG0pO2g9dmMocCxtKTtFKFwiaW52YWxpZFwiLHApO3NlKHQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6aD0kZChwLG0pO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpwLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhbS5tdWx0aXBsZX07aD1uKHt9LG0se3ZhbHVlOnZvaWQgMH0pO0UoXCJpbnZhbGlkXCIscCk7c2UodCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmNlKHAsXG5tKTtoPWJlKHAsbSk7RShcImludmFsaWRcIixwKTtzZSh0LFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpoPW19cWUoayxoKTtsPXZvaWQgMDt2YXIgdj1rLFI9cCx1PWg7Zm9yKGwgaW4gdSlpZih1Lmhhc093blByb3BlcnR5KGwpKXt2YXIgcT11W2xdO1wic3R5bGVcIj09PWw/b2UoUixxKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhxPXE/cS5fX2h0bWw6dm9pZCAwLG51bGwhPXEmJmplKFIscSkpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIj09PXR5cGVvZiBxPyhcInRleHRhcmVhXCIhPT12fHxcIlwiIT09cSkmJmtlKFIscSk6XCJudW1iZXJcIj09PXR5cGVvZiBxJiZrZShSLFwiXCIrcSk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKHJhLmhhc093blByb3BlcnR5KGwpP251bGwhPXEmJnNlKHQsbCk6bnVsbCE9cSYmdGMoUixsLHEsQSkpfXN3aXRjaChrKXtjYXNlIFwiaW5wdXRcIjpSYihwKTtcbkFjKHAsbSwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6UmIocCk7ZWUocCxtKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9bS52YWx1ZSYmcC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrdWMobS52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpoPXA7aC5tdWx0aXBsZT0hIW0ubXVsdGlwbGU7cD1tLnZhbHVlO251bGwhPXA/YWUoaCwhIW0ubXVsdGlwbGUscCwhMSk6bnVsbCE9bS5kZWZhdWx0VmFsdWUmJmFlKGgsISFtLm11bHRpcGxlLG0uZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLm9uQ2xpY2smJihwLm9uY2xpY2s9dGUpfShnPXdlKGYsZykpJiZraChiKTtiLnN0YXRlTm9kZT1lfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2UgbnVsbD09PWIuc3RhdGVOb2RlP3goXCIxNjZcIik6dm9pZCAwO2JyZWFrO2Nhc2UgNjplJiZudWxsIT1iLnN0YXRlTm9kZT9vaChlLGIsZS5tZW1vaXplZFByb3BzLGcpOihcInN0cmluZ1wiIT09XG50eXBlb2YgZyYmKG51bGw9PT1iLnN0YXRlTm9kZT94KFwiMTY2XCIpOnZvaWQgMCksZT1JZihIZi5jdXJyZW50KSxJZihOLmN1cnJlbnQpLEVnKGIpPyhnPWIsZj1nLnN0YXRlTm9kZSxlPWcubWVtb2l6ZWRQcm9wcyxmW0ZhXT1nLChnPWYubm9kZVZhbHVlIT09ZSkmJmtoKGIpKTooZj1iLGc9KDk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShnKSxnW0ZhXT1iLGYuc3RhdGVOb2RlPWcpKTticmVhaztjYXNlIDExOmJyZWFrO2Nhc2UgMTM6Zz1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpe2IuZXhwaXJhdGlvblRpbWU9ZjtUPWI7YnJlYWsgYX1nPW51bGwhPT1nO2Y9bnVsbCE9PWUmJm51bGwhPT1lLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJiFnJiZmJiYoZT1lLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWUmJihoPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWg/KGIuZmlyc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9aCk6KGIuZmlyc3RFZmZlY3Q9XG5iLmxhc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9bnVsbCksZS5lZmZlY3RUYWc9OCkpO2lmKGd8fGYpYi5lZmZlY3RUYWd8PTQ7YnJlYWs7Y2FzZSA3OmJyZWFrO2Nhc2UgODpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgNDpLZihiKTttaChiKTticmVhaztjYXNlIDEwOlpnKGIpO2JyZWFrO2Nhc2UgOTpicmVhaztjYXNlIDE0OmJyZWFrO2Nhc2UgMTc6SihiLnR5cGUpJiZLZShiKTticmVhaztjYXNlIDE4OmJyZWFrO2RlZmF1bHQ6eChcIjE1NlwiKX1UPW51bGx9Yj1hO2lmKDE9PT1VfHwxIT09Yi5jaGlsZEV4cGlyYXRpb25UaW1lKXtnPTA7Zm9yKGY9Yi5jaGlsZDtudWxsIT09ZjspZT1mLmV4cGlyYXRpb25UaW1lLGg9Zi5jaGlsZEV4cGlyYXRpb25UaW1lLGU+ZyYmKGc9ZSksaD5nJiYoZz1oKSxmPWYuc2libGluZztiLmNoaWxkRXhwaXJhdGlvblRpbWU9Z31pZihudWxsIT09VClyZXR1cm4gVDtudWxsIT09YyYmMD09PShjLmVmZmVjdFRhZyYxMDI0KSYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiZcbihjLmZpcnN0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKX1lbHNle2E9R2goYSxVKTtpZihudWxsIT09YSlyZXR1cm4gYS5lZmZlY3RUYWcmPTEwMjMsYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PW51bGwsYy5lZmZlY3RUYWd8PTEwMjQpfWlmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNlIGJyZWFrfXJldHVybiBudWxsfVxuZnVuY3Rpb24gYmkoYSl7dmFyIGI9VGcoYS5hbHRlcm5hdGUsYSxVKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPWFpKGEpKTtJaC5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBjaShhLGIpe0toP3goXCIyNDNcIik6dm9pZCAwO29mKCk7S2g9ITA7dmFyIGM9SGguY3VycmVudDtIaC5jdXJyZW50PWtnO3ZhciBkPWEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT247aWYoZCE9PVV8fGEhPT1MaHx8bnVsbD09PVQpU2goKSxMaD1hLFU9ZCxUPVhlKExoLmN1cnJlbnQsbnVsbCxVKSxhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBlPSExO2Rve3RyeXtpZihiKWZvcig7bnVsbCE9PVQmJiFkaSgpOylUPWJpKFQpO2Vsc2UgZm9yKDtudWxsIT09VDspVD1iaShUKX1jYXRjaCh1KXtpZihZZz1YZz1XZz1udWxsLGxnKCksbnVsbD09PVQpZT0hMCxEaCh1KTtlbHNle251bGw9PT1UP3goXCIyNzFcIik6dm9pZCAwO3ZhciBmPVQsZz1mLnJldHVybjtpZihudWxsPT09ZyllPSEwLERoKHUpO2Vsc2V7YTp7dmFyIGg9YSxsPWcsaz1mLG09dTtnPVU7ay5lZmZlY3RUYWd8PTEwMjQ7ay5maXJzdEVmZmVjdD1rLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09XG5tJiZcIm9iamVjdFwiPT09dHlwZW9mIG0mJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBtLnRoZW4pe3ZhciBwPW07bT1sO3ZhciB0PS0xLEE9LTE7ZG97aWYoMTM9PT1tLnRhZyl7dmFyIHY9bS5hbHRlcm5hdGU7aWYobnVsbCE9PXYmJih2PXYubWVtb2l6ZWRTdGF0ZSxudWxsIT09dikpe0E9MTAqKDEwNzM3NDE4MjItdi50aW1lZE91dEF0KTticmVha312PW0ucGVuZGluZ1Byb3BzLm1heER1cmF0aW9uO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgdilpZigwPj12KXQ9MDtlbHNlIGlmKC0xPT09dHx8djx0KXQ9dn1tPW0ucmV0dXJufXdoaWxlKG51bGwhPT1tKTttPWw7ZG97aWYodj0xMz09PW0udGFnKXY9dm9pZCAwPT09bS5tZW1vaXplZFByb3BzLmZhbGxiYWNrPyExOm51bGw9PT1tLm1lbW9pemVkU3RhdGU7aWYodil7bD1tLnVwZGF0ZVF1ZXVlO251bGw9PT1sPyhsPW5ldyBTZXQsbC5hZGQocCksbS51cGRhdGVRdWV1ZT1sKTpsLmFkZChwKTtpZigwPT09KG0ubW9kZSYxKSl7bS5lZmZlY3RUYWd8PVxuNjQ7ay5lZmZlY3RUYWcmPS0xOTU3OzE9PT1rLnRhZyYmKG51bGw9PT1rLmFsdGVybmF0ZT9rLnRhZz0xNzooZz1uZigxMDczNzQxODIzKSxnLnRhZz1zZixwZihrLGcpKSk7ay5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2JyZWFrIGF9az1oO2w9Zzt2YXIgUj1rLnBpbmdDYWNoZTtudWxsPT09Uj8oUj1rLnBpbmdDYWNoZT1uZXcgQmgsdj1uZXcgU2V0LFIuc2V0KHAsdikpOih2PVIuZ2V0KHApLHZvaWQgMD09PXYmJih2PW5ldyBTZXQsUi5zZXQocCx2KSkpO3YuaGFzKGwpfHwodi5hZGQobCksaz1laS5iaW5kKG51bGwsayxwLGwpLHAudGhlbihrLGspKTstMT09PXQ/aD0xMDczNzQxODIzOigtMT09PUEmJihBPTEwKigxMDczNzQxODIyLWdmKGgsZykpLTVFMyksaD1BK3QpOzA8PWgmJk1oPGgmJihNaD1oKTttLmVmZmVjdFRhZ3w9MjA0ODttLmV4cGlyYXRpb25UaW1lPWc7YnJlYWsgYX1tPW0ucmV0dXJufXdoaWxlKG51bGwhPT1tKTttPUVycm9yKChpYyhrLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1xuXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIitqYyhrKSl9Tmg9ITA7bT1qaChtLGspO2g9bDtkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoLmVmZmVjdFRhZ3w9MjA0ODtoLmV4cGlyYXRpb25UaW1lPWc7Zz1DaChoLG0sZyk7ZWgoaCxnKTticmVhayBhO2Nhc2UgMTppZih0PW0sQT1oLnR5cGUsaz1oLnN0YXRlTm9kZSwwPT09KGguZWZmZWN0VGFnJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBBLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PWsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PUZofHwhRmguaGFzKGspKSkpe2guZWZmZWN0VGFnfD0yMDQ4O1xuaC5leHBpcmF0aW9uVGltZT1nO2c9RWgoaCx0LGcpO2VoKGgsZyk7YnJlYWsgYX19aD1oLnJldHVybn13aGlsZShudWxsIT09aCl9VD1haShmKTtjb250aW51ZX19fWJyZWFrfXdoaWxlKDEpO0toPSExO0hoLmN1cnJlbnQ9YztZZz1YZz1XZz1udWxsO2xnKCk7aWYoZSlMaD1udWxsLGEuZmluaXNoZWRXb3JrPW51bGw7ZWxzZSBpZihudWxsIT09VClhLmZpbmlzaGVkV29yaz1udWxsO2Vsc2V7Yz1hLmN1cnJlbnQuYWx0ZXJuYXRlO251bGw9PT1jP3goXCIyODFcIik6dm9pZCAwO0xoPW51bGw7aWYoTmgpe2U9YS5sYXRlc3RQZW5kaW5nVGltZTtmPWEubGF0ZXN0U3VzcGVuZGVkVGltZTtnPWEubGF0ZXN0UGluZ2VkVGltZTtpZigwIT09ZSYmZTxkfHwwIT09ZiYmZjxkfHwwIT09ZyYmZzxkKXtmZihhLGQpO2ZpKGEsYyxkLGEuZXhwaXJhdGlvblRpbWUsLTEpO3JldHVybn1pZighYS5kaWRFcnJvciYmYil7YS5kaWRFcnJvcj0hMDtkPWEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249ZDtcbmI9YS5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2ZpKGEsYyxkLGIsLTEpO3JldHVybn19YiYmLTEhPT1NaD8oZmYoYSxkKSxiPTEwKigxMDczNzQxODIyLWdmKGEsZCkpLGI8TWgmJihNaD1iKSxiPTEwKigxMDczNzQxODIyLWxmKCkpLGI9TWgtYixmaShhLGMsZCxhLmV4cGlyYXRpb25UaW1lLDA+Yj8wOmIpKTooYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9ZCxhLmZpbmlzaGVkV29yaz1jKX19XG5mdW5jdGlvbiBzaChhLGIpe2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe3N3aXRjaChjLnRhZyl7Y2FzZSAxOnZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1GaHx8IUZoLmhhcyhkKSkpe2E9amgoYixhKTthPUVoKGMsYSwxMDczNzQxODIzKTtwZihjLGEpO3FmKGMsMTA3Mzc0MTgyMyk7cmV0dXJufWJyZWFrO2Nhc2UgMzphPWpoKGIsYSk7YT1DaChjLGEsMTA3Mzc0MTgyMyk7cGYoYyxhKTtxZihjLDEwNzM3NDE4MjMpO3JldHVybn1jPWMucmV0dXJufTM9PT1hLnRhZyYmKGM9amgoYixhKSxjPUNoKGEsYywxMDczNzQxODIzKSxwZihhLGMpLHFmKGEsMTA3Mzc0MTgyMykpfVxuZnVuY3Rpb24gbWYoYSxiKXt2YXIgYz1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsKCksZD12b2lkIDA7aWYoMD09PShiLm1vZGUmMSkpZD0xMDczNzQxODIzO2Vsc2UgaWYoS2gmJiFPaClkPVU7ZWxzZXtzd2l0Y2goYyl7Y2FzZSByLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5OmQ9MTA3Mzc0MTgyMzticmVhaztjYXNlIHIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk6ZD0xMDczNzQxODIyLTEwKigoKDEwNzM3NDE4MjItYSsxNSkvMTB8MCkrMSk7YnJlYWs7Y2FzZSByLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5OmQ9MTA3Mzc0MTgyMi0yNSooKCgxMDczNzQxODIyLWErNTAwKS8yNXwwKSsxKTticmVhaztjYXNlIHIudW5zdGFibGVfTG93UHJpb3JpdHk6Y2FzZSByLnVuc3RhYmxlX0lkbGVQcmlvcml0eTpkPTE7YnJlYWs7ZGVmYXVsdDp4KFwiMzEzXCIpfW51bGwhPT1MaCYmZD09PVUmJi0tZH1jPT09ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSYmXG4oMD09PWdpfHxkPGdpKSYmKGdpPWQpO3JldHVybiBkfWZ1bmN0aW9uIGVpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7aWYobnVsbCE9PUxoJiZVPT09YylMaD1udWxsO2Vsc2UgaWYoYj1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZSxkPWEubGF0ZXN0U3VzcGVuZGVkVGltZSwwIT09YiYmYzw9YiYmYz49ZCl7YS5kaWRFcnJvcj0hMTtiPWEubGF0ZXN0UGluZ2VkVGltZTtpZigwPT09Ynx8Yj5jKWEubGF0ZXN0UGluZ2VkVGltZT1jO2RmKGMsYSk7Yz1hLmV4cGlyYXRpb25UaW1lOzAhPT1jJiZYaChhLGMpfX1mdW5jdGlvbiBBaChhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPWxmKCk7Yj1tZihiLGEpO2E9aGkoYSxiKTtudWxsIT09YSYmKGNmKGEsYiksYj1hLmV4cGlyYXRpb25UaW1lLDAhPT1iJiZYaChhLGIpKX1cbmZ1bmN0aW9uIGhpKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybixlPW51bGw7aWYobnVsbD09PWQmJjM9PT1hLnRhZyllPWEuc3RhdGVOb2RlO2Vsc2UgZm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihkLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7bnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1kLnJldHVybiYmMz09PWQudGFnKXtlPWQuc3RhdGVOb2RlO2JyZWFrfWQ9ZC5yZXR1cm59cmV0dXJuIGV9XG5mdW5jdGlvbiBxZihhLGIpe2E9aGkoYSxiKTtudWxsIT09YSYmKCFLaCYmMCE9PVUmJmI+VSYmU2goKSxjZihhLGIpLEtoJiYhT2gmJkxoPT09YXx8WGgoYSxhLmV4cGlyYXRpb25UaW1lKSxpaT5qaSYmKGlpPTAseChcIjE4NVwiKSkpfWZ1bmN0aW9uIGtpKGEsYixjLGQsZSl7cmV0dXJuIHIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KHIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfXZhciBsaT1udWxsLFk9bnVsbCxtaT0wLG5pPXZvaWQgMCxXPSExLG9pPW51bGwsWj0wLGdpPTAscGk9ITEscWk9bnVsbCxYPSExLHJpPSExLHNpPW51bGwsdGk9ci51bnN0YWJsZV9ub3coKSx1aT0xMDczNzQxODIyLSh0aS8xMHwwKSx2aT11aSxqaT01MCxpaT0wLHdpPW51bGw7ZnVuY3Rpb24geGkoKXt1aT0xMDczNzQxODIyLSgoci51bnN0YWJsZV9ub3coKS10aSkvMTB8MCl9XG5mdW5jdGlvbiB5aShhLGIpe2lmKDAhPT1taSl7aWYoYjxtaSlyZXR1cm47bnVsbCE9PW5pJiZyLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrKG5pKX1taT1iO2E9ci51bnN0YWJsZV9ub3coKS10aTtuaT1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soemkse3RpbWVvdXQ6MTAqKDEwNzM3NDE4MjItYiktYX0pfWZ1bmN0aW9uIGZpKGEsYixjLGQsZSl7YS5leHBpcmF0aW9uVGltZT1kOzAhPT1lfHxkaSgpPzA8ZSYmKGEudGltZW91dEhhbmRsZT15ZShBaS5iaW5kKG51bGwsYSxiLGMpLGUpKTooYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YyxhLmZpbmlzaGVkV29yaz1iKX1mdW5jdGlvbiBBaShhLGIsYyl7YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YzthLmZpbmlzaGVkV29yaz1iO3hpKCk7dmk9dWk7QmkoYSxjKX1mdW5jdGlvbiAkaChhLGIpe2EuZXhwaXJhdGlvblRpbWU9YjthLmZpbmlzaGVkV29yaz1udWxsfVxuZnVuY3Rpb24gbGYoKXtpZihXKXJldHVybiB2aTtDaSgpO2lmKDA9PT1afHwxPT09Wil4aSgpLHZpPXVpO3JldHVybiB2aX1mdW5jdGlvbiBYaChhLGIpe251bGw9PT1hLm5leHRTY2hlZHVsZWRSb290PyhhLmV4cGlyYXRpb25UaW1lPWIsbnVsbD09PVk/KGxpPVk9YSxhLm5leHRTY2hlZHVsZWRSb290PWEpOihZPVkubmV4dFNjaGVkdWxlZFJvb3Q9YSxZLm5leHRTY2hlZHVsZWRSb290PWxpKSk6Yj5hLmV4cGlyYXRpb25UaW1lJiYoYS5leHBpcmF0aW9uVGltZT1iKTtXfHwoWD9yaSYmKG9pPWEsWj0xMDczNzQxODIzLERpKGEsMTA3Mzc0MTgyMywhMSkpOjEwNzM3NDE4MjM9PT1iP1loKDEwNzM3NDE4MjMsITEpOnlpKGEsYikpfVxuZnVuY3Rpb24gQ2koKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09WSlmb3IodmFyIGM9WSxkPWxpO251bGwhPT1kOyl7dmFyIGU9ZC5leHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1ZP3goXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtsaT1ZPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1saSlsaT1lPWQubmV4dFNjaGVkdWxlZFJvb3QsWS5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1ZKXtZPWM7WS5uZXh0U2NoZWR1bGVkUm9vdD1saTtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PWQubmV4dFNjaGVkdWxlZFJvb3QsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Q9Yy5uZXh0U2NoZWR1bGVkUm9vdH1lbHNle2U+YSYmKGE9ZSxiPWQpO2lmKGQ9PT1ZKWJyZWFrO2lmKDEwNzM3NDE4MjM9PT1cbmEpYnJlYWs7Yz1kO2Q9ZC5uZXh0U2NoZWR1bGVkUm9vdH19b2k9YjtaPWF9dmFyIEVpPSExO2Z1bmN0aW9uIGRpKCl7cmV0dXJuIEVpPyEwOnIudW5zdGFibGVfc2hvdWxkWWllbGQoKT9FaT0hMDohMX1mdW5jdGlvbiB6aSgpe3RyeXtpZighZGkoKSYmbnVsbCE9PWxpKXt4aSgpO3ZhciBhPWxpO2Rve3ZhciBiPWEuZXhwaXJhdGlvblRpbWU7MCE9PWImJnVpPD1iJiYoYS5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj11aSk7YT1hLm5leHRTY2hlZHVsZWRSb290fXdoaWxlKGEhPT1saSl9WWgoMCwhMCl9ZmluYWxseXtFaT0hMX19XG5mdW5jdGlvbiBZaChhLGIpe0NpKCk7aWYoYilmb3IoeGkoKSx2aT11aTtudWxsIT09b2kmJjAhPT1aJiZhPD1aJiYhKEVpJiZ1aT5aKTspRGkob2ksWix1aT5aKSxDaSgpLHhpKCksdmk9dWk7ZWxzZSBmb3IoO251bGwhPT1vaSYmMCE9PVomJmE8PVo7KURpKG9pLFosITEpLENpKCk7YiYmKG1pPTAsbmk9bnVsbCk7MCE9PVomJnlpKG9pLFopO2lpPTA7d2k9bnVsbDtpZihudWxsIT09c2kpZm9yKGE9c2ksc2k9bnVsbCxiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07dHJ5e2MuX29uQ29tcGxldGUoKX1jYXRjaChkKXtwaXx8KHBpPSEwLHFpPWQpfX1pZihwaSl0aHJvdyBhPXFpLHFpPW51bGwscGk9ITEsYTt9ZnVuY3Rpb24gQmkoYSxiKXtXP3goXCIyNTNcIik6dm9pZCAwO29pPWE7Wj1iO0RpKGEsYiwhMSk7WWgoMTA3Mzc0MTgyMywhMSl9XG5mdW5jdGlvbiBEaShhLGIsYyl7Vz94KFwiMjQ1XCIpOnZvaWQgMDtXPSEwO2lmKGMpe3ZhciBkPWEuZmluaXNoZWRXb3JrO251bGwhPT1kP0ZpKGEsZCxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxkPWEudGltZW91dEhhbmRsZSwtMSE9PWQmJihhLnRpbWVvdXRIYW5kbGU9LTEsemUoZCkpLGNpKGEsYyksZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZCYmKGRpKCk/YS5maW5pc2hlZFdvcms9ZDpGaShhLGQsYikpKX1lbHNlIGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQ/RmkoYSxkLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGQ9YS50aW1lb3V0SGFuZGxlLC0xIT09ZCYmKGEudGltZW91dEhhbmRsZT0tMSx6ZShkKSksY2koYSxjKSxkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kJiZGaShhLGQsYikpO1c9ITF9XG5mdW5jdGlvbiBGaShhLGIsYyl7dmFyIGQ9YS5maXJzdEJhdGNoO2lmKG51bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZT49YyYmKG51bGw9PT1zaT9zaT1bZF06c2kucHVzaChkKSxkLl9kZWZlcikpe2EuZmluaXNoZWRXb3JrPWI7YS5leHBpcmF0aW9uVGltZT0wO3JldHVybn1hLmZpbmlzaGVkV29yaz1udWxsO2E9PT13aT9paSsrOih3aT1hLGlpPTApO3IudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KHIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZnVuY3Rpb24oKXtaaChhLGIpfSl9ZnVuY3Rpb24gRGgoYSl7bnVsbD09PW9pP3goXCIyNDZcIik6dm9pZCAwO29pLmV4cGlyYXRpb25UaW1lPTA7cGl8fChwaT0hMCxxaT1hKX1mdW5jdGlvbiBHaShhLGIpe3ZhciBjPVg7WD0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsoWD1jKXx8V3x8WWgoMTA3Mzc0MTgyMywhMSl9fVxuZnVuY3Rpb24gSGkoYSxiKXtpZihYJiYhcmkpe3JpPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e3JpPSExfX1yZXR1cm4gYShiKX1mdW5jdGlvbiBJaShhLGIsYyl7WHx8V3x8MD09PWdpfHwoWWgoZ2ksITEpLGdpPTApO3ZhciBkPVg7WD0hMDt0cnl7cmV0dXJuIHIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KHIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMpfSl9ZmluYWxseXsoWD1kKXx8V3x8WWgoMTA3Mzc0MTgyMywhMSl9fVxuZnVuY3Rpb24gSmkoYSxiLGMsZCxlKXt2YXIgZj1iLmN1cnJlbnQ7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtiOnsyPT09ZWQoYykmJjE9PT1jLnRhZz92b2lkIDA6eChcIjE3MFwiKTt2YXIgZz1jO2Rve3N3aXRjaChnLnRhZyl7Y2FzZSAzOmc9Zy5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihKKGcudHlwZSkpe2c9Zy5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19Zz1nLnJldHVybn13aGlsZShudWxsIT09Zyk7eChcIjE3MVwiKTtnPXZvaWQgMH1pZigxPT09Yy50YWcpe3ZhciBoPWMudHlwZTtpZihKKGgpKXtjPU5lKGMsaCxnKTticmVhayBhfX1jPWd9ZWxzZSBjPUhlO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9ZTtlPW5mKGQpO2UucGF5bG9hZD17ZWxlbWVudDphfTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtcbm9mKCk7cGYoZixlKTtxZihmLGQpO3JldHVybiBkfWZ1bmN0aW9uIEtpKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPWxmKCk7ZT1tZihmLGUpO3JldHVybiBKaShhLGIsYyxlLGQpfWZ1bmN0aW9uIExpKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gTWkoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjpXYixrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbkFiPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6eWMoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPUthKGQpO2U/dm9pZCAwOngoXCI5MFwiKTtTYihkKTt5YyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZGUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmFlKGEsISFjLm11bHRpcGxlLGIsITEpfX07XG5mdW5jdGlvbiBOaShhKXt2YXIgYj0xMDczNzQxODIyLTI1KigoKDEwNzM3NDE4MjItbGYoKSs1MDApLzI1fDApKzEpO2I+PUpoJiYoYj1KaC0xKTt0aGlzLl9leHBpcmF0aW9uVGltZT1KaD1iO3RoaXMuX3Jvb3Q9YTt0aGlzLl9jYWxsYmFja3M9dGhpcy5fbmV4dD1udWxsO3RoaXMuX2hhc0NoaWxkcmVuPXRoaXMuX2RpZENvbXBsZXRlPSExO3RoaXMuX2NoaWxkcmVuPW51bGw7dGhpcy5fZGVmZXI9ITB9TmkucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt0aGlzLl9kZWZlcj92b2lkIDA6eChcIjI1MFwiKTt0aGlzLl9oYXNDaGlsZHJlbj0hMDt0aGlzLl9jaGlsZHJlbj1hO3ZhciBiPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxjPXRoaXMuX2V4cGlyYXRpb25UaW1lLGQ9bmV3IE9pO0ppKGEsYixudWxsLGMsZC5fb25Db21taXQpO3JldHVybiBkfTtcbk5pLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbk5pLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7dGhpcy5fZGVmZXImJm51bGwhPT1iP3ZvaWQgMDp4KFwiMjUxXCIpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O251bGw9PT1kP3goXCIyNTFcIik6dm9pZCAwO2QuX25leHQ9ZS5fbmV4dDt0aGlzLl9uZXh0PWI7YS5maXJzdEJhdGNoPXRoaXN9dGhpcy5fZGVmZXI9ITE7QmkoYSxjKTtiPXRoaXMuX25leHQ7dGhpcy5fbmV4dD1udWxsO2I9YS5maXJzdEJhdGNoPWI7bnVsbCE9PWImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PVxubnVsbCx0aGlzLl9kZWZlcj0hMX07TmkucHJvdG90eXBlLl9vbkNvbXBsZXRlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbXBsZXRlKXt0aGlzLl9kaWRDb21wbGV0ZT0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspKDAsYVtiXSkoKX19O2Z1bmN0aW9uIE9pKCl7dGhpcy5fY2FsbGJhY2tzPW51bGw7dGhpcy5fZGlkQ29tbWl0PSExO3RoaXMuX29uQ29tbWl0PXRoaXMuX29uQ29tbWl0LmJpbmQodGhpcyl9T2kucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tbWl0KWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbk9pLnByb3RvdHlwZS5fb25Db21taXQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tbWl0KXt0aGlzLl9kaWRDb21taXQ9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3goXCIxOTFcIixjKTp2b2lkIDA7YygpfX19O1xuZnVuY3Rpb24gUGkoYSxiLGMpe2I9SygzLG51bGwsbnVsbCxiPzM6MCk7YT17Y3VycmVudDpiLGNvbnRhaW5lckluZm86YSxwZW5kaW5nQ2hpbGRyZW46bnVsbCxwaW5nQ2FjaGU6bnVsbCxlYXJsaWVzdFBlbmRpbmdUaW1lOjAsbGF0ZXN0UGVuZGluZ1RpbWU6MCxlYXJsaWVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0UGluZ2VkVGltZTowLGRpZEVycm9yOiExLHBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTowLGZpbmlzaGVkV29yazpudWxsLHRpbWVvdXRIYW5kbGU6LTEsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpjLG5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uOjAsZXhwaXJhdGlvblRpbWU6MCxmaXJzdEJhdGNoOm51bGwsbmV4dFNjaGVkdWxlZFJvb3Q6bnVsbH07dGhpcy5faW50ZXJuYWxSb290PWIuc3RhdGVOb2RlPWF9XG5QaS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5faW50ZXJuYWxSb290LGQ9bmV3IE9pO2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJmQudGhlbihiKTtLaShhLGMsbnVsbCxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1BpLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdCxjPW5ldyBPaTthPXZvaWQgMD09PWE/bnVsbDphO251bGwhPT1hJiZjLnRoZW4oYSk7S2kobnVsbCxiLG51bGwsYy5fb25Db21taXQpO3JldHVybiBjfTtQaS5wcm90b3R5cGUubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLl9pbnRlcm5hbFJvb3QsZT1uZXcgT2k7Yz12b2lkIDA9PT1jP251bGw6YztudWxsIT09YyYmZS50aGVuKGMpO0tpKGIsZCxhLGUuX29uQ29tbWl0KTtyZXR1cm4gZX07XG5QaS5wcm90b3R5cGUuY3JlYXRlQmF0Y2g9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgTmkodGhpcyksYj1hLl9leHBpcmF0aW9uVGltZSxjPXRoaXMuX2ludGVybmFsUm9vdCxkPWMuZmlyc3RCYXRjaDtpZihudWxsPT09ZCljLmZpcnN0QmF0Y2g9YSxhLl9uZXh0PW51bGw7ZWxzZXtmb3IoYz1udWxsO251bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZT49YjspYz1kLGQ9ZC5fbmV4dDthLl9uZXh0PWQ7bnVsbCE9PWMmJihjLl9uZXh0PWEpfXJldHVybiBhfTtmdW5jdGlvbiBRaShhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9R2I9R2k7SGI9SWk7SWI9ZnVuY3Rpb24oKXtXfHwwPT09Z2l8fChZaChnaSwhMSksZ2k9MCl9O1xuZnVuY3Rpb24gUmkoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBQaShhLCExLGIpfVxuZnVuY3Rpb24gU2koYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBnPWU7ZT1mdW5jdGlvbigpe3ZhciBhPUxpKGYuX2ludGVybmFsUm9vdCk7Zy5jYWxsKGEpfX1udWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9UmkoYyxkKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9TGkoZi5faW50ZXJuYWxSb290KTtoLmNhbGwoYSl9fUhpKGZ1bmN0aW9uKCl7bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX0pfXJldHVybiBMaShmLl9pbnRlcm5hbFJvb3QpfVxuZnVuY3Rpb24gVGkoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtRaShiKT92b2lkIDA6eChcIjIwMFwiKTtyZXR1cm4gTWkoYSxiLG51bGwsYyl9XG52YXIgVmk9e2NyZWF0ZVBvcnRhbDpUaSxmaW5kRE9NTm9kZTpmdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2b2lkIDA9PT1iJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyP3goXCIxODhcIik6eChcIjI2OFwiLE9iamVjdC5rZXlzKGEpKSk7YT1oZChiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9LGh5ZHJhdGU6ZnVuY3Rpb24oYSxiLGMpe1FpKGIpP3ZvaWQgMDp4KFwiMjAwXCIpO3JldHVybiBTaShudWxsLGEsYiwhMCxjKX0scmVuZGVyOmZ1bmN0aW9uKGEsYixjKXtRaShiKT92b2lkIDA6eChcIjIwMFwiKTtyZXR1cm4gU2kobnVsbCxhLGIsITEsYyl9LHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLGQpe1FpKGMpP3ZvaWQgMDp4KFwiMjAwXCIpO251bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcj9cbngoXCIzOFwiKTp2b2lkIDA7cmV0dXJuIFNpKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe1FpKGEpP3ZvaWQgMDp4KFwiNDBcIik7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oSGkoZnVuY3Rpb24oKXtTaShudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsfSl9KSwhMCk6ITF9LHVuc3RhYmxlX2NyZWF0ZVBvcnRhbDpmdW5jdGlvbigpe3JldHVybiBUaS5hcHBseSh2b2lkIDAsYXJndW1lbnRzKX0sdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6R2ksdW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzOklpLGZsdXNoU3luYzpmdW5jdGlvbihhLGIpe1c/eChcIjE4N1wiKTp2b2lkIDA7dmFyIGM9WDtYPSEwO3RyeXtyZXR1cm4ga2koYSxiKX1maW5hbGx5e1g9YyxZaCgxMDczNzQxODIzLCExKX19LHVuc3RhYmxlX2NyZWF0ZVJvb3Q6VWksdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOmZ1bmN0aW9uKGEpe3ZhciBiPVxuWDtYPSEwO3RyeXtraShhKX1maW5hbGx5eyhYPWIpfHxXfHxZaCgxMDczNzQxODIzLCExKX19LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudHM6W0lhLEphLEthLEJhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSxwYSxRYSxmdW5jdGlvbihhKXt5YShhLFBhKX0sRWIsRmIsRGQsRGFdfX07ZnVuY3Rpb24gVWkoYSxiKXtRaShhKT92b2lkIDA6eChcIjI5OVwiLFwidW5zdGFibGVfY3JlYXRlUm9vdFwiKTtyZXR1cm4gbmV3IFBpKGEsITAsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfVxuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIFRlKG4oe30sYSx7b3ZlcnJpZGVQcm9wczpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOlRiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1oZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfX0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpIYSxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjguNlwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO3ZhciBXaT17ZGVmYXVsdDpWaX0sWGk9V2kmJlZpfHxXaTttb2R1bGUuZXhwb3J0cz1YaS5kZWZhdWx0fHxYaTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTMuNlxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBkPW51bGwsZT0hMSxnPTMsaz0tMSxsPS0xLG09ITEsbj0hMTtmdW5jdGlvbiBwKCl7aWYoIW0pe3ZhciBhPWQuZXhwaXJhdGlvblRpbWU7bj9xKCk6bj0hMDtyKHQsYSl9fVxuZnVuY3Rpb24gdSgpe3ZhciBhPWQsYj1kLm5leHQ7aWYoZD09PWIpZD1udWxsO2Vsc2V7dmFyIGM9ZC5wcmV2aW91cztkPWMubmV4dD1iO2IucHJldmlvdXM9Y31hLm5leHQ9YS5wcmV2aW91cz1udWxsO2M9YS5jYWxsYmFjaztiPWEuZXhwaXJhdGlvblRpbWU7YT1hLnByaW9yaXR5TGV2ZWw7dmFyIGY9ZyxRPWw7Zz1hO2w9Yjt0cnl7dmFyIGg9YygpfWZpbmFsbHl7Zz1mLGw9UX1pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgaClpZihoPXtjYWxsYmFjazpoLHByaW9yaXR5TGV2ZWw6YSxleHBpcmF0aW9uVGltZTpiLG5leHQ6bnVsbCxwcmV2aW91czpudWxsfSxudWxsPT09ZClkPWgubmV4dD1oLnByZXZpb3VzPWg7ZWxzZXtjPW51bGw7YT1kO2Rve2lmKGEuZXhwaXJhdGlvblRpbWU+PWIpe2M9YTticmVha31hPWEubmV4dH13aGlsZShhIT09ZCk7bnVsbD09PWM/Yz1kOmM9PT1kJiYoZD1oLHAoKSk7Yj1jLnByZXZpb3VzO2IubmV4dD1jLnByZXZpb3VzPWg7aC5uZXh0PWM7aC5wcmV2aW91cz1cbmJ9fWZ1bmN0aW9uIHYoKXtpZigtMT09PWsmJm51bGwhPT1kJiYxPT09ZC5wcmlvcml0eUxldmVsKXttPSEwO3RyeXtkbyB1KCk7d2hpbGUobnVsbCE9PWQmJjE9PT1kLnByaW9yaXR5TGV2ZWwpfWZpbmFsbHl7bT0hMSxudWxsIT09ZD9wKCk6bj0hMX19fWZ1bmN0aW9uIHQoYSl7bT0hMDt2YXIgYj1lO2U9YTt0cnl7aWYoYSlmb3IoO251bGwhPT1kOyl7dmFyIGM9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihkLmV4cGlyYXRpb25UaW1lPD1jKXtkbyB1KCk7d2hpbGUobnVsbCE9PWQmJmQuZXhwaXJhdGlvblRpbWU8PWMpfWVsc2UgYnJlYWt9ZWxzZSBpZihudWxsIT09ZCl7ZG8gdSgpO3doaWxlKG51bGwhPT1kJiYhdygpKX19ZmluYWxseXttPSExLGU9YixudWxsIT09ZD9wKCk6bj0hMSx2KCl9fVxudmFyIHg9RGF0ZSx5PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHo9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZT9yZXF1ZXN0QW5pbWF0aW9uRnJhbWU6dm9pZCAwLEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNhbmNlbEFuaW1hdGlvbkZyYW1lP2NhbmNlbEFuaW1hdGlvbkZyYW1lOnZvaWQgMCxDLEQ7ZnVuY3Rpb24gRShhKXtDPUEoZnVuY3Rpb24oYil7eihEKTthKGIpfSk7RD15KGZ1bmN0aW9uKCl7QihDKTthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSwxMDApfVxuaWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIEY9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gRi5ub3coKX19ZWxzZSBleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB4Lm5vdygpfTt2YXIgcixxLHcsRz1udWxsO1widW5kZWZpbmVkXCIhPT10eXBlb2Ygd2luZG93P0c9d2luZG93OlwidW5kZWZpbmVkXCIhPT10eXBlb2YgZ2xvYmFsJiYoRz1nbG9iYWwpO1xuaWYoRyYmRy5fc2NoZWRNb2NrKXt2YXIgSD1HLl9zY2hlZE1vY2s7cj1IWzBdO3E9SFsxXTt3PUhbMl07ZXhwb3J0cy51bnN0YWJsZV9ub3c9SFszXX1lbHNlIGlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBJPW51bGwsSj1mdW5jdGlvbihhKXtpZihudWxsIT09SSl0cnl7SShhKX1maW5hbGx5e0k9bnVsbH19O3I9ZnVuY3Rpb24oYSl7bnVsbCE9PUk/c2V0VGltZW91dChyLDAsYSk6KEk9YSxzZXRUaW1lb3V0KEosMCwhMSkpfTtxPWZ1bmN0aW9uKCl7ST1udWxsfTt3PWZ1bmN0aW9uKCl7cmV0dXJuITF9fWVsc2V7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlJiYoXCJmdW5jdGlvblwiIT09dHlwZW9mIEEmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIiksXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgQiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpKTt2YXIgSz1udWxsLEw9ITEsTT0tMSxOPSExLE89ITEsUD0wLFI9MzMsUz0zMzt3PWZ1bmN0aW9uKCl7cmV0dXJuIFA8PWV4cG9ydHMudW5zdGFibGVfbm93KCl9O3ZhciBUPW5ldyBNZXNzYWdlQ2hhbm5lbCxVPVQucG9ydDI7VC5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtMPSExO3ZhciBhPUssYj1NO0s9bnVsbDtNPS0xO3ZhciBjPWV4cG9ydHMudW5zdGFibGVfbm93KCksZj0hMTtpZigwPj1QLWMpaWYoLTEhPT1iJiZiPD1jKWY9ITA7ZWxzZXtOfHwoTj0hMCxFKFYpKTtLPWE7TT1iO3JldHVybn1pZihudWxsIT09YSl7Tz0hMDt0cnl7YShmKX1maW5hbGx5e089ITF9fX07XG52YXIgVj1mdW5jdGlvbihhKXtpZihudWxsIT09Syl7RShWKTt2YXIgYj1hLVArUztiPFMmJlI8Uz8oOD5iJiYoYj04KSxTPWI8Uj9SOmIpOlI9YjtQPWErUztMfHwoTD0hMCxVLnBvc3RNZXNzYWdlKHZvaWQgMCkpfWVsc2UgTj0hMX07cj1mdW5jdGlvbihhLGIpe0s9YTtNPWI7T3x8MD5iP1UucG9zdE1lc3NhZ2Uodm9pZCAwKTpOfHwoTj0hMCxFKFYpKX07cT1mdW5jdGlvbigpe0s9bnVsbDtMPSExO009LTF9fWV4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O1xuZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1nLGY9aztnPWE7az1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7Zz1jLGs9Zix2KCl9fTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKGcpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPWd9dmFyIGM9ZyxmPWs7Zz1iO2s9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e2c9YyxrPWYsdigpfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXt2YXIgYz0tMSE9PWs/azpleHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWImJlwibnVtYmVyXCI9PT10eXBlb2YgYi50aW1lb3V0KWI9YytiLnRpbWVvdXQ7ZWxzZSBzd2l0Y2goZyl7Y2FzZSAxOmI9YystMTticmVhaztjYXNlIDI6Yj1jKzI1MDticmVhaztjYXNlIDU6Yj1jKzEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmI9YysxRTQ7YnJlYWs7ZGVmYXVsdDpiPWMrNUUzfWE9e2NhbGxiYWNrOmEscHJpb3JpdHlMZXZlbDpnLGV4cGlyYXRpb25UaW1lOmIsbmV4dDpudWxsLHByZXZpb3VzOm51bGx9O2lmKG51bGw9PT1kKWQ9YS5uZXh0PWEucHJldmlvdXM9YSxwKCk7ZWxzZXtjPW51bGw7dmFyIGY9ZDtkb3tpZihmLmV4cGlyYXRpb25UaW1lPmIpe2M9ZjticmVha31mPWYubmV4dH13aGlsZShmIT09ZCk7bnVsbD09PWM/Yz1kOmM9PT1kJiYoZD1hLHAoKSk7XG5iPWMucHJldmlvdXM7Yi5uZXh0PWMucHJldmlvdXM9YTthLm5leHQ9YzthLnByZXZpb3VzPWJ9cmV0dXJuIGF9O2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9YS5uZXh0O2lmKG51bGwhPT1iKXtpZihiPT09YSlkPW51bGw7ZWxzZXthPT09ZCYmKGQ9Yik7dmFyIGM9YS5wcmV2aW91cztjLm5leHQ9YjtiLnByZXZpb3VzPWN9YS5uZXh0PWEucHJldmlvdXM9bnVsbH19O2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPWc7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9ZyxmPWs7Zz1iO2s9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7Zz1jLGs9Zix2KCl9fX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBnfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4hZSYmKG51bGwhPT1kJiZkLmV4cGlyYXRpb25UaW1lPGx8fHcoKSl9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtudWxsIT09ZCYmcCgpfTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGR9O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOC42XG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtcbnZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOlxuNjAxMTUscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O2Z1bmN0aW9uIHQoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSByOmNhc2UgcTpjYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiB2KGEpe3JldHVybiB0KGEpPT09bX1leHBvcnRzLnR5cGVPZj10O2V4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtcbmV4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9cjtleHBvcnRzLk1lbW89cTtleHBvcnRzLlBvcnRhbD1kO2V4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1xfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1uKX07ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKXx8dChhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT12O2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1rfTtcbmV4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PXJ9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09cX07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09Zn07XG5leHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1wfTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBSZWFjdFJlZHV4Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5leHBvcnQgZGVmYXVsdCBSZWFjdFJlZHV4Q29udGV4dDsiLCIvLyBEZWZhdWx0IHRvIGEgZHVtbXkgXCJiYXRjaFwiIGltcGxlbWVudGF0aW9uIHRoYXQganVzdCBydW5zIHRoZSBjYWxsYmFja1xuZnVuY3Rpb24gZGVmYXVsdE5vb3BCYXRjaChjYWxsYmFjaykge1xuICBjYWxsYmFjaygpO1xufVxuXG52YXIgYmF0Y2ggPSBkZWZhdWx0Tm9vcEJhdGNoOyAvLyBBbGxvdyBpbmplY3RpbmcgYW5vdGhlciBiYXRjaGluZyBmdW5jdGlvbiBsYXRlclxuXG5leHBvcnQgdmFyIHNldEJhdGNoID0gZnVuY3Rpb24gc2V0QmF0Y2gobmV3QmF0Y2gpIHtcbiAgcmV0dXJuIGJhdGNoID0gbmV3QmF0Y2g7XG59OyAvLyBTdXBwbHkgYSBnZXR0ZXIganVzdCB0byBza2lwIGRlYWxpbmcgd2l0aCBFU00gYmluZGluZ3NcblxuZXhwb3J0IHZhciBnZXRCYXRjaCA9IGZ1bmN0aW9uIGdldEJhdGNoKCkge1xuICByZXR1cm4gYmF0Y2g7XG59OyIsImltcG9ydCB7IGdldEJhdGNoIH0gZnJvbSAnLi9iYXRjaCc7IC8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBDTEVBUkVEID0gbnVsbDtcbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIHZhciBiYXRjaCA9IGdldEJhdGNoKCk7IC8vIHRoZSBjdXJyZW50L25leHQgcGF0dGVybiBpcyBjb3BpZWQgZnJvbSByZWR1eCdzIGNyZWF0ZVN0b3JlIGNvZGUuXG4gIC8vIFRPRE86IHJlZmFjdG9yK2V4cG9zZSB0aGF0IGNvZGUgdG8gYmUgcmV1c2FibGUgaGVyZT9cblxuICB2YXIgY3VycmVudCA9IFtdO1xuICB2YXIgbmV4dCA9IFtdO1xuICByZXR1cm4ge1xuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIG5leHQgPSBDTEVBUkVEO1xuICAgICAgY3VycmVudCA9IENMRUFSRUQ7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50ID0gbmV4dDtcbiAgICAgIGJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsaXN0ZW5lcnNbaV0oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgaWYgKG5leHQgPT09IGN1cnJlbnQpIG5leHQgPSBjdXJyZW50LnNsaWNlKCk7XG4gICAgICBuZXh0LnB1c2gobGlzdGVuZXIpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBjdXJyZW50ID09PSBDTEVBUkVEKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgICAgbmV4dC5zcGxpY2UobmV4dC5pbmRleE9mKGxpc3RlbmVyKSwgMSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdWJzY3JpcHRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIF9wcm90by5ub3RpZnlOZXN0ZWRTdWJzID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlQ2hhbmdlV3JhcHBlciA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHRoaXMub25TdGF0ZUNoYW5nZSkge1xuICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgX3Byb3RvLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnBhcmVudFN1YiA/IHRoaXMucGFyZW50U3ViLmFkZE5lc3RlZFN1Yih0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpIDogdGhpcy5zdG9yZS5zdWJzY3JpYmUodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by50cnlVbnN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdWJzY3JpcHRpb247XG59KCk7XG5cbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcblxudmFyIFByb3ZpZGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQcm92aWRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIHZhciBzdG9yZSA9IHByb3BzLnN0b3JlO1xuICAgIF90aGlzLm5vdGlmeVN1YnNjcmliZXJzID0gX3RoaXMubm90aWZ5U3Vic2NyaWJlcnMuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gX3RoaXMubm90aWZ5U3Vic2NyaWJlcnM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdG9yZTogc3RvcmUsXG4gICAgICBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvblxuICAgIH07XG4gICAgX3RoaXMucHJldmlvdXNTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIHRoaXMuc3RhdGUuc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuXG4gICAgaWYgKHRoaXMucHJldmlvdXNTdGF0ZSAhPT0gdGhpcy5wcm9wcy5zdG9yZS5nZXRTdGF0ZSgpKSB7XG4gICAgICB0aGlzLnN0YXRlLnN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy5zdGF0ZS5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLnN0b3JlICE9PSBwcmV2UHJvcHMuc3RvcmUpIHtcbiAgICAgIHRoaXMuc3RhdGUuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbih0aGlzLnByb3BzLnN0b3JlKTtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gdGhpcy5ub3RpZnlTdWJzY3JpYmVycztcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdG9yZTogdGhpcy5wcm9wcy5zdG9yZSxcbiAgICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ubm90aWZ5U3Vic2NyaWJlcnMgPSBmdW5jdGlvbiBub3RpZnlTdWJzY3JpYmVycygpIHtcbiAgICB0aGlzLnN0YXRlLnN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgQ29udGV4dCA9IHRoaXMucHJvcHMuY29udGV4dCB8fCBSZWFjdFJlZHV4Q29udGV4dDtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5zdGF0ZVxuICAgIH0sIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBQcm92aWRlcjtcbn0oQ29tcG9uZW50KTtcblxuUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICBzdG9yZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBzdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfSksXG4gIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55XG59O1xuZXhwb3J0IGRlZmF1bHQgUHJvdmlkZXI7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlTWVtbywgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QsIHVzZVJlZiwgdXNlUmVkdWNlciB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSwgaXNDb250ZXh0Q29uc3VtZXIgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7IC8vIERlZmluZSBzb21lIGNvbnN0YW50IGFycmF5cyBqdXN0IHRvIGF2b2lkIHJlLWNyZWF0aW5nIHRoZXNlXG5cbnZhciBFTVBUWV9BUlJBWSA9IFtdO1xudmFyIE5PX1NVQlNDUklQVElPTl9BUlJBWSA9IFtudWxsLCBudWxsXTtcblxudmFyIHN0cmluZ2lmeUNvbXBvbmVudCA9IGZ1bmN0aW9uIHN0cmluZ2lmeUNvbXBvbmVudChDb21wKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KENvbXApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gU3RyaW5nKENvbXApO1xuICB9XG59O1xuXG5mdW5jdGlvbiBzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICB2YXIgdXBkYXRlQ291bnQgPSBzdGF0ZVsxXTtcbiAgcmV0dXJuIFthY3Rpb24ucGF5bG9hZCwgdXBkYXRlQ291bnQgKyAxXTtcbn1cblxudmFyIGluaXRTdGF0ZVVwZGF0ZXMgPSBmdW5jdGlvbiBpbml0U3RhdGVVcGRhdGVzKCkge1xuICByZXR1cm4gW251bGwsIDBdO1xufTsgLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuIFdlIG5lZWQgdXNlTGF5b3V0RWZmZWN0IGJlY2F1c2Ugd2Ugd2FudFxuLy8gYGNvbm5lY3RgIHRvIHBlcmZvcm0gc3luYyB1cGRhdGVzIHRvIGEgcmVmIHRvIHNhdmUgdGhlIGxhdGVzdCBwcm9wcyBhZnRlclxuLy8gYSByZW5kZXIgaXMgYWN0dWFsbHkgY29tbWl0dGVkIHRvIHRoZSBET00uXG5cblxudmFyIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cbiAgY29tcHV0ZSBuZXcgcHJvcHMgZnJvbSBzdGF0ZSwgcHJvcHMsIGFuZCBkaXNwYXRjaC4gRm9yIGV4YW1wbGU6XG4gICAgIGV4cG9ydCBkZWZhdWx0IGNvbm5lY3RBZHZhbmNlZCgoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChzdGF0ZSwgcHJvcHMpID0+ICh7XG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxuICAgIH0pKShZb3VyQ29tcG9uZW50KVxuICAgQWNjZXNzIHRvIGRpc3BhdGNoIGlzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IHNvIHNlbGVjdG9yRmFjdG9yaWVzIGNhbiBiaW5kIGFjdGlvbkNyZWF0b3JzXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcbiAgcHJvcHMuIERvIG5vdCB1c2UgY29ubmVjdEFkdmFuY2VkIGRpcmVjdGx5IHdpdGhvdXQgbWVtb2l6aW5nIHJlc3VsdHMgYmV0d2VlbiBjYWxscyB0byB5b3VyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cbiovXG5zZWxlY3RvckZhY3RvcnksIC8vIG9wdGlvbnMgb2JqZWN0OlxuX3JlZikge1xuICBpZiAoX3JlZiA9PT0gdm9pZCAwKSB7XG4gICAgX3JlZiA9IHt9O1xuICB9XG5cbiAgdmFyIF9yZWYyID0gX3JlZixcbiAgICAgIF9yZWYyJGdldERpc3BsYXlOYW1lID0gX3JlZjIuZ2V0RGlzcGxheU5hbWUsXG4gICAgICBnZXREaXNwbGF5TmFtZSA9IF9yZWYyJGdldERpc3BsYXlOYW1lID09PSB2b2lkIDAgPyBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBcIkNvbm5lY3RBZHZhbmNlZChcIiArIG5hbWUgKyBcIilcIjtcbiAgfSA6IF9yZWYyJGdldERpc3BsYXlOYW1lLFxuICAgICAgX3JlZjIkbWV0aG9kTmFtZSA9IF9yZWYyLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZjIkbWV0aG9kTmFtZSA9PT0gdm9pZCAwID8gJ2Nvbm5lY3RBZHZhbmNlZCcgOiBfcmVmMiRtZXRob2ROYW1lLFxuICAgICAgX3JlZjIkcmVuZGVyQ291bnRQcm9wID0gX3JlZjIucmVuZGVyQ291bnRQcm9wLFxuICAgICAgcmVuZGVyQ291bnRQcm9wID0gX3JlZjIkcmVuZGVyQ291bnRQcm9wID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmMiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPSBfcmVmMi5zaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMgPSBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMiRzaG91bGRIYW5kbGVTdGEsXG4gICAgICBfcmVmMiRzdG9yZUtleSA9IF9yZWYyLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmMiRzdG9yZUtleSA9PT0gdm9pZCAwID8gJ3N0b3JlJyA6IF9yZWYyJHN0b3JlS2V5LFxuICAgICAgX3JlZjIkd2l0aFJlZiA9IF9yZWYyLndpdGhSZWYsXG4gICAgICB3aXRoUmVmID0gX3JlZjIkd2l0aFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiR3aXRoUmVmLFxuICAgICAgX3JlZjIkZm9yd2FyZFJlZiA9IF9yZWYyLmZvcndhcmRSZWYsXG4gICAgICBmb3J3YXJkUmVmID0gX3JlZjIkZm9yd2FyZFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRmb3J3YXJkUmVmLFxuICAgICAgX3JlZjIkY29udGV4dCA9IF9yZWYyLmNvbnRleHQsXG4gICAgICBjb250ZXh0ID0gX3JlZjIkY29udGV4dCA9PT0gdm9pZCAwID8gUmVhY3RSZWR1eENvbnRleHQgOiBfcmVmMiRjb250ZXh0LFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiZ2V0RGlzcGxheU5hbWVcIiwgXCJtZXRob2ROYW1lXCIsIFwicmVuZGVyQ291bnRQcm9wXCIsIFwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzXCIsIFwic3RvcmVLZXlcIiwgXCJ3aXRoUmVmXCIsIFwiZm9yd2FyZFJlZlwiLCBcImNvbnRleHRcIl0pO1xuXG4gIGludmFyaWFudChyZW5kZXJDb3VudFByb3AgPT09IHVuZGVmaW5lZCwgXCJyZW5kZXJDb3VudFByb3AgaXMgcmVtb3ZlZC4gcmVuZGVyIGNvdW50aW5nIGlzIGJ1aWx0IGludG8gdGhlIGxhdGVzdCBSZWFjdCBEZXYgVG9vbHMgcHJvZmlsaW5nIGV4dGVuc2lvblwiKTtcbiAgaW52YXJpYW50KCF3aXRoUmVmLCAnd2l0aFJlZiBpcyByZW1vdmVkLiBUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHVzZSBhIHJlZiBvbiB0aGUgY29ubmVjdGVkIGNvbXBvbmVudCcpO1xuICB2YXIgY3VzdG9tU3RvcmVXYXJuaW5nTWVzc2FnZSA9ICdUbyB1c2UgYSBjdXN0b20gUmVkdXggc3RvcmUgZm9yIHNwZWNpZmljIGNvbXBvbmVudHMsIGNyZWF0ZSBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHdpdGggJyArIFwiUmVhY3QuY3JlYXRlQ29udGV4dCgpLCBhbmQgcGFzcyB0aGUgY29udGV4dCBvYmplY3QgdG8gUmVhY3QgUmVkdXgncyBQcm92aWRlciBhbmQgc3BlY2lmaWMgY29tcG9uZW50c1wiICsgJyBsaWtlOiA8UHJvdmlkZXIgY29udGV4dD17TXlDb250ZXh0fT48Q29ubmVjdGVkQ29tcG9uZW50IGNvbnRleHQ9e015Q29udGV4dH0gLz48L1Byb3ZpZGVyPi4gJyArICdZb3UgbWF5IGFsc28gcGFzcyBhIHtjb250ZXh0IDogTXlDb250ZXh0fSBvcHRpb24gdG8gY29ubmVjdCc7XG4gIGludmFyaWFudChzdG9yZUtleSA9PT0gJ3N0b3JlJywgJ3N0b3JlS2V5IGhhcyBiZWVuIHJlbW92ZWQgYW5kIGRvZXMgbm90IGRvIGFueXRoaW5nLiAnICsgY3VzdG9tU3RvcmVXYXJuaW5nTWVzc2FnZSk7XG4gIHZhciBDb250ZXh0ID0gY29udGV4dDtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGludmFyaWFudChpc1ZhbGlkRWxlbWVudFR5cGUoV3JhcHBlZENvbXBvbmVudCksIFwiWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgXCIgKyAobWV0aG9kTmFtZSArIFwiLiBJbnN0ZWFkIHJlY2VpdmVkIFwiICsgc3RyaW5naWZ5Q29tcG9uZW50KFdyYXBwZWRDb21wb25lbnQpKSk7XG4gICAgfVxuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIHB1cmUgPSBjb25uZWN0T3B0aW9ucy5wdXJlO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSkge1xuICAgICAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShzdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgfSAvLyBJZiB3ZSBhcmVuJ3QgcnVubmluZyBpbiBcInB1cmVcIiBtb2RlLCB3ZSBkb24ndCB3YW50IHRvIG1lbW9pemUgdmFsdWVzLlxuICAgIC8vIFRvIGF2b2lkIGNvbmRpdGlvbmFsbHkgY2FsbGluZyBob29rcywgd2UgZmFsbCBiYWNrIHRvIGEgdGlueSB3cmFwcGVyXG4gICAgLy8gdGhhdCBqdXN0IGV4ZWN1dGVzIHRoZSBnaXZlbiBjYWxsYmFjayBpbW1lZGlhdGVseS5cblxuXG4gICAgdmFyIHVzZVB1cmVPbmx5TWVtbyA9IHB1cmUgPyB1c2VNZW1vIDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gQ29ubmVjdEZ1bmN0aW9uKHByb3BzKSB7XG4gICAgICB2YXIgX3VzZU1lbW8gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRGlzdGluZ3Vpc2ggYmV0d2VlbiBhY3R1YWwgXCJkYXRhXCIgcHJvcHMgdGhhdCB3ZXJlIHBhc3NlZCB0byB0aGUgd3JhcHBlciBjb21wb25lbnQsXG4gICAgICAgIC8vIGFuZCB2YWx1ZXMgbmVlZGVkIHRvIGNvbnRyb2wgYmVoYXZpb3IgKGZvcndhcmRlZCByZWZzLCBhbHRlcm5hdGUgY29udGV4dCBpbnN0YW5jZXMpLlxuICAgICAgICAvLyBUbyBtYWludGFpbiB0aGUgd3JhcHBlclByb3BzIG9iamVjdCByZWZlcmVuY2UsIG1lbW9pemUgdGhpcyBkZXN0cnVjdHVyaW5nLlxuICAgICAgICB2YXIgZm9yd2FyZGVkUmVmID0gcHJvcHMuZm9yd2FyZGVkUmVmLFxuICAgICAgICAgICAgd3JhcHBlclByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcImZvcndhcmRlZFJlZlwiXSk7XG5cbiAgICAgICAgcmV0dXJuIFtwcm9wcy5jb250ZXh0LCBmb3J3YXJkZWRSZWYsIHdyYXBwZXJQcm9wc107XG4gICAgICB9LCBbcHJvcHNdKSxcbiAgICAgICAgICBwcm9wc0NvbnRleHQgPSBfdXNlTWVtb1swXSxcbiAgICAgICAgICBmb3J3YXJkZWRSZWYgPSBfdXNlTWVtb1sxXSxcbiAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfdXNlTWVtb1syXTtcblxuICAgICAgdmFyIENvbnRleHRUb1VzZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBVc2VycyBtYXkgb3B0aW9uYWxseSBwYXNzIGluIGEgY3VzdG9tIGNvbnRleHQgaW5zdGFuY2UgdG8gdXNlIGluc3RlYWQgb2Ygb3VyIFJlYWN0UmVkdXhDb250ZXh0LlxuICAgICAgICAvLyBNZW1vaXplIHRoZSBjaGVjayB0aGF0IGRldGVybWluZXMgd2hpY2ggY29udGV4dCBpbnN0YW5jZSB3ZSBzaG91bGQgdXNlLlxuICAgICAgICByZXR1cm4gcHJvcHNDb250ZXh0ICYmIHByb3BzQ29udGV4dC5Db25zdW1lciAmJiBpc0NvbnRleHRDb25zdW1lcihSZWFjdC5jcmVhdGVFbGVtZW50KHByb3BzQ29udGV4dC5Db25zdW1lciwgbnVsbCkpID8gcHJvcHNDb250ZXh0IDogQ29udGV4dDtcbiAgICAgIH0sIFtwcm9wc0NvbnRleHQsIENvbnRleHRdKTsgLy8gUmV0cmlldmUgdGhlIHN0b3JlIGFuZCBhbmNlc3RvciBzdWJzY3JpcHRpb24gdmlhIGNvbnRleHQsIGlmIGF2YWlsYWJsZVxuXG4gICAgICB2YXIgY29udGV4dFZhbHVlID0gdXNlQ29udGV4dChDb250ZXh0VG9Vc2UpOyAvLyBUaGUgc3RvcmUgX211c3RfIGV4aXN0IGFzIGVpdGhlciBhIHByb3Agb3IgaW4gY29udGV4dFxuXG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbVByb3BzID0gQm9vbGVhbihwcm9wcy5zdG9yZSk7XG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbUNvbnRleHQgPSBCb29sZWFuKGNvbnRleHRWYWx1ZSkgJiYgQm9vbGVhbihjb250ZXh0VmFsdWUuc3RvcmUpO1xuICAgICAgaW52YXJpYW50KGRpZFN0b3JlQ29tZUZyb21Qcm9wcyB8fCBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCwgXCJDb3VsZCBub3QgZmluZCBcXFwic3RvcmVcXFwiIGluIHRoZSBjb250ZXh0IG9mIFwiICsgKFwiXFxcIlwiICsgZGlzcGxheU5hbWUgKyBcIlxcXCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sIFwiKSArIFwib3IgcGFzcyBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHByb3ZpZGVyIHRvIDxQcm92aWRlcj4gYW5kIHRoZSBjb3JyZXNwb25kaW5nIFwiICsgKFwiUmVhY3QgY29udGV4dCBjb25zdW1lciB0byBcIiArIGRpc3BsYXlOYW1lICsgXCIgaW4gY29ubmVjdCBvcHRpb25zLlwiKSk7XG4gICAgICB2YXIgc3RvcmUgPSBwcm9wcy5zdG9yZSB8fCBjb250ZXh0VmFsdWUuc3RvcmU7XG4gICAgICB2YXIgY2hpbGRQcm9wc1NlbGVjdG9yID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRoZSBjaGlsZCBwcm9wcyBzZWxlY3RvciBuZWVkcyB0aGUgc3RvcmUgcmVmZXJlbmNlIGFzIGFuIGlucHV0LlxuICAgICAgICAvLyBSZS1jcmVhdGUgdGhpcyBzZWxlY3RvciB3aGVuZXZlciB0aGUgc3RvcmUgY2hhbmdlcy5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNoaWxkU2VsZWN0b3Ioc3RvcmUpO1xuICAgICAgfSwgW3N0b3JlXSk7XG5cbiAgICAgIHZhciBfdXNlTWVtbzIgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybiBOT19TVUJTQ1JJUFRJT05fQVJSQVk7IC8vIFRoaXMgU3Vic2NyaXB0aW9uJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA/IG51bGwgOiBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uKTsgLy8gYG5vdGlmeU5lc3RlZFN1YnNgIGlzIGR1cGxpY2F0ZWQgdG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGluXG4gICAgICAgIC8vIHRoZSBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLCB3aGVyZSBgc3Vic2NyaXB0aW9uYCB3aWxsIHRoZW4gYmUgbnVsbC4gVGhpcyBjYW5cbiAgICAgICAgLy8gcHJvYmFibHkgYmUgYXZvaWRlZCBpZiBTdWJzY3JpcHRpb24ncyBsaXN0ZW5lcnMgbG9naWMgaXMgY2hhbmdlZCB0byBub3QgY2FsbCBsaXN0ZW5lcnNcbiAgICAgICAgLy8gdGhhdCBoYXZlIGJlZW4gdW5zdWJzY3JpYmVkIGluIHRoZSAgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcC5cblxuICAgICAgICB2YXIgbm90aWZ5TmVzdGVkU3VicyA9IHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzLmJpbmQoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgcmV0dXJuIFtzdWJzY3JpcHRpb24sIG5vdGlmeU5lc3RlZFN1YnNdO1xuICAgICAgfSwgW3N0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZV0pLFxuICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IF91c2VNZW1vMlswXSxcbiAgICAgICAgICBub3RpZnlOZXN0ZWRTdWJzID0gX3VzZU1lbW8yWzFdOyAvLyBEZXRlcm1pbmUgd2hhdCB7c3RvcmUsIHN1YnNjcmlwdGlvbn0gdmFsdWUgc2hvdWxkIGJlIHB1dCBpbnRvIG5lc3RlZCBjb250ZXh0LCBpZiBuZWNlc3NhcnksXG4gICAgICAvLyBhbmQgbWVtb2l6ZSB0aGF0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IGNvbnRleHQgdXBkYXRlcy5cblxuXG4gICAgICB2YXIgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZGlkU3RvcmVDb21lRnJvbVByb3BzKSB7XG4gICAgICAgICAgLy8gVGhpcyBjb21wb25lbnQgaXMgZGlyZWN0bHkgc3Vic2NyaWJlZCB0byBhIHN0b3JlIGZyb20gcHJvcHMuXG4gICAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCBkZXNjZW5kYW50cyByZWFkaW5nIGZyb20gdGhpcyBzdG9yZSAtIHBhc3MgZG93biB3aGF0ZXZlclxuICAgICAgICAgIC8vIHRoZSBleGlzdGluZyBjb250ZXh0IHZhbHVlIGlzIGZyb20gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yLlxuICAgICAgICAgIHJldHVybiBjb250ZXh0VmFsdWU7XG4gICAgICAgIH0gLy8gT3RoZXJ3aXNlLCBwdXQgdGhpcyBjb21wb25lbnQncyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgaW50byBjb250ZXh0LCBzbyB0aGF0XG4gICAgICAgIC8vIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3b24ndCB1cGRhdGUgdW50aWwgYWZ0ZXIgdGhpcyBjb21wb25lbnQgaXMgZG9uZVxuXG5cbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0VmFsdWUsIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0sIFtkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZSwgc3Vic2NyaXB0aW9uXSk7IC8vIFdlIG5lZWQgdG8gZm9yY2UgdGhpcyB3cmFwcGVyIGNvbXBvbmVudCB0byByZS1yZW5kZXIgd2hlbmV2ZXIgYSBSZWR1eCBzdG9yZSB1cGRhdGVcbiAgICAgIC8vIGNhdXNlcyBhIGNoYW5nZSB0byB0aGUgY2FsY3VsYXRlZCBjaGlsZCBjb21wb25lbnQgcHJvcHMgKG9yIHdlIGNhdWdodCBhbiBlcnJvciBpbiBtYXBTdGF0ZSlcblxuICAgICAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIsIEVNUFRZX0FSUkFZLCBpbml0U3RhdGVVcGRhdGVzKSxcbiAgICAgICAgICBfdXNlUmVkdWNlciQgPSBfdXNlUmVkdWNlclswXSxcbiAgICAgICAgICBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0ID0gX3VzZVJlZHVjZXIkWzBdLFxuICAgICAgICAgIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2ggPSBfdXNlUmVkdWNlclsxXTsgLy8gUHJvcGFnYXRlIGFueSBtYXBTdGF0ZS9tYXBEaXNwYXRjaCBlcnJvcnMgdXB3YXJkc1xuXG5cbiAgICAgIGlmIChwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0ICYmIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcjtcbiAgICAgIH0gLy8gU2V0IHVwIHJlZnMgdG8gY29vcmRpbmF0ZSB2YWx1ZXMgYmV0d2VlbiB0aGUgc3Vic2NyaXB0aW9uIGVmZmVjdCBhbmQgdGhlIHJlbmRlciBsb2dpY1xuXG5cbiAgICAgIHZhciBsYXN0Q2hpbGRQcm9wcyA9IHVzZVJlZigpO1xuICAgICAgdmFyIGxhc3RXcmFwcGVyUHJvcHMgPSB1c2VSZWYod3JhcHBlclByb3BzKTtcbiAgICAgIHZhciBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlID0gdXNlUmVmKCk7XG4gICAgICB2YXIgcmVuZGVySXNTY2hlZHVsZWQgPSB1c2VSZWYoZmFsc2UpO1xuICAgICAgdmFyIGFjdHVhbENoaWxkUHJvcHMgPSB1c2VQdXJlT25seU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUcmlja3kgbG9naWMgaGVyZTpcbiAgICAgICAgLy8gLSBUaGlzIHJlbmRlciBtYXkgaGF2ZSBiZWVuIHRyaWdnZXJlZCBieSBhIFJlZHV4IHN0b3JlIHVwZGF0ZSB0aGF0IHByb2R1Y2VkIG5ldyBjaGlsZCBwcm9wc1xuICAgICAgICAvLyAtIEhvd2V2ZXIsIHdlIG1heSBoYXZlIGdvdHRlbiBuZXcgd3JhcHBlciBwcm9wcyBhZnRlciB0aGF0XG4gICAgICAgIC8vIElmIHdlIGhhdmUgbmV3IGNoaWxkIHByb3BzLCBhbmQgdGhlIHNhbWUgd3JhcHBlciBwcm9wcywgd2Uga25vdyB3ZSBzaG91bGQgdXNlIHRoZSBuZXcgY2hpbGQgcHJvcHMgYXMtaXMuXG4gICAgICAgIC8vIEJ1dCwgaWYgd2UgaGF2ZSBuZXcgd3JhcHBlciBwcm9wcywgdGhvc2UgbWlnaHQgY2hhbmdlIHRoZSBjaGlsZCBwcm9wcywgc28gd2UgaGF2ZSB0byByZWNhbGN1bGF0ZSB0aGluZ3MuXG4gICAgICAgIC8vIFNvLCB3ZSdsbCB1c2UgdGhlIGNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlIG9ubHkgaWYgdGhlIHdyYXBwZXIgcHJvcHMgYXJlIHRoZSBzYW1lIGFzIGxhc3QgdGltZS5cbiAgICAgICAgaWYgKGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCAmJiB3cmFwcGVyUHJvcHMgPT09IGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCkge1xuICAgICAgICAgIHJldHVybiBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQ7XG4gICAgICAgIH0gLy8gVE9ETyBXZSdyZSByZWFkaW5nIHRoZSBzdG9yZSBkaXJlY3RseSBpbiByZW5kZXIoKSBoZXJlLiBCYWQgaWRlYT9cbiAgICAgICAgLy8gVGhpcyB3aWxsIGxpa2VseSBjYXVzZSBCYWQgVGhpbmdzIChUTSkgdG8gaGFwcGVuIGluIENvbmN1cnJlbnQgTW9kZS5cbiAgICAgICAgLy8gTm90ZSB0aGF0IHdlIGRvIHRoaXMgYmVjYXVzZSBvbiByZW5kZXJzIF9ub3RfIGNhdXNlZCBieSBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRoZSBsYXRlc3Qgc3RvcmUgc3RhdGVcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZS5cblxuXG4gICAgICAgIHJldHVybiBjaGlsZFByb3BzU2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSwgd3JhcHBlclByb3BzKTtcbiAgICAgIH0sIFtzdG9yZSwgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCwgd3JhcHBlclByb3BzXSk7IC8vIFdlIG5lZWQgdGhpcyB0byBleGVjdXRlIHN5bmNocm9ub3VzbHkgZXZlcnkgdGltZSB3ZSByZS1yZW5kZXIuIEhvd2V2ZXIsIFJlYWN0IHdhcm5zXG4gICAgICAvLyBhYm91dCB1c2VMYXlvdXRFZmZlY3QgaW4gU1NSLCBzbyB3ZSB0cnkgdG8gZGV0ZWN0IGVudmlyb25tZW50IGFuZCBmYWxsIGJhY2sgdG9cbiAgICAgIC8vIGp1c3QgdXNlRWZmZWN0IGluc3RlYWQgdG8gYXZvaWQgdGhlIHdhcm5pbmcsIHNpbmNlIG5laXRoZXIgd2lsbCBydW4gYW55d2F5LlxuXG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gV2Ugd2FudCB0byBjYXB0dXJlIHRoZSB3cmFwcGVyIHByb3BzIGFuZCBjaGlsZCBwcm9wcyB3ZSB1c2VkIGZvciBsYXRlciBjb21wYXJpc29uc1xuICAgICAgICBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQgPSB3cmFwcGVyUHJvcHM7XG4gICAgICAgIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBhY3R1YWxDaGlsZFByb3BzO1xuICAgICAgICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gZmFsc2U7IC8vIElmIHRoZSByZW5kZXIgd2FzIGZyb20gYSBzdG9yZSB1cGRhdGUsIGNsZWFyIG91dCB0aGF0IHJlZmVyZW5jZSBhbmQgY2FzY2FkZSB0aGUgc3Vic2NyaWJlciB1cGRhdGVcblxuICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50KSB7XG4gICAgICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyBPdXIgcmUtc3Vic2NyaWJlIGxvZ2ljIG9ubHkgcnVucyB3aGVuIHRoZSBzdG9yZS9zdWJzY3JpcHRpb24gc2V0dXAgY2hhbmdlc1xuXG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gSWYgd2UncmUgbm90IHN1YnNjcmliZWQgdG8gdGhlIHN0b3JlLCBub3RoaW5nIHRvIGRvIGhlcmVcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjsgLy8gQ2FwdHVyZSB2YWx1ZXMgZm9yIGNoZWNraW5nIGlmIGFuZCB3aGVuIHRoaXMgY29tcG9uZW50IHVubW91bnRzXG5cbiAgICAgICAgdmFyIGRpZFVuc3Vic2NyaWJlID0gZmFsc2U7XG4gICAgICAgIHZhciBsYXN0VGhyb3duRXJyb3IgPSBudWxsOyAvLyBXZSdsbCBydW4gdGhpcyBjYWxsYmFjayBldmVyeSB0aW1lIGEgc3RvcmUgc3Vic2NyaXB0aW9uIHVwZGF0ZSBwcm9wYWdhdGVzIHRvIHRoaXMgY29tcG9uZW50XG5cbiAgICAgICAgdmFyIGNoZWNrRm9yVXBkYXRlcyA9IGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICAgICAgICBpZiAoZGlkVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIC8vIERvbid0IHJ1biBzdGFsZSBsaXN0ZW5lcnMuXG4gICAgICAgICAgICAvLyBSZWR1eCBkb2Vzbid0IGd1YXJhbnRlZSB1bnN1YnNjcmlwdGlvbnMgaGFwcGVuIHVudGlsIG5leHQgZGlzcGF0Y2guXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGxhdGVzdFN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgICAgIHZhciBuZXdDaGlsZFByb3BzLCBlcnJvcjtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBBY3R1YWxseSBydW4gdGhlIHNlbGVjdG9yIHdpdGggdGhlIG1vc3QgcmVjZW50IHN0b3JlIHN0YXRlIGFuZCB3cmFwcGVyIHByb3BzXG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlXG4gICAgICAgICAgICBuZXdDaGlsZFByb3BzID0gY2hpbGRQcm9wc1NlbGVjdG9yKGxhdGVzdFN0b3JlU3RhdGUsIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZXJyb3IgPSBlO1xuICAgICAgICAgICAgbGFzdFRocm93bkVycm9yID0gZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgICBsYXN0VGhyb3duRXJyb3IgPSBudWxsO1xuICAgICAgICAgIH0gLy8gSWYgdGhlIGNoaWxkIHByb3BzIGhhdmVuJ3QgY2hhbmdlZCwgbm90aGluZyB0byBkbyBoZXJlIC0gY2FzY2FkZSB0aGUgc3Vic2NyaXB0aW9uIHVwZGF0ZVxuXG5cbiAgICAgICAgICBpZiAobmV3Q2hpbGRQcm9wcyA9PT0gbGFzdENoaWxkUHJvcHMuY3VycmVudCkge1xuICAgICAgICAgICAgaWYgKCFyZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gU2F2ZSByZWZlcmVuY2VzIHRvIHRoZSBuZXcgY2hpbGQgcHJvcHMuICBOb3RlIHRoYXQgd2UgdHJhY2sgdGhlIFwiY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGVcIlxuICAgICAgICAgICAgLy8gYXMgYSByZWYgaW5zdGVhZCBvZiBhIHVzZVN0YXRlL3VzZVJlZHVjZXIgYmVjYXVzZSB3ZSBuZWVkIGEgd2F5IHRvIGRldGVybWluZSBpZiB0aGF0IHZhbHVlIGhhc1xuICAgICAgICAgICAgLy8gYmVlbiBwcm9jZXNzZWQuICBJZiB0aGlzIHdlbnQgaW50byB1c2VTdGF0ZS91c2VSZWR1Y2VyLCB3ZSBjb3VsZG4ndCBjbGVhciBvdXQgdGhlIHZhbHVlIHdpdGhvdXRcbiAgICAgICAgICAgIC8vIGZvcmNpbmcgYW5vdGhlciByZS1yZW5kZXIsIHdoaWNoIHdlIGRvbid0IHdhbnQuXG4gICAgICAgICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgICAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICAgICAgICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gdHJ1ZTsgLy8gSWYgdGhlIGNoaWxkIHByb3BzIF9kaWRfIGNoYW5nZSAob3Igd2UgY2F1Z2h0IGFuIGVycm9yKSwgdGhpcyB3cmFwcGVyIGNvbXBvbmVudCBuZWVkcyB0byByZS1yZW5kZXJcblxuICAgICAgICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCh7XG4gICAgICAgICAgICAgIHR5cGU6ICdTVE9SRV9VUERBVEVEJyxcbiAgICAgICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgICAgIGxhdGVzdFN0b3JlU3RhdGU6IGxhdGVzdFN0b3JlU3RhdGUsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTsgLy8gQWN0dWFsbHkgc3Vic2NyaWJlIHRvIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3RvciAob3Igc3RvcmUpXG5cblxuICAgICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICAgICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpOyAvLyBQdWxsIGRhdGEgZnJvbSB0aGUgc3RvcmUgYWZ0ZXIgZmlyc3QgcmVuZGVyIGluIGNhc2UgdGhlIHN0b3JlIGhhc1xuICAgICAgICAvLyBjaGFuZ2VkIHNpbmNlIHdlIGJlZ2FuLlxuXG4gICAgICAgIGNoZWNrRm9yVXBkYXRlcygpO1xuXG4gICAgICAgIHZhciB1bnN1YnNjcmliZVdyYXBwZXIgPSBmdW5jdGlvbiB1bnN1YnNjcmliZVdyYXBwZXIoKSB7XG4gICAgICAgICAgZGlkVW5zdWJzY3JpYmUgPSB0cnVlO1xuICAgICAgICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuXG4gICAgICAgICAgaWYgKGxhc3RUaHJvd25FcnJvcikge1xuICAgICAgICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHdlIGNhdWdodCBhbiBlcnJvciBkdWUgdG8gYSBiYWQgbWFwU3RhdGUgZnVuY3Rpb24sIGJ1dCB0aGVcbiAgICAgICAgICAgIC8vIHBhcmVudCByZS1yZW5kZXJlZCB3aXRob3V0IHRoaXMgY29tcG9uZW50IGFuZCB3ZSdyZSBhYm91dCB0byB1bm1vdW50LlxuICAgICAgICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgaGFwcGVuIGFzIGxvbmcgYXMgd2UgZG8gdG9wLWRvd24gc3Vic2NyaXB0aW9ucyBjb3JyZWN0bHksIGJ1dFxuICAgICAgICAgICAgLy8gaWYgd2UgZXZlciBkbyB0aG9zZSB3cm9uZywgdGhpcyB0aHJvdyB3aWxsIHN1cmZhY2UgdGhlIGVycm9yIGluIG91ciB0ZXN0cy5cbiAgICAgICAgICAgIC8vIEluIHRoYXQgY2FzZSwgdGhyb3cgdGhlIGVycm9yIGZyb20gaGVyZSBzbyBpdCBkb2Vzbid0IGdldCBsb3N0LlxuICAgICAgICAgICAgdGhyb3cgbGFzdFRocm93bkVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdW5zdWJzY3JpYmVXcmFwcGVyO1xuICAgICAgfSwgW3N0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3Rvcl0pOyAvLyBOb3cgdGhhdCBhbGwgdGhhdCdzIGRvbmUsIHdlIGNhbiBmaW5hbGx5IHRyeSB0byBhY3R1YWxseSByZW5kZXIgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgIC8vIFdlIG1lbW9pemUgdGhlIGVsZW1lbnRzIGZvciB0aGUgcmVuZGVyZWQgY2hpbGQgY29tcG9uZW50IGFzIGFuIG9wdGltaXphdGlvbi5cblxuICAgICAgdmFyIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgYWN0dWFsQ2hpbGRQcm9wcywge1xuICAgICAgICAgIHJlZjogZm9yd2FyZGVkUmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH0sIFtmb3J3YXJkZWRSZWYsIFdyYXBwZWRDb21wb25lbnQsIGFjdHVhbENoaWxkUHJvcHNdKTsgLy8gSWYgUmVhY3Qgc2VlcyB0aGUgZXhhY3Qgc2FtZSBlbGVtZW50IHJlZmVyZW5jZSBhcyBsYXN0IHRpbWUsIGl0IGJhaWxzIG91dCBvZiByZS1yZW5kZXJpbmdcbiAgICAgIC8vIHRoYXQgY2hpbGQsIHNhbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gUmVhY3QubWVtbygpIG9yIHJldHVybmVkIGZhbHNlIGZyb20gc2hvdWxkQ29tcG9uZW50VXBkYXRlLlxuXG4gICAgICB2YXIgcmVuZGVyZWRDaGlsZCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgaXMgc3Vic2NyaWJlZCB0byBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRvIHBhc3MgaXRzIG93blxuICAgICAgICAgIC8vIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBkb3duIHRvIG91ciBkZXNjZW5kYW50cy4gVGhhdCBtZWFucyByZW5kZXJpbmcgdGhlIHNhbWVcbiAgICAgICAgICAvLyBDb250ZXh0IGluc3RhbmNlLCBhbmQgcHV0dGluZyBhIGRpZmZlcmVudCB2YWx1ZSBpbnRvIHRoZSBjb250ZXh0LlxuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHRUb1VzZS5Qcm92aWRlciwge1xuICAgICAgICAgICAgdmFsdWU6IG92ZXJyaWRkZW5Db250ZXh0VmFsdWVcbiAgICAgICAgICB9LCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIH0sIFtDb250ZXh0VG9Vc2UsIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCwgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZV0pO1xuICAgICAgcmV0dXJuIHJlbmRlcmVkQ2hpbGQ7XG4gICAgfSAvLyBJZiB3ZSdyZSBpbiBcInB1cmVcIiBtb2RlLCBlbnN1cmUgb3VyIHdyYXBwZXIgY29tcG9uZW50IG9ubHkgcmUtcmVuZGVycyB3aGVuIGluY29taW5nIHByb3BzIGhhdmUgY2hhbmdlZC5cblxuXG4gICAgdmFyIENvbm5lY3QgPSBwdXJlID8gUmVhY3QubWVtbyhDb25uZWN0RnVuY3Rpb24pIDogQ29ubmVjdEZ1bmN0aW9uO1xuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuXG4gICAgaWYgKGZvcndhcmRSZWYpIHtcbiAgICAgIHZhciBmb3J3YXJkZWQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIGZvcndhcmRDb25uZWN0UmVmKHByb3BzLCByZWYpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29ubmVjdCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgZm9yd2FyZGVkUmVmOiByZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICBmb3J3YXJkZWQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIGZvcndhcmRlZC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIHJldHVybiBob2lzdFN0YXRpY3MoZm9yd2FyZGVkLCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xufSIsInZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHJldHVybiB0cnVlO1xuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duLmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvICcgKyAnY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gJyArICd0b2dldGhlciB0byBhIHNpbmdsZSBmdW5jdGlvbicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIHJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciBjdXJyZW50UmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBjdXJyZW50U3RhdGUgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgdmFyIGN1cnJlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzO1xuICB2YXIgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmUobGlzdGVuZXIpIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGFjdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuICcgKyAnVXNlIGN1c3RvbSBtaWRkbGV3YXJlIGZvciBhc3luYyBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gJyArICdIYXZlIHlvdSBtaXNzcGVsbGVkIGEgY29uc3RhbnQ/Jyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cblxuLyoqXG4gKiBQcmludHMgYSB3YXJuaW5nIGluIHRoZSBjb25zb2xlIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgd2FybmluZyBtZXNzYWdlLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuXG5cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuXG59XG5cbmZ1bmN0aW9uIGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKGtleSwgYWN0aW9uKSB7XG4gIHZhciBhY3Rpb25UeXBlID0gYWN0aW9uICYmIGFjdGlvbi50eXBlO1xuICB2YXIgYWN0aW9uRGVzY3JpcHRpb24gPSBhY3Rpb25UeXBlICYmIFwiYWN0aW9uIFxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIHx8ICdhbiBhY3Rpb24nO1xuICByZXR1cm4gXCJHaXZlbiBcIiArIGFjdGlvbkRlc2NyaXB0aW9uICsgXCIsIHJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiO1xufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIHt9LnRvU3RyaW5nLmNhbGwoaW5wdXRTdGF0ZSkubWF0Y2goL1xccyhbYS16fEEtWl0rKS8pWzFdICsgXCJcXFwiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIFwiICsgKFwia2V5czogXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCJcIik7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuICB1bmV4cGVjdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSA9IHRydWU7XG4gIH0pO1xuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gXCJVbmV4cGVjdGVkIFwiICsgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDEgPyAna2V5cycgOiAna2V5JykgKyBcIiBcIiArIChcIlxcXCJcIiArIHVuZXhwZWN0ZWRLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiIGZvdW5kIGluIFwiICsgYXJndW1lbnROYW1lICsgXCIuIFwiKSArIFwiRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiBcIiArIChcIlxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiLiBVbmV4cGVjdGVkIGtleXMgd2lsbCBiZSBpZ25vcmVkLlwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuIFwiICsgKFwiRG9uJ3QgdHJ5IHRvIGhhbmRsZSBcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIiBvciBvdGhlciBhY3Rpb25zIGluIFxcXCJyZWR1eC8qXFxcIiBcIikgKyBcIm5hbWVzcGFjZS4gVGhleSBhcmUgY29uc2lkZXJlZCBwcml2YXRlLiBJbnN0ZWFkLCB5b3UgbXVzdCByZXR1cm4gdGhlIFwiICsgXCJjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCBcIiArIFwiaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlIFwiICsgXCJhY3Rpb24gdHlwZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQsIGJ1dCBjYW4gYmUgbnVsbC5cIik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycykge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBmaW5hbFJlZHVjZXJzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoXCJObyByZWR1Y2VyIHByb3ZpZGVkIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cblxuICB2YXIgZmluYWxSZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKGZpbmFsUmVkdWNlcnMpO1xuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlID0ge307XG4gIH1cblxuICB2YXIgc2hhcGVBc3NlcnRpb25FcnJvcjtcblxuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoc2hhcGVBc3NlcnRpb25FcnJvcikge1xuICAgICAgdGhyb3cgc2hhcGVBc3NlcnRpb25FcnJvcjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHdhcm5pbmdNZXNzYWdlID0gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShzdGF0ZSwgZmluYWxSZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpO1xuXG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcblxuICAgICAgaWYgKHR5cGVvZiBuZXh0U3RhdGVGb3JLZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShfa2V5LCBhY3Rpb24pO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgXCIgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMpICsgXCIuIFwiICsgXCJEaWQgeW91IHdyaXRlIFxcXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCIgaW5zdGVhZCBvZiBcXFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCI/XCIpO1xuICB9XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhY3Rpb25DcmVhdG9ycyk7XG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblxuICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiBcIiArIFwiT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLlwiKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh2b2lkIDAsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKCdZb3UgYXJlIGN1cnJlbnRseSB1c2luZyBtaW5pZmllZCBjb2RlIG91dHNpZGUgb2YgTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiLiAnICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3Igc2V0dGluZyBtb2RlIHRvIHByb2R1Y3Rpb24gaW4gd2VicGFjayAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy9tb2RlLykgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBjcmVhdGVTdG9yZSwgY29tYmluZVJlZHVjZXJzLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZSwgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcyB9O1xuIiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuXG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufSAvLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59IC8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vXG4vLyAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGRlcGVuZHMgb24gcHJvcHMsIHdoaWNoXG4vLyAgICBpcyB1c2VkIGJ5IHNlbGVjdG9yRmFjdG9yeSB0byBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlaW52b2tlIG9uIHByb3BzIGNoYW5nZXMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9OyAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuXG5cbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xufSIsImltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaFxuICAgIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdChtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnb2JqZWN0JyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24obWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwU3RhdGVUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFN0YXRlVG9Qcm9wcywgJ21hcFN0YXRlVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmcobWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwU3RhdGVUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZ107IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duUHJvcHMsIHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgICAgcHVyZSA9IF9yZWYucHVyZSxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYuYXJlTWVyZ2VkUHJvcHNFcXVhbDtcbiAgICB2YXIgaGFzUnVuT25jZSA9IGZhbHNlO1xuICAgIHZhciBtZXJnZWRQcm9wcztcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghcHVyZSB8fCAhYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSkgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNGdW5jdGlvbihtZXJnZVByb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWVyZ2VQcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZChtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lcmdlUHJvcHM7XG4gIH0gOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZF07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcbmV4cG9ydCBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHJldHVybiBtZXJnZVByb3BzKG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpLCBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKSwgb3duUHJvcHMpO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlO1xuICB2YXIgb3duUHJvcHM7XG4gIHZhciBzdGF0ZVByb3BzO1xuICB2YXIgZGlzcGF0Y2hQcm9wcztcbiAgdmFyIG1lcmdlZFByb3BzO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdTdGF0ZSgpIHtcbiAgICB2YXIgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVQcm9wc0NoYW5nZWQgPSAhYXJlU3RhdGVQcm9wc0VxdWFsKG5leHRTdGF0ZVByb3BzLCBzdGF0ZVByb3BzKTtcbiAgICBzdGF0ZVByb3BzID0gbmV4dFN0YXRlUHJvcHM7XG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuICAgIGlmIChwcm9wc0NoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpO1xuICAgIGlmIChwcm9wc0NoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wcygpO1xuICAgIGlmIChzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdTdGF0ZSgpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgcmV0dXJuIGhhc1J1bkF0TGVhc3RPbmNlID8gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA6IGhhbmRsZUZpcnN0Q2FsbChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcyk7XG4gIH07XG59IC8vIFRPRE86IEFkZCBtb3JlIGNvbW1lbnRzXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImluaXRNYXBTdGF0ZVRvUHJvcHNcIiwgXCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzXCIsIFwiaW5pdE1lcmdlUHJvcHNcIl0pO1xuXG4gIHZhciBtYXBTdGF0ZVRvUHJvcHMgPSBpbml0TWFwU3RhdGVUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWVyZ2VQcm9wcyA9IGluaXRNZXJnZVByb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZlcmlmeVN1YnNlbGVjdG9ycyhtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgb3B0aW9ucy5kaXNwbGF5TmFtZSk7XG4gIH1cblxuICB2YXIgc2VsZWN0b3JGYWN0b3J5ID0gb3B0aW9ucy5wdXJlID8gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkgOiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5O1xuICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgb3B0aW9ucyk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuLi91dGlscy9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBEaXNwYXRjaFRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBTdGF0ZVRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIGZyb20gJy4vbWVyZ2VQcm9wcyc7XG5pbXBvcnQgZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSBmcm9tICcuL3NlbGVjdG9yRmFjdG9yeSc7XG4vKlxuICBjb25uZWN0IGlzIGEgZmFjYWRlIG92ZXIgY29ubmVjdEFkdmFuY2VkLiBJdCB0dXJucyBpdHMgYXJncyBpbnRvIGEgY29tcGF0aWJsZVxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxuXG4gICAgKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpID0+IG5leHRGaW5hbFByb3BzXG4gIFxuICBjb25uZWN0IHBhc3NlcyBpdHMgYXJncyB0byBjb25uZWN0QWR2YW5jZWQgYXMgb3B0aW9ucywgd2hpY2ggd2lsbCBpbiB0dXJuIHBhc3MgdGhlbSB0b1xuICBzZWxlY3RvckZhY3RvcnkgZWFjaCB0aW1lIGEgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2UgaXMgaW5zdGFudGlhdGVkIG9yIGhvdCByZWxvYWRlZC5cblxuICBzZWxlY3RvckZhY3RvcnkgcmV0dXJucyBhIGZpbmFsIHByb3BzIHNlbGVjdG9yIGZyb20gaXRzIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgbWVyZ2VQcm9wcyxcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cblxuICBUaGUgcmVzdWx0aW5nIGZpbmFsIHByb3BzIHNlbGVjdG9yIGlzIGNhbGxlZCBieSB0aGUgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2Ugd2hlbmV2ZXJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxuICovXG5cbmZ1bmN0aW9uIG1hdGNoKGFyZywgZmFjdG9yaWVzLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSBmYWN0b3JpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFjdG9yaWVzW2ldKGFyZyk7XG4gICAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIG9mIHR5cGUgXCIgKyB0eXBlb2YgYXJnICsgXCIgZm9yIFwiICsgbmFtZSArIFwiIGFyZ3VtZW50IHdoZW4gY29ubmVjdGluZyBjb21wb25lbnQgXCIgKyBvcHRpb25zLndyYXBwZWRDb21wb25lbnROYW1lICsgXCIuXCIpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHJpY3RFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufSAvLyBjcmVhdGVDb25uZWN0IHdpdGggZGVmYXVsdCBhcmdzIGJ1aWxkcyB0aGUgJ29mZmljaWFsJyBjb25uZWN0IGJlaGF2aW9yLiBDYWxsaW5nIGl0IHdpdGhcbi8vIGRpZmZlcmVudCBvcHRpb25zIG9wZW5zIHVwIHNvbWUgdGVzdGluZyBhbmQgZXh0ZW5zaWJpbGl0eSBzY2VuYXJpb3NcblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdChfdGVtcCkge1xuICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgX3JlZiRjb25uZWN0SE9DID0gX3JlZi5jb25uZWN0SE9DLFxuICAgICAgY29ubmVjdEhPQyA9IF9yZWYkY29ubmVjdEhPQyA9PT0gdm9pZCAwID8gY29ubmVjdEFkdmFuY2VkIDogX3JlZiRjb25uZWN0SE9DLFxuICAgICAgX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID0gX3JlZi5tYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPT09IHZvaWQgMCA/IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YsXG4gICAgICBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPSBfcmVmLm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyxcbiAgICAgIF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9IF9yZWYubWVyZ2VQcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1lcmdlUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPT09IHZvaWQgMCA/IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIDogX3JlZiRtZXJnZVByb3BzRmFjdG9yLFxuICAgICAgX3JlZiRzZWxlY3RvckZhY3RvcnkgPSBfcmVmLnNlbGVjdG9yRmFjdG9yeSxcbiAgICAgIHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYkc2VsZWN0b3JGYWN0b3J5ID09PSB2b2lkIDAgPyBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IDogX3JlZiRzZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIF9yZWYyKSB7XG4gICAgaWYgKF9yZWYyID09PSB2b2lkIDApIHtcbiAgICAgIF9yZWYyID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9yZWYzID0gX3JlZjIsXG4gICAgICAgIF9yZWYzJHB1cmUgPSBfcmVmMy5wdXJlLFxuICAgICAgICBwdXJlID0gX3JlZjMkcHVyZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYzJHB1cmUsXG4gICAgICAgIF9yZWYzJGFyZVN0YXRlc0VxdWFsID0gX3JlZjMuYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlc0VxdWFsID0gX3JlZjMkYXJlU3RhdGVzRXF1YWwgPT09IHZvaWQgMCA/IHN0cmljdEVxdWFsIDogX3JlZjMkYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIF9yZWYzJGFyZU93blByb3BzRXF1YSA9IF9yZWYzLmFyZU93blByb3BzRXF1YWwsXG4gICAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmMyRhcmVPd25Qcm9wc0VxdWEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZU93blByb3BzRXF1YSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVQcm9wc0VxID0gX3JlZjMuYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSxcbiAgICAgICAgX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID0gX3JlZjMuYXJlTWVyZ2VkUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU1lcmdlZFByb3BzRSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlTWVyZ2VkUHJvcHNFLFxuICAgICAgICBleHRyYU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMywgW1wicHVyZVwiLCBcImFyZVN0YXRlc0VxdWFsXCIsIFwiYXJlT3duUHJvcHNFcXVhbFwiLCBcImFyZVN0YXRlUHJvcHNFcXVhbFwiLCBcImFyZU1lcmdlZFByb3BzRXF1YWxcIl0pO1xuXG4gICAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBtYXRjaChtYXBTdGF0ZVRvUHJvcHMsIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgJ21hcFN0YXRlVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gbWF0Y2gobWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1lcmdlUHJvcHMgPSBtYXRjaChtZXJnZVByb3BzLCBtZXJnZVByb3BzRmFjdG9yaWVzLCAnbWVyZ2VQcm9wcycpO1xuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFwiQ29ubmVjdChcIiArIG5hbWUgKyBcIilcIjtcbiAgICAgIH0sXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuICAgIH0sIGV4dHJhT3B0aW9ucykpO1xuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29ubmVjdCgpOyIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG4vKipcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHZhbHVlIG9mIHRoZSBgUmVhY3RSZWR1eENvbnRleHRgLiBUaGlzIGlzIGEgbG93LWxldmVsXG4gKiBob29rIHRoYXQgeW91IHNob3VsZCB1c3VhbGx5IG5vdCBuZWVkIHRvIGNhbGwgZGlyZWN0bHkuXG4gKlxuICogQHJldHVybnMge2FueX0gdGhlIHZhbHVlIG9mIHRoZSBgUmVhY3RSZWR1eENvbnRleHRgXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICh7IHZhbHVlIH0pID0+IHtcbiAqICAgY29uc3QgeyBzdG9yZSB9ID0gdXNlUmVkdXhDb250ZXh0KClcbiAqICAgcmV0dXJuIDxkaXY+e3N0b3JlLmdldFN0YXRlKCl9PC9kaXY+XG4gKiB9XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlZHV4Q29udGV4dCgpIHtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoUmVhY3RSZWR1eENvbnRleHQpO1xuICBpbnZhcmlhbnQoY29udGV4dFZhbHVlLCAnY291bGQgbm90IGZpbmQgcmVhY3QtcmVkdXggY29udGV4dCB2YWx1ZTsgcGxlYXNlIGVuc3VyZSB0aGUgY29tcG9uZW50IGlzIHdyYXBwZWQgaW4gYSA8UHJvdmlkZXI+Jyk7XG4gIHJldHVybiBjb250ZXh0VmFsdWU7XG59IiwiaW1wb3J0IHsgdXNlU3RvcmUgfSBmcm9tICcuL3VzZVN0b3JlJztcbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggYGRpc3BhdGNoYCBmdW5jdGlvbi4gTm90ZSB0aGF0IGluIG1vc3QgY2FzZXMgd2hlcmUgeW91XG4gKiBtaWdodCB3YW50IHRvIHVzZSB0aGlzIGhvb2sgaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIGB1c2VBY3Rpb25zYCBpbnN0ZWFkIHRvIGJpbmRcbiAqIGFjdGlvbiBjcmVhdG9ycyB0byB0aGUgYGRpc3BhdGNoYCBmdW5jdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7YW55fGZ1bmN0aW9ufSByZWR1eCBzdG9yZSdzIGBkaXNwYXRjaGAgZnVuY3Rpb25cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgdXNlUmVkdXhEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuICpcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKHsgdmFsdWUgfSkgPT4ge1xuICogICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcbiAqICAgY29uc3QgaW5jcmVhc2VDb3VudGVyID0gdXNlQ2FsbGJhY2soKCkgPT4gZGlzcGF0Y2goeyB0eXBlOiAnaW5jcmVhc2UtY291bnRlcicgfSksIFtdKVxuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8c3Bhbj57dmFsdWV9PC9zcGFuPlxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtpbmNyZWFzZUNvdW50ZXJ9PkluY3JlYXNlIGNvdW50ZXI8L2J1dHRvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKVxuICogfVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VEaXNwYXRjaCgpIHtcbiAgdmFyIHN0b3JlID0gdXNlU3RvcmUoKTtcbiAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoO1xufSIsImltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0Jztcbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUuXG4gKlxuICogQHJldHVybnMge2FueX0gdGhlIHJlZHV4IHN0b3JlXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuICpcbiAqIGV4cG9ydCBjb25zdCBFeGFtcGxlQ29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKClcbiAqICAgcmV0dXJuIDxkaXY+e3N0b3JlLmdldFN0YXRlKCl9PC9kaXY+XG4gKiB9XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVN0b3JlKCkge1xuICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgc3RvcmUgPSBfdXNlUmVkdXhDb250ZXh0LnN0b3JlO1xuXG4gIHJldHVybiBzdG9yZTtcbn0iLCJpbXBvcnQgeyB1c2VSZWR1Y2VyLCB1c2VSZWYsIHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nOyAvLyBSZWFjdCBjdXJyZW50bHkgdGhyb3dzIGEgd2FybmluZyB3aGVuIHVzaW5nIHVzZUxheW91dEVmZmVjdCBvbiB0aGUgc2VydmVyLlxuLy8gVG8gZ2V0IGFyb3VuZCBpdCwgd2UgY2FuIGNvbmRpdGlvbmFsbHkgdXNlRWZmZWN0IG9uIHRoZSBzZXJ2ZXIgKG5vLW9wKSBhbmRcbi8vIHVzZUxheW91dEVmZmVjdCBpbiB0aGUgYnJvd3Nlci4gV2UgbmVlZCB1c2VMYXlvdXRFZmZlY3QgdG8gZW5zdXJlIHRoZSBzdG9yZVxuLy8gc3Vic2NyaXB0aW9uIGNhbGxiYWNrIGFsd2F5cyBoYXMgdGhlIHNlbGVjdG9yIGZyb20gdGhlIGxhdGVzdCByZW5kZXIgY29tbWl0XG4vLyBhdmFpbGFibGUsIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgaGFwcGVuIGJldHdlZW4gcmVuZGVyIGFuZCB0aGUgZWZmZWN0LFxuLy8gd2hpY2ggbWF5IGNhdXNlIG1pc3NlZCB1cGRhdGVzOyB3ZSBhbHNvIG11c3QgZW5zdXJlIHRoZSBzdG9yZSBzdWJzY3JpcHRpb25cbi8vIGlzIGNyZWF0ZWQgc3luY2hyb25vdXNseSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBvY2N1ciBiZWZvcmUgdGhlXG4vLyBzdWJzY3JpcHRpb24gaXMgY3JlYXRlZCBhbmQgYW4gaW5jb25zaXN0ZW50IHN0YXRlIG1heSBiZSBvYnNlcnZlZFxuXG52YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0O1xuXG52YXIgcmVmRXF1YWxpdHkgPSBmdW5jdGlvbiByZWZFcXVhbGl0eShhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufTtcbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUncyBzdGF0ZS4gVGhpcyBob29rIHRha2VzIGEgc2VsZWN0b3IgZnVuY3Rpb25cbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxuICpcbiAqIFRoaXMgaG9vayB0YWtlcyBhbiBvcHRpb25hbCBlcXVhbGl0eSBjb21wYXJpc29uIGZ1bmN0aW9uIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxuICogd2hldGhlciB0aGUgY29tcG9uZW50IG5lZWRzIHRvIGJlIHJlLXJlbmRlcmVkLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbj19IGVxdWFsaXR5Rm4gdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBlcXVhbGl0eVxuICpcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3QgY291bnRlciA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmNvdW50ZXIpXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxuICogfVxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVNlbGVjdG9yKHNlbGVjdG9yLCBlcXVhbGl0eUZuKSB7XG4gIGlmIChlcXVhbGl0eUZuID09PSB2b2lkIDApIHtcbiAgICBlcXVhbGl0eUZuID0gcmVmRXF1YWxpdHk7XG4gIH1cblxuICBpbnZhcmlhbnQoc2VsZWN0b3IsIFwiWW91IG11c3QgcGFzcyBhIHNlbGVjdG9yIHRvIHVzZVNlbGVjdG9yc1wiKTtcblxuICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgc3RvcmUgPSBfdXNlUmVkdXhDb250ZXh0LnN0b3JlLFxuICAgICAgY29udGV4dFN1YiA9IF91c2VSZWR1eENvbnRleHQuc3Vic2NyaXB0aW9uO1xuXG4gIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gcyArIDE7XG4gIH0sIDApLFxuICAgICAgZm9yY2VSZW5kZXIgPSBfdXNlUmVkdWNlclsxXTtcblxuICB2YXIgc3Vic2NyaXB0aW9uID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24oc3RvcmUsIGNvbnRleHRTdWIpO1xuICB9LCBbc3RvcmUsIGNvbnRleHRTdWJdKTtcbiAgdmFyIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdG9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RlZFN0YXRlID0gdXNlUmVmKCk7XG4gIHZhciBzZWxlY3RlZFN0YXRlO1xuXG4gIHRyeSB7XG4gICAgaWYgKHNlbGVjdG9yICE9PSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50IHx8IGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IHNlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50O1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdmFyIGVycm9yTWVzc2FnZSA9IFwiQW4gZXJyb3Igb2NjdXJlZCB3aGlsZSBzZWxlY3RpbmcgdGhlIHN0b3JlIHN0YXRlOiBcIiArIGVyci5tZXNzYWdlICsgXCIuXCI7XG5cbiAgICBpZiAobGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBlcnJvck1lc3NhZ2UgKz0gXCJcXG5UaGUgZXJyb3IgbWF5IGJlIGNvcnJlbGF0ZWQgd2l0aCB0aGlzIHByZXZpb3VzIGVycm9yOlxcblwiICsgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50LnN0YWNrICsgXCJcXG5cXG5PcmlnaW5hbCBzdGFjayB0cmFjZTpcIjtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgfVxuXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgPSBzZWxlY3RvcjtcbiAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBzZWxlY3RlZFN0YXRlO1xuICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgfSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXdTZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudChzdG9yZS5nZXRTdGF0ZSgpKTtcblxuICAgICAgICBpZiAoZXF1YWxpdHlGbihuZXdTZWxlY3RlZFN0YXRlLCBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gbmV3U2VsZWN0ZWRTdGF0ZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyB3ZSBpZ25vcmUgYWxsIGVycm9ycyBoZXJlLCBzaW5jZSB3aGVuIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaXMgcmUtcmVuZGVyZWQsIHRoZSBzZWxlY3RvcnMgYXJlIGNhbGxlZCBhZ2FpbiwgYW5kXG4gICAgICAgIC8vIHdpbGwgdGhyb3cgYWdhaW4sIGlmIG5laXRoZXIgcHJvcHMgbm9yIHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZWRcbiAgICAgICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gZXJyO1xuICAgICAgfVxuXG4gICAgICBmb3JjZVJlbmRlcih7fSk7XG4gICAgfVxuXG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgIGNoZWNrRm9yVXBkYXRlcygpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW3N0b3JlLCBzdWJzY3JpcHRpb25dKTtcbiAgcmV0dXJuIHNlbGVjdGVkU3RhdGU7XG59IiwiZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCxcbiAgICAgICAgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTtcbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuXG5leHBvcnQgZGVmYXVsdCB0aHVuazsiLCJpbXBvcnQgUHJvdmlkZXIgZnJvbSAnLi9jb21wb25lbnRzL1Byb3ZpZGVyJztcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdC9jb25uZWN0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAnLi9ob29rcy91c2VEaXNwYXRjaCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJy4vaG9va3MvdXNlU2VsZWN0b3InO1xuaW1wb3J0IHsgdXNlU3RvcmUgfSBmcm9tICcuL2hvb2tzL3VzZVN0b3JlJztcbmltcG9ydCB7IHNldEJhdGNoIH0gZnJvbSAnLi91dGlscy9iYXRjaCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyBhcyBiYXRjaCB9IGZyb20gJy4vdXRpbHMvcmVhY3RCYXRjaGVkVXBkYXRlcyc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbnNldEJhdGNoKGJhdGNoKTtcbmV4cG9ydCB7IFByb3ZpZGVyLCBjb25uZWN0QWR2YW5jZWQsIFJlYWN0UmVkdXhDb250ZXh0LCBjb25uZWN0LCBiYXRjaCwgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yLCB1c2VTdG9yZSwgc2hhbGxvd0VxdWFsIH07IiwiaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIH0gZnJvbSBcInJlZHV4XCI7XG5cbmZ1bmN0aW9uIGdyZWV0aW5nUmVkdWNlcihncmVldGluZ3MgPSBbXSwgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFwiU0VUX0dSRUVUSU5HU1wiOlxuICAgICAgZ3JlZXRpbmdzID0gWy4uLmFjdGlvbi5ncmVldGluZ3NdO1xuICAgICAgcmV0dXJuIGdyZWV0aW5ncztcbiAgICBkZWZhdWx0OlxuICB9XG4gIHJldHVybiBncmVldGluZ3M7XG59XG5cbmZ1bmN0aW9uIG1vZGVSZWR1Y2VyKG1vZGUgPSBcIk1PREVfTUFTVEVSXCIsIGFjdGlvbikge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBcIlNFVF9NT0RFXCI6XG4gICAgICByZXR1cm4gYWN0aW9uLm1vZGU7XG4gICAgZGVmYXVsdDpcbiAgfVxuXG4gIHJldHVybiBtb2RlO1xufVxuXG5jb25zdCBhcHBSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKHtcbiAgZ3JlZXRpbmdzOiBncmVldGluZ1JlZHVjZXIsXG4gIG1vZGU6IG1vZGVSZWR1Y2VyXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgYXBwUmVkdWNlcjtcbiIsImltcG9ydCB7IGNyZWF0ZVN0b3JlLCBhcHBseU1pZGRsZXdhcmUsIGNvbXBvc2UgfSBmcm9tIFwicmVkdXhcIjtcbmltcG9ydCB0aHVuayBmcm9tIFwicmVkdXgtdGh1bmtcIjtcblxuaW1wb3J0IGdyZWV0aW5nQXBwIGZyb20gXCIuL3JlZHVjZXJzXCI7XG5cbmNvbnN0IGNvbXBvc2VFbmhhbmNlcnMgPSB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIHx8IGNvbXBvc2U7XG5cbmNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoZ3JlZXRpbmdBcHAsIGNvbXBvc2VFbmhhbmNlcnMoYXBwbHlNaWRkbGV3YXJlKHRodW5rKSkpO1xuZXhwb3J0IGRlZmF1bHQgc3RvcmU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmZ1bmN0aW9uIEdyZWV0aW5nTWFzdGVyKHByb3BzKSB7XG4gIGNvbnN0IHsgZ3JlZXRpbmdzLCBvbkFkZCB9ID0gcHJvcHM7XG4gIGNvbnN0IGJvZHkgPSBncmVldGluZ3MubWFwKGdyZWV0aW5nID0+IChcbiAgICA8dHIga2V5PXtncmVldGluZy5pZH0+XG4gICAgICA8dGQ+e2dyZWV0aW5nLm5hbWV9PC90ZD5cbiAgICAgIDx0ZD57Z3JlZXRpbmcuZ3JlZXRpbmd9PC90ZD5cbiAgICA8L3RyPlxuICApKTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPHRhYmxlPlxuICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRoPk5hbWU8L3RoPlxuICAgICAgICAgICAgPHRoPkdyZWV0aW5nPC90aD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICA8L3RoZWFkPlxuICAgICAgICA8dGJvZHk+e2JvZHl9PC90Ym9keT5cbiAgICAgIDwvdGFibGU+XG4gICAgICA8YnV0dG9uIG9uQ2xpY2s9e29uQWRkfT5BZGQ8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEdyZWV0aW5nTWFzdGVyO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG4vKipcbiAqIEF1ZmdhYmVuOlxuICogMS4gUGxhY2Vob2xkZXIgdm9yYmVsZWdlbiwgZGF2b24gZGFzICduYW1lJyBBdHRyaWJ1dGUgYWJsZWl0ZW5cbiAqIDIuIGluaXRpYWwgVmFsdWUgdm9yYmVsZWdlbiBtaXQgXCJcIiwgZmFsbHMgbmljaHQgZ2VzZXR6dFxuICogMy4gU2V0emVuIGRlcyBXZXJ0ZXMgdW5kIGF1ZiBWZXLDpG5kZXJ1bmdlbiByZWFnaWVyZW5cbiAqIDQuIFZvbiBhdcOfZW4gJ3Jlc2V0LWJhcicgc2VpblxuICpcbiAqL1xuZnVuY3Rpb24gdXNlSW5wdXQocGxhY2Vob2xkZXIsIGluaXRpYWxWYWx1ZSkge1xuICBjb25zdCBbdmFsdWUsIHNldFZhbHVlXSA9IFJlYWN0LnVzZVN0YXRlKGluaXRpYWxWYWx1ZSB8fCBcIlwiKTtcblxuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBzZXRWYWx1ZShcIlwiKTtcbiAgfVxuXG4gIHJldHVybiBbXG4gICAge1xuICAgICAgcGxhY2Vob2xkZXIsXG4gICAgICBuYW1lOiBwbGFjZWhvbGRlci50b0xvd2VyQ2FzZSgpLFxuICAgICAgb25DaGFuZ2U6IGV2ZW50ID0+IHNldFZhbHVlKGV2ZW50LnRhcmdldC52YWx1ZSksXG4gICAgICB2YWx1ZVxuICAgIH0sXG4gICAgcmVzZXRcbiAgXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gR3JlZXRpbmdEZXRhaWwocHJvcHMpIHtcbiAgY29uc3QgW25hbWVJbnB1dCwgcmVzZXROYW1lXSA9IHVzZUlucHV0KFwiTmFtZVwiLCBwcm9wcy5pbml0aWFsTmFtZSk7XG4gIGNvbnN0IFtncmVldGluZ0lucHV0LCByZXNldEdyZWV0aW5nXSA9IHVzZUlucHV0KFwiR3JlZXRpbmdcIiwgcHJvcHMuaW5pdGlhbEdyZWV0aW5nKTtcblxuICBjb25zdCBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZigpO1xuXG4gIGNvbnN0IHNhdmVEaXNhYmxlZCA9ICEobmFtZUlucHV0LnZhbHVlICYmIGdyZWV0aW5nSW5wdXQudmFsdWUpO1xuXG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHJlc2V0TmFtZSgpO1xuICAgIHJlc2V0R3JlZXRpbmcoKTtcblxuICAgIGlucHV0UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNhdmUoKSB7XG4gICAgcHJvcHMub25TYXZlKHtcbiAgICAgIG5hbWU6IG5hbWVJbnB1dC52YWx1ZSxcbiAgICAgIGdyZWV0aW5nOiBncmVldGluZ0lucHV0LnZhbHVlXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aW5wdXQgey4uLm5hbWVJbnB1dH0gcmVmPXtpbnB1dFJlZn0gLz5cbiAgICAgIDxpbnB1dCB7Li4uZ3JlZXRpbmdJbnB1dH0gLz5cblxuICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtyZXNldH0+Q2xlYXI8L2J1dHRvbj5cbiAgICAgIDxidXR0b24gZGlzYWJsZWQ9e3NhdmVEaXNhYmxlZH0gb25DbGljaz17c2F2ZX0+XG4gICAgICAgIFNhdmVcbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICApO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHNldEdyZWV0aW5ncyhuZXdHcmVldGluZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIlNFVF9HUkVFVElOR1NcIixcbiAgICBncmVldGluZ3M6IGdyZWV0aW5nc1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkR3JlZXRpbmcobmV3R3JlZXRpbmcpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIkFERF9HUkVFVElOR1wiLFxuICAgIGdyZWV0aW5nOiBuZXdHcmVldGluZ1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb3BlbkRldGFpbFZpZXcoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJTRVRfTU9ERVwiLFxuICAgIG1vZGU6IFwiTU9ERV9ERVRBSUxcIlxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb3Blbk1hc3RlclZpZXcoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJTRVRfTU9ERVwiLFxuICAgIG1vZGU6IFwiTU9ERV9NQVNURVJcIlxuICB9O1xufVxuXG5jb25zdCBCQUNLRU5EX1VSTCA9IFwiaHR0cDovL2xvY2FsaG9zdDo3MDAwL2dyZWV0aW5nc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEdyZWV0aW5nc0Zyb21TZXJ2ZXIoKSB7XG4gIHJldHVybiBhc3luYyBkaXNwYXRjaCA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goQkFDS0VORF9VUkwpO1xuICAgICAgY29uc3QgZ3JlZXRpbmdzID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBcIlNFVF9HUkVFVElOR1NcIixcbiAgICAgICAgZ3JlZXRpbmdzOiBncmVldGluZ3NcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkxvYWRpbmcgR3JlZXRpbmdzIGZhaWxlZFwiLCBlcnIpO1xuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBcIlNFVF9HUkVFVElOR1NfRkFJTEVEXCIsXG4gICAgICAgIGVyclxuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgR3JlZXRpbmdNYXN0ZXIgZnJvbSBcIi4vR3JlZXRpbmdNYXN0ZXJcIjtcbmltcG9ydCBHcmVldGluZ0RldGFpbCBmcm9tIFwiLi9HcmVldGluZ0RldGFpbFwiO1xuXG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gXCIuL2FjdGlvbnNcIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuXG5jb25zdCBCQUNLRU5EX1VSTCA9IFwiaHR0cDovL2xvY2FsaG9zdDo3MDAwL2dyZWV0aW5nc1wiO1xuY29uc3QgTU9ERV9NQVNURVIgPSBcIk1PREVfTUFTVEVSXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEdyZWV0aW5nQ29udHJvbGxlcigpIHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBtb2RlID0gdXNlU2VsZWN0b3Ioc3RvcmUgPT4gc3RvcmUubW9kZSk7XG4gIGNvbnN0IGdyZWV0aW5ncyA9IHVzZVNlbGVjdG9yKHN0b3JlID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIlJFRFVYIFNUT1JFXCIsIHN0b3JlKTtcbiAgICByZXR1cm4gc3RvcmUuZ3JlZXRpbmdzO1xuICB9KTtcblxuICBjb25zb2xlLmxvZyhcImdyZWV0aW5nc0Zyb21SZWR1eFwiLCBncmVldGluZ3MpO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZGlzcGF0Y2goYWN0aW9ucy5sb2FkR3JlZXRpbmdzRnJvbVNlcnZlcigpKTtcbiAgfSwgW10pO1xuXG4gIGFzeW5jIGZ1bmN0aW9uIGFkZEdyZWV0aW5nKGdyZWV0aW5nVG9CZUFkZGVkKSB7XG4gICAgbGV0IG5ld0dyZWV0aW5nO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKEJBQ0tFTkRfVVJMLCB7XG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGdyZWV0aW5nVG9CZUFkZGVkKVxuICAgICAgfSk7XG4gICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzdGF0dXMgY29kZTogXCIgKyByZXNwb25zZS5zdGF0dXMpO1xuICAgICAgfVxuICAgICAgbmV3R3JlZXRpbmcgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTE9BRElORyBHUkVFVElOR1MgRkFJTEVEOlwiLCBlcnIpO1xuICAgIH1cbiAgICBkaXNwYXRjaChhY3Rpb25zLmFkZEdyZWV0aW5nKG5ld0dyZWV0aW5nKSk7XG4gICAgZGlzcGF0Y2goYWN0aW9ucy5vcGVuTWFzdGVyVmlldygpKTtcbiAgfVxuXG4gIGlmIChtb2RlID09PSBNT0RFX01BU1RFUilcbiAgICByZXR1cm4gKFxuICAgICAgPEdyZWV0aW5nTWFzdGVyXG4gICAgICAgIGdyZWV0aW5ncz17Z3JlZXRpbmdzfVxuICAgICAgICBvbkFkZD17KCkgPT4ge1xuICAgICAgICAgIGRpc3BhdGNoKGFjdGlvbnMub3BlbkRldGFpbFZpZXcoKSk7XG4gICAgICAgIH19XG4gICAgICAvPlxuICAgICk7XG5cbiAgcmV0dXJuIDxHcmVldGluZ0RldGFpbCBvblNhdmU9e2FkZEdyZWV0aW5nfSAvPjtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZnVuY3Rpb24gRXJyb3JNZXNzYWdlKHsgbXNnLCBvblJldHJ5IH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgxPkFuIGVycm9yIG9jY3VyZWQhPC9oMT5cbiAgICAgIDxwcmU+e21zZ308L3ByZT5cbiAgICAgIDxidXR0b24gb25DbGljaz17b25SZXRyeX0+VHJ5IGFnYWluPC9idXR0b24+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVycm9ySGFuZGxlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7fTtcbiAgfVxuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4geyBlcnJvcjogZXJyb3IudG9TdHJpbmcoKSB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGluZm8pIHtcbiAgICBjb25zb2xlLmVycm9yKFwidXVwcy4uLiB3ZSBjYXVnaHQgYW4gZXJyb3JcIiwgZXJyb3IsIGluZm8pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLmVycm9yKSB7XG4gICAgICByZXR1cm4gPEVycm9yTWVzc2FnZSBtc2c9e3RoaXMuc3RhdGUuZXJyb3J9IG9uUmV0cnk9eygpID0+IHRoaXMuc2V0U3RhdGUoeyBlcnJvcjogbnVsbCB9KX0gLz47XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XG5cbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgc3RvcmUgZnJvbSBcIi4vc3RvcmVcIjtcblxuaW1wb3J0IEdyZWV0aW5nQ29udHJvbGxlciBmcm9tIFwiLi9HcmVldGluZ0NvbnRyb2xsZXJcIjtcbmltcG9ydCBFcnJvckhhbmRsZXIgZnJvbSBcIi4vRXJyb3JIYW5kbGVyXCI7XG5cbmNvbnN0IG1vdW50Tm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibW91bnRcIik7XG5SZWFjdERPTS5yZW5kZXIoXG4gIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgIDxFcnJvckhhbmRsZXI+XG4gICAgICA8R3JlZXRpbmdDb250cm9sbGVyIC8+XG4gICAgPC9FcnJvckhhbmRsZXI+XG4gIDwvUHJvdmlkZXI+LFxuICBtb3VudE5vZGVcbik7XG4iXSwic291cmNlUm9vdCI6IiJ9