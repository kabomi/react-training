!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/dist",n(n.s=131)}([function(e,t,n){var r=n(2),o=n(8),i=n(15),u=n(12),a=n(18),l=function(e,t,n){var c,s,f,p,d=e&l.F,h=e&l.G,v=e&l.S,y=e&l.P,m=e&l.B,g=h?r:v?r[t]||(r[t]={}):(r[t]||{}).prototype,b=h?o:o[t]||(o[t]={}),w=b.prototype||(b.prototype={});for(c in h&&(n=t),n)f=((s=!d&&g&&void 0!==g[c])?g:n)[c],p=m&&s?a(f,r):y&&"function"==typeof f?a(Function.call,f):f,g&&u(g,c,f,e&l.U),b[c]!=f&&i(b,c,p),y&&w[c]!=f&&(w[c]=f)};r.core=o,l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,e.exports=l},function(e,t,n){"use strict";e.exports=n(318)},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(5);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var r=n(51)("wks"),o=n(31),i=n(2).Symbol,u="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=u&&i[e]||(u?i:o)("Symbol."+e))}).store=r},function(e,t,n){var r=n(20),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t){var n=e.exports={version:"2.6.6"};"number"==typeof __e&&(__e=n)},function(e,t,n){e.exports=!n(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(4),o=n(95),i=n(28),u=Object.defineProperty;t.f=n(9)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return u(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(25);e.exports=function(e){return Object(r(e))}},function(e,t,n){var r=n(2),o=n(15),i=n(14),u=n(31)("src"),a=n(136),l=(""+a).split("toString");n(8).inspectSource=function(e){return a.call(e)},(e.exports=function(e,t,n,a){var c="function"==typeof n;c&&(i(n,"name")||o(n,"name",t)),e[t]!==n&&(c&&(i(n,u)||o(n,u,e[t]?""+e[t]:l.join(String(t)))),e===r?e[t]=n:a?e[t]?e[t]=n:o(e,t,n):(delete e[t],o(e,t,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||a.call(this)})},function(e,t,n){var r=n(0),o=n(3),i=n(25),u=/"/g,a=function(e,t,n,r){var o=String(i(e)),a="<"+t;return""!==n&&(a+=" "+n+'="'+String(r).replace(u,"&quot;")+'"'),a+">"+o+"</"+t+">"};e.exports=function(e,t){var n={};n[e]=t(a),r(r.P+r.F*o(function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3}),"String",n)}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(10),o=n(30);e.exports=n(9)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(47),o=n(25);e.exports=function(e){return r(o(e))}},function(e,t,n){"use strict";var r=n(3);e.exports=function(e,t){return!!e&&r(function(){t?e.call(null,function(){},1):e.call(null)})}},function(e,t,n){var r=n(19);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(48),o=n(30),i=n(16),u=n(28),a=n(14),l=n(95),c=Object.getOwnPropertyDescriptor;t.f=n(9)?c:function(e,t){if(e=i(e),t=u(t,!0),l)try{return c(e,t)}catch(e){}if(a(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t,n){var r=n(0),o=n(8),i=n(3);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],u={};u[e]=t(n),r(r.S+r.F*i(function(){n(1)}),"Object",u)}},function(e,t,n){var r=n(18),o=n(47),i=n(11),u=n(7),a=n(111);e.exports=function(e,t){var n=1==e,l=2==e,c=3==e,s=4==e,f=6==e,p=5==e||f,d=t||a;return function(t,a,h){for(var v,y,m=i(t),g=o(m),b=r(a,h,3),w=u(g.length),x=0,S=n?d(t,w):l?d(t,0):void 0;w>x;x++)if((p||x in g)&&(y=b(v=g[x],x,m),e))if(n)S[x]=y;else if(y)switch(e){case 3:return!0;case 5:return v;case 6:return x;case 2:S.push(v)}else if(s)return!1;return f?-1:c||s?s:S}}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){"use strict";if(n(9)){var r=n(32),o=n(2),i=n(3),u=n(0),a=n(62),l=n(88),c=n(18),s=n(45),f=n(30),p=n(15),d=n(46),h=n(20),v=n(7),y=n(122),m=n(34),g=n(28),b=n(14),w=n(49),x=n(5),S=n(11),E=n(80),_=n(35),k=n(37),T=n(36).f,P=n(82),C=n(31),O=n(6),N=n(23),M=n(52),R=n(50),I=n(84),j=n(43),F=n(55),A=n(44),D=n(83),L=n(113),U=n(10),z=n(21),W=U.f,V=z.f,B=o.RangeError,$=o.TypeError,G=o.Uint8Array,H=Array.prototype,q=l.ArrayBuffer,K=l.DataView,Q=N(0),Y=N(2),X=N(3),J=N(4),Z=N(5),ee=N(6),te=M(!0),ne=M(!1),re=I.values,oe=I.keys,ie=I.entries,ue=H.lastIndexOf,ae=H.reduce,le=H.reduceRight,ce=H.join,se=H.sort,fe=H.slice,pe=H.toString,de=H.toLocaleString,he=O("iterator"),ve=O("toStringTag"),ye=C("typed_constructor"),me=C("def_constructor"),ge=a.CONSTR,be=a.TYPED,we=a.VIEW,xe=N(1,function(e,t){return Te(R(e,e[me]),t)}),Se=i(function(){return 1===new G(new Uint16Array([1]).buffer)[0]}),Ee=!!G&&!!G.prototype.set&&i(function(){new G(1).set({})}),_e=function(e,t){var n=h(e);if(n<0||n%t)throw B("Wrong offset!");return n},ke=function(e){if(x(e)&&be in e)return e;throw $(e+" is not a typed array!")},Te=function(e,t){if(!(x(e)&&ye in e))throw $("It is not a typed array constructor!");return new e(t)},Pe=function(e,t){return Ce(R(e,e[me]),t)},Ce=function(e,t){for(var n=0,r=t.length,o=Te(e,r);r>n;)o[n]=t[n++];return o},Oe=function(e,t,n){W(e,t,{get:function(){return this._d[n]}})},Ne=function(e){var t,n,r,o,i,u,a=S(e),l=arguments.length,s=l>1?arguments[1]:void 0,f=void 0!==s,p=P(a);if(null!=p&&!E(p)){for(u=p.call(a),r=[],t=0;!(i=u.next()).done;t++)r.push(i.value);a=r}for(f&&l>2&&(s=c(s,arguments[2],2)),t=0,n=v(a.length),o=Te(this,n);n>t;t++)o[t]=f?s(a[t],t):a[t];return o},Me=function(){for(var e=0,t=arguments.length,n=Te(this,t);t>e;)n[e]=arguments[e++];return n},Re=!!G&&i(function(){de.call(new G(1))}),Ie=function(){return de.apply(Re?fe.call(ke(this)):ke(this),arguments)},je={copyWithin:function(e,t){return L.call(ke(this),e,t,arguments.length>2?arguments[2]:void 0)},every:function(e){return J(ke(this),e,arguments.length>1?arguments[1]:void 0)},fill:function(e){return D.apply(ke(this),arguments)},filter:function(e){return Pe(this,Y(ke(this),e,arguments.length>1?arguments[1]:void 0))},find:function(e){return Z(ke(this),e,arguments.length>1?arguments[1]:void 0)},findIndex:function(e){return ee(ke(this),e,arguments.length>1?arguments[1]:void 0)},forEach:function(e){Q(ke(this),e,arguments.length>1?arguments[1]:void 0)},indexOf:function(e){return ne(ke(this),e,arguments.length>1?arguments[1]:void 0)},includes:function(e){return te(ke(this),e,arguments.length>1?arguments[1]:void 0)},join:function(e){return ce.apply(ke(this),arguments)},lastIndexOf:function(e){return ue.apply(ke(this),arguments)},map:function(e){return xe(ke(this),e,arguments.length>1?arguments[1]:void 0)},reduce:function(e){return ae.apply(ke(this),arguments)},reduceRight:function(e){return le.apply(ke(this),arguments)},reverse:function(){for(var e,t=ke(this).length,n=Math.floor(t/2),r=0;r<n;)e=this[r],this[r++]=this[--t],this[t]=e;return this},some:function(e){return X(ke(this),e,arguments.length>1?arguments[1]:void 0)},sort:function(e){return se.call(ke(this),e)},subarray:function(e,t){var n=ke(this),r=n.length,o=m(e,r);return new(R(n,n[me]))(n.buffer,n.byteOffset+o*n.BYTES_PER_ELEMENT,v((void 0===t?r:m(t,r))-o))}},Fe=function(e,t){return Pe(this,fe.call(ke(this),e,t))},Ae=function(e){ke(this);var t=_e(arguments[1],1),n=this.length,r=S(e),o=v(r.length),i=0;if(o+t>n)throw B("Wrong length!");for(;i<o;)this[t+i]=r[i++]},De={entries:function(){return ie.call(ke(this))},keys:function(){return oe.call(ke(this))},values:function(){return re.call(ke(this))}},Le=function(e,t){return x(e)&&e[be]&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},Ue=function(e,t){return Le(e,t=g(t,!0))?f(2,e[t]):V(e,t)},ze=function(e,t,n){return!(Le(e,t=g(t,!0))&&x(n)&&b(n,"value"))||b(n,"get")||b(n,"set")||n.configurable||b(n,"writable")&&!n.writable||b(n,"enumerable")&&!n.enumerable?W(e,t,n):(e[t]=n.value,e)};ge||(z.f=Ue,U.f=ze),u(u.S+u.F*!ge,"Object",{getOwnPropertyDescriptor:Ue,defineProperty:ze}),i(function(){pe.call({})})&&(pe=de=function(){return ce.call(this)});var We=d({},je);d(We,De),p(We,he,De.values),d(We,{slice:Fe,set:Ae,constructor:function(){},toString:pe,toLocaleString:Ie}),Oe(We,"buffer","b"),Oe(We,"byteOffset","o"),Oe(We,"byteLength","l"),Oe(We,"length","e"),W(We,ve,{get:function(){return this[be]}}),e.exports=function(e,t,n,l){var c=e+((l=!!l)?"Clamped":"")+"Array",f="get"+e,d="set"+e,h=o[c],m=h||{},g=h&&k(h),b=!h||!a.ABV,S={},E=h&&h.prototype,P=function(e,n){W(e,n,{get:function(){return function(e,n){var r=e._d;return r.v[f](n*t+r.o,Se)}(this,n)},set:function(e){return function(e,n,r){var o=e._d;l&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[d](n*t+o.o,r,Se)}(this,n,e)},enumerable:!0})};b?(h=n(function(e,n,r,o){s(e,h,c,"_d");var i,u,a,l,f=0,d=0;if(x(n)){if(!(n instanceof q||"ArrayBuffer"==(l=w(n))||"SharedArrayBuffer"==l))return be in n?Ce(h,n):Ne.call(h,n);i=n,d=_e(r,t);var m=n.byteLength;if(void 0===o){if(m%t)throw B("Wrong length!");if((u=m-d)<0)throw B("Wrong length!")}else if((u=v(o)*t)+d>m)throw B("Wrong length!");a=u/t}else a=y(n),i=new q(u=a*t);for(p(e,"_d",{b:i,o:d,l:u,e:a,v:new K(i)});f<a;)P(e,f++)}),E=h.prototype=_(We),p(E,"constructor",h)):i(function(){h(1)})&&i(function(){new h(-1)})&&F(function(e){new h,new h(null),new h(1.5),new h(e)},!0)||(h=n(function(e,n,r,o){var i;return s(e,h,c),x(n)?n instanceof q||"ArrayBuffer"==(i=w(n))||"SharedArrayBuffer"==i?void 0!==o?new m(n,_e(r,t),o):void 0!==r?new m(n,_e(r,t)):new m(n):be in n?Ce(h,n):Ne.call(h,n):new m(y(n))}),Q(g!==Function.prototype?T(m).concat(T(g)):T(m),function(e){e in h||p(h,e,m[e])}),h.prototype=E,r||(E.constructor=h));var C=E[he],O=!!C&&("values"==C.name||null==C.name),N=De.values;p(h,ye,!0),p(E,be,c),p(E,we,!0),p(E,me,h),(l?new h(1)[ve]==c:ve in E)||W(E,ve,{get:function(){return c}}),S[c]=h,u(u.G+u.W+u.F*(h!=m),S),u(u.S,c,{BYTES_PER_ELEMENT:t}),u(u.S+u.F*i(function(){m.of.call(h,1)}),c,{from:Ne,of:Me}),"BYTES_PER_ELEMENT"in E||p(E,"BYTES_PER_ELEMENT",t),u(u.P,c,je),A(c),u(u.P+u.F*Ee,c,{set:Ae}),u(u.P+u.F*!O,c,De),r||E.toString==pe||(E.toString=pe),u(u.P+u.F*i(function(){new h(1).slice()}),c,{slice:Fe}),u(u.P+u.F*(i(function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()})||!i(function(){E.toLocaleString.call([1,2])})),c,{toLocaleString:Ie}),j[c]=O?C:N,r||O||p(E,he,N)}}else e.exports=function(){}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,u,a){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,u,a],s=0;(l=new Error(t.replace(/%s/g,function(){return c[s++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){var r=n(5);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(31)("meta"),o=n(5),i=n(14),u=n(10).f,a=0,l=Object.isExtensible||function(){return!0},c=!n(3)(function(){return l(Object.preventExtensions({}))}),s=function(e){u(e,r,{value:{i:"O"+ ++a,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,r)){if(!l(e))return"F";if(!t)return"E";s(e)}return e[r].i},getWeak:function(e,t){if(!i(e,r)){if(!l(e))return!0;if(!t)return!1;s(e)}return e[r].w},onFreeze:function(e){return c&&f.NEED&&l(e)&&!i(e,r)&&s(e),e}}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t){e.exports=!1},function(e,t,n){var r=n(97),o=n(67);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(20),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){var r=n(4),o=n(98),i=n(67),u=n(66)("IE_PROTO"),a=function(){},l=function(){var e,t=n(64)("iframe"),r=i.length;for(t.style.display="none",n(68).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),l=e.F;r--;)delete l.prototype[i[r]];return l()};e.exports=Object.create||function(e,t){var n;return null!==e?(a.prototype=r(e),n=new a,a.prototype=null,n[u]=e):n=l(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(97),o=n(67).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(14),o=n(11),i=n(66)("IE_PROTO"),u=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?u:null}},function(e,t,n){var r=n(6)("unscopables"),o=Array.prototype;null==o[r]&&n(15)(o,r,{}),e.exports=function(e){o[r][e]=!0}},function(e,t,n){var r=n(5);e.exports=function(e,t){if(!r(e)||e._t!==t)throw TypeError("Incompatible receiver, "+t+" required!");return e}},function(e,t,n){e.exports=n(322)()},function(e,t,n){var r=n(10).f,o=n(14),i=n(6)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t,n){var r=n(0),o=n(25),i=n(3),u=n(70),a="["+u+"]",l=RegExp("^"+a+a+"*"),c=RegExp(a+a+"*$"),s=function(e,t,n){var o={},a=i(function(){return!!u[e]()||"​"!="​"[e]()}),l=o[e]=a?t(f):u[e];n&&(o[n]=l),r(r.P+r.F*a,"String",o)},f=s.trim=function(e,t){return e=String(o(e)),1&t&&(e=e.replace(l,"")),2&t&&(e=e.replace(c,"")),e};e.exports=s},function(e,t){e.exports={}},function(e,t,n){"use strict";var r=n(2),o=n(10),i=n(9),u=n(6)("species");e.exports=function(e){var t=r[e];i&&t&&!t[u]&&o.f(t,u,{configurable:!0,get:function(){return this}})}},function(e,t){e.exports=function(e,t,n,r){if(!(e instanceof t)||void 0!==r&&r in e)throw TypeError(n+": incorrect invocation!");return e}},function(e,t,n){var r=n(12);e.exports=function(e,t,n){for(var o in t)r(e,o,t[o],n);return e}},function(e,t,n){var r=n(24);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){var r=n(24),o=n(6)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,u;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:i?r(t):"Object"==(u=r(t))&&"function"==typeof t.callee?"Arguments":u}},function(e,t,n){var r=n(4),o=n(19),i=n(6)("species");e.exports=function(e,t){var n,u=r(e).constructor;return void 0===u||null==(n=r(u)[i])?t:o(n)}},function(e,t,n){var r=n(8),o=n(2),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(32)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t,n){var r=n(16),o=n(7),i=n(34);e.exports=function(e){return function(t,n,u){var a,l=r(t),c=o(l.length),s=i(u,c);if(e&&n!=n){for(;c>s;)if((a=l[s++])!=a)return!0}else for(;c>s;s++)if((e||s in l)&&l[s]===n)return e||s||0;return!e&&-1}}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(24);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(6)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var i=[7],u=i[r]();u.next=function(){return{done:n=!0}},i[r]=function(){return u},e(i)}catch(e){}return n}},function(e,t,n){"use strict";var r=n(4);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){"use strict";var r=n(49),o=RegExp.prototype.exec;e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var i=n.call(e,t);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(e))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(e,t)}},function(e,t,n){"use strict";n(115);var r=n(12),o=n(15),i=n(3),u=n(25),a=n(6),l=n(85),c=a("species"),s=!i(function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}),f=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(e,t,n){var p=a(e),d=!i(function(){var t={};return t[p]=function(){return 7},7!=""[e](t)}),h=d?!i(function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[c]=function(){return n}),n[p](""),!t}):void 0;if(!d||!h||"replace"===e&&!s||"split"===e&&!f){var v=/./[p],y=n(u,p,""[e],function(e,t,n,r,o){return t.exec===l?d&&!o?{done:!0,value:v.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}}),m=y[0],g=y[1];r(String.prototype,e,m),o(RegExp.prototype,p,2==t?function(e,t){return g.call(e,this,t)}:function(e){return g.call(e,this)})}}},function(e,t,n){var r=n(18),o=n(110),i=n(80),u=n(4),a=n(7),l=n(82),c={},s={};(t=e.exports=function(e,t,n,f,p){var d,h,v,y,m=p?function(){return e}:l(e),g=r(n,f,t?2:1),b=0;if("function"!=typeof m)throw TypeError(e+" is not iterable!");if(i(m)){for(d=a(e.length);d>b;b++)if((y=t?g(u(h=e[b])[0],h[1]):g(e[b]))===c||y===s)return y}else for(v=m.call(e);!(h=v.next()).done;)if((y=o(v,g,h.value,t))===c||y===s)return y}).BREAK=c,t.RETURN=s},function(e,t,n){var r=n(2).navigator;e.exports=r&&r.userAgent||""},function(e,t,n){"use strict";var r=n(2),o=n(0),i=n(12),u=n(46),a=n(29),l=n(59),c=n(45),s=n(5),f=n(3),p=n(55),d=n(41),h=n(71);e.exports=function(e,t,n,v,y,m){var g=r[e],b=g,w=y?"set":"add",x=b&&b.prototype,S={},E=function(e){var t=x[e];i(x,e,"delete"==e?function(e){return!(m&&!s(e))&&t.call(this,0===e?0:e)}:"has"==e?function(e){return!(m&&!s(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return m&&!s(e)?void 0:t.call(this,0===e?0:e)}:"add"==e?function(e){return t.call(this,0===e?0:e),this}:function(e,n){return t.call(this,0===e?0:e,n),this})};if("function"==typeof b&&(m||x.forEach&&!f(function(){(new b).entries().next()}))){var _=new b,k=_[w](m?{}:-0,1)!=_,T=f(function(){_.has(1)}),P=p(function(e){new b(e)}),C=!m&&f(function(){for(var e=new b,t=5;t--;)e[w](t,t);return!e.has(-0)});P||((b=t(function(t,n){c(t,b,e);var r=h(new g,t,b);return null!=n&&l(n,y,r[w],r),r})).prototype=x,x.constructor=b),(T||C)&&(E("delete"),E("has"),y&&E("get")),(C||k)&&E(w),m&&x.clear&&delete x.clear}else b=v.getConstructor(t,e,y,w),u(b.prototype,n),a.NEED=!0;return d(b,e),S[e]=b,o(o.G+o.W+o.F*(b!=g),S),m||v.setStrong(b,e,y),b}},function(e,t,n){for(var r,o=n(2),i=n(15),u=n(31),a=u("typed_array"),l=u("view"),c=!(!o.ArrayBuffer||!o.DataView),s=c,f=0,p="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=o[p[f++]])?(i(r.prototype,a,!0),i(r.prototype,l,!0)):s=!1;e.exports={ABV:c,CONSTR:s,TYPED:a,VIEW:l}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(319)},function(e,t,n){var r=n(5),o=n(2).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){t.f=n(6)},function(e,t,n){var r=n(51)("keys"),o=n(31);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(2).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(5),o=n(4),i=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(18)(Function.call,n(21).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return i(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:i}},function(e,t){e.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(e,t,n){var r=n(5),o=n(69).set;e.exports=function(e,t,n){var i,u=t.constructor;return u!==n&&"function"==typeof u&&(i=u.prototype)!==n.prototype&&r(i)&&o&&o(e,i),e}},function(e,t,n){"use strict";var r=n(20),o=n(25);e.exports=function(e){var t=String(o(this)),n="",i=r(e);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(t+=t))1&i&&(n+=t);return n}},function(e,t){e.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},function(e,t){var n=Math.expm1;e.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(e){return 0==(e=+e)?e:e>-1e-6&&e<1e-6?e+e*e/2:Math.exp(e)-1}:n},function(e,t,n){var r=n(20),o=n(25);e.exports=function(e){return function(t,n){var i,u,a=String(o(t)),l=r(n),c=a.length;return l<0||l>=c?e?"":void 0:(i=a.charCodeAt(l))<55296||i>56319||l+1===c||(u=a.charCodeAt(l+1))<56320||u>57343?e?a.charAt(l):i:e?a.slice(l,l+2):u-56320+(i-55296<<10)+65536}}},function(e,t,n){"use strict";var r=n(32),o=n(0),i=n(12),u=n(15),a=n(43),l=n(109),c=n(41),s=n(37),f=n(6)("iterator"),p=!([].keys&&"next"in[].keys()),d=function(){return this};e.exports=function(e,t,n,h,v,y,m){l(n,t,h);var g,b,w,x=function(e){if(!p&&e in k)return k[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},S=t+" Iterator",E="values"==v,_=!1,k=e.prototype,T=k[f]||k["@@iterator"]||v&&k[v],P=T||x(v),C=v?E?x("entries"):P:void 0,O="Array"==t&&k.entries||T;if(O&&(w=s(O.call(new e)))!==Object.prototype&&w.next&&(c(w,S,!0),r||"function"==typeof w[f]||u(w,f,d)),E&&T&&"values"!==T.name&&(_=!0,P=function(){return T.call(this)}),r&&!m||!p&&!_&&k[f]||u(k,f,P),a[t]=P,a[S]=d,v)if(g={values:E?P:x("values"),keys:y?P:x("keys"),entries:C},m)for(b in g)b in k||i(k,b,g[b]);else o(o.P+o.F*(p||_),t,g);return g}},function(e,t,n){var r=n(78),o=n(25);e.exports=function(e,t,n){if(r(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(e))}},function(e,t,n){var r=n(5),o=n(24),i=n(6)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[i])?!!t:"RegExp"==o(e))}},function(e,t,n){var r=n(6)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[r]=!1,!"/./"[e](t)}catch(e){}}return!0}},function(e,t,n){var r=n(43),o=n(6)("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||i[o]===e)}},function(e,t,n){"use strict";var r=n(10),o=n(30);e.exports=function(e,t,n){t in e?r.f(e,t,o(0,n)):e[t]=n}},function(e,t,n){var r=n(49),o=n(6)("iterator"),i=n(43);e.exports=n(8).getIteratorMethod=function(e){if(null!=e)return e[o]||e["@@iterator"]||i[r(e)]}},function(e,t,n){"use strict";var r=n(11),o=n(34),i=n(7);e.exports=function(e){for(var t=r(this),n=i(t.length),u=arguments.length,a=o(u>1?arguments[1]:void 0,n),l=u>2?arguments[2]:void 0,c=void 0===l?n:o(l,n);c>a;)t[a++]=e;return t}},function(e,t,n){"use strict";var r=n(38),o=n(114),i=n(43),u=n(16);e.exports=n(76)(Array,"Array",function(e,t){this._t=u(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t,n){"use strict";var r,o,i=n(56),u=RegExp.prototype.exec,a=String.prototype.replace,l=u,c=(r=/a/,o=/b*/g,u.call(r,"a"),u.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),s=void 0!==/()??/.exec("")[1];(c||s)&&(l=function(e){var t,n,r,o,l=this;return s&&(n=new RegExp("^"+l.source+"$(?!\\s)",i.call(l))),c&&(t=l.lastIndex),r=u.call(l,e),c&&r&&(l.lastIndex=l.global?r.index+r[0].length:t),s&&r&&r.length>1&&a.call(r[0],n,function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)}),r}),e.exports=l},function(e,t,n){"use strict";var r=n(75)(!0);e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},function(e,t,n){var r,o,i,u=n(18),a=n(103),l=n(68),c=n(64),s=n(2),f=s.process,p=s.setImmediate,d=s.clearImmediate,h=s.MessageChannel,v=s.Dispatch,y=0,m={},g=function(){var e=+this;if(m.hasOwnProperty(e)){var t=m[e];delete m[e],t()}},b=function(e){g.call(e.data)};p&&d||(p=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return m[++y]=function(){a("function"==typeof e?e:Function(e),t)},r(y),y},d=function(e){delete m[e]},"process"==n(24)(f)?r=function(e){f.nextTick(u(g,e,1))}:v&&v.now?r=function(e){v.now(u(g,e,1))}:h?(i=(o=new h).port2,o.port1.onmessage=b,r=u(i.postMessage,i,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(r=function(e){s.postMessage(e+"","*")},s.addEventListener("message",b,!1)):r="onreadystatechange"in c("script")?function(e){l.appendChild(c("script")).onreadystatechange=function(){l.removeChild(this),g.call(e)}}:function(e){setTimeout(u(g,e,1),0)}),e.exports={set:p,clear:d}},function(e,t,n){"use strict";var r=n(2),o=n(9),i=n(32),u=n(62),a=n(15),l=n(46),c=n(3),s=n(45),f=n(20),p=n(7),d=n(122),h=n(36).f,v=n(10).f,y=n(83),m=n(41),g="prototype",b="Wrong index!",w=r.ArrayBuffer,x=r.DataView,S=r.Math,E=r.RangeError,_=r.Infinity,k=w,T=S.abs,P=S.pow,C=S.floor,O=S.log,N=S.LN2,M=o?"_b":"buffer",R=o?"_l":"byteLength",I=o?"_o":"byteOffset";function j(e,t,n){var r,o,i,u=new Array(n),a=8*n-t-1,l=(1<<a)-1,c=l>>1,s=23===t?P(2,-24)-P(2,-77):0,f=0,p=e<0||0===e&&1/e<0?1:0;for((e=T(e))!=e||e===_?(o=e!=e?1:0,r=l):(r=C(O(e)/N),e*(i=P(2,-r))<1&&(r--,i*=2),(e+=r+c>=1?s/i:s*P(2,1-c))*i>=2&&(r++,i/=2),r+c>=l?(o=0,r=l):r+c>=1?(o=(e*i-1)*P(2,t),r+=c):(o=e*P(2,c-1)*P(2,t),r=0));t>=8;u[f++]=255&o,o/=256,t-=8);for(r=r<<t|o,a+=t;a>0;u[f++]=255&r,r/=256,a-=8);return u[--f]|=128*p,u}function F(e,t,n){var r,o=8*n-t-1,i=(1<<o)-1,u=i>>1,a=o-7,l=n-1,c=e[l--],s=127&c;for(c>>=7;a>0;s=256*s+e[l],l--,a-=8);for(r=s&(1<<-a)-1,s>>=-a,a+=t;a>0;r=256*r+e[l],l--,a-=8);if(0===s)s=1-u;else{if(s===i)return r?NaN:c?-_:_;r+=P(2,t),s-=u}return(c?-1:1)*r*P(2,s-t)}function A(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function D(e){return[255&e]}function L(e){return[255&e,e>>8&255]}function U(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]}function z(e){return j(e,52,8)}function W(e){return j(e,23,4)}function V(e,t,n){v(e[g],t,{get:function(){return this[n]}})}function B(e,t,n,r){var o=d(+n);if(o+t>e[R])throw E(b);var i=e[M]._b,u=o+e[I],a=i.slice(u,u+t);return r?a:a.reverse()}function $(e,t,n,r,o,i){var u=d(+n);if(u+t>e[R])throw E(b);for(var a=e[M]._b,l=u+e[I],c=r(+o),s=0;s<t;s++)a[l+s]=c[i?s:t-s-1]}if(u.ABV){if(!c(function(){w(1)})||!c(function(){new w(-1)})||c(function(){return new w,new w(1.5),new w(NaN),"ArrayBuffer"!=w.name})){for(var G,H=(w=function(e){return s(this,w),new k(d(e))})[g]=k[g],q=h(k),K=0;q.length>K;)(G=q[K++])in w||a(w,G,k[G]);i||(H.constructor=w)}var Q=new x(new w(2)),Y=x[g].setInt8;Q.setInt8(0,2147483648),Q.setInt8(1,2147483649),!Q.getInt8(0)&&Q.getInt8(1)||l(x[g],{setInt8:function(e,t){Y.call(this,e,t<<24>>24)},setUint8:function(e,t){Y.call(this,e,t<<24>>24)}},!0)}else w=function(e){s(this,w,"ArrayBuffer");var t=d(e);this._b=y.call(new Array(t),0),this[R]=t},x=function(e,t,n){s(this,x,"DataView"),s(e,w,"DataView");var r=e[R],o=f(t);if(o<0||o>r)throw E("Wrong offset!");if(o+(n=void 0===n?r-o:p(n))>r)throw E("Wrong length!");this[M]=e,this[I]=o,this[R]=n},o&&(V(w,"byteLength","_l"),V(x,"buffer","_b"),V(x,"byteLength","_l"),V(x,"byteOffset","_o")),l(x[g],{getInt8:function(e){return B(this,1,e)[0]<<24>>24},getUint8:function(e){return B(this,1,e)[0]},getInt16:function(e){var t=B(this,2,e,arguments[1]);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=B(this,2,e,arguments[1]);return t[1]<<8|t[0]},getInt32:function(e){return A(B(this,4,e,arguments[1]))},getUint32:function(e){return A(B(this,4,e,arguments[1]))>>>0},getFloat32:function(e){return F(B(this,4,e,arguments[1]),23,4)},getFloat64:function(e){return F(B(this,8,e,arguments[1]),52,8)},setInt8:function(e,t){$(this,1,e,D,t)},setUint8:function(e,t){$(this,1,e,D,t)},setInt16:function(e,t){$(this,2,e,L,t,arguments[2])},setUint16:function(e,t){$(this,2,e,L,t,arguments[2])},setInt32:function(e,t){$(this,4,e,U,t,arguments[2])},setUint32:function(e,t){$(this,4,e,U,t,arguments[2])},setFloat32:function(e,t){$(this,4,e,W,t,arguments[2])},setFloat64:function(e,t){$(this,8,e,z,t,arguments[2])}});m(w,"ArrayBuffer"),m(x,"DataView"),a(x[g],u.VIEW,!0),t.ArrayBuffer=w,t.DataView=x},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){e.exports=!n(127)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t,n){"use strict";e.exports=n(324)},function(e,t,n){"use strict";var r=n(92),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},u={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},a={};function l(e){return r.isMemo(e)?u:a[e.$$typeof]||o}a[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=d(n);o&&o!==h&&e(t,o,r)}var u=s(n);f&&(u=u.concat(f(n)));for(var a=l(t),v=l(n),y=0;y<u.length;++y){var m=u[y];if(!(i[m]||r&&r[m]||v&&v[m]||a&&a[m])){var g=p(n,m);try{c(t,m,g)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";(function(e,r){var o,i=n(130);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var u=Object(i.a)(o);t.a=u}).call(this,n(129),n(325)(e))},function(e,t,n){e.exports=!n(9)&&!n(3)(function(){return 7!=Object.defineProperty(n(64)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(2),o=n(8),i=n(32),u=n(65),a=n(10).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||a(t,e,{value:u.f(e)})}},function(e,t,n){var r=n(14),o=n(16),i=n(52)(!1),u=n(66)("IE_PROTO");e.exports=function(e,t){var n,a=o(e),l=0,c=[];for(n in a)n!=u&&r(a,n)&&c.push(n);for(;t.length>l;)r(a,n=t[l++])&&(~i(c,n)||c.push(n));return c}},function(e,t,n){var r=n(10),o=n(4),i=n(33);e.exports=n(9)?Object.defineProperties:function(e,t){o(e);for(var n,u=i(t),a=u.length,l=0;a>l;)r.f(e,n=u[l++],t[n]);return e}},function(e,t,n){var r=n(16),o=n(36).f,i={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return u&&"[object Window]"==i.call(e)?function(e){try{return o(e)}catch(e){return u.slice()}}(e):o(r(e))}},function(e,t,n){"use strict";var r=n(9),o=n(33),i=n(53),u=n(48),a=n(11),l=n(47),c=Object.assign;e.exports=!c||n(3)(function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach(function(e){t[e]=e}),7!=c({},e)[n]||Object.keys(c({},t)).join("")!=r})?function(e,t){for(var n=a(e),c=arguments.length,s=1,f=i.f,p=u.f;c>s;)for(var d,h=l(arguments[s++]),v=f?o(h).concat(f(h)):o(h),y=v.length,m=0;y>m;)d=v[m++],r&&!p.call(h,d)||(n[d]=h[d]);return n}:c},function(e,t){e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},function(e,t,n){"use strict";var r=n(19),o=n(5),i=n(103),u=[].slice,a={};e.exports=Function.bind||function(e){var t=r(this),n=u.call(arguments,1),l=function(){var r=n.concat(u.call(arguments));return this instanceof l?function(e,t,n){if(!(t in a)){for(var r=[],o=0;o<t;o++)r[o]="a["+o+"]";a[t]=Function("F,a","return new F("+r.join(",")+")")}return a[t](e,n)}(t,r.length,r):i(t,r,e)};return o(t.prototype)&&(l.prototype=t.prototype),l}},function(e,t){e.exports=function(e,t,n){var r=void 0===n;switch(t.length){case 0:return r?e():e.call(n);case 1:return r?e(t[0]):e.call(n,t[0]);case 2:return r?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return r?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return r?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},function(e,t,n){var r=n(2).parseInt,o=n(42).trim,i=n(70),u=/^[-+]?0[xX]/;e.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(e,t){var n=o(String(e),3);return r(n,t>>>0||(u.test(n)?16:10))}:r},function(e,t,n){var r=n(2).parseFloat,o=n(42).trim;e.exports=1/r(n(70)+"-0")!=-1/0?function(e){var t=o(String(e),3),n=r(t);return 0===n&&"-"==t.charAt(0)?-0:n}:r},function(e,t,n){var r=n(24);e.exports=function(e,t){if("number"!=typeof e&&"Number"!=r(e))throw TypeError(t);return+e}},function(e,t,n){var r=n(5),o=Math.floor;e.exports=function(e){return!r(e)&&isFinite(e)&&o(e)===e}},function(e,t){e.exports=Math.log1p||function(e){return(e=+e)>-1e-8&&e<1e-8?e-e*e/2:Math.log(1+e)}},function(e,t,n){"use strict";var r=n(35),o=n(30),i=n(41),u={};n(15)(u,n(6)("iterator"),function(){return this}),e.exports=function(e,t,n){e.prototype=r(u,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){var r=n(4);e.exports=function(e,t,n,o){try{return o?t(r(n)[0],n[1]):t(n)}catch(t){var i=e.return;throw void 0!==i&&r(i.call(e)),t}}},function(e,t,n){var r=n(226);e.exports=function(e,t){return new(r(e))(t)}},function(e,t,n){var r=n(19),o=n(11),i=n(47),u=n(7);e.exports=function(e,t,n,a,l){r(t);var c=o(e),s=i(c),f=u(c.length),p=l?f-1:0,d=l?-1:1;if(n<2)for(;;){if(p in s){a=s[p],p+=d;break}if(p+=d,l?p<0:f<=p)throw TypeError("Reduce of empty array with no initial value")}for(;l?p>=0:f>p;p+=d)p in s&&(a=t(a,s[p],p,c));return a}},function(e,t,n){"use strict";var r=n(11),o=n(34),i=n(7);e.exports=[].copyWithin||function(e,t){var n=r(this),u=i(n.length),a=o(e,u),l=o(t,u),c=arguments.length>2?arguments[2]:void 0,s=Math.min((void 0===c?u:o(c,u))-l,u-a),f=1;for(l<a&&a<l+s&&(f=-1,l+=s-1,a+=s-1);s-- >0;)l in n?n[a]=n[l]:delete n[a],a+=f,l+=f;return n}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){"use strict";var r=n(85);n(0)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(e,t,n){n(9)&&"g"!=/./g.flags&&n(10).f(RegExp.prototype,"flags",{configurable:!0,get:n(56)})},function(e,t,n){"use strict";var r,o,i,u,a=n(32),l=n(2),c=n(18),s=n(49),f=n(0),p=n(5),d=n(19),h=n(45),v=n(59),y=n(50),m=n(87).set,g=n(246)(),b=n(118),w=n(247),x=n(60),S=n(119),E=l.TypeError,_=l.process,k=_&&_.versions,T=k&&k.v8||"",P=l.Promise,C="process"==s(_),O=function(){},N=o=b.f,M=!!function(){try{var e=P.resolve(1),t=(e.constructor={})[n(6)("species")]=function(e){e(O,O)};return(C||"function"==typeof PromiseRejectionEvent)&&e.then(O)instanceof t&&0!==T.indexOf("6.6")&&-1===x.indexOf("Chrome/66")}catch(e){}}(),R=function(e){var t;return!(!p(e)||"function"!=typeof(t=e.then))&&t},I=function(e,t){if(!e._n){e._n=!0;var n=e._c;g(function(){for(var r=e._v,o=1==e._s,i=0,u=function(t){var n,i,u,a=o?t.ok:t.fail,l=t.resolve,c=t.reject,s=t.domain;try{a?(o||(2==e._h&&A(e),e._h=1),!0===a?n=r:(s&&s.enter(),n=a(r),s&&(s.exit(),u=!0)),n===t.promise?c(E("Promise-chain cycle")):(i=R(n))?i.call(n,l,c):l(n)):c(r)}catch(e){s&&!u&&s.exit(),c(e)}};n.length>i;)u(n[i++]);e._c=[],e._n=!1,t&&!e._h&&j(e)})}},j=function(e){m.call(l,function(){var t,n,r,o=e._v,i=F(e);if(i&&(t=w(function(){C?_.emit("unhandledRejection",o,e):(n=l.onunhandledrejection)?n({promise:e,reason:o}):(r=l.console)&&r.error&&r.error("Unhandled promise rejection",o)}),e._h=C||F(e)?2:1),e._a=void 0,i&&t.e)throw t.v})},F=function(e){return 1!==e._h&&0===(e._a||e._c).length},A=function(e){m.call(l,function(){var t;C?_.emit("rejectionHandled",e):(t=l.onrejectionhandled)&&t({promise:e,reason:e._v})})},D=function(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),I(t,!0))},L=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw E("Promise can't be resolved itself");(t=R(e))?g(function(){var r={_w:n,_d:!1};try{t.call(e,c(L,r,1),c(D,r,1))}catch(e){D.call(r,e)}}):(n._v=e,n._s=1,I(n,!1))}catch(e){D.call({_w:n,_d:!1},e)}}};M||(P=function(e){h(this,P,"Promise","_h"),d(e),r.call(this);try{e(c(L,this,1),c(D,this,1))}catch(e){D.call(this,e)}},(r=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(46)(P.prototype,{then:function(e,t){var n=N(y(this,P));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=C?_.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&I(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),i=function(){var e=new r;this.promise=e,this.resolve=c(L,e,1),this.reject=c(D,e,1)},b.f=N=function(e){return e===P||e===u?new i(e):o(e)}),f(f.G+f.W+f.F*!M,{Promise:P}),n(41)(P,"Promise"),n(44)("Promise"),u=n(8).Promise,f(f.S+f.F*!M,"Promise",{reject:function(e){var t=N(this);return(0,t.reject)(e),t.promise}}),f(f.S+f.F*(a||!M),"Promise",{resolve:function(e){return S(a&&this===u?P:this,e)}}),f(f.S+f.F*!(M&&n(55)(function(e){P.all(e).catch(O)})),"Promise",{all:function(e){var t=this,n=N(t),r=n.resolve,o=n.reject,i=w(function(){var n=[],i=0,u=1;v(e,!1,function(e){var a=i++,l=!1;n.push(void 0),u++,t.resolve(e).then(function(e){l||(l=!0,n[a]=e,--u||r(n))},o)}),--u||r(n)});return i.e&&o(i.v),n.promise},race:function(e){var t=this,n=N(t),r=n.reject,o=w(function(){v(e,!1,function(e){t.resolve(e).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}})},function(e,t,n){"use strict";var r=n(19);function o(e){var t,n;this.promise=new e(function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r}),this.resolve=r(t),this.reject=r(n)}e.exports.f=function(e){return new o(e)}},function(e,t,n){var r=n(4),o=n(5),i=n(118);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},function(e,t,n){"use strict";var r=n(10).f,o=n(35),i=n(46),u=n(18),a=n(45),l=n(59),c=n(76),s=n(114),f=n(44),p=n(9),d=n(29).fastKey,h=n(39),v=p?"_s":"size",y=function(e,t){var n,r=d(t);if("F"!==r)return e._i[r];for(n=e._f;n;n=n.n)if(n.k==t)return n};e.exports={getConstructor:function(e,t,n,c){var s=e(function(e,r){a(e,s,t,"_i"),e._t=t,e._i=o(null),e._f=void 0,e._l=void 0,e[v]=0,null!=r&&l(r,n,e[c],e)});return i(s.prototype,{clear:function(){for(var e=h(this,t),n=e._i,r=e._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];e._f=e._l=void 0,e[v]=0},delete:function(e){var n=h(this,t),r=y(n,e);if(r){var o=r.n,i=r.p;delete n._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),n._f==r&&(n._f=o),n._l==r&&(n._l=i),n[v]--}return!!r},forEach:function(e){h(this,t);for(var n,r=u(e,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(e){return!!y(h(this,t),e)}}),p&&r(s.prototype,"size",{get:function(){return h(this,t)[v]}}),s},def:function(e,t,n){var r,o,i=y(e,t);return i?i.v=n:(e._l=i={i:o=d(t,!0),k:t,v:n,p:r=e._l,n:void 0,r:!1},e._f||(e._f=i),r&&(r.n=i),e[v]++,"F"!==o&&(e._i[o]=i)),e},getEntry:y,setStrong:function(e,t,n){c(e,t,function(e,n){this._t=h(e,t),this._k=n,this._l=void 0},function(){for(var e=this._k,t=this._l;t&&t.r;)t=t.p;return this._t&&(this._l=t=t?t.n:this._t._f)?s(0,"keys"==e?t.k:"values"==e?t.v:[t.k,t.v]):(this._t=void 0,s(1))},n?"entries":"values",!n,!0),f(t)}}},function(e,t,n){"use strict";var r=n(46),o=n(29).getWeak,i=n(4),u=n(5),a=n(45),l=n(59),c=n(23),s=n(14),f=n(39),p=c(5),d=c(6),h=0,v=function(e){return e._l||(e._l=new y)},y=function(){this.a=[]},m=function(e,t){return p(e.a,function(e){return e[0]===t})};y.prototype={get:function(e){var t=m(this,e);if(t)return t[1]},has:function(e){return!!m(this,e)},set:function(e,t){var n=m(this,e);n?n[1]=t:this.a.push([e,t])},delete:function(e){var t=d(this.a,function(t){return t[0]===e});return~t&&this.a.splice(t,1),!!~t}},e.exports={getConstructor:function(e,t,n,i){var c=e(function(e,r){a(e,c,t,"_i"),e._t=t,e._i=h++,e._l=void 0,null!=r&&l(r,n,e[i],e)});return r(c.prototype,{delete:function(e){if(!u(e))return!1;var n=o(e);return!0===n?v(f(this,t)).delete(e):n&&s(n,this._i)&&delete n[this._i]},has:function(e){if(!u(e))return!1;var n=o(e);return!0===n?v(f(this,t)).has(e):n&&s(n,this._i)}}),c},def:function(e,t,n){var r=o(i(t),!0);return!0===r?v(e).set(t,n):r[e._i]=n,e},ufstore:v}},function(e,t,n){var r=n(20),o=n(7);e.exports=function(e){if(void 0===e)return 0;var t=r(e),n=o(t);if(t!==n)throw RangeError("Wrong length!");return n}},function(e,t,n){var r=n(36),o=n(53),i=n(4),u=n(2).Reflect;e.exports=u&&u.ownKeys||function(e){var t=r.f(i(e)),n=o.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(7),o=n(72),i=n(25);e.exports=function(e,t,n,u){var a=String(i(e)),l=a.length,c=void 0===n?" ":String(n),s=r(t);if(s<=l||""==c)return a;var f=s-l,p=o.call(c,Math.ceil(f/c.length));return p.length>f&&(p=p.slice(0,f)),u?p+a:a+p}},function(e,t,n){var r=n(9),o=n(33),i=n(16),u=n(48).f;e.exports=function(e){return function(t){for(var n,a=i(t),l=o(a),c=l.length,s=0,f=[];c>s;)n=l[s++],r&&!u.call(a,n)||f.push(e?[n,a[n]]:a[n]);return f}}},function(e,t){var n=e.exports={version:"2.6.6"};"number"==typeof __e&&(__e=n)},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,a=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))o.call(n,c)&&(a[c]=n[c]);if(r){u=r(n);for(var s=0;s<u.length;s++)i.call(n,u[s])&&(a[u[s]]=n[u[s]])}}return a}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){n(132),e.exports=n(326)},function(e,t,n){"use strict";n(133);var r,o=(r=n(305))&&r.__esModule?r:{default:r};o.default._babelPolyfill&&"undefined"!=typeof console&&console.warn&&console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."),o.default._babelPolyfill=!0},function(e,t,n){"use strict";n(134),n(277),n(279),n(282),n(284),n(286),n(288),n(290),n(292),n(294),n(296),n(298),n(300),n(304)},function(e,t,n){n(135),n(138),n(139),n(140),n(141),n(142),n(143),n(144),n(145),n(146),n(147),n(148),n(149),n(150),n(151),n(152),n(153),n(154),n(155),n(156),n(157),n(158),n(159),n(160),n(161),n(162),n(163),n(164),n(165),n(166),n(167),n(168),n(169),n(170),n(171),n(172),n(173),n(174),n(175),n(176),n(177),n(178),n(179),n(181),n(182),n(183),n(184),n(185),n(186),n(187),n(188),n(189),n(190),n(191),n(192),n(193),n(194),n(195),n(196),n(197),n(198),n(199),n(200),n(201),n(202),n(203),n(204),n(205),n(206),n(207),n(208),n(209),n(210),n(211),n(212),n(213),n(214),n(216),n(217),n(219),n(220),n(221),n(222),n(223),n(224),n(225),n(227),n(228),n(229),n(230),n(231),n(232),n(233),n(234),n(235),n(236),n(237),n(238),n(239),n(84),n(240),n(115),n(241),n(116),n(242),n(243),n(244),n(245),n(117),n(248),n(249),n(250),n(251),n(252),n(253),n(254),n(255),n(256),n(257),n(258),n(259),n(260),n(261),n(262),n(263),n(264),n(265),n(266),n(267),n(268),n(269),n(270),n(271),n(272),n(273),n(274),n(275),n(276),e.exports=n(8)},function(e,t,n){"use strict";var r=n(2),o=n(14),i=n(9),u=n(0),a=n(12),l=n(29).KEY,c=n(3),s=n(51),f=n(41),p=n(31),d=n(6),h=n(65),v=n(96),y=n(137),m=n(54),g=n(4),b=n(5),w=n(11),x=n(16),S=n(28),E=n(30),_=n(35),k=n(99),T=n(21),P=n(53),C=n(10),O=n(33),N=T.f,M=C.f,R=k.f,I=r.Symbol,j=r.JSON,F=j&&j.stringify,A=d("_hidden"),D=d("toPrimitive"),L={}.propertyIsEnumerable,U=s("symbol-registry"),z=s("symbols"),W=s("op-symbols"),V=Object.prototype,B="function"==typeof I,$=r.QObject,G=!$||!$.prototype||!$.prototype.findChild,H=i&&c(function(){return 7!=_(M({},"a",{get:function(){return M(this,"a",{value:7}).a}})).a})?function(e,t,n){var r=N(V,t);r&&delete V[t],M(e,t,n),r&&e!==V&&M(V,t,r)}:M,q=function(e){var t=z[e]=_(I.prototype);return t._k=e,t},K=B&&"symbol"==typeof I.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof I},Q=function(e,t,n){return e===V&&Q(W,t,n),g(e),t=S(t,!0),g(n),o(z,t)?(n.enumerable?(o(e,A)&&e[A][t]&&(e[A][t]=!1),n=_(n,{enumerable:E(0,!1)})):(o(e,A)||M(e,A,E(1,{})),e[A][t]=!0),H(e,t,n)):M(e,t,n)},Y=function(e,t){g(e);for(var n,r=y(t=x(t)),o=0,i=r.length;i>o;)Q(e,n=r[o++],t[n]);return e},X=function(e){var t=L.call(this,e=S(e,!0));return!(this===V&&o(z,e)&&!o(W,e))&&(!(t||!o(this,e)||!o(z,e)||o(this,A)&&this[A][e])||t)},J=function(e,t){if(e=x(e),t=S(t,!0),e!==V||!o(z,t)||o(W,t)){var n=N(e,t);return!n||!o(z,t)||o(e,A)&&e[A][t]||(n.enumerable=!0),n}},Z=function(e){for(var t,n=R(x(e)),r=[],i=0;n.length>i;)o(z,t=n[i++])||t==A||t==l||r.push(t);return r},ee=function(e){for(var t,n=e===V,r=R(n?W:x(e)),i=[],u=0;r.length>u;)!o(z,t=r[u++])||n&&!o(V,t)||i.push(z[t]);return i};B||(a((I=function(){if(this instanceof I)throw TypeError("Symbol is not a constructor!");var e=p(arguments.length>0?arguments[0]:void 0),t=function(n){this===V&&t.call(W,n),o(this,A)&&o(this[A],e)&&(this[A][e]=!1),H(this,e,E(1,n))};return i&&G&&H(V,e,{configurable:!0,set:t}),q(e)}).prototype,"toString",function(){return this._k}),T.f=J,C.f=Q,n(36).f=k.f=Z,n(48).f=X,P.f=ee,i&&!n(32)&&a(V,"propertyIsEnumerable",X,!0),h.f=function(e){return q(d(e))}),u(u.G+u.W+u.F*!B,{Symbol:I});for(var te="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ne=0;te.length>ne;)d(te[ne++]);for(var re=O(d.store),oe=0;re.length>oe;)v(re[oe++]);u(u.S+u.F*!B,"Symbol",{for:function(e){return o(U,e+="")?U[e]:U[e]=I(e)},keyFor:function(e){if(!K(e))throw TypeError(e+" is not a symbol!");for(var t in U)if(U[t]===e)return t},useSetter:function(){G=!0},useSimple:function(){G=!1}}),u(u.S+u.F*!B,"Object",{create:function(e,t){return void 0===t?_(e):Y(_(e),t)},defineProperty:Q,defineProperties:Y,getOwnPropertyDescriptor:J,getOwnPropertyNames:Z,getOwnPropertySymbols:ee});var ie=c(function(){P.f(1)});u(u.S+u.F*ie,"Object",{getOwnPropertySymbols:function(e){return P.f(w(e))}}),j&&u(u.S+u.F*(!B||c(function(){var e=I();return"[null]"!=F([e])||"{}"!=F({a:e})||"{}"!=F(Object(e))})),"JSON",{stringify:function(e){for(var t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=t=r[1],(b(t)||void 0!==e)&&!K(e))return m(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!K(t))return t}),r[1]=t,F.apply(j,r)}}),I.prototype[D]||n(15)(I.prototype,D,I.prototype.valueOf),f(I,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(e,t,n){e.exports=n(51)("native-function-to-string",Function.toString)},function(e,t,n){var r=n(33),o=n(53),i=n(48);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var u,a=n(e),l=i.f,c=0;a.length>c;)l.call(e,u=a[c++])&&t.push(u);return t}},function(e,t,n){var r=n(0);r(r.S,"Object",{create:n(35)})},function(e,t,n){var r=n(0);r(r.S+r.F*!n(9),"Object",{defineProperty:n(10).f})},function(e,t,n){var r=n(0);r(r.S+r.F*!n(9),"Object",{defineProperties:n(98)})},function(e,t,n){var r=n(16),o=n(21).f;n(22)("getOwnPropertyDescriptor",function(){return function(e,t){return o(r(e),t)}})},function(e,t,n){var r=n(11),o=n(37);n(22)("getPrototypeOf",function(){return function(e){return o(r(e))}})},function(e,t,n){var r=n(11),o=n(33);n(22)("keys",function(){return function(e){return o(r(e))}})},function(e,t,n){n(22)("getOwnPropertyNames",function(){return n(99).f})},function(e,t,n){var r=n(5),o=n(29).onFreeze;n(22)("freeze",function(e){return function(t){return e&&r(t)?e(o(t)):t}})},function(e,t,n){var r=n(5),o=n(29).onFreeze;n(22)("seal",function(e){return function(t){return e&&r(t)?e(o(t)):t}})},function(e,t,n){var r=n(5),o=n(29).onFreeze;n(22)("preventExtensions",function(e){return function(t){return e&&r(t)?e(o(t)):t}})},function(e,t,n){var r=n(5);n(22)("isFrozen",function(e){return function(t){return!r(t)||!!e&&e(t)}})},function(e,t,n){var r=n(5);n(22)("isSealed",function(e){return function(t){return!r(t)||!!e&&e(t)}})},function(e,t,n){var r=n(5);n(22)("isExtensible",function(e){return function(t){return!!r(t)&&(!e||e(t))}})},function(e,t,n){var r=n(0);r(r.S+r.F,"Object",{assign:n(100)})},function(e,t,n){var r=n(0);r(r.S,"Object",{is:n(101)})},function(e,t,n){var r=n(0);r(r.S,"Object",{setPrototypeOf:n(69).set})},function(e,t,n){"use strict";var r=n(49),o={};o[n(6)("toStringTag")]="z",o+""!="[object z]"&&n(12)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(e,t,n){var r=n(0);r(r.P,"Function",{bind:n(102)})},function(e,t,n){var r=n(10).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||n(9)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(e){return""}}})},function(e,t,n){"use strict";var r=n(5),o=n(37),i=n(6)("hasInstance"),u=Function.prototype;i in u||n(10).f(u,i,{value:function(e){if("function"!=typeof this||!r(e))return!1;if(!r(this.prototype))return e instanceof this;for(;e=o(e);)if(this.prototype===e)return!0;return!1}})},function(e,t,n){var r=n(0),o=n(104);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(e,t,n){var r=n(0),o=n(105);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(e,t,n){"use strict";var r=n(2),o=n(14),i=n(24),u=n(71),a=n(28),l=n(3),c=n(36).f,s=n(21).f,f=n(10).f,p=n(42).trim,d=r.Number,h=d,v=d.prototype,y="Number"==i(n(35)(v)),m="trim"in String.prototype,g=function(e){var t=a(e,!1);if("string"==typeof t&&t.length>2){var n,r,o,i=(t=m?t.trim():p(t,3)).charCodeAt(0);if(43===i||45===i){if(88===(n=t.charCodeAt(2))||120===n)return NaN}else if(48===i){switch(t.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+t}for(var u,l=t.slice(2),c=0,s=l.length;c<s;c++)if((u=l.charCodeAt(c))<48||u>o)return NaN;return parseInt(l,r)}}return+t};if(!d(" 0o1")||!d("0b1")||d("+0x1")){d=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof d&&(y?l(function(){v.valueOf.call(n)}):"Number"!=i(n))?u(new h(g(t)),n,d):g(t)};for(var b,w=n(9)?c(h):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),x=0;w.length>x;x++)o(h,b=w[x])&&!o(d,b)&&f(d,b,s(h,b));d.prototype=v,v.constructor=d,n(12)(r,"Number",d)}},function(e,t,n){"use strict";var r=n(0),o=n(20),i=n(106),u=n(72),a=1..toFixed,l=Math.floor,c=[0,0,0,0,0,0],s="Number.toFixed: incorrect invocation!",f=function(e,t){for(var n=-1,r=t;++n<6;)r+=e*c[n],c[n]=r%1e7,r=l(r/1e7)},p=function(e){for(var t=6,n=0;--t>=0;)n+=c[t],c[t]=l(n/e),n=n%e*1e7},d=function(){for(var e=6,t="";--e>=0;)if(""!==t||0===e||0!==c[e]){var n=String(c[e]);t=""===t?n:t+u.call("0",7-n.length)+n}return t},h=function(e,t,n){return 0===t?n:t%2==1?h(e,t-1,n*e):h(e*e,t/2,n)};r(r.P+r.F*(!!a&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(3)(function(){a.call({})})),"Number",{toFixed:function(e){var t,n,r,a,l=i(this,s),c=o(e),v="",y="0";if(c<0||c>20)throw RangeError(s);if(l!=l)return"NaN";if(l<=-1e21||l>=1e21)return String(l);if(l<0&&(v="-",l=-l),l>1e-21)if(n=(t=function(e){for(var t=0,n=e;n>=4096;)t+=12,n/=4096;for(;n>=2;)t+=1,n/=2;return t}(l*h(2,69,1))-69)<0?l*h(2,-t,1):l/h(2,t,1),n*=4503599627370496,(t=52-t)>0){for(f(0,n),r=c;r>=7;)f(1e7,0),r-=7;for(f(h(10,r,1),0),r=t-1;r>=23;)p(1<<23),r-=23;p(1<<r),f(1,1),p(2),y=d()}else f(0,n),f(1<<-t,0),y=d()+u.call("0",c);return y=c>0?v+((a=y.length)<=c?"0."+u.call("0",c-a)+y:y.slice(0,a-c)+"."+y.slice(a-c)):v+y}})},function(e,t,n){"use strict";var r=n(0),o=n(3),i=n(106),u=1..toPrecision;r(r.P+r.F*(o(function(){return"1"!==u.call(1,void 0)})||!o(function(){u.call({})})),"Number",{toPrecision:function(e){var t=i(this,"Number#toPrecision: incorrect invocation!");return void 0===e?u.call(t):u.call(t,e)}})},function(e,t,n){var r=n(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(e,t,n){var r=n(0),o=n(2).isFinite;r(r.S,"Number",{isFinite:function(e){return"number"==typeof e&&o(e)}})},function(e,t,n){var r=n(0);r(r.S,"Number",{isInteger:n(107)})},function(e,t,n){var r=n(0);r(r.S,"Number",{isNaN:function(e){return e!=e}})},function(e,t,n){var r=n(0),o=n(107),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(e){return o(e)&&i(e)<=9007199254740991}})},function(e,t,n){var r=n(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(e,t,n){var r=n(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(e,t,n){var r=n(0),o=n(105);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(e,t,n){var r=n(0),o=n(104);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(e,t,n){var r=n(0),o=n(108),i=Math.sqrt,u=Math.acosh;r(r.S+r.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(e){return(e=+e)<1?NaN:e>94906265.62425156?Math.log(e)+Math.LN2:o(e-1+i(e-1)*i(e+1))}})},function(e,t,n){var r=n(0),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function e(t){return isFinite(t=+t)&&0!=t?t<0?-e(-t):Math.log(t+Math.sqrt(t*t+1)):t}})},function(e,t,n){var r=n(0),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(e){return 0==(e=+e)?e:Math.log((1+e)/(1-e))/2}})},function(e,t,n){var r=n(0),o=n(73);r(r.S,"Math",{cbrt:function(e){return o(e=+e)*Math.pow(Math.abs(e),1/3)}})},function(e,t,n){var r=n(0);r(r.S,"Math",{clz32:function(e){return(e>>>=0)?31-Math.floor(Math.log(e+.5)*Math.LOG2E):32}})},function(e,t,n){var r=n(0),o=Math.exp;r(r.S,"Math",{cosh:function(e){return(o(e=+e)+o(-e))/2}})},function(e,t,n){var r=n(0),o=n(74);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(e,t,n){var r=n(0);r(r.S,"Math",{fround:n(180)})},function(e,t,n){var r=n(73),o=Math.pow,i=o(2,-52),u=o(2,-23),a=o(2,127)*(2-u),l=o(2,-126);e.exports=Math.fround||function(e){var t,n,o=Math.abs(e),c=r(e);return o<l?c*(o/l/u+1/i-1/i)*l*u:(n=(t=(1+u/i)*o)-(t-o))>a||n!=n?c*(1/0):c*n}},function(e,t,n){var r=n(0),o=Math.abs;r(r.S,"Math",{hypot:function(e,t){for(var n,r,i=0,u=0,a=arguments.length,l=0;u<a;)l<(n=o(arguments[u++]))?(i=i*(r=l/n)*r+1,l=n):i+=n>0?(r=n/l)*r:n;return l===1/0?1/0:l*Math.sqrt(i)}})},function(e,t,n){var r=n(0),o=Math.imul;r(r.S+r.F*n(3)(function(){return-5!=o(4294967295,5)||2!=o.length}),"Math",{imul:function(e,t){var n=+e,r=+t,o=65535&n,i=65535&r;return 0|o*i+((65535&n>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(e,t,n){var r=n(0);r(r.S,"Math",{log10:function(e){return Math.log(e)*Math.LOG10E}})},function(e,t,n){var r=n(0);r(r.S,"Math",{log1p:n(108)})},function(e,t,n){var r=n(0);r(r.S,"Math",{log2:function(e){return Math.log(e)/Math.LN2}})},function(e,t,n){var r=n(0);r(r.S,"Math",{sign:n(73)})},function(e,t,n){var r=n(0),o=n(74),i=Math.exp;r(r.S+r.F*n(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(e){return Math.abs(e=+e)<1?(o(e)-o(-e))/2:(i(e-1)-i(-e-1))*(Math.E/2)}})},function(e,t,n){var r=n(0),o=n(74),i=Math.exp;r(r.S,"Math",{tanh:function(e){var t=o(e=+e),n=o(-e);return t==1/0?1:n==1/0?-1:(t-n)/(i(e)+i(-e))}})},function(e,t,n){var r=n(0);r(r.S,"Math",{trunc:function(e){return(e>0?Math.floor:Math.ceil)(e)}})},function(e,t,n){var r=n(0),o=n(34),i=String.fromCharCode,u=String.fromCodePoint;r(r.S+r.F*(!!u&&1!=u.length),"String",{fromCodePoint:function(e){for(var t,n=[],r=arguments.length,u=0;r>u;){if(t=+arguments[u++],o(t,1114111)!==t)throw RangeError(t+" is not a valid code point");n.push(t<65536?i(t):i(55296+((t-=65536)>>10),t%1024+56320))}return n.join("")}})},function(e,t,n){var r=n(0),o=n(16),i=n(7);r(r.S,"String",{raw:function(e){for(var t=o(e.raw),n=i(t.length),r=arguments.length,u=[],a=0;n>a;)u.push(String(t[a++])),a<r&&u.push(String(arguments[a]));return u.join("")}})},function(e,t,n){"use strict";n(42)("trim",function(e){return function(){return e(this,3)}})},function(e,t,n){"use strict";var r=n(75)(!0);n(76)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})})},function(e,t,n){"use strict";var r=n(0),o=n(75)(!1);r(r.P,"String",{codePointAt:function(e){return o(this,e)}})},function(e,t,n){"use strict";var r=n(0),o=n(7),i=n(77),u="".endsWith;r(r.P+r.F*n(79)("endsWith"),"String",{endsWith:function(e){var t=i(this,e,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=o(t.length),a=void 0===n?r:Math.min(o(n),r),l=String(e);return u?u.call(t,l,a):t.slice(a-l.length,a)===l}})},function(e,t,n){"use strict";var r=n(0),o=n(77);r(r.P+r.F*n(79)("includes"),"String",{includes:function(e){return!!~o(this,e,"includes").indexOf(e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){var r=n(0);r(r.P,"String",{repeat:n(72)})},function(e,t,n){"use strict";var r=n(0),o=n(7),i=n(77),u="".startsWith;r(r.P+r.F*n(79)("startsWith"),"String",{startsWith:function(e){var t=i(this,e,"startsWith"),n=o(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),r=String(e);return u?u.call(t,r,n):t.slice(n,n+r.length)===r}})},function(e,t,n){"use strict";n(13)("anchor",function(e){return function(t){return e(this,"a","name",t)}})},function(e,t,n){"use strict";n(13)("big",function(e){return function(){return e(this,"big","","")}})},function(e,t,n){"use strict";n(13)("blink",function(e){return function(){return e(this,"blink","","")}})},function(e,t,n){"use strict";n(13)("bold",function(e){return function(){return e(this,"b","","")}})},function(e,t,n){"use strict";n(13)("fixed",function(e){return function(){return e(this,"tt","","")}})},function(e,t,n){"use strict";n(13)("fontcolor",function(e){return function(t){return e(this,"font","color",t)}})},function(e,t,n){"use strict";n(13)("fontsize",function(e){return function(t){return e(this,"font","size",t)}})},function(e,t,n){"use strict";n(13)("italics",function(e){return function(){return e(this,"i","","")}})},function(e,t,n){"use strict";n(13)("link",function(e){return function(t){return e(this,"a","href",t)}})},function(e,t,n){"use strict";n(13)("small",function(e){return function(){return e(this,"small","","")}})},function(e,t,n){"use strict";n(13)("strike",function(e){return function(){return e(this,"strike","","")}})},function(e,t,n){"use strict";n(13)("sub",function(e){return function(){return e(this,"sub","","")}})},function(e,t,n){"use strict";n(13)("sup",function(e){return function(){return e(this,"sup","","")}})},function(e,t,n){var r=n(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(e,t,n){"use strict";var r=n(0),o=n(11),i=n(28);r(r.P+r.F*n(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(e){var t=o(this),n=i(t);return"number"!=typeof n||isFinite(n)?t.toISOString():null}})},function(e,t,n){var r=n(0),o=n(215);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(e,t,n){"use strict";var r=n(3),o=Date.prototype.getTime,i=Date.prototype.toISOString,u=function(e){return e>9?e:"0"+e};e.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-5e13-1))})||!r(function(){i.call(new Date(NaN))})?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var e=this,t=e.getUTCFullYear(),n=e.getUTCMilliseconds(),r=t<0?"-":t>9999?"+":"";return r+("00000"+Math.abs(t)).slice(r?-6:-4)+"-"+u(e.getUTCMonth()+1)+"-"+u(e.getUTCDate())+"T"+u(e.getUTCHours())+":"+u(e.getUTCMinutes())+":"+u(e.getUTCSeconds())+"."+(n>99?n:"0"+u(n))+"Z"}:i},function(e,t,n){var r=Date.prototype,o=r.toString,i=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(12)(r,"toString",function(){var e=i.call(this);return e==e?o.call(this):"Invalid Date"})},function(e,t,n){var r=n(6)("toPrimitive"),o=Date.prototype;r in o||n(15)(o,r,n(218))},function(e,t,n){"use strict";var r=n(4),o=n(28);e.exports=function(e){if("string"!==e&&"number"!==e&&"default"!==e)throw TypeError("Incorrect hint");return o(r(this),"number"!=e)}},function(e,t,n){var r=n(0);r(r.S,"Array",{isArray:n(54)})},function(e,t,n){"use strict";var r=n(18),o=n(0),i=n(11),u=n(110),a=n(80),l=n(7),c=n(81),s=n(82);o(o.S+o.F*!n(55)(function(e){Array.from(e)}),"Array",{from:function(e){var t,n,o,f,p=i(e),d="function"==typeof this?this:Array,h=arguments.length,v=h>1?arguments[1]:void 0,y=void 0!==v,m=0,g=s(p);if(y&&(v=r(v,h>2?arguments[2]:void 0,2)),null==g||d==Array&&a(g))for(n=new d(t=l(p.length));t>m;m++)c(n,m,y?v(p[m],m):p[m]);else for(f=g.call(p),n=new d;!(o=f.next()).done;m++)c(n,m,y?u(f,v,[o.value,m],!0):o.value);return n.length=m,n}})},function(e,t,n){"use strict";var r=n(0),o=n(81);r(r.S+r.F*n(3)(function(){function e(){}return!(Array.of.call(e)instanceof e)}),"Array",{of:function(){for(var e=0,t=arguments.length,n=new("function"==typeof this?this:Array)(t);t>e;)o(n,e,arguments[e++]);return n.length=t,n}})},function(e,t,n){"use strict";var r=n(0),o=n(16),i=[].join;r(r.P+r.F*(n(47)!=Object||!n(17)(i)),"Array",{join:function(e){return i.call(o(this),void 0===e?",":e)}})},function(e,t,n){"use strict";var r=n(0),o=n(68),i=n(24),u=n(34),a=n(7),l=[].slice;r(r.P+r.F*n(3)(function(){o&&l.call(o)}),"Array",{slice:function(e,t){var n=a(this.length),r=i(this);if(t=void 0===t?n:t,"Array"==r)return l.call(this,e,t);for(var o=u(e,n),c=u(t,n),s=a(c-o),f=new Array(s),p=0;p<s;p++)f[p]="String"==r?this.charAt(o+p):this[o+p];return f}})},function(e,t,n){"use strict";var r=n(0),o=n(19),i=n(11),u=n(3),a=[].sort,l=[1,2,3];r(r.P+r.F*(u(function(){l.sort(void 0)})||!u(function(){l.sort(null)})||!n(17)(a)),"Array",{sort:function(e){return void 0===e?a.call(i(this)):a.call(i(this),o(e))}})},function(e,t,n){"use strict";var r=n(0),o=n(23)(0),i=n(17)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(e){return o(this,e,arguments[1])}})},function(e,t,n){var r=n(5),o=n(54),i=n(6)("species");e.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),r(t)&&null===(t=t[i])&&(t=void 0)),void 0===t?Array:t}},function(e,t,n){"use strict";var r=n(0),o=n(23)(1);r(r.P+r.F*!n(17)([].map,!0),"Array",{map:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),o=n(23)(2);r(r.P+r.F*!n(17)([].filter,!0),"Array",{filter:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),o=n(23)(3);r(r.P+r.F*!n(17)([].some,!0),"Array",{some:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),o=n(23)(4);r(r.P+r.F*!n(17)([].every,!0),"Array",{every:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),o=n(112);r(r.P+r.F*!n(17)([].reduce,!0),"Array",{reduce:function(e){return o(this,e,arguments.length,arguments[1],!1)}})},function(e,t,n){"use strict";var r=n(0),o=n(112);r(r.P+r.F*!n(17)([].reduceRight,!0),"Array",{reduceRight:function(e){return o(this,e,arguments.length,arguments[1],!0)}})},function(e,t,n){"use strict";var r=n(0),o=n(52)(!1),i=[].indexOf,u=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(u||!n(17)(i)),"Array",{indexOf:function(e){return u?i.apply(this,arguments)||0:o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),o=n(16),i=n(20),u=n(7),a=[].lastIndexOf,l=!!a&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(l||!n(17)(a)),"Array",{lastIndexOf:function(e){if(l)return a.apply(this,arguments)||0;var t=o(this),n=u(t.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in t&&t[r]===e)return r||0;return-1}})},function(e,t,n){var r=n(0);r(r.P,"Array",{copyWithin:n(113)}),n(38)("copyWithin")},function(e,t,n){var r=n(0);r(r.P,"Array",{fill:n(83)}),n(38)("fill")},function(e,t,n){"use strict";var r=n(0),o=n(23)(5),i=!0;"find"in[]&&Array(1).find(function(){i=!1}),r(r.P+r.F*i,"Array",{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(38)("find")},function(e,t,n){"use strict";var r=n(0),o=n(23)(6),i="findIndex",u=!0;i in[]&&Array(1)[i](function(){u=!1}),r(r.P+r.F*u,"Array",{findIndex:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(38)(i)},function(e,t,n){n(44)("Array")},function(e,t,n){var r=n(2),o=n(71),i=n(10).f,u=n(36).f,a=n(78),l=n(56),c=r.RegExp,s=c,f=c.prototype,p=/a/g,d=/a/g,h=new c(p)!==p;if(n(9)&&(!h||n(3)(function(){return d[n(6)("match")]=!1,c(p)!=p||c(d)==d||"/a/i"!=c(p,"i")}))){c=function(e,t){var n=this instanceof c,r=a(e),i=void 0===t;return!n&&r&&e.constructor===c&&i?e:o(h?new s(r&&!i?e.source:e,t):s((r=e instanceof c)?e.source:e,r&&i?l.call(e):t),n?this:f,c)};for(var v=function(e){e in c||i(c,e,{configurable:!0,get:function(){return s[e]},set:function(t){s[e]=t}})},y=u(s),m=0;y.length>m;)v(y[m++]);f.constructor=c,c.prototype=f,n(12)(r,"RegExp",c)}n(44)("RegExp")},function(e,t,n){"use strict";n(116);var r=n(4),o=n(56),i=n(9),u=/./.toString,a=function(e){n(12)(RegExp.prototype,"toString",e,!0)};n(3)(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?a(function(){var e=r(this);return"/".concat(e.source,"/","flags"in e?e.flags:!i&&e instanceof RegExp?o.call(e):void 0)}):"toString"!=u.name&&a(function(){return u.call(this)})},function(e,t,n){"use strict";var r=n(4),o=n(7),i=n(86),u=n(57);n(58)("match",1,function(e,t,n,a){return[function(n){var r=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=a(n,e,this);if(t.done)return t.value;var l=r(e),c=String(this);if(!l.global)return u(l,c);var s=l.unicode;l.lastIndex=0;for(var f,p=[],d=0;null!==(f=u(l,c));){var h=String(f[0]);p[d]=h,""===h&&(l.lastIndex=i(c,o(l.lastIndex),s)),d++}return 0===d?null:p}]})},function(e,t,n){"use strict";var r=n(4),o=n(11),i=n(7),u=n(20),a=n(86),l=n(57),c=Math.max,s=Math.min,f=Math.floor,p=/\$([$&`']|\d\d?|<[^>]*>)/g,d=/\$([$&`']|\d\d?)/g;n(58)("replace",2,function(e,t,n,h){return[function(r,o){var i=e(this),u=null==r?void 0:r[t];return void 0!==u?u.call(r,i,o):n.call(String(i),r,o)},function(e,t){var o=h(n,e,this,t);if(o.done)return o.value;var f=r(e),p=String(this),d="function"==typeof t;d||(t=String(t));var y=f.global;if(y){var m=f.unicode;f.lastIndex=0}for(var g=[];;){var b=l(f,p);if(null===b)break;if(g.push(b),!y)break;""===String(b[0])&&(f.lastIndex=a(p,i(f.lastIndex),m))}for(var w,x="",S=0,E=0;E<g.length;E++){b=g[E];for(var _=String(b[0]),k=c(s(u(b.index),p.length),0),T=[],P=1;P<b.length;P++)T.push(void 0===(w=b[P])?w:String(w));var C=b.groups;if(d){var O=[_].concat(T,k,p);void 0!==C&&O.push(C);var N=String(t.apply(void 0,O))}else N=v(_,p,k,T,C,t);k>=S&&(x+=p.slice(S,k)+N,S=k+_.length)}return x+p.slice(S)}];function v(e,t,r,i,u,a){var l=r+e.length,c=i.length,s=d;return void 0!==u&&(u=o(u),s=p),n.call(a,s,function(n,o){var a;switch(o.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,r);case"'":return t.slice(l);case"<":a=u[o.slice(1,-1)];break;default:var s=+o;if(0===s)return n;if(s>c){var p=f(s/10);return 0===p?n:p<=c?void 0===i[p-1]?o.charAt(1):i[p-1]+o.charAt(1):n}a=i[s-1]}return void 0===a?"":a})}})},function(e,t,n){"use strict";var r=n(4),o=n(101),i=n(57);n(58)("search",1,function(e,t,n,u){return[function(n){var r=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=u(n,e,this);if(t.done)return t.value;var a=r(e),l=String(this),c=a.lastIndex;o(c,0)||(a.lastIndex=0);var s=i(a,l);return o(a.lastIndex,c)||(a.lastIndex=c),null===s?-1:s.index}]})},function(e,t,n){"use strict";var r=n(78),o=n(4),i=n(50),u=n(86),a=n(7),l=n(57),c=n(85),s=n(3),f=Math.min,p=[].push,d=!s(function(){RegExp(4294967295,"y")});n(58)("split",2,function(e,t,n,s){var h;return h="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,t){var o=String(this);if(void 0===e&&0===t)return[];if(!r(e))return n.call(o,e,t);for(var i,u,a,l=[],s=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),f=0,d=void 0===t?4294967295:t>>>0,h=new RegExp(e.source,s+"g");(i=c.call(h,o))&&!((u=h.lastIndex)>f&&(l.push(o.slice(f,i.index)),i.length>1&&i.index<o.length&&p.apply(l,i.slice(1)),a=i[0].length,f=u,l.length>=d));)h.lastIndex===i.index&&h.lastIndex++;return f===o.length?!a&&h.test("")||l.push(""):l.push(o.slice(f)),l.length>d?l.slice(0,d):l}:"0".split(void 0,0).length?function(e,t){return void 0===e&&0===t?[]:n.call(this,e,t)}:n,[function(n,r){var o=e(this),i=null==n?void 0:n[t];return void 0!==i?i.call(n,o,r):h.call(String(o),n,r)},function(e,t){var r=s(h,e,this,t,h!==n);if(r.done)return r.value;var c=o(e),p=String(this),v=i(c,RegExp),y=c.unicode,m=(c.ignoreCase?"i":"")+(c.multiline?"m":"")+(c.unicode?"u":"")+(d?"y":"g"),g=new v(d?c:"^(?:"+c.source+")",m),b=void 0===t?4294967295:t>>>0;if(0===b)return[];if(0===p.length)return null===l(g,p)?[p]:[];for(var w=0,x=0,S=[];x<p.length;){g.lastIndex=d?x:0;var E,_=l(g,d?p:p.slice(x));if(null===_||(E=f(a(g.lastIndex+(d?0:x)),p.length))===w)x=u(p,x,y);else{if(S.push(p.slice(w,x)),S.length===b)return S;for(var k=1;k<=_.length-1;k++)if(S.push(_[k]),S.length===b)return S;x=w=E}}return S.push(p.slice(w)),S}]})},function(e,t,n){var r=n(2),o=n(87).set,i=r.MutationObserver||r.WebKitMutationObserver,u=r.process,a=r.Promise,l="process"==n(24)(u);e.exports=function(){var e,t,n,c=function(){var r,o;for(l&&(r=u.domain)&&r.exit();e;){o=e.fn,e=e.next;try{o()}catch(r){throw e?n():t=void 0,r}}t=void 0,r&&r.enter()};if(l)n=function(){u.nextTick(c)};else if(!i||r.navigator&&r.navigator.standalone)if(a&&a.resolve){var s=a.resolve(void 0);n=function(){s.then(c)}}else n=function(){o.call(r,c)};else{var f=!0,p=document.createTextNode("");new i(c).observe(p,{characterData:!0}),n=function(){p.data=f=!f}}return function(r){var o={fn:r,next:void 0};t&&(t.next=o),e||(e=o,n()),t=o}}},function(e,t){e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},function(e,t,n){"use strict";var r=n(120),o=n(39);e.exports=n(61)("Map",function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},{get:function(e){var t=r.getEntry(o(this,"Map"),e);return t&&t.v},set:function(e,t){return r.def(o(this,"Map"),0===e?0:e,t)}},r,!0)},function(e,t,n){"use strict";var r=n(120),o=n(39);e.exports=n(61)("Set",function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},{add:function(e){return r.def(o(this,"Set"),e=0===e?0:e,e)}},r)},function(e,t,n){"use strict";var r,o=n(2),i=n(23)(0),u=n(12),a=n(29),l=n(100),c=n(121),s=n(5),f=n(39),p=n(39),d=!o.ActiveXObject&&"ActiveXObject"in o,h=a.getWeak,v=Object.isExtensible,y=c.ufstore,m=function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},g={get:function(e){if(s(e)){var t=h(e);return!0===t?y(f(this,"WeakMap")).get(e):t?t[this._i]:void 0}},set:function(e,t){return c.def(f(this,"WeakMap"),e,t)}},b=e.exports=n(61)("WeakMap",m,g,c,!0,!0);p&&d&&(l((r=c.getConstructor(m,"WeakMap")).prototype,g),a.NEED=!0,i(["delete","has","get","set"],function(e){var t=b.prototype,n=t[e];u(t,e,function(t,o){if(s(t)&&!v(t)){this._f||(this._f=new r);var i=this._f[e](t,o);return"set"==e?this:i}return n.call(this,t,o)})}))},function(e,t,n){"use strict";var r=n(121),o=n(39);n(61)("WeakSet",function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},{add:function(e){return r.def(o(this,"WeakSet"),e,!0)}},r,!1,!0)},function(e,t,n){"use strict";var r=n(0),o=n(62),i=n(88),u=n(4),a=n(34),l=n(7),c=n(5),s=n(2).ArrayBuffer,f=n(50),p=i.ArrayBuffer,d=i.DataView,h=o.ABV&&s.isView,v=p.prototype.slice,y=o.VIEW;r(r.G+r.W+r.F*(s!==p),{ArrayBuffer:p}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(e){return h&&h(e)||c(e)&&y in e}}),r(r.P+r.U+r.F*n(3)(function(){return!new p(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(e,t){if(void 0!==v&&void 0===t)return v.call(u(this),e);for(var n=u(this).byteLength,r=a(e,n),o=a(void 0===t?n:t,n),i=new(f(this,p))(l(o-r)),c=new d(this),s=new d(i),h=0;r<o;)s.setUint8(h++,c.getUint8(r++));return i}}),n(44)("ArrayBuffer")},function(e,t,n){var r=n(0);r(r.G+r.W+r.F*!n(62).ABV,{DataView:n(88).DataView})},function(e,t,n){n(26)("Int8",1,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(26)("Uint8",1,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(26)("Uint8",1,function(e){return function(t,n,r){return e(this,t,n,r)}},!0)},function(e,t,n){n(26)("Int16",2,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(26)("Uint16",2,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(26)("Int32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(26)("Uint32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(26)("Float32",4,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){n(26)("Float64",8,function(e){return function(t,n,r){return e(this,t,n,r)}})},function(e,t,n){var r=n(0),o=n(19),i=n(4),u=(n(2).Reflect||{}).apply,a=Function.apply;r(r.S+r.F*!n(3)(function(){u(function(){})}),"Reflect",{apply:function(e,t,n){var r=o(e),l=i(n);return u?u(r,t,l):a.call(r,t,l)}})},function(e,t,n){var r=n(0),o=n(35),i=n(19),u=n(4),a=n(5),l=n(3),c=n(102),s=(n(2).Reflect||{}).construct,f=l(function(){function e(){}return!(s(function(){},[],e)instanceof e)}),p=!l(function(){s(function(){})});r(r.S+r.F*(f||p),"Reflect",{construct:function(e,t){i(e),u(t);var n=arguments.length<3?e:i(arguments[2]);if(p&&!f)return s(e,t,n);if(e==n){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var r=[null];return r.push.apply(r,t),new(c.apply(e,r))}var l=n.prototype,d=o(a(l)?l:Object.prototype),h=Function.apply.call(e,d,t);return a(h)?h:d}})},function(e,t,n){var r=n(10),o=n(0),i=n(4),u=n(28);o(o.S+o.F*n(3)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(e,t,n){i(e),t=u(t,!0),i(n);try{return r.f(e,t,n),!0}catch(e){return!1}}})},function(e,t,n){var r=n(0),o=n(21).f,i=n(4);r(r.S,"Reflect",{deleteProperty:function(e,t){var n=o(i(e),t);return!(n&&!n.configurable)&&delete e[t]}})},function(e,t,n){"use strict";var r=n(0),o=n(4),i=function(e){this._t=o(e),this._i=0;var t,n=this._k=[];for(t in e)n.push(t)};n(109)(i,"Object",function(){var e,t=this._k;do{if(this._i>=t.length)return{value:void 0,done:!0}}while(!((e=t[this._i++])in this._t));return{value:e,done:!1}}),r(r.S,"Reflect",{enumerate:function(e){return new i(e)}})},function(e,t,n){var r=n(21),o=n(37),i=n(14),u=n(0),a=n(5),l=n(4);u(u.S,"Reflect",{get:function e(t,n){var u,c,s=arguments.length<3?t:arguments[2];return l(t)===s?t[n]:(u=r.f(t,n))?i(u,"value")?u.value:void 0!==u.get?u.get.call(s):void 0:a(c=o(t))?e(c,n,s):void 0}})},function(e,t,n){var r=n(21),o=n(0),i=n(4);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(e,t){return r.f(i(e),t)}})},function(e,t,n){var r=n(0),o=n(37),i=n(4);r(r.S,"Reflect",{getPrototypeOf:function(e){return o(i(e))}})},function(e,t,n){var r=n(0);r(r.S,"Reflect",{has:function(e,t){return t in e}})},function(e,t,n){var r=n(0),o=n(4),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(e){return o(e),!i||i(e)}})},function(e,t,n){var r=n(0);r(r.S,"Reflect",{ownKeys:n(123)})},function(e,t,n){var r=n(0),o=n(4),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(e){o(e);try{return i&&i(e),!0}catch(e){return!1}}})},function(e,t,n){var r=n(10),o=n(21),i=n(37),u=n(14),a=n(0),l=n(30),c=n(4),s=n(5);a(a.S,"Reflect",{set:function e(t,n,a){var f,p,d=arguments.length<4?t:arguments[3],h=o.f(c(t),n);if(!h){if(s(p=i(t)))return e(p,n,a,d);h=l(0)}if(u(h,"value")){if(!1===h.writable||!s(d))return!1;if(f=o.f(d,n)){if(f.get||f.set||!1===f.writable)return!1;f.value=a,r.f(d,n,f)}else r.f(d,n,l(0,a));return!0}return void 0!==h.set&&(h.set.call(d,a),!0)}})},function(e,t,n){var r=n(0),o=n(69);o&&r(r.S,"Reflect",{setPrototypeOf:function(e,t){o.check(e,t);try{return o.set(e,t),!0}catch(e){return!1}}})},function(e,t,n){n(278),e.exports=n(8).Array.includes},function(e,t,n){"use strict";var r=n(0),o=n(52)(!0);r(r.P,"Array",{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(38)("includes")},function(e,t,n){n(280),e.exports=n(8).Array.flatMap},function(e,t,n){"use strict";var r=n(0),o=n(281),i=n(11),u=n(7),a=n(19),l=n(111);r(r.P,"Array",{flatMap:function(e){var t,n,r=i(this);return a(e),t=u(r.length),n=l(r,0),o(n,r,r,t,0,1,e,arguments[1]),n}}),n(38)("flatMap")},function(e,t,n){"use strict";var r=n(54),o=n(5),i=n(7),u=n(18),a=n(6)("isConcatSpreadable");e.exports=function e(t,n,l,c,s,f,p,d){for(var h,v,y=s,m=0,g=!!p&&u(p,d,3);m<c;){if(m in l){if(h=g?g(l[m],m,n):l[m],v=!1,o(h)&&(v=void 0!==(v=h[a])?!!v:r(h)),v&&f>0)y=e(t,n,h,i(h.length),y,f-1)-1;else{if(y>=9007199254740991)throw TypeError();t[y]=h}y++}m++}return y}},function(e,t,n){n(283),e.exports=n(8).String.padStart},function(e,t,n){"use strict";var r=n(0),o=n(124),i=n(60),u=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*u,"String",{padStart:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0,!0)}})},function(e,t,n){n(285),e.exports=n(8).String.padEnd},function(e,t,n){"use strict";var r=n(0),o=n(124),i=n(60),u=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*u,"String",{padEnd:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0,!1)}})},function(e,t,n){n(287),e.exports=n(8).String.trimLeft},function(e,t,n){"use strict";n(42)("trimLeft",function(e){return function(){return e(this,1)}},"trimStart")},function(e,t,n){n(289),e.exports=n(8).String.trimRight},function(e,t,n){"use strict";n(42)("trimRight",function(e){return function(){return e(this,2)}},"trimEnd")},function(e,t,n){n(291),e.exports=n(65).f("asyncIterator")},function(e,t,n){n(96)("asyncIterator")},function(e,t,n){n(293),e.exports=n(8).Object.getOwnPropertyDescriptors},function(e,t,n){var r=n(0),o=n(123),i=n(16),u=n(21),a=n(81);r(r.S,"Object",{getOwnPropertyDescriptors:function(e){for(var t,n,r=i(e),l=u.f,c=o(r),s={},f=0;c.length>f;)void 0!==(n=l(r,t=c[f++]))&&a(s,t,n);return s}})},function(e,t,n){n(295),e.exports=n(8).Object.values},function(e,t,n){var r=n(0),o=n(125)(!1);r(r.S,"Object",{values:function(e){return o(e)}})},function(e,t,n){n(297),e.exports=n(8).Object.entries},function(e,t,n){var r=n(0),o=n(125)(!0);r(r.S,"Object",{entries:function(e){return o(e)}})},function(e,t,n){"use strict";n(117),n(299),e.exports=n(8).Promise.finally},function(e,t,n){"use strict";var r=n(0),o=n(8),i=n(2),u=n(50),a=n(119);r(r.P+r.R,"Promise",{finally:function(e){var t=u(this,o.Promise||i.Promise),n="function"==typeof e;return this.then(n?function(n){return a(t,e()).then(function(){return n})}:e,n?function(n){return a(t,e()).then(function(){throw n})}:e)}})},function(e,t,n){n(301),n(302),n(303),e.exports=n(8)},function(e,t,n){var r=n(2),o=n(0),i=n(60),u=[].slice,a=/MSIE .\./.test(i),l=function(e){return function(t,n){var r=arguments.length>2,o=!!r&&u.call(arguments,2);return e(r?function(){("function"==typeof t?t:Function(t)).apply(this,o)}:t,n)}};o(o.G+o.B+o.F*a,{setTimeout:l(r.setTimeout),setInterval:l(r.setInterval)})},function(e,t,n){var r=n(0),o=n(87);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(e,t,n){for(var r=n(84),o=n(33),i=n(12),u=n(2),a=n(15),l=n(43),c=n(6),s=c("iterator"),f=c("toStringTag"),p=l.Array,d={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(d),v=0;v<h.length;v++){var y,m=h[v],g=d[m],b=u[m],w=b&&b.prototype;if(w&&(w[s]||a(w,s,p),w[f]||a(w,f,m),l[m]=p,g))for(y in r)w[y]||i(w,y,r[y],!0)}},function(e,t,n){var r=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",u=o.asyncIterator||"@@asyncIterator",a=o.toStringTag||"@@toStringTag";function l(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,i=Object.create(o.prototype),u=new P(r||[]);return i._invoke=function(e,t,n){var r=s;return function(o,i){if(r===p)throw new Error("Generator is already running");if(r===d){if("throw"===o)throw i;return O()}for(n.method=o,n.arg=i;;){var u=n.delegate;if(u){var a=_(u,n);if(a){if(a===h)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===s)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var l=c(e,t,n);if("normal"===l.type){if(r=n.done?d:f,l.arg===h)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r=d,n.method="throw",n.arg=l.arg)}}}(e,n,u),i}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var s="suspendedStart",f="suspendedYield",p="executing",d="completed",h={};function v(){}function y(){}function m(){}var g={};g[i]=function(){return this};var b=Object.getPrototypeOf,w=b&&b(b(C([])));w&&w!==n&&r.call(w,i)&&(g=w);var x=m.prototype=v.prototype=Object.create(g);function S(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function E(e){var t;this._invoke=function(n,o){function i(){return new Promise(function(t,i){!function t(n,o,i,u){var a=c(e[n],e,o);if("throw"!==a.type){var l=a.arg,s=l.value;return s&&"object"==typeof s&&r.call(s,"__await")?Promise.resolve(s.__await).then(function(e){t("next",e,i,u)},function(e){t("throw",e,i,u)}):Promise.resolve(s).then(function(e){l.value=e,i(l)},function(e){return t("throw",e,i,u)})}u(a.arg)}(n,o,t,i)})}return t=t?t.then(i,i):i()}}function _(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,_(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=c(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,h;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,h):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function P(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function C(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,u=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return u.next=u}}return{next:O}}function O(){return{value:t,done:!0}}return y.prototype=x.constructor=m,m.constructor=y,m[a]=y.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,a in e||(e[a]="GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},S(E.prototype),E.prototype[u]=function(){return this},e.AsyncIterator=E,e.async=function(t,n,r,o){var i=new E(l(t,n,r,o));return e.isGeneratorFunction(n)?i:i.next().then(function(e){return e.done?e.value:i.next()})},S(x),x[a]="Generator",x[i]=function(){return this},x.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=C,P.prototype={constructor:P,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return a.type="throw",a.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var u=this.tryEntries[i],a=u.completion;if("root"===u.tryLoc)return o("end");if(u.tryLoc<=this.prev){var l=r.call(u,"catchLoc"),c=r.call(u,"finallyLoc");if(l&&c){if(this.prev<u.catchLoc)return o(u.catchLoc,!0);if(this.prev<u.finallyLoc)return o(u.finallyLoc)}else if(l){if(this.prev<u.catchLoc)return o(u.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return o(u.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var u=i?i.completion:{};return u.type=e,u.arg=t,i?(this.method="next",this.next=i.finallyLoc,h):this.complete(u)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;T(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:C(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),h}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},function(e,t,n){n(306),e.exports=n(126).global},function(e,t,n){var r=n(307);r(r.G,{global:n(89)})},function(e,t,n){var r=n(89),o=n(126),i=n(308),u=n(310),a=n(317),l=function(e,t,n){var c,s,f,p=e&l.F,d=e&l.G,h=e&l.S,v=e&l.P,y=e&l.B,m=e&l.W,g=d?o:o[t]||(o[t]={}),b=g.prototype,w=d?r:h?r[t]:(r[t]||{}).prototype;for(c in d&&(n=t),n)(s=!p&&w&&void 0!==w[c])&&a(g,c)||(f=s?w[c]:n[c],g[c]=d&&"function"!=typeof w[c]?n[c]:y&&s?i(f,r):m&&w[c]==f?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(f):v&&"function"==typeof f?i(Function.call,f):f,v&&((g.virtual||(g.virtual={}))[c]=f,e&l.R&&b&&!b[c]&&u(b,c,f)))};l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,e.exports=l},function(e,t,n){var r=n(309);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var r=n(311),o=n(316);e.exports=n(91)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(312),o=n(313),i=n(315),u=Object.defineProperty;t.f=n(91)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return u(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(90);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){e.exports=!n(91)&&!n(127)(function(){return 7!=Object.defineProperty(n(314)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(90),o=n(89).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){var r=n(90);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(128),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,u=o?Symbol.for("react.portal"):60106,a=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.concurrent_mode"):60111,d=o?Symbol.for("react.forward_ref"):60112,h=o?Symbol.for("react.suspense"):60113,v=o?Symbol.for("react.memo"):60115,y=o?Symbol.for("react.lazy"):60116,m="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,u,a){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,u,a],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},w={};function x(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||b}function S(){}function E(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||b}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&g("85"),this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},S.prototype=x.prototype;var _=E.prototype=new S;_.constructor=E,r(_,x.prototype),_.isPureReactComponent=!0;var k={current:null},T={current:null},P=Object.prototype.hasOwnProperty,C={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r=void 0,o={},u=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(u=""+t.key),t)P.call(t,r)&&!C.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:u,ref:a,props:o,_owner:T.current}}function N(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var M=/\/+/g,R=[];function I(e,t,n,r){if(R.length){var o=R.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function j(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>R.length&&R.push(e)}function F(e,t,n){return null==e?0:function e(t,n,r,o){var a=typeof t;"undefined"!==a&&"boolean"!==a||(t=null);var l=!1;if(null===t)l=!0;else switch(a){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case i:case u:l=!0}}if(l)return r(o,t,""===n?"."+A(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+A(a=t[c],c);l+=e(a,s,r,o)}else if(s=null===t||"object"!=typeof t?null:"function"==typeof(s=m&&t[m]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(a=t.next()).done;)l+=e(a=a.value,s=n+A(a,c++),r,o);else"object"===a&&g("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?U(e,r,n,function(e){return e}):null!=e&&(N(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(M,"$&/")+"/")+n)),r.push(e))}function U(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(M,"$&/")+"/"),F(e,L,t=I(t,i,r,o)),j(t)}function z(){var e=k.current;return null===e&&g("321"),e}var W={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return U(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;F(e,D,t=I(null,null,t,n)),j(t)},count:function(e){return F(e,function(){return null},null)},toArray:function(e){var t=[];return U(e,t,null,function(e){return e}),t},only:function(e){return N(e)||g("143"),e}},createRef:function(){return{current:null}},Component:x,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:y,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:v,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return z().useCallback(e,t)},useContext:function(e,t){return z().useContext(e,t)},useEffect:function(e,t){return z().useEffect(e,t)},useImperativeHandle:function(e,t,n){return z().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return z().useLayoutEffect(e,t)},useMemo:function(e,t){return z().useMemo(e,t)},useReducer:function(e,t,n){return z().useReducer(e,t,n)},useRef:function(e){return z().useRef(e)},useState:function(e){return z().useState(e)},Fragment:a,StrictMode:l,Suspense:h,createElement:O,cloneElement:function(e,t,n){null==e&&g("267",e);var o=void 0,u=r({},e.props),a=e.key,l=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,c=T.current),void 0!==t.key&&(a=""+t.key);var s=void 0;for(o in e.type&&e.type.defaultProps&&(s=e.type.defaultProps),t)P.call(t,o)&&!C.hasOwnProperty(o)&&(u[o]=void 0===t[o]&&void 0!==s?s[o]:t[o])}if(1===(o=arguments.length-2))u.children=n;else if(1<o){s=Array(o);for(var f=0;f<o;f++)s[f]=arguments[f+2];u.children=s}return{$$typeof:i,type:e.type,key:a,ref:l,props:u,_owner:c}},createFactory:function(e){var t=O.bind(null,e);return t.type=e,t},isValidElement:N,version:"16.8.6",unstable_ConcurrentMode:p,unstable_Profiler:c,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:k,ReactCurrentOwner:T,assign:r}},V={default:W},B=V&&W||V;e.exports=B.default||B},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(1),o=n(128),i=n(320);function u(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,u,a){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,u,a],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||u("227");var a=!1,l=null,c=!1,s=null,f={onError:function(e){a=!0,l=e}};function p(e,t,n,r,o,i,u,c,s){a=!1,l=null,function(e,t,n,r,o,i,u,a,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}.apply(f,arguments)}var d=null,h={};function v(){if(d)for(var e in h){var t=h[e],n=d.indexOf(e);if(-1<n||u("96",e),!m[n])for(var r in t.extractEvents||u("97",e),m[n]=t,n=t.eventTypes){var o=void 0,i=n[r],a=t,l=r;g.hasOwnProperty(l)&&u("99",l),g[l]=i;var c=i.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&y(c[o],a,l);o=!0}else i.registrationName?(y(i.registrationName,a,l),o=!0):o=!1;o||u("98",r,e)}}}function y(e,t,n){b[e]&&u("100",e),b[e]=t,w[e]=t.eventTypes[n].dependencies}var m=[],g={},b={},w={},x=null,S=null,E=null;function _(e,t,n){var r=e.type||"unknown-event";e.currentTarget=E(n),function(e,t,n,r,o,i,f,d,h){if(p.apply(this,arguments),a){if(a){var v=l;a=!1,l=null}else u("198"),v=void 0;c||(c=!0,s=v)}}(r,t,void 0,e),e.currentTarget=null}function k(e,t){return null==t&&u("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function T(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var P=null;function C(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)_(e,t[r],n[r]);else t&&_(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var O={injectEventPluginOrder:function(e){d&&u("101"),d=Array.prototype.slice.call(e),v()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&u("102",t),h[t]=r,n=!0)}n&&v()}};function N(e,t){var n=e.stateNode;if(!n)return null;var r=x(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&u("231",t,typeof n),n)}function M(e){if(null!==e&&(P=k(P,e)),e=P,P=null,e&&(T(e,C),P&&u("95"),c))throw e=s,c=!1,s=null,e}var R=Math.random().toString(36).slice(2),I="__reactInternalInstance$"+R,j="__reactEventHandlers$"+R;function F(e){if(e[I])return e[I];for(;!e[I];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[I]).tag||6===e.tag?e:null}function A(e){return!(e=e[I])||5!==e.tag&&6!==e.tag?null:e}function D(e){if(5===e.tag||6===e.tag)return e.stateNode;u("33")}function L(e){return e[j]||null}function U(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function z(e,t,n){(t=N(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=k(n._dispatchListeners,t),n._dispatchInstances=k(n._dispatchInstances,e))}function W(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=U(t);for(t=n.length;0<t--;)z(n[t],"captured",e);for(t=0;t<n.length;t++)z(n[t],"bubbled",e)}}function V(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=N(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=k(n._dispatchListeners,t),n._dispatchInstances=k(n._dispatchInstances,e))}function B(e){e&&e.dispatchConfig.registrationName&&V(e._targetInst,null,e)}function $(e){T(e,W)}var G=!("undefined"==typeof window||!window.document||!window.document.createElement);function H(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var q={animationend:H("Animation","AnimationEnd"),animationiteration:H("Animation","AnimationIteration"),animationstart:H("Animation","AnimationStart"),transitionend:H("Transition","TransitionEnd")},K={},Q={};function Y(e){if(K[e])return K[e];if(!q[e])return e;var t,n=q[e];for(t in n)if(n.hasOwnProperty(t)&&t in Q)return K[e]=n[t];return e}G&&(Q=document.createElement("div").style,"AnimationEvent"in window||(delete q.animationend.animation,delete q.animationiteration.animation,delete q.animationstart.animation),"TransitionEvent"in window||delete q.transitionend.transition);var X=Y("animationend"),J=Y("animationiteration"),Z=Y("animationstart"),ee=Y("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,oe=null;function ie(){if(oe)return oe;var e,t,n=re,r=n.length,o="value"in ne?ne.value:ne.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var u=r-e;for(t=1;t<=u&&n[r-t]===o[i-t];t++);return oe=o.slice(e,1<t?1-t:void 0)}function ue(){return!0}function ae(){return!1}function le(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ue:ae,this.isPropagationStopped=ae,this}function ce(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function se(e){e instanceof this||u("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=ce,e.release=se}o(le.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ue)},persist:function(){this.isPersistent=ue},isPersistent:ae,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=ae,this._dispatchInstances=this._dispatchListeners=null}}),le.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},le.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(le);var pe=le.extend({data:null}),de=le.extend({data:null}),he=[9,13,27,32],ve=G&&"CompositionEvent"in window,ye=null;G&&"documentMode"in document&&(ye=document.documentMode);var me=G&&"TextEvent"in window&&!ye,ge=G&&(!ve||ye&&8<ye&&11>=ye),be=String.fromCharCode(32),we={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},xe=!1;function Se(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Ee(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var _e=!1;var ke={eventTypes:we,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(ve)e:{switch(e){case"compositionstart":o=we.compositionStart;break e;case"compositionend":o=we.compositionEnd;break e;case"compositionupdate":o=we.compositionUpdate;break e}o=void 0}else _e?Se(e,n)&&(o=we.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=we.compositionStart);return o?(ge&&"ko"!==n.locale&&(_e||o!==we.compositionStart?o===we.compositionEnd&&_e&&(i=ie()):(re="value"in(ne=r)?ne.value:ne.textContent,_e=!0)),o=pe.getPooled(o,t,n,r),i?o.data=i:null!==(i=Ee(n))&&(o.data=i),$(o),i=o):i=null,(e=me?function(e,t){switch(e){case"compositionend":return Ee(t);case"keypress":return 32!==t.which?null:(xe=!0,be);case"textInput":return(e=t.data)===be&&xe?null:e;default:return null}}(e,n):function(e,t){if(_e)return"compositionend"===e||!ve&&Se(e,t)?(e=ie(),oe=re=ne=null,_e=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ge&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=de.getPooled(we.beforeInput,t,n,r)).data=e,$(t)):t=null,null===i?t:null===t?i:[i,t]}},Te=null,Pe=null,Ce=null;function Oe(e){if(e=S(e)){"function"!=typeof Te&&u("280");var t=x(e.stateNode);Te(e.stateNode,e.type,t)}}function Ne(e){Pe?Ce?Ce.push(e):Ce=[e]:Pe=e}function Me(){if(Pe){var e=Pe,t=Ce;if(Ce=Pe=null,Oe(e),t)for(e=0;e<t.length;e++)Oe(t[e])}}function Re(e,t){return e(t)}function Ie(e,t,n){return e(t,n)}function je(){}var Fe=!1;function Ae(e,t){if(Fe)return e(t);Fe=!0;try{return Re(e,t)}finally{Fe=!1,(null!==Pe||null!==Ce)&&(je(),Me())}}var De={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Le(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!De[e.type]:"textarea"===t}function Ue(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ze(e){if(!G)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function We(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ve(e){e._valueTracker||(e._valueTracker=function(e){var t=We(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Be(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=We(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var $e=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;$e.hasOwnProperty("ReactCurrentDispatcher")||($e.ReactCurrentDispatcher={current:null});var Ge=/^(.*)[\\\/]/,He="function"==typeof Symbol&&Symbol.for,qe=He?Symbol.for("react.element"):60103,Ke=He?Symbol.for("react.portal"):60106,Qe=He?Symbol.for("react.fragment"):60107,Ye=He?Symbol.for("react.strict_mode"):60108,Xe=He?Symbol.for("react.profiler"):60114,Je=He?Symbol.for("react.provider"):60109,Ze=He?Symbol.for("react.context"):60110,et=He?Symbol.for("react.concurrent_mode"):60111,tt=He?Symbol.for("react.forward_ref"):60112,nt=He?Symbol.for("react.suspense"):60113,rt=He?Symbol.for("react.memo"):60115,ot=He?Symbol.for("react.lazy"):60116,it="function"==typeof Symbol&&Symbol.iterator;function ut(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=it&&e[it]||e["@@iterator"])?e:null}function at(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case Qe:return"Fragment";case Ke:return"Portal";case Xe:return"Profiler";case Ye:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Ze:return"Context.Consumer";case Je:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return at(e.type);case ot:if(e=1===e._status?e._result:null)return at(e)}return null}function lt(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=at(e.type);n=null,r&&(n=at(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(Ge,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var ct=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,st=Object.prototype.hasOwnProperty,ft={},pt={};function dt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new dt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new dt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new dt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ht[e]=new dt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new dt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new dt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){ht[e]=new dt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new dt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){ht[e]=new dt(e,5,!1,e.toLowerCase(),null)});var vt=/[\-:]([a-z])/g;function yt(e){return e[1].toUpperCase()}function mt(e,t,n,r){var o=ht.hasOwnProperty(t)?ht[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!st.call(pt,e)||!st.call(ft,e)&&(ct.test(e)?pt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function gt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function bt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function wt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=gt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function xt(e,t){null!=(t=t.checked)&&mt(e,"checked",t,!1)}function St(e,t){xt(e,t);var n=gt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?_t(e,t.type,n):t.hasOwnProperty("defaultValue")&&_t(e,t.type,gt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Et(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function _t(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(vt,yt);ht[t]=new dt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(vt,yt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(vt,yt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),["tabIndex","crossOrigin"].forEach(function(e){ht[e]=new dt(e,1,!1,e.toLowerCase(),null)});var kt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Tt(e,t,n){return(e=le.getPooled(kt.change,e,t,n)).type="change",Ne(n),$(e),e}var Pt=null,Ct=null;function Ot(e){M(e)}function Nt(e){if(Be(D(e)))return e}function Mt(e,t){if("change"===e)return t}var Rt=!1;function It(){Pt&&(Pt.detachEvent("onpropertychange",jt),Ct=Pt=null)}function jt(e){"value"===e.propertyName&&Nt(Ct)&&Ae(Ot,e=Tt(Ct,e,Ue(e)))}function Ft(e,t,n){"focus"===e?(It(),Ct=n,(Pt=t).attachEvent("onpropertychange",jt)):"blur"===e&&It()}function At(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Nt(Ct)}function Dt(e,t){if("click"===e)return Nt(t)}function Lt(e,t){if("input"===e||"change"===e)return Nt(t)}G&&(Rt=ze("input")&&(!document.documentMode||9<document.documentMode));var Ut={eventTypes:kt,_isInputEventSupported:Rt,extractEvents:function(e,t,n,r){var o=t?D(t):window,i=void 0,u=void 0,a=o.nodeName&&o.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===o.type?i=Mt:Le(o)?Rt?i=Lt:(i=At,u=Ft):(a=o.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Dt),i&&(i=i(e,t)))return Tt(i,n,r);u&&u(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&_t(o,"number",o.value)}},zt=le.extend({view:null,detail:null}),Wt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Vt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Wt[e])&&!!t[e]}function Bt(){return Vt}var $t=0,Gt=0,Ht=!1,qt=!1,Kt=zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Bt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=$t;return $t=e.screenX,Ht?"mousemove"===e.type?e.screenX-t:0:(Ht=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Gt;return Gt=e.screenY,qt?"mousemove"===e.type?e.screenY-t:0:(qt=!0,0)}}),Qt=Kt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Yt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Xt={eventTypes:Yt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?F(t):null):i=null,i===t)return null;var u=void 0,a=void 0,l=void 0,c=void 0;"mouseout"===e||"mouseover"===e?(u=Kt,a=Yt.mouseLeave,l=Yt.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(u=Qt,a=Yt.pointerLeave,l=Yt.pointerEnter,c="pointer");var s=null==i?o:D(i);if(o=null==t?o:D(t),(e=u.getPooled(a,i,n,r)).type=c+"leave",e.target=s,e.relatedTarget=o,(n=u.getPooled(l,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=s,r=t,i&&r)e:{for(o=r,c=0,u=t=i;u;u=U(u))c++;for(u=0,l=o;l;l=U(l))u++;for(;0<c-u;)t=U(t),c--;for(;0<u-c;)o=U(o),u--;for(;c--;){if(t===o||t===o.alternate)break e;t=U(t),o=U(o)}t=null}else t=null;for(o=t,t=[];i&&i!==o&&(null===(c=i.alternate)||c!==o);)t.push(i),i=U(i);for(i=[];r&&r!==o&&(null===(c=r.alternate)||c!==o);)i.push(r),r=U(r);for(r=0;r<t.length;r++)V(t[r],"bubbled",e);for(r=i.length;0<r--;)V(i[r],"captured",n);return[e,n]}};function Jt(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var Zt=Object.prototype.hasOwnProperty;function en(e,t){if(Jt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Zt.call(t,n[r])||!Jt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&u("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&u("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return nn(o),e;if(a===r)return nn(o),t;a=a.sibling}u("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var l=o.child;l;){if(l===n){a=!0,n=o,r=i;break}if(l===r){a=!0,r=o,n=i;break}l=l.sibling}if(!a){for(l=i.child;l;){if(l===n){a=!0,n=i,r=o;break}if(l===r){a=!0,r=i,n=o;break}l=l.sibling}a||u("189")}}n.alternate!==r&&u("190")}return 3!==n.tag&&u("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var on=le.extend({animationName:null,elapsedTime:null,pseudoElement:null}),un=le.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),an=zt.extend({relatedTarget:null});function ln(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn=zt.extend({key:function(e){if(e.key){var t=cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=ln(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?sn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Bt,charCode:function(e){return"keypress"===e.type?ln(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?ln(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),pn=Kt.extend({dataTransfer:null}),dn=zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Bt}),hn=le.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),vn=Kt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),yn=[["abort","abort"],[X,"animationEnd"],[J,"animationIteration"],[Z,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],mn={},gn={};function bn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},mn[e]=t,gn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){bn(e,!0)}),yn.forEach(function(e){bn(e,!1)});var wn={eventTypes:mn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=gn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=gn[e];if(!o)return null;switch(e){case"keypress":if(0===ln(n))return null;case"keydown":case"keyup":e=fn;break;case"blur":case"focus":e=an;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Kt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=pn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=dn;break;case X:case J:case Z:e=on;break;case ee:e=hn;break;case"scroll":e=zt;break;case"wheel":e=vn;break;case"copy":case"cut":case"paste":e=un;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Qt;break;default:e=le}return $(t=e.getPooled(o,t,n,r)),t}},xn=wn.isInteractiveTopLevelEventType,Sn=[];function En(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=F(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=Ue(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,u=null,a=0;a<m.length;a++){var l=m[a];l&&(l=l.extractEvents(r,t,i,o))&&(u=k(u,l))}M(u)}}var _n=!0;function kn(e,t){if(!t)return null;var n=(xn(e)?Pn:Cn).bind(null,e);t.addEventListener(e,n,!1)}function Tn(e,t){if(!t)return null;var n=(xn(e)?Pn:Cn).bind(null,e);t.addEventListener(e,n,!0)}function Pn(e,t){Ie(Cn,e,t)}function Cn(e,t){if(_n){var n=Ue(t);if(null===(n=F(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),Sn.length){var r=Sn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Ae(En,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Sn.length&&Sn.push(e)}}}var On={},Nn=0,Mn="_reactListenersID"+(""+Math.random()).slice(2);function Rn(e){return Object.prototype.hasOwnProperty.call(e,Mn)||(e[Mn]=Nn++,On[e[Mn]]={}),On[e[Mn]]}function In(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function jn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Fn(e,t){var n,r=jn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=jn(r)}}function An(){for(var e=window,t=In();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=In((e=t.contentWindow).document)}return t}function Dn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function Ln(e){var t=An(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(n.ownerDocument.documentElement,n)){if(null!==r&&Dn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=Fn(n,i);var u=Fn(n,r);o&&u&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==u.node||e.focusOffset!==u.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(u.node,u.offset)):(t.setEnd(u.node,u.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Un=G&&"documentMode"in document&&11>=document.documentMode,zn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Wn=null,Vn=null,Bn=null,$n=!1;function Gn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return $n||null==Wn||Wn!==In(n)?null:("selectionStart"in(n=Wn)&&Dn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Bn&&en(Bn,n)?null:(Bn=n,(e=le.getPooled(zn.select,Vn,e,t)).type="select",e.target=Wn,$(e),e))}var Hn={eventTypes:zn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=Rn(i),o=w.onSelect;for(var u=0;u<o.length;u++){var a=o[u];if(!i.hasOwnProperty(a)||!i[a]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?D(t):window,e){case"focus":(Le(i)||"true"===i.contentEditable)&&(Wn=i,Vn=t,Bn=null);break;case"blur":Bn=Vn=Wn=null;break;case"mousedown":$n=!0;break;case"contextmenu":case"mouseup":case"dragend":return $n=!1,Gn(n,r);case"selectionchange":if(Un)break;case"keydown":case"keyup":return Gn(n,r)}return null}};function qn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Kn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+gt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Qn(e,t){return null!=t.dangerouslySetInnerHTML&&u("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Yn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&u("92"),Array.isArray(t)&&(1>=t.length||u("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:gt(n)}}function Xn(e,t){var n=gt(t.value),r=gt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Jn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}O.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x=L,S=A,E=D,O.injectEventPluginsByName({SimpleEventPlugin:wn,EnterLeaveEventPlugin:Xt,ChangeEventPlugin:Ut,SelectEventPlugin:Hn,BeforeInputEventPlugin:ke});var Zn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function er(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function tr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?er(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var nr,rr=void 0,or=(nr=function(e,t){if(e.namespaceURI!==Zn.svg||"innerHTML"in e)e.innerHTML=t;else{for((rr=rr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=rr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return nr(e,t)})}:nr);function ir(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ur={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ar=["Webkit","ms","Moz","O"];function lr(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ur.hasOwnProperty(e)&&ur[e]?(""+t).trim():t+"px"}function cr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=lr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ur).forEach(function(e){ar.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ur[t]=ur[e]})});var sr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function fr(e,t){t&&(sr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&u("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&u("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||u("61")),null!=t.style&&"object"!=typeof t.style&&u("62",""))}function pr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function dr(e,t){var n=Rn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=w[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Tn("scroll",e);break;case"focus":case"blur":Tn("focus",e),Tn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":ze(o)&&Tn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(o)&&kn(o,e)}n[o]=!0}}}function hr(){}var vr=null,yr=null;function mr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function gr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var br="function"==typeof setTimeout?setTimeout:void 0,wr="function"==typeof clearTimeout?clearTimeout:void 0,xr=i.unstable_scheduleCallback,Sr=i.unstable_cancelCallback;function Er(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function _r(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var kr=[],Tr=-1;function Pr(e){0>Tr||(e.current=kr[Tr],kr[Tr]=null,Tr--)}function Cr(e,t){kr[++Tr]=e.current,e.current=t}var Or={},Nr={current:Or},Mr={current:!1},Rr=Or;function Ir(e,t){var n=e.type.contextTypes;if(!n)return Or;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function jr(e){return null!=(e=e.childContextTypes)}function Fr(e){Pr(Mr),Pr(Nr)}function Ar(e){Pr(Mr),Pr(Nr)}function Dr(e,t,n){Nr.current!==Or&&u("168"),Cr(Nr,t),Cr(Mr,n)}function Lr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in e||u("108",at(t)||"Unknown",i);return o({},n,r)}function Ur(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Or,Rr=Nr.current,Cr(Nr,t),Cr(Mr,Mr.current),!0}function zr(e,t,n){var r=e.stateNode;r||u("169"),n?(t=Lr(e,t,Rr),r.__reactInternalMemoizedMergedChildContext=t,Pr(Mr),Pr(Nr),Cr(Nr,t)):Pr(Mr),Cr(Mr,n)}var Wr=null,Vr=null;function Br(e){return function(t){try{return e(t)}catch(e){}}}function $r(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.contextDependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Gr(e,t,n,r){return new $r(e,t,n,r)}function Hr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function qr(e,t){var n=e.alternate;return null===n?((n=Gr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.contextDependencies=e.contextDependencies,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Kr(e,t,n,r,o,i){var a=2;if(r=e,"function"==typeof e)Hr(e)&&(a=1);else if("string"==typeof e)a=5;else e:switch(e){case Qe:return Qr(n.children,o,i,t);case et:return Yr(n,3|o,i,t);case Ye:return Yr(n,2|o,i,t);case Xe:return(e=Gr(12,n,t,4|o)).elementType=Xe,e.type=Xe,e.expirationTime=i,e;case nt:return(e=Gr(13,n,t,o)).elementType=nt,e.type=nt,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Je:a=10;break e;case Ze:a=9;break e;case tt:a=11;break e;case rt:a=14;break e;case ot:a=16,r=null;break e}u("130",null==e?e:typeof e,"")}return(t=Gr(a,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Qr(e,t,n,r){return(e=Gr(7,e,r,t)).expirationTime=n,e}function Yr(e,t,n,r){return e=Gr(8,e,r,t),t=0==(1&t)?Ye:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function Xr(e,t,n){return(e=Gr(6,e,null,t)).expirationTime=n,e}function Jr(e,t,n){return(t=Gr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Zr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),no(t,e)}function eo(e,t){e.didError=!1,e.latestPingedTime>=t&&(e.latestPingedTime=0);var n=e.earliestPendingTime,r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),no(t,e)}function to(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function no(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,i=t.latestPingedTime;0===(o=0!==o?o:i)&&(0===e||r<e)&&(o=r),0!==(e=o)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}function ro(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var oo=(new r.Component).refs;function io(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var uo={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Sa(),o=Yi(r=Qu(r,e));o.payload=t,null!=n&&(o.callback=n),Bu(),Ji(e,o),Ju(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Sa(),o=Yi(r=Qu(r,e));o.tag=$i,o.payload=t,null!=n&&(o.callback=n),Bu(),Ji(e,o),Ju(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Sa(),r=Yi(n=Qu(n,e));r.tag=Gi,null!=t&&(r.callback=t),Bu(),Ji(e,r),Ju(e,n)}};function ao(e,t,n,r,o,i,u){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,u):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(o,i))}function lo(e,t,n){var r=!1,o=Or,i=t.contextType;return"object"==typeof i&&null!==i?i=Vi(i):(o=jr(t)?Rr:Nr.current,i=(r=null!=(r=t.contextTypes))?Ir(e,o):Or),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=uo,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function co(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&uo.enqueueReplaceState(t,t.state,null)}function so(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=oo;var i=t.contextType;"object"==typeof i&&null!==i?o.context=Vi(i):(i=jr(t)?Rr:Nr.current,o.context=Ir(e,i)),null!==(i=e.updateQueue)&&(nu(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(io(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&uo.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(nu(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var fo=Array.isArray;function po(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&u("309"),r=n.stateNode),r||u("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===oo&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&u("284"),n._owner||u("290",e)}return e}function ho(e,t){"textarea"!==e.type&&u("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function vo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=qr(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Xr(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=po(e,t,n),r.return=e,r):((r=Kr(n.type,n.key,n.props,null,e.mode,r)).ref=po(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Jr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Qr(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case qe:return(n=Kr(t.type,t.key,t.props,null,e.mode,n)).ref=po(e,null,t),n.return=e,n;case Ke:return(t=Jr(t,e.mode,n)).return=e,t}if(fo(t)||ut(t))return(t=Qr(t,e.mode,n,null)).return=e,t;ho(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case qe:return n.key===o?n.type===Qe?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case Ke:return n.key===o?s(e,t,n,r):null}if(fo(n)||ut(n))return null!==o?null:f(e,t,n,r,null);ho(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case qe:return e=e.get(null===r.key?n:r.key)||null,r.type===Qe?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case Ke:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(fo(r)||ut(r))return f(t,e=e.get(n)||null,r,o,null);ho(t,r)}return null}function v(o,u,a,l){for(var c=null,s=null,f=u,v=u=0,y=null;null!==f&&v<a.length;v++){f.index>v?(y=f,f=null):y=f.sibling;var m=d(o,f,a[v],l);if(null===m){null===f&&(f=y);break}e&&f&&null===m.alternate&&t(o,f),u=i(m,u,v),null===s?c=m:s.sibling=m,s=m,f=y}if(v===a.length)return n(o,f),c;if(null===f){for(;v<a.length;v++)(f=p(o,a[v],l))&&(u=i(f,u,v),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);v<a.length;v++)(y=h(f,o,v,a[v],l))&&(e&&null!==y.alternate&&f.delete(null===y.key?v:y.key),u=i(y,u,v),null===s?c=y:s.sibling=y,s=y);return e&&f.forEach(function(e){return t(o,e)}),c}function y(o,a,l,c){var s=ut(l);"function"!=typeof s&&u("150"),null==(l=s.call(l))&&u("151");for(var f=s=null,v=a,y=a=0,m=null,g=l.next();null!==v&&!g.done;y++,g=l.next()){v.index>y?(m=v,v=null):m=v.sibling;var b=d(o,v,g.value,c);if(null===b){v||(v=m);break}e&&v&&null===b.alternate&&t(o,v),a=i(b,a,y),null===f?s=b:f.sibling=b,f=b,v=m}if(g.done)return n(o,v),s;if(null===v){for(;!g.done;y++,g=l.next())null!==(g=p(o,g.value,c))&&(a=i(g,a,y),null===f?s=g:f.sibling=g,f=g);return s}for(v=r(o,v);!g.done;y++,g=l.next())null!==(g=h(v,o,y,g.value,c))&&(e&&null!==g.alternate&&v.delete(null===g.key?y:g.key),a=i(g,a,y),null===f?s=g:f.sibling=g,f=g);return e&&v.forEach(function(e){return t(o,e)}),s}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===Qe&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case qe:e:{for(s=i.key,c=r;null!==c;){if(c.key===s){if(7===c.tag?i.type===Qe:c.elementType===i.type){n(e,c.sibling),(r=o(c,i.type===Qe?i.props.children:i.props)).ref=po(e,c,i),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}i.type===Qe?((r=Qr(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Kr(i.type,i.key,i.props,null,e.mode,l)).ref=po(e,r,i),l.return=e,e=l)}return a(e);case Ke:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Jr(i,e.mode,l)).return=e,e=r}return a(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Xr(i,e.mode,l)).return=e,e=r),a(e);if(fo(i))return v(e,r,i,l);if(ut(i))return y(e,r,i,l);if(s&&ho(e,i),void 0===i&&!c)switch(e.tag){case 1:case 0:u("152",(l=e.type).displayName||l.name||"Component")}return n(e,r)}}var yo=vo(!0),mo=vo(!1),go={},bo={current:go},wo={current:go},xo={current:go};function So(e){return e===go&&u("174"),e}function Eo(e,t){Cr(xo,t),Cr(wo,e),Cr(bo,go);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:tr(null,"");break;default:t=tr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Pr(bo),Cr(bo,t)}function _o(e){Pr(bo),Pr(wo),Pr(xo)}function ko(e){So(xo.current);var t=So(bo.current),n=tr(t,e.type);t!==n&&(Cr(wo,e),Cr(bo,n))}function To(e){wo.current===e&&(Pr(bo),Pr(wo))}var Po=0,Co=2,Oo=4,No=8,Mo=16,Ro=32,Io=64,jo=128,Fo=$e.ReactCurrentDispatcher,Ao=0,Do=null,Lo=null,Uo=null,zo=null,Wo=null,Vo=null,Bo=0,$o=null,Go=0,Ho=!1,qo=null,Ko=0;function Qo(){u("321")}function Yo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Jt(e[n],t[n]))return!1;return!0}function Xo(e,t,n,r,o,i){if(Ao=i,Do=t,Uo=null!==e?e.memoizedState:null,Fo.current=null===Uo?si:fi,t=n(r,o),Ho){do{Ho=!1,Ko+=1,Uo=null!==e?e.memoizedState:null,Vo=zo,$o=Wo=Lo=null,Fo.current=fi,t=n(r,o)}while(Ho);qo=null,Ko=0}return Fo.current=ci,(e=Do).memoizedState=zo,e.expirationTime=Bo,e.updateQueue=$o,e.effectTag|=Go,e=null!==Lo&&null!==Lo.next,Ao=0,Vo=Wo=zo=Uo=Lo=Do=null,Bo=0,$o=null,Go=0,e&&u("300"),t}function Jo(){Fo.current=ci,Ao=0,Vo=Wo=zo=Uo=Lo=Do=null,Bo=0,$o=null,Go=0,Ho=!1,qo=null,Ko=0}function Zo(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Wo?zo=Wo=e:Wo=Wo.next=e,Wo}function ei(){if(null!==Vo)Vo=(Wo=Vo).next,Uo=null!==(Lo=Uo)?Lo.next:null;else{null===Uo&&u("310");var e={memoizedState:(Lo=Uo).memoizedState,baseState:Lo.baseState,queue:Lo.queue,baseUpdate:Lo.baseUpdate,next:null};Wo=null===Wo?zo=e:Wo.next=e,Uo=Lo.next}return Wo}function ti(e,t){return"function"==typeof t?t(e):t}function ni(e){var t=ei(),n=t.queue;if(null===n&&u("311"),n.lastRenderedReducer=e,0<Ko){var r=n.dispatch;if(null!==qo){var o=qo.get(n);if(void 0!==o){qo.delete(n);var i=t.memoizedState;do{i=e(i,o.action),o=o.next}while(null!==o);return Jt(i,t.memoizedState)||(Si=!0),t.memoizedState=i,t.baseUpdate===n.last&&(t.baseState=i),n.lastRenderedState=i,[i,r]}}return[t.memoizedState,r]}r=n.last;var a=t.baseUpdate;if(i=t.baseState,null!==a?(null!==r&&(r.next=null),r=a.next):r=null!==r?r.next:null,null!==r){var l=o=null,c=r,s=!1;do{var f=c.expirationTime;f<Ao?(s||(s=!0,l=a,o=i),f>Bo&&(Bo=f)):i=c.eagerReducer===e?c.eagerState:e(i,c.action),a=c,c=c.next}while(null!==c&&c!==r);s||(l=a,o=i),Jt(i,t.memoizedState)||(Si=!0),t.memoizedState=i,t.baseUpdate=l,t.baseState=o,n.lastRenderedState=i}return[t.memoizedState,n.dispatch]}function ri(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===$o?($o={lastEffect:null}).lastEffect=e.next=e:null===(t=$o.lastEffect)?$o.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,$o.lastEffect=e),e}function oi(e,t,n,r){var o=Zo();Go|=e,o.memoizedState=ri(t,n,void 0,void 0===r?null:r)}function ii(e,t,n,r){var o=ei();r=void 0===r?null:r;var i=void 0;if(null!==Lo){var u=Lo.memoizedState;if(i=u.destroy,null!==r&&Yo(r,u.deps))return void ri(Po,n,i,r)}Go|=e,o.memoizedState=ri(t,n,i,r)}function ui(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ai(){}function li(e,t,n){25>Ko||u("301");var r=e.alternate;if(e===Do||null!==r&&r===Do)if(Ho=!0,e={expirationTime:Ao,action:n,eagerReducer:null,eagerState:null,next:null},null===qo&&(qo=new Map),void 0===(n=qo.get(t)))qo.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{Bu();var o=Sa(),i={expirationTime:o=Qu(o,e),action:n,eagerReducer:null,eagerState:null,next:null},a=t.last;if(null===a)i.next=i;else{var l=a.next;null!==l&&(i.next=l),a.next=i}if(t.last=i,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var c=t.lastRenderedState,s=r(c,n);if(i.eagerReducer=r,i.eagerState=s,Jt(s,c))return}catch(e){}Ju(e,o)}}var ci={readContext:Vi,useCallback:Qo,useContext:Qo,useEffect:Qo,useImperativeHandle:Qo,useLayoutEffect:Qo,useMemo:Qo,useReducer:Qo,useRef:Qo,useState:Qo,useDebugValue:Qo},si={readContext:Vi,useCallback:function(e,t){return Zo().memoizedState=[e,void 0===t?null:t],e},useContext:Vi,useEffect:function(e,t){return oi(516,jo|Io,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,oi(4,Oo|Ro,ui.bind(null,t,e),n)},useLayoutEffect:function(e,t){return oi(4,Oo|Ro,e,t)},useMemo:function(e,t){var n=Zo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Zo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=li.bind(null,Do,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Zo().memoizedState=e},useState:function(e){var t=Zo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:ti,lastRenderedState:e}).dispatch=li.bind(null,Do,e),[t.memoizedState,e]},useDebugValue:ai},fi={readContext:Vi,useCallback:function(e,t){var n=ei();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Yo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:Vi,useEffect:function(e,t){return ii(516,jo|Io,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ii(4,Oo|Ro,ui.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ii(4,Oo|Ro,e,t)},useMemo:function(e,t){var n=ei();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Yo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:ni,useRef:function(){return ei().memoizedState},useState:function(e){return ni(ti)},useDebugValue:ai},pi=null,di=null,hi=!1;function vi(e,t){var n=Gr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function yi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function mi(e){if(hi){var t=di;if(t){var n=t;if(!yi(e,t)){if(!(t=Er(n))||!yi(e,t))return e.effectTag|=2,hi=!1,void(pi=e);vi(pi,n)}pi=e,di=_r(t)}else e.effectTag|=2,hi=!1,pi=e}}function gi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;pi=e}function bi(e){if(e!==pi)return!1;if(!hi)return gi(e),hi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!gr(t,e.memoizedProps))for(t=di;t;)vi(e,t),t=Er(t);return gi(e),di=pi?Er(e.stateNode):null,!0}function wi(){di=pi=null,hi=!1}var xi=$e.ReactCurrentOwner,Si=!1;function Ei(e,t,n,r){t.child=null===e?mo(t,null,n,r):yo(t,e.child,n,r)}function _i(e,t,n,r,o){n=n.render;var i=t.ref;return Wi(t,o),r=Xo(e,t,n,r,i,o),null===e||Si?(t.effectTag|=1,Ei(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ii(e,t,o))}function ki(e,t,n,r,o,i){if(null===e){var u=n.type;return"function"!=typeof u||Hr(u)||void 0!==u.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Kr(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=u,Ti(e,t,u,r,o,i))}return u=e.child,o<i&&(o=u.memoizedProps,(n=null!==(n=n.compare)?n:en)(o,r)&&e.ref===t.ref)?Ii(e,t,i):(t.effectTag|=1,(e=qr(u,r)).ref=t.ref,e.return=t,t.child=e)}function Ti(e,t,n,r,o,i){return null!==e&&en(e.memoizedProps,r)&&e.ref===t.ref&&(Si=!1,o<i)?Ii(e,t,i):Ci(e,t,n,r,i)}function Pi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ci(e,t,n,r,o){var i=jr(n)?Rr:Nr.current;return i=Ir(t,i),Wi(t,o),n=Xo(e,t,n,r,i,o),null===e||Si?(t.effectTag|=1,Ei(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ii(e,t,o))}function Oi(e,t,n,r,o){if(jr(n)){var i=!0;Ur(t)}else i=!1;if(Wi(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),lo(t,n,r),so(t,n,r,o),r=!0;else if(null===e){var u=t.stateNode,a=t.memoizedProps;u.props=a;var l=u.context,c=n.contextType;"object"==typeof c&&null!==c?c=Vi(c):c=Ir(t,c=jr(n)?Rr:Nr.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof u.getSnapshotBeforeUpdate;f||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(a!==r||l!==c)&&co(t,u,r,c),qi=!1;var p=t.memoizedState;l=u.state=p;var d=t.updateQueue;null!==d&&(nu(t,d,r,u,o),l=t.memoizedState),a!==r||p!==l||Mr.current||qi?("function"==typeof s&&(io(t,n,s,r),l=t.memoizedState),(a=qi||ao(t,n,a,r,p,l,c))?(f||"function"!=typeof u.UNSAFE_componentWillMount&&"function"!=typeof u.componentWillMount||("function"==typeof u.componentWillMount&&u.componentWillMount(),"function"==typeof u.UNSAFE_componentWillMount&&u.UNSAFE_componentWillMount()),"function"==typeof u.componentDidMount&&(t.effectTag|=4)):("function"==typeof u.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),u.props=r,u.state=l,u.context=c,r=a):("function"==typeof u.componentDidMount&&(t.effectTag|=4),r=!1)}else u=t.stateNode,a=t.memoizedProps,u.props=t.type===t.elementType?a:ro(t.type,a),l=u.context,"object"==typeof(c=n.contextType)&&null!==c?c=Vi(c):c=Ir(t,c=jr(n)?Rr:Nr.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof u.getSnapshotBeforeUpdate)||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(a!==r||l!==c)&&co(t,u,r,c),qi=!1,l=t.memoizedState,p=u.state=l,null!==(d=t.updateQueue)&&(nu(t,d,r,u,o),p=t.memoizedState),a!==r||l!==p||Mr.current||qi?("function"==typeof s&&(io(t,n,s,r),p=t.memoizedState),(s=qi||ao(t,n,a,r,l,p,c))?(f||"function"!=typeof u.UNSAFE_componentWillUpdate&&"function"!=typeof u.componentWillUpdate||("function"==typeof u.componentWillUpdate&&u.componentWillUpdate(r,p,c),"function"==typeof u.UNSAFE_componentWillUpdate&&u.UNSAFE_componentWillUpdate(r,p,c)),"function"==typeof u.componentDidUpdate&&(t.effectTag|=4),"function"==typeof u.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof u.componentDidUpdate||a===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof u.getSnapshotBeforeUpdate||a===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),u.props=r,u.state=p,u.context=c,r=s):("function"!=typeof u.componentDidUpdate||a===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof u.getSnapshotBeforeUpdate||a===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return Ni(e,t,n,r,i,o)}function Ni(e,t,n,r,o,i){Pi(e,t);var u=0!=(64&t.effectTag);if(!r&&!u)return o&&zr(t,n,!1),Ii(e,t,i);r=t.stateNode,xi.current=t;var a=u&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&u?(t.child=yo(t,e.child,null,i),t.child=yo(t,null,a,i)):Ei(e,t,a,i),t.memoizedState=r.state,o&&zr(t,n,!0),t.child}function Mi(e){var t=e.stateNode;t.pendingContext?Dr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Dr(0,t.context,!1),Eo(e,t.containerInfo)}function Ri(e,t,n){var r=t.mode,o=t.pendingProps,i=t.memoizedState;if(0==(64&t.effectTag)){i=null;var u=!1}else i={timedOutAt:null!==i?i.timedOutAt:0},u=!0,t.effectTag&=-65;if(null===e)if(u){var a=o.fallback;e=Qr(null,r,0,null),0==(1&t.mode)&&(e.child=null!==t.memoizedState?t.child.child:t.child),r=Qr(a,r,n,null),e.sibling=r,(n=e).return=r.return=t}else n=r=mo(t,null,o.children,n);else null!==e.memoizedState?(a=(r=e.child).sibling,u?(n=o.fallback,o=qr(r,r.pendingProps),0==(1&t.mode)&&((u=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(o.child=u)),r=o.sibling=qr(a,n,a.expirationTime),n=o,o.childExpirationTime=0,n.return=r.return=t):n=r=yo(t,r.child,o.children,n)):(a=e.child,u?(u=o.fallback,(o=Qr(null,r,0,null)).child=a,0==(1&t.mode)&&(o.child=null!==t.memoizedState?t.child.child:t.child),(r=o.sibling=Qr(u,r,n,null)).effectTag|=2,n=o,o.childExpirationTime=0,n.return=r.return=t):r=n=yo(t,a,o.children,n)),t.stateNode=e.stateNode;return t.memoizedState=i,t.child=n,r}function Ii(e,t,n){if(null!==e&&(t.contextDependencies=e.contextDependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&u("153"),null!==t.child){for(n=qr(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=qr(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function ji(e,t,n){var r=t.expirationTime;if(null!==e){if(e.memoizedProps!==t.pendingProps||Mr.current)Si=!0;else if(r<n){switch(Si=!1,t.tag){case 3:Mi(t),wi();break;case 5:ko(t);break;case 1:jr(t.type)&&Ur(t);break;case 4:Eo(t,t.stateNode.containerInfo);break;case 10:Ui(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Ri(e,t,n):null!==(t=Ii(e,t,n))?t.sibling:null}return Ii(e,t,n)}}else Si=!1;switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var o=Ir(t,Nr.current);if(Wi(t,n),o=Xo(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,Jo(),jr(r)){var i=!0;Ur(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var a=r.getDerivedStateFromProps;"function"==typeof a&&io(t,r,a,e),o.updater=uo,t.stateNode=o,o._reactInternalFiber=t,so(t,r,e,n),t=Ni(null,t,r,!0,i,n)}else t.tag=0,Ei(null,t,o,n),t=t.child;return t;case 16:switch(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),i=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(o),t.type=e,o=t.tag=function(e){if("function"==typeof e)return Hr(e)?1:0;if(null!=e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),i=ro(e,i),a=void 0,o){case 0:a=Ci(null,t,e,i,n);break;case 1:a=Oi(null,t,e,i,n);break;case 11:a=_i(null,t,e,i,n);break;case 14:a=ki(null,t,e,ro(e.type,i),r,n);break;default:u("306",e,"")}return a;case 0:return r=t.type,o=t.pendingProps,Ci(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 1:return r=t.type,o=t.pendingProps,Oi(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 3:return Mi(t),null===(r=t.updateQueue)&&u("282"),o=null!==(o=t.memoizedState)?o.element:null,nu(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(wi(),t=Ii(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(di=_r(t.stateNode.containerInfo),pi=t,o=hi=!0),o?(t.effectTag|=2,t.child=mo(t,null,r,n)):(Ei(e,t,r,n),wi()),t=t.child),t;case 5:return ko(t),null===e&&mi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,a=o.children,gr(r,o)?a=null:null!==i&&gr(r,i)&&(t.effectTag|=16),Pi(e,t),1!==n&&1&t.mode&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Ei(e,t,a,n),t=t.child),t;case 6:return null===e&&mi(t),null;case 13:return Ri(e,t,n);case 4:return Eo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=yo(t,null,r,n):Ei(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,_i(e,t,r,o=t.elementType===r?o:ro(r,o),n);case 7:return Ei(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ei(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,a=t.memoizedProps,Ui(t,i=o.value),null!==a){var l=a.value;if(0===(i=Jt(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(a.children===o.children&&!Mr.current){t=Ii(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.contextDependencies;if(null!==c){a=l.child;for(var s=c.first;null!==s;){if(s.context===r&&0!=(s.observedBits&i)){1===l.tag&&((s=Yi(n)).tag=Gi,Ji(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),s=n;for(var f=l.return;null!==f;){var p=f.alternate;if(f.childExpirationTime<s)f.childExpirationTime=s,null!==p&&p.childExpirationTime<s&&(p.childExpirationTime=s);else{if(!(null!==p&&p.childExpirationTime<s))break;p.childExpirationTime=s}f=f.return}c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else a=10===l.tag&&l.type===t.type?null:l.child;if(null!==a)a.return=l;else for(a=l;null!==a;){if(a===t){a=null;break}if(null!==(l=a.sibling)){l.return=a.return,a=l;break}a=a.return}l=a}}Ei(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,Wi(t,n),r=r(o=Vi(o,i.unstable_observedBits)),t.effectTag|=1,Ei(e,t,r,n),t.child;case 14:return i=ro(o=t.type,t.pendingProps),ki(e,t,o,i=ro(o.type,i),r,n);case 15:return Ti(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:ro(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,jr(r)?(e=!0,Ur(t)):e=!1,Wi(t,n),lo(t,r,o),so(t,r,o,n),Ni(null,t,r,!0,e,n)}u("156")}var Fi={current:null},Ai=null,Di=null,Li=null;function Ui(e,t){var n=e.type._context;Cr(Fi,n._currentValue),n._currentValue=t}function zi(e){var t=Fi.current;Pr(Fi),e.type._context._currentValue=t}function Wi(e,t){Ai=e,Li=Di=null;var n=e.contextDependencies;null!==n&&n.expirationTime>=t&&(Si=!0),e.contextDependencies=null}function Vi(e,t){return Li!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(Li=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Di?(null===Ai&&u("308"),Di=t,Ai.contextDependencies={first:t,expirationTime:0}):Di=Di.next=t),e._currentValue}var Bi=0,$i=1,Gi=2,Hi=3,qi=!1;function Ki(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Qi(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Yi(e){return{expirationTime:e,tag:Bi,payload:null,callback:null,next:null,nextEffect:null}}function Xi(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Ji(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=Ki(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=Ki(e.memoizedState),o=n.updateQueue=Ki(n.memoizedState)):r=e.updateQueue=Qi(o):null===o&&(o=n.updateQueue=Qi(r));null===o||r===o?Xi(r,t):null===r.lastUpdate||null===o.lastUpdate?(Xi(r,t),Xi(o,t)):(Xi(r,t),o.lastUpdate=t)}function Zi(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Ki(e.memoizedState):eu(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function eu(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Qi(t)),t}function tu(e,t,n,r,i,u){switch(n.tag){case $i:return"function"==typeof(e=n.payload)?e.call(u,r,i):e;case Hi:e.effectTag=-2049&e.effectTag|64;case Bi:if(null==(i="function"==typeof(e=n.payload)?e.call(u,r,i):e))break;return o({},r,i);case Gi:qi=!0}return r}function nu(e,t,n,r,o){qi=!1;for(var i=(t=eu(e,t)).baseState,u=null,a=0,l=t.firstUpdate,c=i;null!==l;){var s=l.expirationTime;s<o?(null===u&&(u=l,i=c),a<s&&(a=s)):(c=tu(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(s=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<o?(null===s&&(s=l,null===u&&(i=c)),a<f&&(a=f)):(c=tu(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===u&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===u&&null===s&&(i=c),t.baseState=i,t.firstUpdate=u,t.firstCapturedUpdate=s,e.expirationTime=a,e.memoizedState=c}function ru(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),ou(t.firstEffect,n),t.firstEffect=t.lastEffect=null,ou(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function ou(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&u("191",n),n.call(r)}e=e.nextEffect}}function iu(e,t){return{value:e,source:t,stack:lt(t)}}function uu(e){e.effectTag|=4}var au=void 0,lu=void 0,cu=void 0,su=void 0;au=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},lu=function(){},cu=function(e,t,n,r,i){var u=e.memoizedProps;if(u!==r){var a=t.stateNode;switch(So(bo.current),e=null,n){case"input":u=bt(a,u),r=bt(a,r),e=[];break;case"option":u=qn(a,u),r=qn(a,r),e=[];break;case"select":u=o({},u,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":u=Qn(a,u),r=Qn(a,r),e=[];break;default:"function"!=typeof u.onClick&&"function"==typeof r.onClick&&(a.onclick=hr)}fr(n,r),a=n=void 0;var l=null;for(n in u)if(!r.hasOwnProperty(n)&&u.hasOwnProperty(n)&&null!=u[n])if("style"===n){var c=u[n];for(a in c)c.hasOwnProperty(a)&&(l||(l={}),l[a]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(b.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var s=r[n];if(c=null!=u?u[n]:void 0,r.hasOwnProperty(n)&&s!==c&&(null!=s||null!=c))if("style"===n)if(c){for(a in c)!c.hasOwnProperty(a)||s&&s.hasOwnProperty(a)||(l||(l={}),l[a]="");for(a in s)s.hasOwnProperty(a)&&c[a]!==s[a]&&(l||(l={}),l[a]=s[a])}else l||(e||(e=[]),e.push(n,l)),l=s;else"dangerouslySetInnerHTML"===n?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(n,""+s)):"children"===n?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(n,""+s):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(b.hasOwnProperty(n)?(null!=s&&dr(i,n),e||c===s||(e=[])):(e=e||[]).push(n,s))}l&&(e=e||[]).push("style",l),i=e,(t.updateQueue=i)&&uu(t)}},su=function(e,t,n,r){n!==r&&uu(t)};var fu="function"==typeof WeakSet?WeakSet:Set;function pu(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=lt(n)),null!==n&&at(n.type),t=t.value,null!==e&&1===e.tag&&at(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function du(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ku(e,t)}else t.current=null}function hu(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==Po){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}(r.tag&t)!==Po&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function vu(e){switch("function"==typeof Vr&&Vr(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(void 0!==r){var o=e;try{r()}catch(e){Ku(o,e)}}n=n.next}while(n!==t)}break;case 1:if(du(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Ku(e,t)}break;case 5:du(e);break;case 4:gu(e)}}function yu(e){return 5===e.tag||3===e.tag||4===e.tag}function mu(e){e:{for(var t=e.return;null!==t;){if(yu(t)){var n=t;break e}t=t.return}u("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:u("161")}16&n.effectTag&&(ir(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||yu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=t,a=o.stateNode,l=n;8===i.nodeType?i.parentNode.insertBefore(a,l):i.insertBefore(a,l)}else t.insertBefore(o.stateNode,n);else r?(a=t,l=o.stateNode,8===a.nodeType?(i=a.parentNode).insertBefore(l,a):(i=a).appendChild(l),null!=(a=a._reactRootContainer)||null!==i.onclick||(i.onclick=hr)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function gu(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&u("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,a=i;;)if(vu(a),null!==a.child&&4!==a.tag)a.child.return=a,a=a.child;else{if(a===i)break;for(;null===a.sibling;){if(null===a.return||a.return===i)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}o?(i=r,a=t.stateNode,8===i.nodeType?i.parentNode.removeChild(a):i.removeChild(a)):r.removeChild(t.stateNode)}else if(4===t.tag){if(null!==t.child){r=t.stateNode.containerInfo,o=!0,t.child.return=t,t=t.child;continue}}else if(vu(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function bu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:hu(Oo,No,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&function(e,t,n,r,o){e[j]=o,"input"===n&&"radio"===o.type&&null!=o.name&&xt(e,o),pr(n,r),r=pr(n,o);for(var i=0;i<t.length;i+=2){var u=t[i],a=t[i+1];"style"===u?cr(e,a):"dangerouslySetInnerHTML"===u?or(e,a):"children"===u?ir(e,a):mt(e,u,a,r)}switch(n){case"input":St(e,o);break;case"textarea":Xn(e,o);break;case"select":t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Kn(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Kn(e,!!o.multiple,o.defaultValue,!0):Kn(e,!!o.multiple,o.multiple?[]:"",!1))}}(n,i,o,e,r)}break;case 6:null===t.stateNode&&u("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t.memoizedState,r=void 0,e=t,null===n?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=Sa())),null!==e&&function(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)r.style.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=lr("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(e,r),null!==(n=t.updateQueue)){t.updateQueue=null;var a=t.stateNode;null===a&&(a=t.stateNode=new fu),n.forEach(function(e){var n=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),t=Qu(t=Sa(),e),null!==(e=Xu(e,t))&&(Zr(e,t),0!==(t=e.expirationTime)&&Ea(e,t))}.bind(null,t,e);a.has(e)||(a.add(e),e.then(n,n))})}break;case 17:break;default:u("163")}}var wu="function"==typeof WeakMap?WeakMap:Map;function xu(e,t,n){(n=Yi(n)).tag=Hi,n.payload={element:null};var r=t.value;return n.callback=function(){Ra(r),pu(e,t)},n}function Su(e,t,n){(n=Yi(n)).tag=Hi;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Lu?Lu=new Set([this]):Lu.add(this));var n=t.value,o=t.stack;pu(e,t),this.componentDidCatch(n,{componentStack:null!==o?o:""})}),n}function Eu(e){switch(e.tag){case 1:jr(e.type)&&Fr();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return _o(),Ar(),0!=(64&(t=e.effectTag))&&u("285"),e.effectTag=-2049&t|64,e;case 5:return To(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 4:return _o(),null;case 10:return zi(e),null;default:return null}}var _u=$e.ReactCurrentDispatcher,ku=$e.ReactCurrentOwner,Tu=1073741822,Pu=!1,Cu=null,Ou=null,Nu=0,Mu=-1,Ru=!1,Iu=null,ju=!1,Fu=null,Au=null,Du=null,Lu=null;function Uu(){if(null!==Cu)for(var e=Cu.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!=n&&Fr();break;case 3:_o(),Ar();break;case 5:To(t);break;case 4:_o();break;case 10:zi(t)}e=e.return}Ou=null,Nu=0,Mu=-1,Ru=!1,Cu=null}function zu(){for(;null!==Iu;){var e=Iu.effectTag;if(16&e&&ir(Iu.stateNode,""),128&e){var t=Iu.alternate;null!==t&&(null!==(t=t.ref)&&("function"==typeof t?t(null):t.current=null))}switch(14&e){case 2:mu(Iu),Iu.effectTag&=-3;break;case 6:mu(Iu),Iu.effectTag&=-3,bu(Iu.alternate,Iu);break;case 4:bu(Iu.alternate,Iu);break;case 8:gu(e=Iu),e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,null!==(e=e.alternate)&&(e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null)}Iu=Iu.nextEffect}}function Wu(){for(;null!==Iu;){if(256&Iu.effectTag)e:{var e=Iu.alternate,t=Iu;switch(t.tag){case 0:case 11:case 15:hu(Co,Po,t);break e;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:ro(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break e;case 3:case 5:case 6:case 4:case 17:break e;default:u("163")}}Iu=Iu.nextEffect}}function Vu(e,t){for(;null!==Iu;){var n=Iu.effectTag;if(36&n){var r=Iu.alternate,o=Iu,i=t;switch(o.tag){case 0:case 11:case 15:hu(Mo,Ro,o);break;case 1:var a=o.stateNode;if(4&o.effectTag)if(null===r)a.componentDidMount();else{var l=o.elementType===o.type?r.memoizedProps:ro(o.type,r.memoizedProps);a.componentDidUpdate(l,r.memoizedState,a.__reactInternalSnapshotBeforeUpdate)}null!==(r=o.updateQueue)&&ru(0,r,a);break;case 3:if(null!==(r=o.updateQueue)){if(a=null,null!==o.child)switch(o.child.tag){case 5:a=o.child.stateNode;break;case 1:a=o.child.stateNode}ru(0,r,a)}break;case 5:i=o.stateNode,null===r&&4&o.effectTag&&mr(o.type,o.memoizedProps)&&i.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:u("163")}}128&n&&(null!==(o=Iu.ref)&&(i=Iu.stateNode,"function"==typeof o?o(i):o.current=i)),512&n&&(Fu=e),Iu=Iu.nextEffect}}function Bu(){null!==Au&&Sr(Au),null!==Du&&Du()}function $u(e,t){ju=Pu=!0,e.current===t&&u("177");var n=e.pendingCommitExpirationTime;0===n&&u("261"),e.pendingCommitExpirationTime=0;var r=t.expirationTime,o=t.childExpirationTime;for(function(e,t){if(e.didError=!1,0===t)e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0;else{t<e.latestPingedTime&&(e.latestPingedTime=0);var n=e.latestPendingTime;0!==n&&(n>t?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>t&&(e.earliestPendingTime=e.latestPendingTime)),0===(n=e.earliestSuspendedTime)?Zr(e,t):t<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Zr(e,t)):t>n&&Zr(e,t)}no(0,e)}(e,o>r?o:r),ku.current=null,r=void 0,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,vr=_n,yr=function(){var e=An();if(Dn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,u=-1,a=-1,l=0,c=0,s=e,f=null;t:for(;;){for(var p;s!==t||0!==r&&3!==s.nodeType||(u=i+r),s!==o||0!==n&&3!==s.nodeType||(a=i+n),3===s.nodeType&&(i+=s.nodeValue.length),null!==(p=s.firstChild);)f=s,s=p;for(;;){if(s===e)break t;if(f===t&&++l===r&&(u=i),f===o&&++c===n&&(a=i),null!==(p=s.nextSibling))break;f=(s=f).parentNode}s=p}t=-1===u||-1===a?null:{start:u,end:a}}else t=null}t=t||{start:0,end:0}}else t=null;return{focusedElem:e,selectionRange:t}}(),_n=!1,Iu=r;null!==Iu;){o=!1;var a=void 0;try{Wu()}catch(e){o=!0,a=e}o&&(null===Iu&&u("178"),Ku(Iu,a),null!==Iu&&(Iu=Iu.nextEffect))}for(Iu=r;null!==Iu;){o=!1,a=void 0;try{zu()}catch(e){o=!0,a=e}o&&(null===Iu&&u("178"),Ku(Iu,a),null!==Iu&&(Iu=Iu.nextEffect))}for(Ln(yr),yr=null,_n=!!vr,vr=null,e.current=t,Iu=r;null!==Iu;){o=!1,a=void 0;try{Vu(e,n)}catch(e){o=!0,a=e}o&&(null===Iu&&u("178"),Ku(Iu,a),null!==Iu&&(Iu=Iu.nextEffect))}if(null!==r&&null!==Fu){var l=function(e,t){Du=Au=Fu=null;var n=oa;oa=!0;do{if(512&t.effectTag){var r=!1,o=void 0;try{var i=t;hu(jo,Po,i),hu(Po,Io,i)}catch(e){r=!0,o=e}r&&Ku(t,o)}t=t.nextEffect}while(null!==t);oa=n,0!==(n=e.expirationTime)&&Ea(e,n),sa||oa||Ca(1073741823,!1)}.bind(null,e,r);Au=i.unstable_runWithPriority(i.unstable_NormalPriority,function(){return xr(l)}),Du=l}Pu=ju=!1,"function"==typeof Wr&&Wr(t.stateNode),n=t.expirationTime,0===(t=(t=t.childExpirationTime)>n?t:n)&&(Lu=null),function(e,t){e.expirationTime=t,e.finishedWork=null}(e,t)}function Gu(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){Cu=e;e:{var i=t,a=Nu,l=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:jr(t.type)&&Fr();break;case 3:_o(),Ar(),(l=t.stateNode).pendingContext&&(l.context=l.pendingContext,l.pendingContext=null),null!==i&&null!==i.child||(bi(t),t.effectTag&=-3),lu(t);break;case 5:To(t);var c=So(xo.current);if(a=t.type,null!==i&&null!=t.stateNode)cu(i,t,a,l,c),i.ref!==t.ref&&(t.effectTag|=128);else if(l){var s=So(bo.current);if(bi(t)){i=(l=t).stateNode;var f=l.type,p=l.memoizedProps,d=c;switch(i[I]=l,i[j]=p,a=void 0,c=f){case"iframe":case"object":kn("load",i);break;case"video":case"audio":for(f=0;f<te.length;f++)kn(te[f],i);break;case"source":kn("error",i);break;case"img":case"image":case"link":kn("error",i),kn("load",i);break;case"form":kn("reset",i),kn("submit",i);break;case"details":kn("toggle",i);break;case"input":wt(i,p),kn("invalid",i),dr(d,"onChange");break;case"select":i._wrapperState={wasMultiple:!!p.multiple},kn("invalid",i),dr(d,"onChange");break;case"textarea":Yn(i,p),kn("invalid",i),dr(d,"onChange")}for(a in fr(c,p),f=null,p)p.hasOwnProperty(a)&&(s=p[a],"children"===a?"string"==typeof s?i.textContent!==s&&(f=["children",s]):"number"==typeof s&&i.textContent!==""+s&&(f=["children",""+s]):b.hasOwnProperty(a)&&null!=s&&dr(d,a));switch(c){case"input":Ve(i),Et(i,p,!0);break;case"textarea":Ve(i),Jn(i);break;case"select":case"option":break;default:"function"==typeof p.onClick&&(i.onclick=hr)}a=f,l.updateQueue=a,(l=null!==a)&&uu(t)}else{p=t,d=a,i=l,f=9===c.nodeType?c:c.ownerDocument,s===Zn.html&&(s=er(d)),s===Zn.html?"script"===d?((i=f.createElement("div")).innerHTML="<script><\/script>",f=i.removeChild(i.firstChild)):"string"==typeof i.is?f=f.createElement(d,{is:i.is}):(f=f.createElement(d),"select"===d&&(d=f,i.multiple?d.multiple=!0:i.size&&(d.size=i.size))):f=f.createElementNS(s,d),(i=f)[I]=p,i[j]=l,au(i,t,!1,!1),d=i;var h=c,v=pr(f=a,p=l);switch(f){case"iframe":case"object":kn("load",d),c=p;break;case"video":case"audio":for(c=0;c<te.length;c++)kn(te[c],d);c=p;break;case"source":kn("error",d),c=p;break;case"img":case"image":case"link":kn("error",d),kn("load",d),c=p;break;case"form":kn("reset",d),kn("submit",d),c=p;break;case"details":kn("toggle",d),c=p;break;case"input":wt(d,p),c=bt(d,p),kn("invalid",d),dr(h,"onChange");break;case"option":c=qn(d,p);break;case"select":d._wrapperState={wasMultiple:!!p.multiple},c=o({},p,{value:void 0}),kn("invalid",d),dr(h,"onChange");break;case"textarea":Yn(d,p),c=Qn(d,p),kn("invalid",d),dr(h,"onChange");break;default:c=p}fr(f,c),s=void 0;var y=f,m=d,g=c;for(s in g)if(g.hasOwnProperty(s)){var w=g[s];"style"===s?cr(m,w):"dangerouslySetInnerHTML"===s?null!=(w=w?w.__html:void 0)&&or(m,w):"children"===s?"string"==typeof w?("textarea"!==y||""!==w)&&ir(m,w):"number"==typeof w&&ir(m,""+w):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(b.hasOwnProperty(s)?null!=w&&dr(h,s):null!=w&&mt(m,s,w,v))}switch(f){case"input":Ve(d),Et(d,p,!1);break;case"textarea":Ve(d),Jn(d);break;case"option":null!=p.value&&d.setAttribute("value",""+gt(p.value));break;case"select":(c=d).multiple=!!p.multiple,null!=(d=p.value)?Kn(c,!!p.multiple,d,!1):null!=p.defaultValue&&Kn(c,!!p.multiple,p.defaultValue,!0);break;default:"function"==typeof c.onClick&&(d.onclick=hr)}(l=mr(a,l))&&uu(t),t.stateNode=i}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&u("166");break;case 6:i&&null!=t.stateNode?su(i,t,i.memoizedProps,l):("string"!=typeof l&&(null===t.stateNode&&u("166")),i=So(xo.current),So(bo.current),bi(t)?(a=(l=t).stateNode,i=l.memoizedProps,a[I]=l,(l=a.nodeValue!==i)&&uu(t)):(a=t,(l=(9===i.nodeType?i:i.ownerDocument).createTextNode(l))[I]=t,a.stateNode=l));break;case 11:break;case 13:if(l=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=a,Cu=t;break e}l=null!==l,a=null!==i&&null!==i.memoizedState,null!==i&&!l&&a&&(null!==(i=i.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=i,i.nextEffect=c):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),(l||a)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:_o(),lu(t);break;case 10:zi(t);break;case 9:case 14:break;case 17:jr(t.type)&&Fr();break;case 18:break;default:u("156")}Cu=null}if(t=e,1===Nu||1!==t.childExpirationTime){for(l=0,a=t.child;null!==a;)(i=a.expirationTime)>l&&(l=i),(c=a.childExpirationTime)>l&&(l=c),a=a.sibling;t.childExpirationTime=l}if(null!==Cu)return Cu;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=Eu(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function Hu(e){var t=ji(e.alternate,e,Nu);return e.memoizedProps=e.pendingProps,null===t&&(t=Gu(e)),ku.current=null,t}function qu(e,t){Pu&&u("243"),Bu(),Pu=!0;var n=_u.current;_u.current=ci;var r=e.nextExpirationTimeToWorkOn;r===Nu&&e===Ou&&null!==Cu||(Uu(),Nu=r,Cu=qr((Ou=e).current,null),e.pendingCommitExpirationTime=0);for(var o=!1;;){try{if(t)for(;null!==Cu&&!Ta();)Cu=Hu(Cu);else for(;null!==Cu;)Cu=Hu(Cu)}catch(t){if(Li=Di=Ai=null,Jo(),null===Cu)o=!0,Ra(t);else{null===Cu&&u("271");var i=Cu,a=i.return;if(null!==a){e:{var l=e,c=a,s=i,f=t;if(a=Nu,s.effectTag|=1024,s.firstEffect=s.lastEffect=null,null!==f&&"object"==typeof f&&"function"==typeof f.then){var p=f;f=c;var d=-1,h=-1;do{if(13===f.tag){var v=f.alternate;if(null!==v&&null!==(v=v.memoizedState)){h=10*(1073741822-v.timedOutAt);break}"number"==typeof(v=f.pendingProps.maxDuration)&&(0>=v?d=0:(-1===d||v<d)&&(d=v))}f=f.return}while(null!==f);f=c;do{if((v=13===f.tag)&&(v=void 0!==f.memoizedProps.fallback&&null===f.memoizedState),v){if(null===(c=f.updateQueue)?((c=new Set).add(p),f.updateQueue=c):c.add(p),0==(1&f.mode)){f.effectTag|=64,s.effectTag&=-1957,1===s.tag&&(null===s.alternate?s.tag=17:((a=Yi(1073741823)).tag=Gi,Ji(s,a))),s.expirationTime=1073741823;break e}c=a;var y=(s=l).pingCache;null===y?(y=s.pingCache=new wu,v=new Set,y.set(p,v)):void 0===(v=y.get(p))&&(v=new Set,y.set(p,v)),v.has(c)||(v.add(c),s=Yu.bind(null,s,p,c),p.then(s,s)),-1===d?l=1073741823:(-1===h&&(h=10*(1073741822-to(l,a))-5e3),l=h+d),0<=l&&Mu<l&&(Mu=l),f.effectTag|=2048,f.expirationTime=a;break e}f=f.return}while(null!==f);f=Error((at(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+lt(s))}Ru=!0,f=iu(f,s),l=c;do{switch(l.tag){case 3:l.effectTag|=2048,l.expirationTime=a,Zi(l,a=xu(l,f,a));break e;case 1:if(d=f,h=l.type,s=l.stateNode,0==(64&l.effectTag)&&("function"==typeof h.getDerivedStateFromError||null!==s&&"function"==typeof s.componentDidCatch&&(null===Lu||!Lu.has(s)))){l.effectTag|=2048,l.expirationTime=a,Zi(l,a=Su(l,d,a));break e}}l=l.return}while(null!==l)}Cu=Gu(i);continue}o=!0,Ra(t)}}break}if(Pu=!1,_u.current=n,Li=Di=Ai=null,Jo(),o)Ou=null,e.finishedWork=null;else if(null!==Cu)e.finishedWork=null;else{if(null===(n=e.current.alternate)&&u("281"),Ou=null,Ru){if(o=e.latestPendingTime,i=e.latestSuspendedTime,a=e.latestPingedTime,0!==o&&o<r||0!==i&&i<r||0!==a&&a<r)return eo(e,r),void xa(e,n,r,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,r=e.nextExpirationTimeToWorkOn=r,t=e.expirationTime=1073741823,void xa(e,n,r,t,-1)}t&&-1!==Mu?(eo(e,r),(t=10*(1073741822-to(e,r)))<Mu&&(Mu=t),t=10*(1073741822-Sa()),t=Mu-t,xa(e,n,r,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=r,e.finishedWork=n)}}function Ku(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Lu||!Lu.has(r)))return Ji(n,e=Su(n,e=iu(t,e),1073741823)),void Ju(n,1073741823);break;case 3:return Ji(n,e=xu(n,e=iu(t,e),1073741823)),void Ju(n,1073741823)}n=n.return}3===e.tag&&(Ji(e,n=xu(e,n=iu(t,e),1073741823)),Ju(e,1073741823))}function Qu(e,t){var n=i.unstable_getCurrentPriorityLevel(),r=void 0;if(0==(1&t.mode))r=1073741823;else if(Pu&&!ju)r=Nu;else{switch(n){case i.unstable_ImmediatePriority:r=1073741823;break;case i.unstable_UserBlockingPriority:r=1073741822-10*(1+((1073741822-e+15)/10|0));break;case i.unstable_NormalPriority:r=1073741822-25*(1+((1073741822-e+500)/25|0));break;case i.unstable_LowPriority:case i.unstable_IdlePriority:r=1;break;default:u("313")}null!==Ou&&r===Nu&&--r}return n===i.unstable_UserBlockingPriority&&(0===aa||r<aa)&&(aa=r),r}function Yu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),null!==Ou&&Nu===n?Ou=null:(t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0!==t&&n<=t&&n>=r&&(e.didError=!1,(0===(t=e.latestPingedTime)||t>n)&&(e.latestPingedTime=n),no(n,e),0!==(n=e.expirationTime)&&Ea(e,n)))}function Xu(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return o}function Ju(e,t){null!==(e=Xu(e,t))&&(!Pu&&0!==Nu&&t>Nu&&Uu(),Zr(e,t),Pu&&!ju&&Ou===e||Ea(e,e.expirationTime),ma>ya&&(ma=0,u("185")))}function Zu(e,t,n,r,o){return i.unstable_runWithPriority(i.unstable_ImmediatePriority,function(){return e(t,n,r,o)})}var ea=null,ta=null,na=0,ra=void 0,oa=!1,ia=null,ua=0,aa=0,la=!1,ca=null,sa=!1,fa=!1,pa=null,da=i.unstable_now(),ha=1073741822-(da/10|0),va=ha,ya=50,ma=0,ga=null;function ba(){ha=1073741822-((i.unstable_now()-da)/10|0)}function wa(e,t){if(0!==na){if(t<na)return;null!==ra&&i.unstable_cancelCallback(ra)}na=t,e=i.unstable_now()-da,ra=i.unstable_scheduleCallback(Pa,{timeout:10*(1073741822-t)-e})}function xa(e,t,n,r,o){e.expirationTime=r,0!==o||Ta()?0<o&&(e.timeoutHandle=br(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,ba(),va=ha,Oa(e,n)}.bind(null,e,t,n),o)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function Sa(){return oa?va:(_a(),0!==ua&&1!==ua||(ba(),va=ha),va)}function Ea(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===ta?(ea=ta=e,e.nextScheduledRoot=e):(ta=ta.nextScheduledRoot=e).nextScheduledRoot=ea):t>e.expirationTime&&(e.expirationTime=t),oa||(sa?fa&&(ia=e,ua=1073741823,Na(e,1073741823,!1)):1073741823===t?Ca(1073741823,!1):wa(e,t))}function _a(){var e=0,t=null;if(null!==ta)for(var n=ta,r=ea;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===ta)&&u("244"),r===r.nextScheduledRoot){ea=ta=r.nextScheduledRoot=null;break}if(r===ea)ea=o=r.nextScheduledRoot,ta.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===ta){(ta=n).nextScheduledRoot=ea,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(o>e&&(e=o,t=r),r===ta)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}ia=t,ua=e}var ka=!1;function Ta(){return!!ka||!!i.unstable_shouldYield()&&(ka=!0)}function Pa(){try{if(!Ta()&&null!==ea){ba();var e=ea;do{var t=e.expirationTime;0!==t&&ha<=t&&(e.nextExpirationTimeToWorkOn=ha),e=e.nextScheduledRoot}while(e!==ea)}Ca(0,!0)}finally{ka=!1}}function Ca(e,t){if(_a(),t)for(ba(),va=ha;null!==ia&&0!==ua&&e<=ua&&!(ka&&ha>ua);)Na(ia,ua,ha>ua),_a(),ba(),va=ha;else for(;null!==ia&&0!==ua&&e<=ua;)Na(ia,ua,!1),_a();if(t&&(na=0,ra=null),0!==ua&&wa(ia,ua),ma=0,ga=null,null!==pa)for(e=pa,pa=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){la||(la=!0,ca=e)}}if(la)throw e=ca,ca=null,la=!1,e}function Oa(e,t){oa&&u("253"),ia=e,ua=t,Na(e,t,!1),Ca(1073741823,!1)}function Na(e,t,n){if(oa&&u("245"),oa=!0,n){var r=e.finishedWork;null!==r?Ma(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,wr(r)),qu(e,n),null!==(r=e.finishedWork)&&(Ta()?e.finishedWork=r:Ma(e,r,t)))}else null!==(r=e.finishedWork)?Ma(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,wr(r)),qu(e,n),null!==(r=e.finishedWork)&&Ma(e,r,t));oa=!1}function Ma(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===pa?pa=[r]:pa.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===ga?ma++:(ga=e,ma=0),i.unstable_runWithPriority(i.unstable_ImmediatePriority,function(){$u(e,t)})}function Ra(e){null===ia&&u("246"),ia.expirationTime=0,la||(la=!0,ca=e)}function Ia(e,t){var n=sa;sa=!0;try{return e(t)}finally{(sa=n)||oa||Ca(1073741823,!1)}}function ja(e,t){if(sa&&!fa){fa=!0;try{return e(t)}finally{fa=!1}}return e(t)}function Fa(e,t,n){sa||oa||0===aa||(Ca(aa,!1),aa=0);var r=sa;sa=!0;try{return i.unstable_runWithPriority(i.unstable_UserBlockingPriority,function(){return e(t,n)})}finally{(sa=r)||oa||Ca(1073741823,!1)}}function Aa(e,t,n,r,o){var i=t.current;e:if(n){t:{2===tn(n=n._reactInternalFiber)&&1===n.tag||u("170");var a=n;do{switch(a.tag){case 3:a=a.stateNode.context;break t;case 1:if(jr(a.type)){a=a.stateNode.__reactInternalMemoizedMergedChildContext;break t}}a=a.return}while(null!==a);u("171"),a=void 0}if(1===n.tag){var l=n.type;if(jr(l)){n=Lr(n,l,a);break e}}n=a}else n=Or;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Yi(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Bu(),Ji(i,o),Ju(i,r),r}function Da(e,t,n,r){var o=t.current;return Aa(e,t,n,o=Qu(Sa(),o),r)}function La(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Ua(e){var t=1073741822-25*(1+((1073741822-Sa()+500)/25|0));t>=Tu&&(t=Tu-1),this._expirationTime=Tu=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function za(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Wa(e,t,n){e={current:t=Gr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Va(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ba(e,t,n,r,o){var i=n._reactRootContainer;if(i){if("function"==typeof o){var u=o;o=function(){var e=La(i._internalRoot);u.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Wa(e,!1,t)}(n,r),"function"==typeof o){var a=o;o=function(){var e=La(i._internalRoot);a.call(e)}}ja(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return La(i._internalRoot)}function $a(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Va(t)||u("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ke,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Te=function(e,t,n){switch(t){case"input":if(St(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=L(r);o||u("90"),Be(r),St(r,o)}}}break;case"textarea":Xn(e,n);break;case"select":null!=(t=n.value)&&Kn(e,!!n.multiple,t,!1)}},Ua.prototype.render=function(e){this._defer||u("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new za;return Aa(e,t,null,n,r._onCommit),r},Ua.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Ua.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||u("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&u("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Oa(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Ua.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},za.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},za.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&u("191",n),n()}}},Wa.prototype.render=function(e,t){var n=this._internalRoot,r=new za;return null!==(t=void 0===t?null:t)&&r.then(t),Da(e,n,null,r._onCommit),r},Wa.prototype.unmount=function(e){var t=this._internalRoot,n=new za;return null!==(e=void 0===e?null:e)&&n.then(e),Da(null,t,null,n._onCommit),n},Wa.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new za;return null!==(n=void 0===n?null:n)&&o.then(n),Da(t,r,e,o._onCommit),o},Wa.prototype.createBatch=function(){var e=new Ua(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Re=Ia,Ie=Fa,je=function(){oa||0===aa||(Ca(aa,!1),aa=0)};var Ga={createPortal:$a,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?u("188"):u("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return Va(t)||u("200"),Ba(null,e,t,!0,n)},render:function(e,t,n){return Va(t)||u("200"),Ba(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return Va(n)||u("200"),(null==e||void 0===e._reactInternalFiber)&&u("38"),Ba(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Va(e)||u("40"),!!e._reactRootContainer&&(ja(function(){Ba(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return $a.apply(void 0,arguments)},unstable_batchedUpdates:Ia,unstable_interactiveUpdates:Fa,flushSync:function(e,t){oa&&u("187");var n=sa;sa=!0;try{return Zu(e,t)}finally{sa=n,Ca(1073741823,!1)}},unstable_createRoot:function(e,t){return Va(e)||u("299","unstable_createRoot"),new Wa(e,!0,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=sa;sa=!0;try{Zu(e)}finally{(sa=t)||oa||Ca(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[A,D,L,O.injectEventPluginsByName,g,$,function(e){T(e,B)},Ne,Me,Cn,M]}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Wr=Br(function(e){return t.onCommitFiberRoot(n,e)}),Vr=Br(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(o({},e,{overrideProps:null,currentDispatcherRef:$e.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:F,bundleType:0,version:"16.8.6",rendererPackageName:"react-dom"});var Ha={default:Ga},qa=Ha&&Ga||Ha;e.exports=qa.default||qa},function(e,t,n){"use strict";e.exports=n(321)},function(e,t,n){"use strict";(function(e){
/** @license React v0.13.6
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,o=3,i=-1,u=-1,a=!1,l=!1;function c(){if(!a){var e=n.expirationTime;l?E():l=!0,S(p,e)}}function s(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var i=o,a=u;o=e,u=t;try{var l=r()}finally{o=i,u=a}if("function"==typeof l)if(l={callback:l,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=l.next=l.previous=l;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=l,c()),(t=r.previous).next=r.previous=l,l.next=r,l.previous=t}}function f(){if(-1===i&&null!==n&&1===n.priorityLevel){a=!0;try{do{s()}while(null!==n&&1===n.priorityLevel)}finally{a=!1,null!==n?c():l=!1}}}function p(e){a=!0;var o=r;r=e;try{if(e)for(;null!==n;){var i=t.unstable_now();if(!(n.expirationTime<=i))break;do{s()}while(null!==n&&n.expirationTime<=i)}else if(null!==n)do{s()}while(null!==n&&!_())}finally{a=!1,r=o,null!==n?c():l=!1,f()}}var d,h,v=Date,y="function"==typeof setTimeout?setTimeout:void 0,m="function"==typeof clearTimeout?clearTimeout:void 0,g="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,b="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function w(e){d=g(function(t){m(h),e(t)}),h=y(function(){b(d),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var x=performance;t.unstable_now=function(){return x.now()}}else t.unstable_now=function(){return v.now()};var S,E,_,k=null;if("undefined"!=typeof window?k=window:void 0!==e&&(k=e),k&&k._schedMock){var T=k._schedMock;S=T[0],E=T[1],_=T[2],t.unstable_now=T[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var P=null,C=function(e){if(null!==P)try{P(e)}finally{P=null}};S=function(e){null!==P?setTimeout(S,0,e):(P=e,setTimeout(C,0,!1))},E=function(){P=null},_=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof g&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var O=null,N=!1,M=-1,R=!1,I=!1,j=0,F=33,A=33;_=function(){return j<=t.unstable_now()};var D=new MessageChannel,L=D.port2;D.port1.onmessage=function(){N=!1;var e=O,n=M;O=null,M=-1;var r=t.unstable_now(),o=!1;if(0>=j-r){if(!(-1!==n&&n<=r))return R||(R=!0,w(U)),O=e,void(M=n);o=!0}if(null!==e){I=!0;try{e(o)}finally{I=!1}}};var U=function(e){if(null!==O){w(U);var t=e-j+A;t<A&&F<A?(8>t&&(t=8),A=t<F?F:t):F=t,j=e+A,N||(N=!0,L.postMessage(void 0))}else R=!1};S=function(e,t){O=e,M=t,I||0>t?L.postMessage(void 0):R||(R=!0,w(U))},E=function(){O=null,N=!1,M=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=o,u=i;o=e,i=t.unstable_now();try{return n()}finally{o=r,i=u,f()}},t.unstable_next=function(e){switch(o){case 1:case 2:case 3:var n=3;break;default:n=o}var r=o,u=i;o=n,i=t.unstable_now();try{return e()}finally{o=r,i=u,f()}},t.unstable_scheduleCallback=function(e,r){var u=-1!==i?i:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=u+r.timeout;else switch(o){case 1:r=u+-1;break;case 2:r=u+250;break;case 5:r=u+1073741823;break;case 4:r=u+1e4;break;default:r=u+5e3}if(e={callback:e,priorityLevel:o,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,c();else{u=null;var a=n;do{if(a.expirationTime>r){u=a;break}a=a.next}while(a!==n);null===u?u=n:u===n&&(n=e,c()),(r=u.previous).next=u.previous=e,e.next=u,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=o;return function(){var r=o,u=i;o=n,i=t.unstable_now();try{return e.apply(this,arguments)}finally{o=r,i=u,f()}}},t.unstable_getCurrentPriorityLevel=function(){return o},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<u||_())},t.unstable_continueExecution=function(){null!==n&&c()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(129))},function(e,t,n){"use strict";var r=n(323);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,u){if(u!==r){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,u=r?Symbol.for("react.fragment"):60107,a=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,v=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116;function m(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case p:case u:case l:case a:case h:return e;default:switch(e=e&&e.$$typeof){case s:case d:case c:return e;default:return t}}case y:case v:case i:return t}}}function g(e){return m(e)===p}t.typeOf=m,t.AsyncMode=f,t.ConcurrentMode=p,t.ContextConsumer=s,t.ContextProvider=c,t.Element=o,t.ForwardRef=d,t.Fragment=u,t.Lazy=y,t.Memo=v,t.Portal=i,t.Profiler=l,t.StrictMode=a,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===u||e===p||e===l||e===a||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===c||e.$$typeof===s||e.$$typeof===d)},t.isAsyncMode=function(e){return g(e)||m(e)===f},t.isConcurrentMode=g,t.isContextConsumer=function(e){return m(e)===s},t.isContextProvider=function(e){return m(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return m(e)===d},t.isFragment=function(e){return m(e)===u},t.isLazy=function(e){return m(e)===y},t.isMemo=function(e){return m(e)===v},t.isPortal=function(e){return m(e)===i},t.isProfiler=function(e){return m(e)===l},t.isStrictMode=function(e){return m(e)===a},t.isSuspense=function(e){return m(e)===h}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";n.r(t);var r=n(1),o=n.n(r),i=n(63),u=n.n(i);var a=n(40),l=n.n(a),c=o.a.createContext(null);var s=function(e){e()},f=function(){return s},p=null,d={notify:function(){}};var h=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=d,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){var e,t,n;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=(e=f(),t=[],n=[],{clear:function(){n=p,t=p},notify:function(){var r=t=n;e(function(){for(var e=0;e<r.length;e++)r[e]()})},get:function(){return n},subscribe:function(e){var r=!0;return n===t&&(n=t.slice()),n.push(e),function(){r&&t!==p&&(r=!1,n===t&&(n=t.slice()),n.splice(n.indexOf(e),1))}}}))},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=d)},e}(),v=function(e){var t,n;function r(t){var n;n=e.call(this,t)||this;var r=t.store;n.notifySubscribers=n.notifySubscribers.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(n));var o=new h(r);return o.onStateChange=n.notifySubscribers,n.state={store:r,subscription:o},n.previousState=r.getState(),n}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=r.prototype;return i.componentDidMount=function(){this._isMounted=!0,this.state.subscription.trySubscribe(),this.previousState!==this.props.store.getState()&&this.state.subscription.notifyNestedSubs()},i.componentWillUnmount=function(){this.unsubscribe&&this.unsubscribe(),this.state.subscription.tryUnsubscribe(),this._isMounted=!1},i.componentDidUpdate=function(e){if(this.props.store!==e.store){this.state.subscription.tryUnsubscribe();var t=new h(this.props.store);t.onStateChange=this.notifySubscribers,this.setState({store:this.props.store,subscription:t})}},i.notifySubscribers=function(){this.state.subscription.notifyNestedSubs()},i.render=function(){var e=this.props.context||c;return o.a.createElement(e.Provider,{value:this.state},this.props.children)},r}(r.Component);v.propTypes={store:l.a.shape({subscribe:l.a.func.isRequired,dispatch:l.a.func.isRequired,getState:l.a.func.isRequired}),context:l.a.object,children:l.a.any};var y=v;function m(){return(m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function g(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var b=n(93),w=n.n(b),x=n(27),S=n.n(x),E=n(92),_=[],k=[null,null];function T(e,t){var n=e[1];return[t.payload,n+1]}var P=function(){return[null,0]},C="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;function O(e,t){void 0===t&&(t={});var n=t,i=n.getDisplayName,u=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,a=n.methodName,l=void 0===a?"connectAdvanced":a,s=n.renderCountProp,f=void 0===s?void 0:s,p=n.shouldHandleStateChanges,d=void 0===p||p,v=n.storeKey,y=void 0===v?"store":v,b=n.withRef,x=void 0!==b&&b,O=n.forwardRef,N=void 0!==O&&O,M=n.context,R=void 0===M?c:M,I=g(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);S()(void 0===f,"renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension"),S()(!x,"withRef is removed. To access the wrapped instance, use a ref on the connected component");S()("store"===y,"storeKey has been removed and does not do anything. To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect");var j=R;return function(t){var n=t.displayName||t.name||"Component",i=u(n),a=m({},I,{getDisplayName:u,methodName:l,renderCountProp:f,shouldHandleStateChanges:d,storeKey:y,displayName:i,wrappedComponentName:n,WrappedComponent:t}),c=I.pure;var s=c?r.useMemo:function(e){return e()};function p(n){var u=Object(r.useMemo)(function(){var e=n.forwardedRef,t=g(n,["forwardedRef"]);return[n.context,e,t]},[n]),l=u[0],c=u[1],f=u[2],p=Object(r.useMemo)(function(){return l&&l.Consumer&&Object(E.isContextConsumer)(o.a.createElement(l.Consumer,null))?l:j},[l,j]),v=Object(r.useContext)(p),y=Boolean(n.store),b=Boolean(v)&&Boolean(v.store);S()(y||b,'Could not find "store" in the context of "'+i+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+i+" in connect options.");var w=n.store||v.store,x=Object(r.useMemo)(function(){return function(t){return e(t.dispatch,a)}(w)},[w]),O=Object(r.useMemo)(function(){if(!d)return k;var e=new h(w,y?null:v.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]},[w,y,v]),N=O[0],M=O[1],R=Object(r.useMemo)(function(){return y?v:m({},v,{subscription:N})},[y,v,N]),I=Object(r.useReducer)(T,_,P),F=I[0][0],A=I[1];if(F&&F.error)throw F.error;var D=Object(r.useRef)(),L=Object(r.useRef)(f),U=Object(r.useRef)(),z=Object(r.useRef)(!1),W=s(function(){return U.current&&f===L.current?U.current:x(w.getState(),f)},[w,F,f]);C(function(){L.current=f,D.current=W,z.current=!1,U.current&&(U.current=null,M())}),C(function(){if(d){var e=!1,t=null,n=function(){if(!e){var n,r,o=w.getState();try{n=x(o,L.current)}catch(e){r=e,t=e}r||(t=null),n===D.current?z.current||M():(D.current=n,U.current=n,z.current=!0,A({type:"STORE_UPDATED",payload:{latestStoreState:o,error:r}}))}};N.onStateChange=n,N.trySubscribe(),n();return function(){if(e=!0,N.tryUnsubscribe(),t)throw t}}},[w,N,x]);var V=Object(r.useMemo)(function(){return o.a.createElement(t,m({},W,{ref:c}))},[c,t,W]);return Object(r.useMemo)(function(){return d?o.a.createElement(p.Provider,{value:R},V):V},[p,V,R])}var v=c?o.a.memo(p):p;if(v.WrappedComponent=t,v.displayName=i,N){var b=o.a.forwardRef(function(e,t){return o.a.createElement(v,m({},e,{forwardedRef:t}))});return b.displayName=i,b.WrappedComponent=t,w()(b,t)}return w()(v,t)}}var N=Object.prototype.hasOwnProperty;function M(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function R(e,t){if(M(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!N.call(t,n[o])||!M(e[n[o]],t[n[o]]))return!1;return!0}var I=n(94),j=function(){return Math.random().toString(36).substring(7).split("").join(".")},F={INIT:"@@redux/INIT"+j(),REPLACE:"@@redux/REPLACE"+j(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+j()}};function A(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function D(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function L(e,t){return function(){return t(e.apply(this,arguments))}}function U(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function z(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function W(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function V(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function B(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=V(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=V(o),o=r(t,n)),o},r}}var $=[function(e){return"function"==typeof e?B(e):void 0},function(e){return e?void 0:W(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?W(function(t){return function(e,t){if("function"==typeof e)return L(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var i=n[o],u=e[i];"function"==typeof u&&(r[i]=L(u,t))}return r}(e,t)}):void 0}];var G=[function(e){return"function"==typeof e?B(e):void 0},function(e){return e?void 0:W(function(){return{}})}];function H(e,t,n){return m({},n,e,t)}var q=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,u=!1;return function(t,n,a){var l=e(t,n,a);return u?o&&i(l,r)||(r=l):(u=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return H}}];function K(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function Q(e,t,n,r,o){var i,u,a,l,c,s=o.areStatesEqual,f=o.areOwnPropsEqual,p=o.areStatePropsEqual,d=!1;function h(o,d){var h,v,y=!f(d,u),m=!s(o,i);return i=o,u=d,y&&m?(a=e(i,u),t.dependsOnOwnProps&&(l=t(r,u)),c=n(a,l,u)):y?(e.dependsOnOwnProps&&(a=e(i,u)),t.dependsOnOwnProps&&(l=t(r,u)),c=n(a,l,u)):m?(h=e(i,u),v=!p(h,a),a=h,v&&(c=n(a,l,u)),c):c}return function(o,s){return d?h(o,s):(a=e(i=o,u=s),l=t(r,u),c=n(a,l,u),d=!0,c)}}function Y(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=g(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),u=n(e,i),a=r(e,i),l=o(e,i);return(i.pure?Q:K)(u,a,l,e,i)}function X(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function J(e,t){return e===t}var Z,ee,te,ne,re,oe,ie,ue,ae,le,ce,se;te=(ee=void 0===Z?{}:Z).connectHOC,ne=void 0===te?O:te,re=ee.mapStateToPropsFactories,oe=void 0===re?G:re,ie=ee.mapDispatchToPropsFactories,ue=void 0===ie?$:ie,ae=ee.mergePropsFactories,le=void 0===ae?q:ae,ce=ee.selectorFactory,se=void 0===ce?Y:ce;function fe(){var e=Object(r.useContext)(c);return S()(e,"could not find react-redux context value; please ensure the component is wrapped in a <Provider>"),e}function pe(){return fe().store.dispatch}var de,he="undefined"!=typeof window?r.useLayoutEffect:r.useEffect,ve=function(e,t){return e===t};function ye(e,t){void 0===t&&(t=ve),S()(e,"You must pass a selector to useSelectors");var n,o=fe(),i=o.store,u=o.subscription,a=Object(r.useReducer)(function(e){return e+1},0)[1],l=Object(r.useMemo)(function(){return new h(i,u)},[i,u]),c=Object(r.useRef)(),s=Object(r.useRef)(),f=Object(r.useRef)();try{n=e!==s.current||c.current?e(i.getState()):f.current}catch(e){var p="An error occured while selecting the store state: "+e.message+".";throw c.current&&(p+="\nThe error may be correlated with this previous error:\n"+c.current.stack+"\n\nOriginal stack trace:"),new Error(p)}return he(function(){s.current=e,f.current=n,c.current=void 0}),he(function(){function e(){try{var e=s.current(i.getState());if(t(e,f.current))return;f.current=e}catch(e){c.current=e}a({})}return l.onStateChange=e,l.trySubscribe(),e(),function(){return l.tryUnsubscribe()}},[i,l]),n}function me(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}de=i.unstable_batchedUpdates,s=de;var ge=me();ge.withExtraArgument=me;var be=ge;function we(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var xe=function e(t,n,r){var o;if("function"==typeof n&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function");if("function"==typeof n&&void 0===r&&(r=n,n=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(e)(t,n)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var i=t,u=n,a=[],l=a,c=!1;function s(){l===a&&(l=a.slice())}function f(){if(c)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return u}function p(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(c)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return s(),l.push(e),function(){if(t){if(c)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,s();var n=l.indexOf(e);l.splice(n,1)}}}function d(e){if(!A(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(c)throw new Error("Reducers may not dispatch actions.");try{c=!0,u=i(u,e)}finally{c=!1}for(var t=a=l,n=0;n<t.length;n++)(0,t[n])();return e}return d({type:F.INIT}),(o={dispatch:d,subscribe:p,getState:f,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");i=e,d({type:F.REPLACE})}})[I.a]=function(){var e,t=p;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(f())}return n(),{unsubscribe:t(n)}}})[I.a]=function(){return this},e},o}(function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var i,u=Object.keys(n);try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:F.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:F.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+F.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},a=0;a<u.length;a++){var l=u[a],c=n[l],s=e[l],f=c(s,t);if(void 0===f){var p=D(l,t);throw new Error(p)}o[l]=f,r=r||f!==s}return r?o:e}}({greetings:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_GREETINGS":return e=we(t.greetings)}return e},mode:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"MODE_MASTER",t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_MODE":return t.mode}return e}}),(window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||z)(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map(function(e){return e(o)});return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){U(e,t,n[t])})}return e}({},n,{dispatch:r=z.apply(void 0,i)(n.dispatch)})}}}(be)));var Se=function(e){var t=e.greetings,n=e.onAdd,r=t.map(function(e){return o.a.createElement("tr",{key:e.id},o.a.createElement("td",null,e.name),o.a.createElement("td",null,e.greeting))});return o.a.createElement("div",null,o.a.createElement("table",null,o.a.createElement("thead",null,o.a.createElement("tr",null,o.a.createElement("th",null,"Name"),o.a.createElement("th",null,"Greeting"))),o.a.createElement("tbody",null,r)),o.a.createElement("button",{onClick:n},"Add"))};function Ee(){return(Ee=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function _e(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var u,a=e[Symbol.iterator]();!(r=(u=a.next()).done)&&(n.push(u.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function ke(e,t){var n=_e(o.a.useState(t||""),2),r=n[0],i=n[1];return[{placeholder:e,name:e.toLowerCase(),onChange:function(e){return i(e.target.value)},value:r},function(){i("")}]}function Te(e){var t=_e(ke("Name",e.initialName),2),n=t[0],r=t[1],i=_e(ke("Greeting",e.initialGreeting),2),u=i[0],a=i[1],l=o.a.useRef(),c=!(n.value&&u.value);return o.a.createElement("div",null,o.a.createElement("input",Ee({},n,{ref:l})),o.a.createElement("input",u),o.a.createElement("button",{onClick:function(){r(),a(),l.current.focus()}},"Clear"),o.a.createElement("button",{disabled:c,onClick:function(){e.onSave({name:n.value,greeting:u.value})}},"Save"))}function Pe(e,t,n,r,o,i,u){try{var a=e[i](u),l=a.value}catch(e){return void n(e)}a.done?t(l):Promise.resolve(l).then(r,o)}function Ce(e){return{type:"ADD_GREETING",greeting:e}}var Oe="http://localhost:7000/greetings";function Ne(){return function(){var e,t=(e=regeneratorRuntime.mark(function e(t){var n,r;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,fetch(Oe);case 3:return n=e.sent,e.next=6,n.json();case 6:r=e.sent,t({type:"SET_GREETINGS",greetings:r}),e.next=14;break;case 10:e.prev=10,e.t0=e.catch(0),console.error("Loading Greetings failed",e.t0),t({type:"SET_GREETINGS_FAILED",err:e.t0});case 14:case"end":return e.stop()}},e,null,[[0,10]])}),function(){var t=this,n=arguments;return new Promise(function(r,o){var i=e.apply(t,n);function u(e){Pe(i,r,o,u,a,"next",e)}function a(e){Pe(i,r,o,u,a,"throw",e)}u(void 0)})});return function(e){return t.apply(this,arguments)}}()}function Me(e,t,n,r,o,i,u){try{var a=e[i](u),l=a.value}catch(e){return void n(e)}a.done?t(l):Promise.resolve(l).then(r,o)}var Re="http://localhost:7000/greetings",Ie="MODE_MASTER";function je(e){return(je="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Fe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ae(e,t){return!t||"object"!==je(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function De(e){return(De=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Le(e,t){return(Le=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ue=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Ae(this,De(t).call(this,e))).state={hasError:!1},n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Le(e,t)}(t,o.a.Component),n=t,i=[{key:"getDerivedStateFromError",value:function(e){return{error:e.toString()}}}],(r=[{key:"componentDidCatch",value:function(e,t){console.error("uups... we caught an error",e,t)}},{key:"render",value:function(){var e=this;return this.state.error?o.a.createElement("div",null,o.a.createElement("h1",null,"An error occured!"),o.a.createElement("pre",null,this.state.error),o.a.createElement("button",{onClick:function(){return e.setState({error:null})}},"Try again")):this.props.children}}])&&Fe(n.prototype,r),i&&Fe(n,i),t}(),ze=document.getElementById("mount");u.a.render(o.a.createElement(y,{store:xe},o.a.createElement(Ue,null,o.a.createElement(function(){var e=pe(),t=ye(function(e){return e.mode}),n=ye(function(e){return console.log("REDUX STORE",e),e.greetings});function r(){var t;return t=regeneratorRuntime.mark(function t(n){var r,o;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch(Re,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(n)});case 3:if(201===(o=t.sent).status){t.next=6;break}throw new Error("Invalid status code: "+o.status);case 6:return t.next=8,o.json();case 8:r=t.sent,t.next=14;break;case 11:t.prev=11,t.t0=t.catch(0),console.error("LOADING GREETINGS FAILED:",t.t0);case 14:e(Ce(r)),e({type:"SET_MODE",mode:"MODE_MASTER"});case 16:case"end":return t.stop()}},t,null,[[0,11]])}),(r=function(){var e=this,n=arguments;return new Promise(function(r,o){var i=t.apply(e,n);function u(e){Me(i,r,o,u,a,"next",e)}function a(e){Me(i,r,o,u,a,"throw",e)}u(void 0)})}).apply(this,arguments)}return console.log("greetingsFromRedux",n),o.a.useEffect(function(){e(Ne())},[]),t===Ie?o.a.createElement(Se,{greetings:n,onAdd:function(){e({type:"SET_MODE",mode:"MODE_DETAIL"})}}):o.a.createElement(Te,{onSave:function(e){return r.apply(this,arguments)}})},null))),ze)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3ZhbGlkYXRlLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNpZ24uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYnVmZmVyLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbnZva2UuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtbG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXdlYWsuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX293bi1rZXlzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL0BiYWJlbC9wb2x5ZmlsbC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvQGJhYmVsL3BvbHlmaWxsL2xpYi9ub0NvbmZsaWN0LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvZXM2L2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZnVuY3Rpb24tdG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNicnQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5leHBtMS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1mcm91bmQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRydW5jLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ibGluay5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1Yi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdXAuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWFwLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc2V0LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLXNldC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5oYXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL2FycmF5L2luY2x1ZGVzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9hcnJheS9mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhdHRlbi1pbnRvLWFycmF5LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3BhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvcGFkLWVuZC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3RyaW0tc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3RyaW0tZW5kLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zeW1ib2wvYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vb2JqZWN0L3ZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcHJvbWlzZS9maW5hbGx5LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvd2ViL2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmF0Y2guanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9yZWR1eC5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwU3RhdGVUb1Byb3BzLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vL1VzZXJzL25pbHMvZGV2ZWxvcC9qYXZhc2NyaXB0L3JlYWN0LXRyYWluaW5nL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L2Nvbm5lY3QuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9uaWxzL2RldmVsb3AvamF2YXNjcmlwdC9yZWFjdC10cmFpbmluZy9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlUmVkdXhDb250ZXh0LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZURpc3BhdGNoLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVN0b3JlLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVNlbGVjdG9yLmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlZHV4LXRodW5rL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvbmlscy9kZXZlbG9wL2phdmFzY3JpcHQvcmVhY3QtdHJhaW5pbmcvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9yZWR1Y2Vycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dyZWV0aW5nTWFzdGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9HcmVldGluZ0RldGFpbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvR3JlZXRpbmdDb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9FcnJvckhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4uanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnbG9iYWwiLCJjb3JlIiwiaGlkZSIsInJlZGVmaW5lIiwiY3R4IiwiJGV4cG9ydCIsInR5cGUiLCJzb3VyY2UiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiQiIsInRhcmdldCIsImV4cFByb3RvIiwidW5kZWZpbmVkIiwiRnVuY3Rpb24iLCJVIiwiVyIsIlIiLCJ3aW5kb3ciLCJNYXRoIiwic2VsZiIsIl9fZyIsImV4ZWMiLCJlIiwiaXNPYmplY3QiLCJpdCIsIlR5cGVFcnJvciIsInN0b3JlIiwidWlkIiwiVVNFX1NZTUJPTCIsInRvSW50ZWdlciIsIm1pbiIsInZlcnNpb24iLCJfX2UiLCJhIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiZFAiLCJmIiwiTyIsIkF0dHJpYnV0ZXMiLCJkZWZpbmVkIiwiaGFzIiwiU1JDIiwiJHRvU3RyaW5nIiwiVFBMIiwic3BsaXQiLCJpbnNwZWN0U291cmNlIiwidmFsIiwic2FmZSIsImlzRnVuY3Rpb24iLCJqb2luIiwiU3RyaW5nIiwidGhpcyIsImZhaWxzIiwicXVvdCIsImNyZWF0ZUhUTUwiLCJzdHJpbmciLCJ0YWciLCJhdHRyaWJ1dGUiLCJwMSIsInJlcGxhY2UiLCJOQU1FIiwidGVzdCIsInRvTG93ZXJDYXNlIiwibGVuZ3RoIiwiY3JlYXRlRGVzYyIsIklPYmplY3QiLCJtZXRob2QiLCJhcmciLCJhRnVuY3Rpb24iLCJmbiIsInRoYXQiLCJiIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsInBJRSIsInRvSU9iamVjdCIsImdPUEQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJLRVkiLCJ0b09iamVjdCIsInRvTGVuZ3RoIiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJyZXMiLCJpbmRleCIsInJlc3VsdCIsInB1c2giLCJ0b1N0cmluZyIsInNsaWNlIiwiTElCUkFSWSIsIiR0eXBlZCIsIiRidWZmZXIiLCJhbkluc3RhbmNlIiwicHJvcGVydHlEZXNjIiwicmVkZWZpbmVBbGwiLCJ0b0luZGV4IiwidG9BYnNvbHV0ZUluZGV4IiwiY2xhc3NvZiIsImlzQXJyYXlJdGVyIiwiZ2V0UHJvdG90eXBlT2YiLCJnT1BOIiwiZ2V0SXRlckZuIiwid2tzIiwiY3JlYXRlQXJyYXlNZXRob2QiLCJjcmVhdGVBcnJheUluY2x1ZGVzIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiQXJyYXlJdGVyYXRvcnMiLCJJdGVyYXRvcnMiLCIkaXRlckRldGVjdCIsInNldFNwZWNpZXMiLCJhcnJheUZpbGwiLCJhcnJheUNvcHlXaXRoaW4iLCIkRFAiLCIkR09QRCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiQXJyYXlQcm90byIsIkFycmF5IiwiJEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiYXJyYXlJbmNsdWRlcyIsImFycmF5SW5kZXhPZiIsImFycmF5VmFsdWVzIiwidmFsdWVzIiwiYXJyYXlLZXlzIiwia2V5cyIsImFycmF5RW50cmllcyIsImVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnJheVJlZHVjZSIsInJlZHVjZSIsImFycmF5UmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsImFycmF5Sm9pbiIsImFycmF5U29ydCIsInNvcnQiLCJhcnJheVNsaWNlIiwiYXJyYXlUb1N0cmluZyIsImFycmF5VG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIklURVJBVE9SIiwiVEFHIiwiVFlQRURfQ09OU1RSVUNUT1IiLCJERUZfQ09OU1RSVUNUT1IiLCJBTExfQ09OU1RSVUNUT1JTIiwiQ09OU1RSIiwiVFlQRURfQVJSQVkiLCJUWVBFRCIsIlZJRVciLCIkbWFwIiwiYWxsb2NhdGUiLCJMSVRUTEVfRU5ESUFOIiwiVWludDE2QXJyYXkiLCJidWZmZXIiLCJGT1JDRURfU0VUIiwic2V0IiwidG9PZmZzZXQiLCJCWVRFUyIsIm9mZnNldCIsInZhbGlkYXRlIiwiQyIsInNwZWNpZXNGcm9tTGlzdCIsImxpc3QiLCJmcm9tTGlzdCIsImFkZEdldHRlciIsImludGVybmFsIiwiX2QiLCIkZnJvbSIsInN0ZXAiLCJpdGVyYXRvciIsImFMZW4iLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCJuZXh0IiwiZG9uZSIsIiRvZiIsIlRPX0xPQ0FMRV9CVUciLCIkdG9Mb2NhbGVTdHJpbmciLCJwcm90byIsImNvcHlXaXRoaW4iLCJzdGFydCIsImV2ZXJ5IiwiZmlsbCIsImZpbHRlciIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJmb3JFYWNoIiwiaW5kZXhPZiIsInNlYXJjaEVsZW1lbnQiLCJpbmNsdWRlcyIsInNlcGFyYXRvciIsIm1hcCIsInJldmVyc2UiLCJtaWRkbGUiLCJzb21lIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsImVuZCIsIiRiZWdpbiIsImJ5dGVPZmZzZXQiLCJCWVRFU19QRVJfRUxFTUVOVCIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCJzcmMiLCJsZW4iLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsImRlc2MiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIiRUeXBlZEFycmF5UHJvdG90eXBlJCIsImNvbnN0cnVjdG9yIiwid3JhcHBlciIsIkNMQU1QRUQiLCJHRVRURVIiLCJTRVRURVIiLCJUeXBlZEFycmF5IiwiQmFzZSIsIlRBQyIsIkZPUkNFRCIsIkFCViIsIlR5cGVkQXJyYXlQcm90b3R5cGUiLCJhZGRFbGVtZW50IiwiZGF0YSIsInYiLCJyb3VuZCIsInNldHRlciIsIiRvZmZzZXQiLCIkbGVuZ3RoIiwiYnl0ZUxlbmd0aCIsImtsYXNzIiwiJGxlbiIsIml0ZXIiLCJjb25jYXQiLCIkbmF0aXZlSXRlcmF0b3IiLCJDT1JSRUNUX0lURVJfTkFNRSIsIiRpdGVyYXRvciIsIm9mIiwiZnJvbSIsImNvbmRpdGlvbiIsImZvcm1hdCIsImVycm9yIiwiRXJyb3IiLCJhcmdzIiwiYXJnSW5kZXgiLCJmcmFtZXNUb1BvcCIsInZhbHVlT2YiLCJNRVRBIiwic2V0RGVzYyIsImlkIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwidyIsIm1ldGEiLCJORUVEIiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsImJpdG1hcCIsInB4IiwicmFuZG9tIiwiJGtleXMiLCJlbnVtQnVnS2V5cyIsIm1heCIsImRQcyIsIklFX1BST1RPIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsImNvbnRlbnRXaW5kb3ciLCJkb2N1bWVudCIsIm9wZW4iLCJ3cml0ZSIsImx0IiwiY2xvc2UiLCJQcm9wZXJ0aWVzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJPYmplY3RQcm90byIsIlVOU0NPUEFCTEVTIiwiX3QiLCJkZWYiLCJzdGF0Iiwic3BhY2VzIiwic3BhY2UiLCJsdHJpbSIsIlJlZ0V4cCIsInJ0cmltIiwiZXhwb3J0ZXIiLCJBTElBUyIsIkZPUkNFIiwidHJpbSIsIkRFU0NSSVBUT1JTIiwiU1BFQ0lFUyIsIkNvbnN0cnVjdG9yIiwiZm9yYmlkZGVuRmllbGQiLCJjb2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkFSRyIsIlQiLCJ0cnlHZXQiLCJjYWxsZWUiLCJEIiwiY29weXJpZ2h0IiwiSVNfSU5DTFVERVMiLCJlbCIsImZyb21JbmRleCIsImdldE93blByb3BlcnR5U3ltYm9scyIsImlzQXJyYXkiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwiYXJyIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInVuaWNvZGUiLCJzdGlja3kiLCJidWlsdGluRXhlYyIsInJlZ2V4cEV4ZWMiLCJSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyIsInJlIiwiZ3JvdXBzIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwib3JpZ2luYWxFeGVjIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsIm5hdGl2ZVJlZ0V4cE1ldGhvZCIsImZucyIsIm5hdGl2ZU1ldGhvZCIsInJlZ2V4cCIsInN0ciIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsInN0cmZuIiwicnhmbiIsIkJSRUFLIiwiUkVUVVJOIiwiaXRlcmFibGUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJmb3JPZiIsInNldFRvU3RyaW5nVGFnIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJtZXRob2RzIiwiY29tbW9uIiwiSVNfV0VBSyIsIkFEREVSIiwiZml4TWV0aG9kIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJjbGVhciIsImdldENvbnN0cnVjdG9yIiwic2V0U3Ryb25nIiwiVHlwZWQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJlcnIiLCJjb25zb2xlIiwiaXMiLCJjcmVhdGVFbGVtZW50Iiwic2hhcmVkIiwiZG9jdW1lbnRFbGVtZW50IiwiY2hlY2siLCJzZXRQcm90b3R5cGVPZiIsImJ1Z2d5IiwiX19wcm90b19fIiwiY291bnQiLCJJbmZpbml0eSIsInNpZ24iLCJ4IiwiJGV4cG0xIiwiZXhwbTEiLCJUT19TVFJJTkciLCJwb3MiLCJjaGFyQ29kZUF0IiwiY2hhckF0IiwiJGl0ZXJDcmVhdGUiLCJCVUdHWSIsInJldHVyblRoaXMiLCJERUZBVUxUIiwiSVNfU0VUIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRNZXRob2QiLCJraW5kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJpc1JlZ0V4cCIsInNlYXJjaFN0cmluZyIsIk1BVENIIiwiJGRlZmluZVByb3BlcnR5IiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJlbmRQb3MiLCJhZGRUb1Vuc2NvcGFibGVzIiwiaXRlcmF0ZWQiLCJfaSIsIl9rIiwiQXJndW1lbnRzIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwiTlBDR19JTkNMVURFRCIsImxhc3RJbmRleCIsInJlQ29weSIsIm1hdGNoIiwiYXQiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiaW52b2tlIiwiaHRtbCIsImNlbCIsInByb2Nlc3MiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwicnVuIiwibGlzdGVuZXIiLCJldmVudCIsIm5leHRUaWNrIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJyZW1vdmVDaGlsZCIsInNldFRpbWVvdXQiLCJQUk9UT1RZUEUiLCJXUk9OR19JTkRFWCIsIkJhc2VCdWZmZXIiLCJhYnMiLCJwb3ciLCJsb2ciLCJMTjIiLCIkQlVGRkVSIiwiJExFTkdUSCIsIiRPRkZTRVQiLCJwYWNrSUVFRTc1NCIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwicnQiLCJ1bnBhY2tJRUVFNzU0IiwibkJpdHMiLCJOYU4iLCJ1bnBhY2tJMzIiLCJieXRlcyIsInBhY2tJOCIsInBhY2tJMTYiLCJwYWNrSTMyIiwicGFja0Y2NCIsInBhY2tGMzIiLCJ2aWV3IiwiaXNMaXR0bGVFbmRpYW4iLCJpbnRJbmRleCIsIl9iIiwicGFjayIsImNvbnZlcnNpb24iLCJBcnJheUJ1ZmZlclByb3RvIiwiaiIsIiRzZXRJbnQ4Iiwic2V0SW50OCIsImdldEludDgiLCJzZXRVaW50OCIsImJ1ZmZlckxlbmd0aCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0IiwiUmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCIkJHR5cGVvZiIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsInJlbmRlciIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJkZXNjcmlwdG9yIiwicm9vdCIsIl9wb255ZmlsbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIndrc0V4dCIsIiRTeW1ib2wiLCJuYW1lcyIsImdldEtleXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsImdPUFMiLCIkYXNzaWduIiwiYXNzaWduIiwiQSIsIksiLCJrIiwiZ2V0U3ltYm9scyIsImlzRW51bSIsInkiLCJmYWN0b3JpZXMiLCJwYXJ0QXJncyIsImJvdW5kIiwiY29uc3RydWN0IiwidW4iLCIkcGFyc2VJbnQiLCJwYXJzZUludCIsIiR0cmltIiwid3MiLCJoZXgiLCJyYWRpeCIsIiRwYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsIm1zZyIsImlzRmluaXRlIiwibG9nMXAiLCJyZXQiLCJvcmlnaW5hbCIsIm1lbW8iLCJpc1JpZ2h0IiwidG8iLCJpbmMiLCJmb3JjZWQiLCJmbGFncyIsIkludGVybmFsIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJXcmFwcGVyIiwidGFzayIsIm1pY3JvdGFzayIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsInByb21pc2VSZXNvbHZlIiwidmVyc2lvbnMiLCJ2OCIsIiRQcm9taXNlIiwiaXNOb2RlIiwiZW1wdHkiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsIlVTRV9OQVRJVkUiLCJwcm9taXNlIiwicmVzb2x2ZSIsIkZha2VQcm9taXNlIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwidGhlbiIsImlzVGhlbmFibGUiLCJub3RpZnkiLCJpc1JlamVjdCIsIl9uIiwiY2hhaW4iLCJfYyIsIl92Iiwib2siLCJfcyIsInJlYWN0aW9uIiwiZXhpdGVkIiwiaGFuZGxlciIsImZhaWwiLCJyZWplY3QiLCJkb21haW4iLCJfaCIsIm9uSGFuZGxlVW5oYW5kbGVkIiwiZW50ZXIiLCJleGl0Iiwib25VbmhhbmRsZWQiLCJ1bmhhbmRsZWQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsIl9hIiwib25yZWplY3Rpb25oYW5kbGVkIiwiJHJlamVjdCIsIl93IiwiJHJlc29sdmUiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhdGNoIiwiUHJvbWlzZSIsImNhcGFiaWxpdHkiLCIkJHJlamVjdCIsImFsbCIsInJlbWFpbmluZyIsIiRpbmRleCIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCIkJHJlc29sdmUiLCJwcm9taXNlQ2FwYWJpbGl0eSIsIiRpdGVyRGVmaW5lIiwiU0laRSIsImdldEVudHJ5IiwiZW50cnkiLCJfZiIsIl9sIiwiZGVsZXRlIiwicHJldiIsIiRoYXMiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImZpbmRVbmNhdWdodEZyb3plbiIsInNwbGljZSIsInVmc3RvcmUiLCJudW1iZXIiLCJSZWZsZWN0Iiwib3duS2V5cyIsInJlcGVhdCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJsZWZ0Iiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsImludE1heExlbmd0aCIsImZpbGxMZW4iLCJzdHJpbmdGaWxsZXIiLCJpc0VudHJpZXMiLCJwcm9wSXNFbnVtZXJhYmxlIiwidGVzdDEiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwic3ltYm9scyIsImciLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwib2JqIiwiX2dsb2JhbCIsImRlZmF1bHQiLCJfYmFiZWxQb2x5ZmlsbCIsIndhcm4iLCIkZmFpbHMiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEdPUFMiLCIkSlNPTiIsIkpTT04iLCJfc3RyaW5naWZ5Iiwic3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiUU9iamVjdCIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJwcm90b0Rlc2MiLCJ3cmFwIiwic3ltIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImZvciIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsIkZBSUxTX09OX1BSSU1JVElWRVMiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsIiRnZXRQcm90b3R5cGVPZiIsIiRmcmVlemUiLCIkc2VhbCIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsIiRpc0Zyb3plbiIsIiRpc1NlYWxlZCIsIiRpc0V4dGVuc2libGUiLCJGUHJvdG8iLCJuYW1lUkUiLCJIQVNfSU5TVEFOQ0UiLCJGdW5jdGlvblByb3RvIiwiJE51bWJlciIsIkJST0tFTl9DT0YiLCJUUklNIiwidG9OdW1iZXIiLCJhcmd1bWVudCIsInRoaXJkIiwibWF4Q29kZSIsImZpcnN0IiwiY29kZSIsImRpZ2l0cyIsImFOdW1iZXJWYWx1ZSIsIiR0b0ZpeGVkIiwidG9GaXhlZCIsIkVSUk9SIiwibXVsdGlwbHkiLCJjMiIsImRpdmlkZSIsIm51bVRvU3RyaW5nIiwiYWNjIiwiZnJhY3Rpb25EaWdpdHMiLCJ6IiwieDIiLCIkdG9QcmVjaXNpb24iLCJ0b1ByZWNpc2lvbiIsInByZWNpc2lvbiIsIkVQU0lMT04iLCJfaXNGaW5pdGUiLCJpc0ludGVnZXIiLCJpc1NhZmVJbnRlZ2VyIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJOdW1iZXIiLCJzcXJ0IiwiJGFjb3NoIiwiYWNvc2giLCJNQVhfVkFMVUUiLCIkYXNpbmgiLCJhc2luaCIsIiRhdGFuaCIsImF0YW5oIiwiY2JydCIsImNsejMyIiwiTE9HMkUiLCJjb3NoIiwiZnJvdW5kIiwiRVBTSUxPTjMyIiwiTUFYMzIiLCJNSU4zMiIsIiRhYnMiLCIkc2lnbiIsImh5cG90IiwidmFsdWUxIiwidmFsdWUyIiwiZGl2Iiwic3VtIiwibGFyZyIsIiRpbXVsIiwiaW11bCIsInhuIiwieW4iLCJ4bCIsInlsIiwibG9nMTAiLCJMT0cxMEUiLCJsb2cyIiwic2luaCIsInRhbmgiLCJ0cnVuYyIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsInJhdyIsImNhbGxTaXRlIiwidHBsIiwiJGF0IiwicG9pbnQiLCJjb2RlUG9pbnRBdCIsImNvbnRleHQiLCIkZW5kc1dpdGgiLCJlbmRzV2l0aCIsImVuZFBvc2l0aW9uIiwic2VhcmNoIiwiJHN0YXJ0c1dpdGgiLCJzdGFydHNXaXRoIiwiY29sb3IiLCJzaXplIiwidXJsIiwiRGF0ZSIsImdldFRpbWUiLCJ0b0pTT04iLCJ0b0lTT1N0cmluZyIsInB2IiwiJHRvSVNPU3RyaW5nIiwibHoiLCJudW0iLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01pbGxpc2Vjb25kcyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJEYXRlUHJvdG8iLCJoaW50IiwiY3JlYXRlUHJvcGVydHkiLCJ1cFRvIiwiY2xvbmVkIiwiJHNvcnQiLCIkZm9yRWFjaCIsIlNUUklDVCIsIiRmaWx0ZXIiLCIkc29tZSIsIiRldmVyeSIsIiRyZWR1Y2UiLCIkaW5kZXhPZiIsIk5FR0FUSVZFX1pFUk8iLCIkZmluZCIsIiRmbGFncyIsIiRSZWdFeHAiLCJDT1JSRUNUX05FVyIsInRpUkUiLCJwaVJFIiwiZmlVIiwicHJveHkiLCJkZWZpbmUiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJyZWdFeHBFeGVjIiwiJG1hdGNoIiwibWF5YmVDYWxsTmF0aXZlIiwicngiLCJmdWxsVW5pY29kZSIsIm1hdGNoU3RyIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIlJFUExBQ0UiLCIkcmVwbGFjZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJyZXN1bHRzIiwiYWNjdW11bGF0ZWRSZXN1bHQiLCJuZXh0U291cmNlUG9zaXRpb24iLCJtYXRjaGVkIiwicG9zaXRpb24iLCJjYXB0dXJlcyIsIm5hbWVkQ2FwdHVyZXMiLCJyZXBsYWNlckFyZ3MiLCJyZXBsYWNlbWVudCIsImdldFN1YnN0aXR1dGlvbiIsInRhaWxQb3MiLCJjaCIsImNhcHR1cmUiLCJzYW1lVmFsdWUiLCJTRUFSQ0giLCIkc2VhcmNoIiwicHJldmlvdXNMYXN0SW5kZXgiLCJjYWxsUmVnRXhwRXhlYyIsIiRtaW4iLCIkcHVzaCIsIlNVUFBPUlRTX1kiLCJTUExJVCIsIiRzcGxpdCIsImludGVybmFsU3BsaXQiLCJsaW1pdCIsImxhc3RMZW5ndGgiLCJvdXRwdXQiLCJsYXN0TGFzdEluZGV4Iiwic3BsaXRMaW1pdCIsInNlcGFyYXRvckNvcHkiLCJzcGxpdHRlciIsInVuaWNvZGVNYXRjaGluZyIsImxpbSIsInEiLCJtYWNyb3Rhc2siLCJPYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiaGVhZCIsImxhc3QiLCJmbHVzaCIsInBhcmVudCIsInN0YW5kYWxvbmUiLCJ0b2dnbGUiLCJub2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInN0cm9uZyIsImFkZCIsIkludGVybmFsTWFwIiwiZWFjaCIsIndlYWsiLCJOQVRJVkVfV0VBS19NQVAiLCJJU19JRTExIiwiQWN0aXZlWE9iamVjdCIsIiRXZWFrTWFwIiwiJGlzVmlldyIsImlzVmlldyIsImZpbiIsInZpZXdTIiwidmlld1QiLCJpbml0IiwickFwcGx5IiwiZkFwcGx5IiwidGhpc0FyZ3VtZW50IiwiYXJndW1lbnRzTGlzdCIsIkwiLCJyQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwicHJvcGVydHlLZXkiLCJhdHRyaWJ1dGVzIiwiZGVsZXRlUHJvcGVydHkiLCJFbnVtZXJhdGUiLCJlbnVtZXJhdGUiLCJyZWNlaXZlciIsImdldFByb3RvIiwiViIsImV4aXN0aW5nRGVzY3JpcHRvciIsIm93bkRlc2MiLCJzZXRQcm90byIsIiRpbmNsdWRlcyIsImZsYXRNYXAiLCJmbGF0dGVuSW50b0FycmF5IiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwic291cmNlTGVuIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEUiLCJkZXB0aCIsIm1hcHBlciIsInRoaXNBcmciLCJlbGVtZW50Iiwic3ByZWFkYWJsZSIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJtYXBGbiIsInBhZFN0YXJ0IiwiJHBhZCIsIldFQktJVF9CVUciLCJwYWRFbmQiLCJ0cmltTGVmdCIsInRyaW1SaWdodCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJnZXREZXNjIiwiJHZhbHVlcyIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCJNU0lFIiwidGltZSIsImJvdW5kQXJncyIsInNldEludGVydmFsIiwiJHRhc2siLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwicnVudGltZSIsIk9wIiwiaGFzT3duIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiQ29udGV4dCIsIl9pbnZva2UiLCJzdGF0ZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiX19hd2FpdCIsInVud3JhcHBlZCIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmF0b3JNZXRob2QiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJhd3JhcCIsImFzeW5jIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiSVNfV1JBUCIsInZpcnR1YWwiLCJ1IiwiYWEiLCJiYSIsImVuY29kZVVSSUNvbXBvbmVudCIsImgiLCJjYSIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJwcm9wcyIsInJlZnMiLCJ1cGRhdGVyIiwiaXNSZWFjdENvbXBvbmVudCIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJIIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJJIiwiY3VycmVudCIsIkoiLCJyZWYiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIk0iLCJjaGlsZHJlbiIsIl9vd25lciIsIk4iLCJRIiwia2V5UHJlZml4IiwiZnVuYyIsIj0iLCI6IiwiZXNjYXBlIiwiZWEiLCJmYSIsImRhIiwiWCIsIkNoaWxkcmVuIiwidG9BcnJheSIsIm9ubHkiLCJjcmVhdGVSZWYiLCJDb21wb25lbnQiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfY29udGV4dCIsImZvcndhcmRSZWYiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImlzVmFsaWRFbGVtZW50IiwidW5zdGFibGVfQ29uY3VycmVudE1vZGUiLCJ1bnN0YWJsZV9Qcm9maWxlciIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudE93bmVyIiwiWSIsIloiLCJoYSIsImlhIiwib25FcnJvciIsImphIiwibGEiLCJtYSIsIm5hIiwib2EiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInBhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJxYSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJyYSIsInNhIiwiZGVwZW5kZW5jaWVzIiwidGEiLCJ1YSIsInZhIiwid2EiLCJjdXJyZW50VGFyZ2V0Iiwia2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkJhIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIkNhIiwic3RhdGVOb2RlIiwiZGlzYWJsZWQiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwicGFyZW50Tm9kZSIsIklhIiwiSmEiLCJLYSIsIkxhIiwicmV0dXJuIiwiTWEiLCJkaXNwYXRjaENvbmZpZyIsIk5hIiwiX3RhcmdldEluc3QiLCJPYSIsIlBhIiwiUWEiLCJSYSIsIlNhIiwiVGEiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJVYSIsIlZhIiwiV2EiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiWGEiLCJZYSIsIlphIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJkYiIsImViIiwidGV4dENvbnRlbnQiLCJmYiIsImdiIiwibmF0aXZlRXZlbnQiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpYiIsImV2ZW50UG9vbCIsImpiIiwiZGVzdHJ1Y3RvciIsImhiIiwiZ2V0UG9vbGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwiZXh0ZW5kIiwia2IiLCJsYiIsIm1iIiwibmIiLCJvYiIsImRvY3VtZW50TW9kZSIsInBiIiwicWIiLCJyYiIsInNiIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsInRiIiwidWIiLCJrZXlDb2RlIiwidmIiLCJkZXRhaWwiLCJ3YiIsInpiIiwibG9jYWxlIiwid2hpY2giLCJ4YiIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsInliIiwiQWIiLCJCYiIsIkNiIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInRlbCIsInRleHQiLCJ3ZWVrIiwiTWIiLCJub2RlTmFtZSIsIk5iIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50Iiwibm9kZVR5cGUiLCJPYiIsInNldEF0dHJpYnV0ZSIsIlBiIiwiUmIiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlFiIiwiU2IiLCJjaGVja2VkIiwiVGIiLCJVYiIsIlZiIiwiV2IiLCJYYiIsIlliIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJjYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJrYyIsImxjIiwibWMiLCJuYyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJyYyIsInNjIiwidG9VcHBlckNhc2UiLCJ0YyIsInBjIiwicWMiLCJvYyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwidWMiLCJ2YyIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwid2MiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsIkJjIiwiY2hhbmdlIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsImRldGFjaEV2ZW50IiwiS2MiLCJMYyIsImF0dGFjaEV2ZW50IiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiUWMiLCJSYyIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJTYyIsImdldE1vZGlmaWVyU3RhdGUiLCJUYyIsIlVjIiwiVmMiLCJXYyIsIlhjIiwiWWMiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIlpjIiwicG9pbnRlcklkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiJGMiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsImFkIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJhbHRlcm5hdGUiLCJiZCIsImNkIiwiZGQiLCJlZCIsImVmZmVjdFRhZyIsImZkIiwiaGQiLCJjaGlsZCIsInNpYmxpbmciLCJnZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJqZCIsImNsaXBib2FyZERhdGEiLCJrZCIsImxkIiwiY2hhckNvZGUiLCJtZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJuZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJvZCIsImxvY2F0aW9uIiwicGQiLCJkYXRhVHJhbnNmZXIiLCJxZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJyZCIsInNkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ0ZCIsInVkIiwidmQiLCJ3ZCIsImlzSW50ZXJhY3RpdmUiLCJ4ZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsInlkIiwiemQiLCJBZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiQmQiLCJDZCIsIkRkIiwiRWQiLCJGZCIsIkdkIiwiSGQiLCJJZCIsIkpkIiwiYm9keSIsIktkIiwiZmlyc3RDaGlsZCIsIkxkIiwibmV4dFNpYmxpbmciLCJOZCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiaHJlZiIsIk9kIiwiY29udGVudEVkaXRhYmxlIiwiUWQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiTWQiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsImZvY3VzIiwiUmQiLCJTZCIsInNlbGVjdCIsIlRkIiwiVWQiLCJWZCIsIldkIiwiWGQiLCJZZCIsIm9uU2VsZWN0IiwiJGQiLCJaZCIsImFlIiwib3B0aW9ucyIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiYmUiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImNlIiwiZGUiLCJlZSIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJmZSIsIm1hdGhtbCIsInN2ZyIsImdlIiwiaGUiLCJpZSIsImplIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsImtlIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwibGUiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsIm1lIiwibmUiLCJvZSIsInNldFByb3BlcnR5Iiwic3Vic3RyaW5nIiwicGUiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInFlIiwic2UiLCJibHVyIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJhdXRvRm9jdXMiLCJ4ZSIsIl9faHRtbCIsInllIiwiemUiLCJjbGVhclRpbWVvdXQiLCJBZSIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJCZSIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiRGUiLCJFZSIsIlNldCIsIkZlIiwiR2UiLCJIZSIsIkllIiwiSmUiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJLZSIsIkxlIiwiTWUiLCJOZSIsImdldENoaWxkQ29udGV4dCIsIk9lIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlVlIiwiZWxlbWVudFR5cGUiLCJwZW5kaW5nUHJvcHMiLCJjb250ZXh0RGVwZW5kZW5jaWVzIiwibWVtb2l6ZWRTdGF0ZSIsInVwZGF0ZVF1ZXVlIiwibWVtb2l6ZWRQcm9wcyIsImxhc3RFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJWZSIsIlhlIiwiWWUiLCJaZSIsIiRlIiwiYWYiLCJiZiIsInBlbmRpbmdDaGlsZHJlbiIsImltcGxlbWVudGF0aW9uIiwiY2YiLCJkaWRFcnJvciIsImVhcmxpZXN0UGVuZGluZ1RpbWUiLCJsYXRlc3RQZW5kaW5nVGltZSIsImRmIiwiZmYiLCJsYXRlc3RQaW5nZWRUaW1lIiwiZWFybGllc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0U3VzcGVuZGVkVGltZSIsImdmIiwibmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24iLCJqZiIsImtmIiwiYmFzZVN0YXRlIiwidGYiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwibGYiLCJuZiIsIm1mIiwicGF5bG9hZCIsImNhbGxiYWNrIiwicGYiLCJxZiIsInJmIiwic2YiLCJ1ZiIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsInZmIiwid2YiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJ4ZiIsInlmIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJ6ZiIsIkFmIiwiX3N0cmluZ1JlZiIsIkJmIiwiQ2YiLCJNYXAiLCJEZiIsIkVmIiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJKZiIsInRhZ05hbWUiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJiYXNlVXBkYXRlIiwibmciLCJvZyIsInBnIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImRpc3BhdGNoIiwiYWN0aW9uIiwicWciLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJyZyIsImRlc3Ryb3kiLCJkZXBzIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInJlYWRDb250ZXh0IiwieGciLCJ5ZyIsInpnIiwiQWciLCJCZyIsIkNnIiwiRGciLCJFZyIsIkZnIiwiR2ciLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwiTWciLCJOZyIsIk9nIiwiUGciLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJRZyIsIlJnIiwicGVuZGluZ0NvbnRleHQiLCJTZyIsInRpbWVkT3V0QXQiLCJmYWxsYmFjayIsIlRnIiwiVWciLCJoZiIsIldlIiwiaHlkcmF0ZSIsImhpZGRlbiIsIm9ic2VydmVkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsImRoIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJpaCIsImpoIiwic3RhY2siLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwib25DbGljayIsIm9uY2xpY2siLCJwaCIsIldlYWtTZXQiLCJxaCIsInJoIiwic2giLCJ0aCIsInZoIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJ3aCIsInhoIiwieWgiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiemgiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwiQ2UiLCJ1aCIsImhpIiwiWGgiLCJCaCIsIldlYWtNYXAiLCJDaCIsIkRoIiwiRWgiLCJjb21wb25lbnREaWRDYXRjaCIsIkZoIiwiY29tcG9uZW50U3RhY2siLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwiVWgiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlZoIiwiWmgiLCJwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUiLCJlZiIsIlBkIiwiWWgiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImZpbmlzaGVkV29yayIsIiRoIiwiYWkiLCJjcmVhdGVFbGVtZW50TlMiLCJiaSIsImNpIiwiZGkiLCJtYXhEdXJhdGlvbiIsInBpbmdDYWNoZSIsImVpIiwiZmkiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsImdpIiwiaWkiLCJqaSIsImtpIiwibGkiLCJtaSIsIm5pIiwib2kiLCJwaSIsInFpIiwicmkiLCJzaSIsInRpIiwidW5zdGFibGVfbm93IiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwidGltZW91dCIsInRpbWVvdXRIYW5kbGUiLCJCaSIsIkNpIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJEaSIsIkVpIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJfb25Db21wbGV0ZSIsIkZpIiwiZmlyc3RCYXRjaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsIkdpIiwiSGkiLCJJaSIsIkppIiwiS2kiLCJMaSIsIk5pIiwiX3Jvb3QiLCJfY2FsbGJhY2tzIiwiX25leHQiLCJfaGFzQ2hpbGRyZW4iLCJfZGlkQ29tcGxldGUiLCJfY2hpbGRyZW4iLCJPaSIsIl9kaWRDb21taXQiLCJfb25Db21taXQiLCJQaSIsIl9pbnRlcm5hbFJvb3QiLCJRaSIsIlNpIiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiaGFzQXR0cmlidXRlIiwiUmkiLCJUaSIsIk1pIiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJjb21taXQiLCJ1bm1vdW50IiwiY3JlYXRlQmF0Y2giLCJWaSIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJ1bnN0YWJsZV9jcmVhdGVSb290IiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJUZSIsIm92ZXJyaWRlUHJvcHMiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJXaSIsIlhpIiwicHJldmlvdXMiLCJwcmlvcml0eUxldmVsIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJwZXJmb3JtYW5jZSIsIl9zY2hlZE1vY2siLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJvb2wiLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJ0eXBlT2YiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJMYXp5IiwiTWVtbyIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJSZWFjdFJlZHV4Q29udGV4dCIsInJlYWN0X2RlZmF1bHQiLCJiYXRjaF9iYXRjaCIsImdldEJhdGNoIiwiQ0xFQVJFRCIsIm51bGxMaXN0ZW5lcnMiLCJTdWJzY3JpcHRpb24iLCJwYXJlbnRTdWIiLCJ1bnN1YnNjcmliZSIsImxpc3RlbmVycyIsImhhbmRsZUNoYW5nZVdyYXBwZXIiLCJfcHJvdG8iLCJhZGROZXN0ZWRTdWIiLCJ0cnlTdWJzY3JpYmUiLCJzdWJzY3JpYmUiLCJub3RpZnlOZXN0ZWRTdWJzIiwib25TdGF0ZUNoYW5nZSIsImlzU3Vic2NyaWJlZCIsIkJvb2xlYW4iLCJiYXRjaCIsInRyeVVuc3Vic2NyaWJlIiwiUHJvdmlkZXJfUHJvdmlkZXIiLCJfQ29tcG9uZW50Iiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX3RoaXMiLCJub3RpZnlTdWJzY3JpYmVycyIsIlJlZmVyZW5jZUVycm9yIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsInN1YnNjcmlwdGlvbiIsInByZXZpb3VzU3RhdGUiLCJnZXRTdGF0ZSIsIl9pc01vdW50ZWQiLCJwcmV2UHJvcHMiLCJyZWFjdCIsInByb3BfdHlwZXNfZGVmYXVsdCIsImNvbXBvbmVudHNfUHJvdmlkZXIiLCJfZXh0ZW5kcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiRU1QVFlfQVJSQVkiLCJOT19TVUJTQ1JJUFRJT05fQVJSQVkiLCJzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIiLCJ1cGRhdGVDb3VudCIsImluaXRTdGF0ZVVwZGF0ZXMiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX3JlZiIsIl9yZWYyIiwiX3JlZjIkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYyJG1ldGhvZE5hbWUiLCJtZXRob2ROYW1lIiwiX3JlZjIkcmVuZGVyQ291bnRQcm9wIiwicmVuZGVyQ291bnRQcm9wIiwiX3JlZjIkc2hvdWxkSGFuZGxlU3RhIiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiX3JlZjIkc3RvcmVLZXkiLCJzdG9yZUtleSIsIl9yZWYyJHdpdGhSZWYiLCJ3aXRoUmVmIiwiX3JlZjIkZm9yd2FyZFJlZiIsIl9yZWYyJGNvbnRleHQiLCJjb25uZWN0T3B0aW9ucyIsImJyb3dzZXJfZGVmYXVsdCIsIldyYXBwZWRDb21wb25lbnQiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsInNlbGVjdG9yRmFjdG9yeU9wdGlvbnMiLCJwdXJlIiwidXNlUHVyZU9ubHlNZW1vIiwiQ29ubmVjdEZ1bmN0aW9uIiwiX3VzZU1lbW8iLCJmb3J3YXJkZWRSZWYiLCJ3cmFwcGVyUHJvcHMiLCJwcm9wc0NvbnRleHQiLCJDb250ZXh0VG9Vc2UiLCJyZWFjdF9pcyIsImNvbnRleHRWYWx1ZSIsImRpZFN0b3JlQ29tZUZyb21Qcm9wcyIsImRpZFN0b3JlQ29tZUZyb21Db250ZXh0IiwiY2hpbGRQcm9wc1NlbGVjdG9yIiwiY3JlYXRlQ2hpbGRTZWxlY3RvciIsIl91c2VNZW1vMiIsIm92ZXJyaWRkZW5Db250ZXh0VmFsdWUiLCJfdXNlUmVkdWNlciIsInByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQiLCJmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoIiwibGFzdENoaWxkUHJvcHMiLCJsYXN0V3JhcHBlclByb3BzIiwiY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSIsInJlbmRlcklzU2NoZWR1bGVkIiwiYWN0dWFsQ2hpbGRQcm9wcyIsImRpZFVuc3Vic2NyaWJlIiwibGFzdFRocm93bkVycm9yIiwiY2hlY2tGb3JVcGRhdGVzIiwibmV3Q2hpbGRQcm9wcyIsImxhdGVzdFN0b3JlU3RhdGUiLCJyZW5kZXJlZFdyYXBwZWRDb21wb25lbnQiLCJDb25uZWN0IiwiZm9yd2FyZGVkIiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfY2pzX2RlZmF1bHQiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJyYW5kb21TdHJpbmciLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsImlzUGxhaW5PYmplY3QiLCJnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZSIsImFjdGlvblR5cGUiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJfZGVmaW5lUHJvcGVydHkiLCJjb21wb3NlIiwiX2xlbiIsImZ1bmNzIiwiX2tleSIsIndyYXBNYXBUb1Byb3BzQ29uc3RhbnQiLCJnZXRDb25zdGFudCIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwic3RhdGVPckRpc3BhdGNoIiwib3duUHJvcHMiLCJjb25uZWN0X21hcERpc3BhdGNoVG9Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsImFjdGlvbkNyZWF0b3JzIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsImJpbmRBY3Rpb25DcmVhdG9ycyIsImNvbm5lY3RfbWFwU3RhdGVUb1Byb3BzIiwibWFwU3RhdGVUb1Byb3BzIiwiZGVmYXVsdE1lcmdlUHJvcHMiLCJzdGF0ZVByb3BzIiwiZGlzcGF0Y2hQcm9wcyIsImNvbm5lY3RfbWVyZ2VQcm9wcyIsIm1lcmdlUHJvcHMiLCJtZXJnZWRQcm9wcyIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibmV4dE1lcmdlZFByb3BzIiwid3JhcE1lcmdlUHJvcHNGdW5jIiwiaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsInB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiYXJlU3RhdGVzRXF1YWwiLCJhcmVPd25Qcm9wc0VxdWFsIiwiYXJlU3RhdGVQcm9wc0VxdWFsIiwiaGFzUnVuQXRMZWFzdE9uY2UiLCJoYW5kbGVTdWJzZXF1ZW50Q2FsbHMiLCJuZXh0U3RhdGUiLCJuZXh0T3duUHJvcHMiLCJuZXh0U3RhdGVQcm9wcyIsInN0YXRlUHJvcHNDaGFuZ2VkIiwicHJvcHNDaGFuZ2VkIiwic3RhdGVDaGFuZ2VkIiwiZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImluaXRNYXBTdGF0ZVRvUHJvcHMiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiaW5pdE1lcmdlUHJvcHMiLCJzdHJpY3RFcXVhbCIsIl90ZW1wIiwiX3JlZiRjb25uZWN0SE9DIiwiY29ubmVjdEhPQyIsIl9yZWYkbWFwU3RhdGVUb1Byb3BzRiIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWFwRGlzcGF0Y2hUb1BybyIsIm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWVyZ2VQcm9wc0ZhY3RvciIsIm1lcmdlUHJvcHNGYWN0b3JpZXMiLCJfcmVmJHNlbGVjdG9yRmFjdG9yeSIsInVzZVJlZHV4Q29udGV4dCIsInVzZURpc3BhdGNoIiwibmV3QmF0Y2giLCJ1c2VTZWxlY3Rvcl91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwicmVmRXF1YWxpdHkiLCJ1c2VTZWxlY3RvciIsInNlbGVjdG9yIiwiZXF1YWxpdHlGbiIsInNlbGVjdGVkU3RhdGUiLCJfdXNlUmVkdXhDb250ZXh0IiwiY29udGV4dFN1YiIsImZvcmNlUmVuZGVyIiwibGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciIsImxhdGVzdFNlbGVjdG9yIiwibGF0ZXN0U2VsZWN0ZWRTdGF0ZSIsImVycm9yTWVzc2FnZSIsIm1lc3NhZ2UiLCJuZXdTZWxlY3RlZFN0YXRlIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsInJlYWN0X2RvbSIsInRodW5rIiwid2l0aEV4dHJhQXJndW1lbnQiLCJyZWR1eF90aHVua19lcyIsImNyZWF0ZVN0b3JlIiwicmVkdWNlciIsInByZWxvYWRlZFN0YXRlIiwiZW5oYW5jZXIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwiZXMiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiY29tYmluZVJlZHVjZXJzIiwiZ3JlZXRpbmdzIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIiwibWlkZGxld2FyZXMiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwibWlkZGxld2FyZSIsIl9vYmplY3RTcHJlYWQiLCJhcHBseU1pZGRsZXdhcmUiLCJHcmVldGluZ01hc3RlciIsIm9uQWRkIiwiZ3JlZXRpbmciLCJ1c2VJbnB1dCIsInBsYWNlaG9sZGVyIiwiX1JlYWN0JHVzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5IiwiUmVhY3QiLCJvbkNoYW5nZSIsIkdyZWV0aW5nRGV0YWlsIiwiX3VzZUlucHV0MiIsImluaXRpYWxOYW1lIiwibmFtZUlucHV0IiwicmVzZXROYW1lIiwiX3VzZUlucHV0NCIsImluaXRpYWxHcmVldGluZyIsImdyZWV0aW5nSW5wdXQiLCJyZXNldEdyZWV0aW5nIiwiaW5wdXRSZWYiLCJzYXZlRGlzYWJsZWQiLCJHcmVldGluZ0RldGFpbF9leHRlbmRzIiwib25TYXZlIiwiYWRkR3JlZXRpbmciLCJuZXdHcmVldGluZyIsIkJBQ0tFTkRfVVJMIiwibG9hZEdyZWV0aW5nc0Zyb21TZXJ2ZXIiLCJfY2FsbGVlIiwicmVzcG9uc2UiLCJfZ3JlZXRpbmdzIiwiZmV0Y2giLCJqc29uIiwidDAiLCJfeCIsIk1PREVfTUFTVEVSIiwiRXJyb3JIYW5kbGVyIiwiX2NsYXNzQ2FsbENoZWNrIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfZ2V0UHJvdG90eXBlT2YiLCJoYXNFcnJvciIsIl90aGlzMiIsIm1vdW50Tm9kZSIsImdldEVsZW1lbnRCeUlkIiwiUmVhY3RET00iLCJFcnJvckhhbmRsZXJfRXJyb3JIYW5kbGVyIiwiX2FkZEdyZWV0aW5nIiwiZ3JlZXRpbmdUb0JlQWRkZWQiLCJoZWFkZXJzIiwiQWNjZXB0IiwiQ29udGVudC1UeXBlIiwic3RhdHVzIiwiYWN0aW9ucyIsInNyY19HcmVldGluZ01hc3RlciJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFF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Z0NDVkE5dkIsRUFBUSxLQUVSQSxFQUFRLEtBRVJBLEVBQVEsS0FFUkEsRUFBUSxLQUVSQSxFQUFRLEtBRVJBLEVBQVEsS0FFUkEsRUFBUSxLQUVSQSxFQUFRLEtBRVJBLEVBQVEsS0FFUkEsRUFBUSxLQUVSQSxFQUFRLEtBRVJBLEVBQVEsS0FFUkEsRUFBUSxLQUVSQSxFQUFRLHNCQzVCUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxJQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkcsRUFBQUQsUUFBaUJGLEVBQVEsaUNDeEl6QixJQUFBb0MsRUFBYXBDLEVBQVEsR0FDckJ5RixFQUFVekYsRUFBUSxJQUNsQnNYLEVBQWtCdFgsRUFBUSxHQUMxQnlDLEVBQWN6QyxFQUFRLEdBQ3RCdUMsRUFB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LEdBQW9CM0IsSUFDN0I3aUIsRUR0QkssQ0FDTHIzRCxLQUFNLFdBQ05uQixLQUFNLGdCQ0NSLHlCQUFBaXNDLEVBQUFyRSxTQUFBNHpDLEVBQUEsa0JBZDJDa0IsaUxBQUF4MkUsTUFBQXJCLEtBQUFzQixXQW9DM0MsT0E1QkFvVSxRQUFReUYsSUFBSSxxQkFBc0JxNUQsR0FFbENnQixJQUFNNXRDLFVBQVUsV0FDZCtyQixFQUFTd2tCLE9BQ1IsSUF3QkNoOUUsSUFBUys3RSxHQUVUNVEsRUFBQTFuRSxFQUFBZ1gsY0FBQ3dpRSxHQUFELENBQ0U1RCxVQUFXQSxFQUNYVSxNQUFPLFdBQ0x2aEIsRURyQ0QsQ0FDTHIzRCxLQUFNLFdBQ05uQixLQUFNLG1CQ3dDRG1yRSxFQUFBMW5FLEVBQUFnWCxjQUFDOC9ELEdBQUQsQ0FBZ0JZLE9BOUNvQixTQUFBVyxHQUFBLE9BQUFZLEVBQUF4MkUsTUFBQXJCLEtBQUFzQixlRUV2QyxRQUdKbTJFIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9kaXN0XCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMzEpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi42JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4vX2Z1bmN0aW9uLXRvLXN0cmluZycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgcXVvdCA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUWVBFKSB7XG4gIGlmICghaXNPYmplY3QoaXQpIHx8IGl0Ll90ICE9PSBUWVBFKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNwYWNlcyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIHNwYWNlID0gJ1snICsgc3BhY2VzICsgJ10nO1xudmFyIG5vbiA9ICdcXHUyMDBiXFx1MDA4NSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpO1xuXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBBTElBUykge1xuICB2YXIgZXhwID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYgKEFMSUFTKSBleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24gKHN0cmluZywgVFlQRSkge1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG5hdmlnYXRvciA9IGdsb2JhbC5uYXZpZ2F0b3I7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgfHwgJyc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSykge1xuICB2YXIgQmFzZSA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIEMgPSBCYXNlO1xuICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xuICB2YXIgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlO1xuICB2YXIgTyA9IHt9O1xuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24gKEtFWSkge1xuICAgIHZhciBmbiA9IHByb3RvW0tFWV07XG4gICAgcmVkZWZpbmUocHJvdG8sIEtFWSxcbiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQoYSkgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEsIGIpOyByZXR1cm4gdGhpczsgfVxuICAgICk7XG4gIH07XG4gIGlmICh0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+ICBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHsgbmV3IEMoaXRlcik7IH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0YXJnZXQsIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSgpLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBwcm90by5jbGVhcikgZGVsZXRlIHByb3RvLmNsZWFyO1xuICB9XG5cbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFRZUEVEID0gdWlkKCd0eXBlZF9hcnJheScpO1xudmFyIFZJRVcgPSB1aWQoJ3ZpZXcnKTtcbnZhciBBQlYgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KTtcbnZhciBDT05TVFIgPSBBQlY7XG52YXIgaSA9IDA7XG52YXIgbCA9IDk7XG52YXIgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlIChpIDwgbCkge1xuICBpZiAoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSkge1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBQlY6IEFCVixcbiAgQ09OU1RSOiBDT05TVFIsXG4gIFRZUEVEOiBUWVBFRCxcbiAgVklFVzogVklFV1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyArXG4gICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgdGFyZ2V0LCBDKSB7XG4gIHZhciBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICB2YXIgUDtcbiAgaWYgKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2YpIHtcbiAgICBzZXRQcm90b3R5cGVPZih0aGF0LCBQKTtcbiAgfSByZXR1cm4gdGhhdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoZGVmaW5lZCh0aGlzKSk7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIG4gPSB0b0ludGVnZXIoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcihcIkNvdW50IGNhbid0IGJlIG5lZ2F0aXZlXCIpO1xuICBmb3IgKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpIGlmIChuICYgMSkgcmVzICs9IHN0cjtcbiAgcmV0dXJuIHJlcztcbn07XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59O1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xubW9kdWxlLmV4cG9ydHMgPSAoISRleHBtMVxuICAvLyBPbGQgRkYgYnVnXG4gIHx8ICRleHBtMSgxMCkgPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgJGV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjhcbiAgLy8gVG9yIEJyb3dzZXIgYnVnXG4gIHx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xN1xuKSA/IGZ1bmN0aW9uIGV4cG0xKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogeCA+IC0xZS02ICYmIHggPCAxZS02ID8geCArIHggKiB4IC8gMiA6IE1hdGguZXhwKHgpIC0gMTtcbn0gOiAkZXhwbTE7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcbiIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS8sXG4gICAgICByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMVtMQVNUX0lOREVYXSAhPT0gMCB8fCByZTJbTEFTVF9JTkRFWF0gIT09IDA7XG59KSgpO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRDtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmVbTEFTVF9JTkRFWF07XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChyZSwgc3RyKTtcblxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlW0xBU1RfSU5ERVhdID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbiAvLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBhdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY2VsID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZCA9ICt0aGlzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3coY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gICAgbWl4aW5zOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICB0eXBlOiB0cnVlXG59O1xuXG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgICBuYW1lOiB0cnVlLFxuICAgIGxlbmd0aDogdHJ1ZSxcbiAgICBwcm90b3R5cGU6IHRydWUsXG4gICAgY2FsbGVyOiB0cnVlLFxuICAgIGNhbGxlZTogdHJ1ZSxcbiAgICBhcmd1bWVudHM6IHRydWUsXG4gICAgYXJpdHk6IHRydWVcbn07XG5cbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAgICckJHR5cGVvZic6IHRydWUsXG4gICAgcmVuZGVyOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWVcbn07XG5cbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgICBjb21wYXJlOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW1JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAgIGlmIChSZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gICAgfVxuICAgIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG5cbiAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSB7XG4gICAgICBrZXkgPSBrZXlzW2orK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGlzRW51bS5jYWxsKFMsIGtleSkpIFRba2V5XSA9IFNba2V5XTtcbiAgICB9XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcbiIsIi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoRiwgbGVuLCBhcmdzKSB7XG4gIGlmICghKGxlbiBpbiBmYWN0b3JpZXMpKSB7XG4gICAgZm9yICh2YXIgbiA9IFtdLCBpID0gMDsgaSA8IGxlbjsgaSsrKSBuW2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgZmFjdG9yaWVzW2xlbl0gPSBGdW5jdGlvbignRixhJywgJ3JldHVybiBuZXcgRignICsgbi5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbbGVuXShGLCBhcmdzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyogLCAuLi5hcmdzICovKSB7XG4gIHZhciBmbiA9IGFGdW5jdGlvbih0aGlzKTtcbiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZCA9IGZ1bmN0aW9uICgvKiBhcmdzLi4uICovKSB7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG4gIGlmIChpc09iamVjdChmbi5wcm90b3R5cGUpKSBib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07XG4iLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG4iLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd3MgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBoZXggPSAvXlstK10/MFt4WF0vO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3cyArICcweDE2JykgIT09IDIyID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyLCByYWRpeCkge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICByZXR1cm4gJHBhcnNlSW50KHN0cmluZywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7XG4iLCJ2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUZsb2F0O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xuXG5tb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cikge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICB2YXIgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0O1xuIiwidmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIG1zZykge1xuICBpZiAodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpIHRocm93IFR5cGVFcnJvcihtc2cpO1xuICByZXR1cm4gK2l0O1xufTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwiLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwsIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpIHtcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBpbmRleCA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMDtcbiAgdmFyIGkgPSBpc1JpZ2h0ID8gLTEgOiAxO1xuICBpZiAoYUxlbiA8IDIpIGZvciAoOzspIHtcbiAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbmRleCArPSBpO1xuICAgIGlmIChpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICB9XG4gIH1cbiAgZm9yICg7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gTWF0aC5taW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0byk7XG4gIHZhciBpbmMgPSAxO1xuICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XG4gICAgaW5jID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5yZXF1aXJlKCcuL19leHBvcnQnKSh7XG4gIHRhcmdldDogJ1JlZ0V4cCcsXG4gIHByb3RvOiB0cnVlLFxuICBmb3JjZWQ6IHJlZ2V4cEV4ZWMgIT09IC8uLy5leGVjXG59LCB7XG4gIGV4ZWM6IHJlZ2V4cEV4ZWNcbn0pO1xuIiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICcnO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxuICAgICAgLy8gdjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgICAgJiYgdjguaW5kZXhPZignNi42JykgIT09IDBcbiAgICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNjYnKSA9PT0gLTE7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gbWF5IHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICB2YXIgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBnZXRXZWFrID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWs7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG52YXIgJGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xudmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHRoYXQpIHtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSgpKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5hID0gW107XG59O1xudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSB0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTtcbiAgICBlbHNlIGRhdGFbdGhhdC5faV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhhdDtcbiAgfSxcbiAgdWZzdG9yZTogdW5jYXVnaHRGcm96ZW5TdG9yZVxufTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW5kZXhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCEnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG4iLCIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBSZWZsZWN0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpO1xuICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG4gIHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICB2YXIgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTtcbiAgcmV0dXJuIGxlZnQgPyBzdHJpbmdGaWxsZXIgKyBTIDogUyArIHN0cmluZ0ZpbGxlcjtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBpc0VudW0gPSByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlzRW50cmllcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoaXQpO1xuICAgIHZhciBrZXlzID0gZ2V0S2V5cyhPKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSB7XG4gICAgICBrZXkgPSBrZXlzW2krK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGlzRW51bS5jYWxsKE8sIGtleSkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi42JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnJlcXVpcmUoXCIuL25vQ29uZmxpY3RcIik7XG5cbnZhciBfZ2xvYmFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2dsb2JhbFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmlmIChfZ2xvYmFsLmRlZmF1bHQuX2JhYmVsUG9seWZpbGwgJiYgdHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29uc29sZS53YXJuKSB7XG4gIGNvbnNvbGUud2FybihcIkBiYWJlbC9wb2x5ZmlsbCBpcyBsb2FkZWQgbW9yZSB0aGFuIG9uY2Ugb24gdGhpcyBwYWdlLiBUaGlzIGlzIHByb2JhYmx5IG5vdCBkZXNpcmFibGUvaW50ZW5kZWQgXCIgKyBcImFuZCBtYXkgaGF2ZSBjb25zZXF1ZW5jZXMgaWYgZGlmZmVyZW50IHZlcnNpb25zIG9mIHRoZSBwb2x5ZmlsbHMgYXJlIGFwcGxpZWQgc2VxdWVudGlhbGx5LiBcIiArIFwiSWYgeW91IGRvIG5lZWQgdG8gbG9hZCB0aGUgcG9seWZpbGwgbW9yZSB0aGFuIG9uY2UsIHVzZSBAYmFiZWwvcG9seWZpbGwvbm9Db25mbGljdCBcIiArIFwiaW5zdGVhZCB0byBieXBhc3MgdGhlIHdhcm5pbmcuXCIpO1xufVxuXG5fZ2xvYmFsLmRlZmF1bHQuX2JhYmVsUG9seWZpbGwgPSB0cnVlOyIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9lczZcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL2FycmF5L2luY2x1ZGVzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9hcnJheS9mbGF0LW1hcFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3BhZC1zdGFydFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3BhZC1lbmRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N0cmluZy90cmltLXN0YXJ0XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1lbmRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N5bWJvbC9hc3luYy1pdGVyYXRvclwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL29iamVjdC92YWx1ZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL29iamVjdC9lbnRyaWVzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9wcm9taXNlL2ZpbmFsbHlcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL3dlYlwiKTtcblxucmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZVwiKTsiLCJyZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnNlYWwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmNicnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguY2x6MzInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguY29zaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5leHBtMScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5mcm91bmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguaW11bCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5sb2cxMCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5sb2cxcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5sb2cyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnNpZ24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguc2luaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC50YW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnRydW5jJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcucmF3Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5iaWcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5ibGluaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnN1YicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnN1cCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS5ub3cnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuam9pbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc29tZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZXZlcnknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZpbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LndlYWstbWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi53ZWFrLXNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJEdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gICRHT1BTLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gJGZhaWxzKGZ1bmN0aW9uICgpIHsgJEdPUFMuZigxKTsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogRkFJTFNfT05fUFJJTUlUSVZFUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gJEdPUFMuZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCduYXRpdmUtZnVuY3Rpb24tdG8tc3RyaW5nJywgRnVuY3Rpb24udG9TdHJpbmcpO1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpIH0pO1xuIiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7XG59KTtcbiIsIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24gKCRmcmVlemUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCkge1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdzZWFsJywgZnVuY3Rpb24gKCRzZWFsKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZWFsKGl0KSB7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24gKCRwcmV2ZW50RXh0ZW5zaW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbiAoJGlzRnJvemVuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc1NlYWxlZCcsIGZ1bmN0aW9uICgkaXNTZWFsZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0V4dGVuc2libGUnLCBmdW5jdGlvbiAoJGlzRXh0ZW5zaWJsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWUgOiBmYWxzZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcbiIsIi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGlzOiByZXF1aXJlKCcuL19zYW1lLXZhbHVlJykgfSk7XG4iLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciB0ZXN0ID0ge307XG50ZXN0W3JlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmICh0ZXN0ICsgJycgIT0gJ1tvYmplY3Qgel0nKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn1cbiIsIi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7IGJpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKSB9KTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgRlByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIEhBU19JTlNUQU5DRSA9IHJlcXVpcmUoJy4vX3drcycpKCdoYXNJbnN0YW5jZScpO1xudmFyIEZ1bmN0aW9uUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVilcbmlmICghKEhBU19JTlNUQU5DRSBpbiBGdW5jdGlvblByb3RvKSkgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihGdW5jdGlvblByb3RvLCBIQVNfSU5TVEFOQ0UsIHsgdmFsdWU6IGZ1bmN0aW9uIChPKSB7XG4gIGlmICh0eXBlb2YgdGhpcyAhPSAnZnVuY3Rpb24nIHx8ICFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoIWlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSkgcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOlxuICB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKSBpZiAodGhpcy5wcm90b3R5cGUgPT09IE8pIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAxOC4yLjQgcGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyICROdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBCYXNlID0gJE51bWJlcjtcbnZhciBwcm90byA9ICROdW1iZXIucHJvdG90eXBlO1xuLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG52YXIgQlJPS0VOX0NPRiA9IGNvZihyZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykocHJvdG8pKSA9PSBOVU1CRVI7XG52YXIgVFJJTSA9ICd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlO1xuXG4vLyA3LjEuMyBUb051bWJlcihhcmd1bWVudClcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7XG4gICAgdmFyIGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChpdC5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvZGUgPSBkaWdpdHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmICghJE51bWJlcignIDBvMScpIHx8ICEkTnVtYmVyKCcwYjEnKSB8fCAkTnVtYmVyKCcrMHgxJykpIHtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlO1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gdGhhdCBpbnN0YW5jZW9mICROdW1iZXJcbiAgICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxuICAgICAgJiYgKEJST0tFTl9DT0YgPyBmYWlscyhmdW5jdGlvbiAoKSB7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUE4oQmFzZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgTlVNQkVSLCAkTnVtYmVyKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyICR0b0ZpeGVkID0gMS4wLnRvRml4ZWQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG52YXIgRVJST1IgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISc7XG52YXIgWkVSTyA9ICcwJztcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIGkgPSAtMTtcbiAgdmFyIGMyID0gYztcbiAgd2hpbGUgKCsraSA8IDYpIHtcbiAgICBjMiArPSBuICogZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gIH1cbn07XG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgYyA9IDA7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGMgKz0gZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gZmxvb3IoYyAvIG4pO1xuICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICB9XG59O1xudmFyIG51bVRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaSA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGlmIChzICE9PSAnJyB8fCBpID09PSAwIHx8IGRhdGFbaV0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICB9XG4gIH0gcmV0dXJuIHM7XG59O1xudmFyIHBvdyA9IGZ1bmN0aW9uICh4LCBuLCBhY2MpIHtcbiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpO1xufTtcbnZhciBsb2cgPSBmdW5jdGlvbiAoeCkge1xuICB2YXIgbiA9IDA7XG4gIHZhciB4MiA9IHg7XG4gIHdoaWxlICh4MiA+PSA0MDk2KSB7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlICh4MiA+PSAyKSB7XG4gICAgbiArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmIChcbiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gIDAuOS50b0ZpeGVkKDApICE9PSAnMScgfHxcbiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XG4gIDEwMDAwMDAwMDAwMDAwMDAxMjguMC50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcbikgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9GaXhlZC5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciB4ID0gYU51bWJlclZhbHVlKHRoaXMsIEVSUk9SKTtcbiAgICB2YXIgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cyk7XG4gICAgdmFyIHMgPSAnJztcbiAgICB2YXIgbSA9IFpFUk87XG4gICAgdmFyIGUsIHosIGosIGs7XG4gICAgaWYgKGYgPCAwIHx8IGYgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcihFUlJPUik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmICh4ICE9IHgpIHJldHVybiAnTmFOJztcbiAgICBpZiAoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpIHJldHVybiBTdHJpbmcoeCk7XG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZiAoeCA+IDFlLTIxKSB7XG4gICAgICBlID0gbG9nKHggKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8geCAqIHBvdygyLCAtZSwgMSkgOiB4IC8gcG93KDIsIGUsIDEpO1xuICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwO1xuICAgICAgZSA9IDUyIC0gZTtcbiAgICAgIGlmIChlID4gMCkge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgaiA9IGY7XG4gICAgICAgIHdoaWxlIChqID49IDcpIHtcbiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgIGogLT0gNztcbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgaiA9IGUgLSAxO1xuICAgICAgICB3aGlsZSAoaiA+PSAyMykge1xuICAgICAgICAgIGRpdmlkZSgxIDw8IDIzKTtcbiAgICAgICAgICBqIC09IDIzO1xuICAgICAgICB9XG4gICAgICAgIGRpdmlkZSgxIDw8IGopO1xuICAgICAgICBtdWx0aXBseSgxLCAxKTtcbiAgICAgICAgZGl2aWRlKDIpO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBtdWx0aXBseSgxIDw8IC1lLCAwKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCkgKyByZXBlYXQuY2FsbChaRVJPLCBmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGYgPiAwKSB7XG4gICAgICBrID0gbS5sZW5ndGg7XG4gICAgICBtID0gcyArIChrIDw9IGYgPyAnMC4nICsgcmVwZWF0LmNhbGwoWkVSTywgZiAtIGspICsgbSA6IG0uc2xpY2UoMCwgayAtIGYpICsgJy4nICsgbS5zbGljZShrIC0gZikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gcyArIG07XG4gICAgfSByZXR1cm4gbTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciAkdG9QcmVjaXNpb24gPSAxLjAudG9QcmVjaXNpb247XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpIH0pO1xuIiwiLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgX2lzRmluaXRlID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgaXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJykgfSk7XG4iLCIvLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjUgTnVtYmVyLmlzU2FmZUludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc0ludGVnZXIgPSByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xuICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFmZmZmZmZmZmZmZmZmO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi42IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsIi8vIDIwLjEuMi4xMCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1JTl9TQUZFX0lOVEVHRVI6IC0weDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCAnTnVtYmVyJywgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsIi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbG9nMXAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJyk7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XG4pLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhc2luaCA9IE1hdGguYXNpbmg7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHsgYXNpbmg6IGFzaW5oIH0pO1xuIiwiLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXRhbmggPSBNYXRoLmF0YW5oO1xuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KSB7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMiBNYXRoLmNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCRleHBtMSAhPSBNYXRoLmV4cG0xKSwgJ01hdGgnLCB7IGV4cG0xOiAkZXhwbTEgfSk7XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgZnJvdW5kOiByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpIH0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIEVQU0lMT04gPSBwb3coMiwgLTUyKTtcbnZhciBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKTtcbnZhciBNQVgzMiA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpO1xudmFyIE1JTjMyID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmZyb3VuZCB8fCBmdW5jdGlvbiBmcm91bmQoeCkge1xuICB2YXIgJGFicyA9IE1hdGguYWJzKHgpO1xuICB2YXIgJHNpZ24gPSBzaWduKHgpO1xuICB2YXIgYSwgcmVzdWx0O1xuICBpZiAoJGFicyA8IE1JTjMyKSByZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7XG4gIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xufTtcbiIsIi8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGxhcmcgPSAwO1xuICAgIHZhciBhcmcsIGRpdjtcbiAgICB3aGlsZSAoaSA8IGFMZW4pIHtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZiAobGFyZyA8IGFyZykge1xuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogTWF0aC5zcXJ0KHN1bSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW11bCA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpICogTWF0aC5MT0cxMEU7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgbG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKSB9KTtcbiIsIi8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduOiByZXF1aXJlKCcuL19tYXRoLXNpZ24nKSB9KTtcbiIsIi8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KSwgJ01hdGgnLCB7XG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zNCBNYXRoLnRydW5jKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChhTGVuID4gaSkge1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmICh0b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKSB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuNCBTdHJpbmcucmF3KGNhbGxTaXRlLCAuLi5zdWJzdGl0dXRpb25zKVxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSkge1xuICAgIHZhciB0cGwgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodHBsLmxlbmd0aCk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxlbiA+IGkpIHtcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xuICAgICAgaWYgKGkgPCBhTGVuKSByZXMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbScsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKShmYWxzZSk7XG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpXG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIEVORFNfV0lUSCA9ICdlbmRzV2l0aCc7XG52YXIgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShFTkRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgRU5EU19XSVRIKTtcbiAgICB2YXIgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpO1xuICAgIHZhciBlbmQgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogTWF0aC5taW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJGVuZHNXaXRoXG4gICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG59KTtcbiIsIi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCc7XG52YXIgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2FuY2hvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdiaWcnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmlnKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy40IFN0cmluZy5wcm90b3R5cGUuYmxpbmsoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmxpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNSBTdHJpbmcucHJvdG90eXBlLmJvbGQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYm9sZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBib2xkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzbWFsbCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMiBTdHJpbmcucHJvdG90eXBlLnN0cmlrZSgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdHJpa2UnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3RyaWtlKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xNCBTdHJpbmcucHJvdG90eXBlLnN1cCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdXAnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3VwKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuL19kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xudmFyICR0b0lTT1N0cmluZyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG52YXIgbHogPSBmdW5jdGlvbiAobnVtKSB7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG5tb2R1bGUuZXhwb3J0cyA9IChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZSgtNWUxMyAtIDEpKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKE5hTikpO1xufSkpID8gZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XG4gIGlmICghaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSkgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIHZhciBkID0gdGhpcztcbiAgdmFyIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgdmFyIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7XG4gIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICtcbiAgICAnLScgKyBseihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGx6KGQuZ2V0VVRDRGF0ZSgpKSArXG4gICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArXG4gICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7XG59IDogJHRvSVNPU3RyaW5nO1xuIiwidmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpO1xudmFyIHByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmICghKFRPX1BSSU1JVElWRSBpbiBwcm90bykpIHJlcXVpcmUoJy4vX2hpZGUnKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKCcuL19kYXRlLXRvLXByaW1pdGl2ZScpKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgTlVNQkVSID0gJ251bWJlcic7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhpbnQpIHtcbiAgaWYgKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7XG59O1xuIiwiLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7IGlzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5JykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7XG4gICAgd2hpbGUgKGFMZW4gPiBpbmRleCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAocmVxdWlyZSgnLi9faW9iamVjdCcpICE9IE9iamVjdCB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBpZiAoaHRtbCkgYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JykgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xuICAgIHZhciBzaXplID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KTtcbiAgICB2YXIgY2xvbmVkID0gbmV3IEFycmF5KHNpemUpO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHNpemU7IGkrKykgY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG52YXIgdGVzdCA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIFNUUklDVCA9IHJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbCkpIHtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5tYXAsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJvdG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlUmlnaHQsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyICRuYXRpdmUgPSBbXS5pbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgJG5hdGl2ZSA9IFtdLmxhc3RJbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IEBbKi0xXSAqLykge1xuICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICBpZiAoTkVHQVRJVkVfWkVSTykgcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICAgIHZhciBPID0gdG9JT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTtcbiAgICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgIGZvciAoO2luZGV4ID49IDA7IGluZGV4LS0pIGlmIChpbmRleCBpbiBPKSBpZiAoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHJldHVybiBpbmRleCB8fCAwO1xuICAgIHJldHVybiAtMTtcbiAgfVxufSk7XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZpbGwnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSk7XG52YXIgS0VZID0gJ2ZpbmQnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNik7XG52YXIgS0VZID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCJyZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdBcnJheScpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBCYXNlID0gJFJlZ0V4cDtcbnZhciBwcm90byA9ICRSZWdFeHAucHJvdG90eXBlO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcbi8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZVxudmFyIENPUlJFQ1RfTkVXID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKSB7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZikge1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHA7XG4gICAgdmFyIHBpUkUgPSBpc1JlZ0V4cChwKTtcbiAgICB2YXIgZmlVID0gZiA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcFxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZilcbiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZilcbiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgQmFzZVtrZXldID0gaXQ7IH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7KSBwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmZsYWdzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IC8uL1tUT19TVFJJTkddO1xuXG52YXIgZGVmaW5lID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZiAocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSkpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJyxcbiAgICAgICdmbGFncycgaW4gUiA/IFIuZmxhZ3MgOiAhREVTQ1JJUFRPUlMgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCA/ICRmbGFncy5jYWxsKFIpIDogdW5kZWZpbmVkKTtcbiAgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxufSBlbHNlIGlmICgkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5tYXRjaFxuICAgIGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAbWF0Y2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRtYXRjaCwgcmVnZXhwLCB0aGlzKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmICghcnguZ2xvYmFsKSByZXR1cm4gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB2YXIgbiA9IDA7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgd2hpbGUgKChyZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKSkgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIEFbbl0gPSBtYXRjaFN0cjtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgICAgbisrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG4gPT09IDAgPyBudWxsIDogQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmYCddfFxcZFxcZD98PFtePl0qPikvZztcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmYCddfFxcZFxcZD8pL2c7XG5cbnZhciBtYXliZVRvU3RyaW5nID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcblxuLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAcmVwbGFjZVxuICAgIGZ1bmN0aW9uIChyZWdleHAsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkcmVwbGFjZSwgcmVnZXhwLCB0aGlzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG4gICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgaWYgKGdsb2JhbCkge1xuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlcihyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xuICAgICAgICB2YXIgY2FwdHVyZXMgPSBbXTtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxuICAgICAgICAvLyB0aGUgc2xpY2UgcG9seWZpbGwgd2hlbiBzbGljaW5nIG5hdGl2ZSBhcnJheXMpIFwiZG9lc24ndCB3b3JrXCIgaW4gc2FmYXJpIDkgYW5kXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBjYXB0dXJlcy5wdXNoKG1heWJlVG9TdHJpbmcocmVzdWx0W2pdKSk7XG4gICAgICAgIHZhciBuYW1lZENhcHR1cmVzID0gcmVzdWx0Lmdyb3VwcztcbiAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyQXJncyA9IFttYXRjaGVkXS5jb25jYXQoY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSByZXBsYWNlckFyZ3MucHVzaChuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBTdHJpbmcocmVwbGFjZVZhbHVlLmFwcGx5KHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbiwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24pO1xuICAgIH1cbiAgXTtcblxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxuICBmdW5jdGlvbiBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gICAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICAgIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICAgIH1cbiAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgICAgdmFyIGNhcHR1cmU7XG4gICAgICBzd2l0Y2ggKGNoLmNoYXJBdCgwKSkge1xuICAgICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgICBjYXNlICdgJzogcmV0dXJuIHN0ci5zbGljZSgwLCBwb3NpdGlvbik7XG4gICAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHIuc2xpY2UodGFpbFBvcyk7XG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW2NoLnNsaWNlKDEsIC0xKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgICB2YXIgbiA9ICtjaDtcbiAgICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgICAgdmFyIGYgPSBmbG9vcihuIC8gMTApO1xuICAgICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoLmNoYXJBdCgxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoLmNoYXJBdCgxKTtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBzYW1lVmFsdWUgPSByZXF1aXJlKCcuL19zYW1lLXZhbHVlJyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBTRUFSQ0gsICRzZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNlYXJjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zZWFyY2hcbiAgICBmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzZWFyY2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRzZWFyY2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgcHJldmlvdXNMYXN0SW5kZXggPSByeC5sYXN0SW5kZXg7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShwcmV2aW91c0xhc3RJbmRleCwgMCkpIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShyeC5sYXN0SW5kZXgsIHByZXZpb3VzTGFzdEluZGV4KSkgcngubGFzdEluZGV4ID0gcHJldmlvdXNMYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSBudWxsID8gLTEgOiByZXN1bHQuaW5kZXg7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRtaW4gPSBNYXRoLm1pbjtcbnZhciAkcHVzaCA9IFtdLnB1c2g7XG52YXIgJFNQTElUID0gJ3NwbGl0JztcbnZhciBMRU5HVEggPSAnbGVuZ3RoJztcbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG52YXIgTUFYX1VJTlQzMiA9IDB4ZmZmZmZmZmY7XG5cbi8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgneCcsICd5JykgLT4gL3gveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgU1VQUE9SVFNfWSA9ICFmYWlscyhmdW5jdGlvbiAoKSB7IFJlZ0V4cChNQVhfVUlOVDMyLCAneScpOyB9KTtcblxuLy8gQEBzcGxpdCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBTUExJVCwgJHNwbGl0LCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIGludGVybmFsU3BsaXQ7XG4gIGlmIChcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKSB7XG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKSByZXR1cm4gW107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSByZXR1cm4gJHNwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgd2hpbGUgKG1hdGNoID0gcmVnZXhwRXhlYy5jYWxsKHNlcGFyYXRvckNvcHksIHN0cmluZykpIHtcbiAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXTtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICBpZiAobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkgJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogJHNwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gJHNwbGl0O1xuICB9XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zcGxpdFxuICAgIGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBzcGxpdHRlciA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgICAgcmV0dXJuIHNwbGl0dGVyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBzcGxpdHRlci5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpXG4gICAgICAgIDogaW50ZXJuYWxTcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNwbGl0XG4gICAgLy9cbiAgICAvLyBOT1RFOiBUaGlzIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0XG4gICAgLy8gdGhlICd5JyBmbGFnLlxuICAgIGZ1bmN0aW9uIChyZWdleHAsIGxpbWl0KSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKGludGVybmFsU3BsaXQsIHJlZ2V4cCwgdGhpcywgbGltaXQsIGludGVybmFsU3BsaXQgIT09ICRzcGxpdCk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHJ4LCBSZWdFeHApO1xuXG4gICAgICB2YXIgdW5pY29kZU1hdGNoaW5nID0gcngudW5pY29kZTtcbiAgICAgIHZhciBmbGFncyA9IChyeC5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4LnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKFNVUFBPUlRTX1kgPyAneScgOiAnZycpO1xuXG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgUyBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgdmFyIHNwbGl0dGVyID0gbmV3IEMoU1VQUE9SVFNfWSA/IHJ4IDogJ14oPzonICsgcnguc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChTLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTKSA9PT0gbnVsbCA/IFtTXSA6IFtdO1xuICAgICAgdmFyIHAgPSAwO1xuICAgICAgdmFyIHEgPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHdoaWxlIChxIDwgUy5sZW5ndGgpIHtcbiAgICAgICAgc3BsaXR0ZXIubGFzdEluZGV4ID0gU1VQUE9SVFNfWSA/IHEgOiAwO1xuICAgICAgICB2YXIgeiA9IGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTVVBQT1JUU19ZID8gUyA6IFMuc2xpY2UocSkpO1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHogPT09IG51bGwgfHxcbiAgICAgICAgICAoZSA9ICRtaW4odG9MZW5ndGgoc3BsaXR0ZXIubGFzdEluZGV4ICsgKFNVUFBPUlRTX1kgPyAwIDogcSkpLCBTLmxlbmd0aCkpID09PSBwXG4gICAgICAgICkge1xuICAgICAgICAgIHEgPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgcSwgdW5pY29kZU1hdGNoaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBBLnB1c2goUy5zbGljZShwLCBxKSk7XG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHoubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBBLnB1c2goeltpXSk7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHEgPSBwID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgQS5wdXNoKFMuc2xpY2UocCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyBTYWZhcmkgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIgJiYgIShnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBNQVAgPSAnTWFwJztcblxuLy8gMjMuMSBNYXAgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoTUFQLCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgTUFQKSwga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0VUID0gJ1NldCc7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFNFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgU0VUKSwgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBJU19JRTExID0gIWdsb2JhbC5BY3RpdmVYT2JqZWN0ICYmICdBY3RpdmVYT2JqZWN0JyBpbiBnbG9iYWw7XG52YXIgV0VBS19NQVAgPSAnV2Vha01hcCc7XG52YXIgZ2V0V2VhayA9IG1ldGEuZ2V0V2VhaztcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmU7XG52YXIgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgV0VBS19NQVApKS5nZXQoa2V5KTtcbiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSwga2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX01BUCwgd3JhcHBlciwgbWV0aG9kcywgd2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbmlmIChOQVRJVkVfV0VBS19NQVAgJiYgSVNfSUUxMSkge1xuICBJbnRlcm5hbE1hcCA9IHdlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgV0VBS19NQVApO1xuICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgZWFjaChbJ2RlbGV0ZScsICdoYXMnLCAnZ2V0JywgJ3NldCddLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHByb3RvID0gJFdlYWtNYXAucHJvdG90eXBlO1xuICAgIHZhciBtZXRob2QgPSBwcm90b1trZXldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBrZXksIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW1cbiAgICAgIGlmIChpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKSB7XG4gICAgICAgIGlmICghdGhpcy5fZikgdGhpcy5fZiA9IG5ldyBJbnRlcm5hbE1hcCgpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpO1xuICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBXRUFLX1NFVCA9ICdXZWFrU2V0JztcblxuLy8gMjMuNCBXZWFrU2V0IE9iamVjdHNcbnJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX1NFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha1NldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjQuMy4xIFdlYWtTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19TRVQpLCB2YWx1ZSwgdHJ1ZSk7XG4gIH1cbn0sIHdlYWssIGZhbHNlLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbnZhciBidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIEFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuQXJyYXlCdWZmZXI7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyICRBcnJheUJ1ZmZlciA9IGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbnZhciAkRGF0YVZpZXcgPSBidWZmZXIuRGF0YVZpZXc7XG52YXIgJGlzVmlldyA9ICR0eXBlZC5BQlYgJiYgQXJyYXlCdWZmZXIuaXNWaWV3O1xudmFyICRzbGljZSA9ICRBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2U7XG52YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEFycmF5QnVmZmVyICE9PSAkQXJyYXlCdWZmZXIpLCB7IEFycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXIgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISR0eXBlZC5DT05TVFIsIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKVxuICBpc1ZpZXc6IGZ1bmN0aW9uIGlzVmlldyhpdCkge1xuICAgIHJldHVybiAkaXNWaWV3ICYmICRpc1ZpZXcoaXQpIHx8IGlzT2JqZWN0KGl0KSAmJiBWSUVXIGluIGl0O1xuICB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlUgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFuZXcgJEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsIHVuZGVmaW5lZCkuYnl0ZUxlbmd0aDtcbn0pLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS40LjMgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgaWYgKCRzbGljZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJHNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4XG4gICAgdmFyIGxlbiA9IGFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGg7XG4gICAgdmFyIGZpcnN0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQsIGxlbik7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbiAtIGZpcnN0KSk7XG4gICAgdmFyIHZpZXdTID0gbmV3ICREYXRhVmlldyh0aGlzKTtcbiAgICB2YXIgdmlld1QgPSBuZXcgJERhdGFWaWV3KHJlc3VsdCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZmlyc3QgPCBmaW4pIHtcbiAgICAgIHZpZXdULnNldFVpbnQ4KGluZGV4KyssIHZpZXdTLmdldFVpbnQ4KGZpcnN0KyspKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKEFSUkFZX0JVRkZFUik7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fdHlwZWQnKS5BQlYsIHtcbiAgRGF0YVZpZXc6IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpLkRhdGFWaWV3XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDY0QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwiLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHJBcHBseSA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5hcHBseTtcbnZhciBmQXBwbHkgPSBGdW5jdGlvbi5hcHBseTtcbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJBcHBseShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpIHtcbiAgICB2YXIgVCA9IGFGdW5jdGlvbih0YXJnZXQpO1xuICAgIHZhciBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjIgUmVmbGVjdC5jb25zdHJ1Y3QodGFyZ2V0LCBhcmd1bWVudHNMaXN0IFssIG5ld1RhcmdldF0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9fYmluZCcpO1xudmFyIHJDb25zdHJ1Y3QgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuY29uc3RydWN0O1xuXG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShyQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRyksICdSZWZsZWN0Jywge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwgMSwgeyB2YWx1ZTogMSB9KSwgMSwgeyB2YWx1ZTogMiB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUocHJvcGVydHlLZXksIHRydWUpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkUC5mKHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjYuMS41IFJlZmxlY3QuZW51bWVyYXRlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBFbnVtZXJhdGUgPSBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IGFuT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdmFyIGtleXMgPSB0aGlzLl9rID0gW107ICAgICAgLy8ga2V5c1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBpdGVyYXRlZCkga2V5cy5wdXNoKGtleSk7XG59O1xucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKShFbnVtZXJhdGUsICdPYmplY3QnLCBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGtleXMgPSB0aGF0Ll9rO1xuICB2YXIga2V5O1xuICBkbyB7XG4gICAgaWYgKHRoYXQuX2kgPj0ga2V5cy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfSB3aGlsZSAoISgoa2V5ID0ga2V5c1t0aGF0Ll9pKytdKSBpbiB0aGF0Ll90KSk7XG4gIHJldHVybiB7IHZhbHVlOiBrZXksIGRvbmU6IGZhbHNlIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBlbnVtZXJhdGU6IGZ1bmN0aW9uIGVudW1lcmF0ZSh0YXJnZXQpIHtcbiAgICByZXR1cm4gbmV3IEVudW1lcmF0ZSh0YXJnZXQpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuNiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5S2V5IFssIHJlY2VpdmVyXSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdO1xuICB2YXIgZGVzYywgcHJvdG87XG4gIGlmIChhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcikgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGlmIChkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKSByZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgPyBkZXNjLnZhbHVlXG4gICAgOiBkZXNjLmdldCAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgZ2V0OiBnZXQgfSk7XG4iLCIvLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS44IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnZXRQcm90byA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpIHtcbiAgICByZXR1cm4gZ2V0UHJvdG8oYW5PYmplY3QodGFyZ2V0KSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS45IFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKSB9KTtcbiIsIi8vIDI2LjEuMTIgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJHByZXZlbnRFeHRlbnNpb25zID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHByZXZlbnRFeHRlbnNpb25zOiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHRyeSB7XG4gICAgICBpZiAoJHByZXZlbnRFeHRlbnNpb25zKSAkcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMyBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIFssIHJlY2VpdmVyXSlcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXTtcbiAgdmFyIG93bkRlc2MgPSBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB2YXIgZXhpc3RpbmdEZXNjcmlwdG9yLCBwcm90bztcbiAgaWYgKCFvd25EZXNjKSB7XG4gICAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHtcbiAgICAgIHJldHVybiBzZXQocHJvdG8sIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7XG4gICAgfVxuICAgIG93bkRlc2MgPSBjcmVhdGVEZXNjKDApO1xuICB9XG4gIGlmIChoYXMob3duRGVzYywgJ3ZhbHVlJykpIHtcbiAgICBpZiAob3duRGVzYy53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0KHJlY2VpdmVyKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IgPSBnT1BELmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSkge1xuICAgICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvci5nZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLnNldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgICAgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgfSBlbHNlIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBjcmVhdGVEZXNjKDAsIFYpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBzZXQ6IHNldCB9KTtcbiIsIi8vIDI2LjEuMTQgUmVmbGVjdC5zZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzZXRQcm90byA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpO1xuXG5pZiAoc2V0UHJvdG8pICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pIHtcbiAgICBzZXRQcm90by5jaGVjayh0YXJnZXQsIHByb3RvKTtcbiAgICB0cnkge1xuICAgICAgc2V0UHJvdG8uc2V0KHRhcmdldCwgcHJvdG8pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuaW5jbHVkZXM7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLkFycmF5LmZsYXRNYXA7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdE1hcFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi9fZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuLCBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0TWFwJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1GbGF0dGVuSW50b0FycmF5XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuXG5mdW5jdGlvbiBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgsIG1hcHBlciwgdGhpc0FyZykge1xuICB2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcbiAgdmFyIHNvdXJjZUluZGV4ID0gMDtcbiAgdmFyIG1hcEZuID0gbWFwcGVyID8gY3R4KG1hcHBlciwgdGhpc0FyZywgMykgOiBmYWxzZTtcbiAgdmFyIGVsZW1lbnQsIHNwcmVhZGFibGU7XG5cbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4IGluIHNvdXJjZSkge1xuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XG5cbiAgICAgIHNwcmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmIChpc09iamVjdChlbGVtZW50KSkge1xuICAgICAgICBzcHJlYWRhYmxlID0gZWxlbWVudFtJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gICAgICAgIHNwcmVhZGFibGUgPSBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3ByZWFkYWJsZSAmJiBkZXB0aCA+IDApIHtcbiAgICAgICAgdGFyZ2V0SW5kZXggPSBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIGVsZW1lbnQsIHRvTGVuZ3RoKGVsZW1lbnQubGVuZ3RoKSwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSkgLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRhcmdldEluZGV4ID49IDB4MWZmZmZmZmZmZmZmZmYpIHRocm93IFR5cGVFcnJvcigpO1xuICAgICAgICB0YXJnZXRbdGFyZ2V0SW5kZXhdID0gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0SW5kZXgrKztcbiAgICB9XG4gICAgc291cmNlSW5kZXgrKztcbiAgfVxuICByZXR1cm4gdGFyZ2V0SW5kZXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkludG9BcnJheTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy5wYWRTdGFydDtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgV0VCS0lUX0JVRyA9IC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyggTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIFdFQktJVF9CVUcsICdTdHJpbmcnLCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy5wYWRFbmQ7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBXRUJLSVRfQlVHLCAnU3RyaW5nJywge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy50cmltTGVmdDtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1MZWZ0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltTGVmdCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMSk7XG4gIH07XG59LCAndHJpbVN0YXJ0Jyk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnRyaW1SaWdodDtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCcpLmYoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4vX293bi1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldERlc2MgPSBnT1BELmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleSwgZGVzYztcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpKSB7XG4gICAgICBkZXNjID0gZ2V0RGVzYyhPLCBrZXkgPSBrZXlzW2krK10pO1xuICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2MpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC52YWx1ZXM7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHZhbHVlcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuZW50cmllcztcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5Qcm9taXNlWydmaW5hbGx5J107XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG4iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKTtcbiIsIi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHNsaWNlID0gW10uc2xpY2U7XG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZm4sIHRpbWUgLyogLCAuLi5hcmdzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogZmFsc2U7XG4gICAgcmV0dXJuIHNldChib3VuZEFyZ3MgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IDogZm4sIHRpbWUpO1xuICB9O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAkdGFzay5zZXQsXG4gIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhclxufSk7XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuIiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczcuZ2xvYmFsJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKS5nbG9iYWw7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IGdsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJykgfSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgSVNfV1JBUCA9IHR5cGUgJiAkZXhwb3J0Llc7XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXTtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBrZXksIG93biwgb3V0O1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChvd24gJiYgaGFzKGV4cG9ydHMsIGtleSkpIGNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24gKEMpIHtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBDKSB7XG4gICAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQygpO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZiAoSVNfUFJPVE8pIHtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZiAodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSkgaGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOC42XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgaz1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLHk9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsej1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxhYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOlxuNjAxMTUsYmE9bj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixBPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBjYShhLGIsZCxjLGUsZyxoLGYpe2lmKCFhKXthPXZvaWQgMDtpZih2b2lkIDA9PT1iKWE9RXJyb3IoXCJNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtlbHNle3ZhciBsPVtkLGMsZSxnLGgsZl0sbT0wO2E9RXJyb3IoYi5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGxbbSsrXX0pKTthLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCJ9YS5mcmFtZXNUb1BvcD0xO3Rocm93IGE7fX1cbmZ1bmN0aW9uIEIoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxkPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTA7YzxiO2MrKylkKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjKzFdKTtjYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGQpfXZhciBDPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxEPXt9O1xuZnVuY3Rpb24gRShhLGIsZCl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1kfHxDfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307RS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hP0IoXCI4NVwiKTp2b2lkIDA7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZHx8Q312YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RztrKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9e2N1cnJlbnQ6bnVsbH0sSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZCl7dmFyIGM9dm9pZCAwLGU9e30sZz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZVtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1kO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGw9QXJyYXkoZiksbT0wO208ZjttKyspbFttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWx9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWVbY10mJihlW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6aCxwcm9wczplLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gZGEoYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE4oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTz0vXFwvKy9nLFA9W107ZnVuY3Rpb24gUShhLGIsZCxjKXtpZihQLmxlbmd0aCl7dmFyIGU9UC5wb3AoKTtlLnJlc3VsdD1hO2Uua2V5UHJlZml4PWI7ZS5mdW5jPWQ7ZS5jb250ZXh0PWM7ZS5jb3VudD0wO3JldHVybiBlfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmQsY29udGV4dDpjLGNvdW50OjB9fVxuZnVuY3Rpb24gUihhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlAubGVuZ3RoJiZQLnB1c2goYSl9XG5mdW5jdGlvbiBTKGEsYixkLGMpe3ZhciBlPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1lfHxcImJvb2xlYW5cIj09PWUpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBkKGMsYSxcIlwiPT09Yj9cIi5cIitUKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBoPTA7aDxhLmxlbmd0aDtoKyspe2U9YVtoXTt2YXIgZj1iK1QoZSxoKTtnKz1TKGUsZixkLGMpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9QSYmYVtBXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxoPVxuMDshKGU9YS5uZXh0KCkpLmRvbmU7KWU9ZS52YWx1ZSxmPWIrVChlLGgrKyksZys9UyhlLGYsZCxjKTtlbHNlXCJvYmplY3RcIj09PWUmJihkPVwiXCIrYSxCKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09ZD9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpkLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBVKGEsYixkKXtyZXR1cm4gbnVsbD09YT8wOlMoYSxcIlwiLGIsZCl9ZnVuY3Rpb24gVChhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gZWEoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gZmEoYSxiLGQpe3ZhciBjPWEucmVzdWx0LGU9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/VihhLGMsZCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pOm51bGwhPWEmJihOKGEpJiYoYT1kYShhLGUrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpK2QpKSxjLnB1c2goYSkpfWZ1bmN0aW9uIFYoYSxiLGQsYyxlKXt2YXIgZz1cIlwiO251bGwhPWQmJihnPShcIlwiK2QpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIik7Yj1RKGIsZyxjLGUpO1UoYSxmYSxiKTtSKGIpfWZ1bmN0aW9uIFcoKXt2YXIgYT1JLmN1cnJlbnQ7bnVsbD09PWE/QihcIjMyMVwiKTp2b2lkIDA7cmV0dXJuIGF9XG52YXIgWD17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZCl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtWKGEsYyxudWxsLGIsZCk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1RKG51bGwsbnVsbCxiLGQpO1UoYSxlYSxiKTtSKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVShhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1YoYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtOKGEpP3ZvaWQgMDpCKFwiMTQzXCIpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpFLFB1cmVDb21wb25lbnQ6RyxjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6Yixcbl9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LHJlbmRlcjphfX0sbGF6eTpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6YmEsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19LG1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6YWEsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fSx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ2FsbGJhY2soYSxiKX0sdXNlQ29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ29udGV4dChhLGIpfSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUVmZmVjdChhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsXG5iLGQpe3JldHVybiBXKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZCl9LHVzZURlYnVnVmFsdWU6ZnVuY3Rpb24oKXt9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZU1lbW8oYSxiKX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsZCl7cmV0dXJuIFcoKS51c2VSZWR1Y2VyKGEsYixkKX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3JldHVybiBXKCkudXNlUmVmKGEpfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVN0YXRlKGEpfSxGcmFnbWVudDpyLFN0cmljdE1vZGU6dCxTdXNwZW5zZTp6LGNyZWF0ZUVsZW1lbnQ6TSxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGQpe251bGw9PT1hfHx2b2lkIDA9PT1hP0IoXCIyNjdcIixhKTp2b2lkIDA7dmFyIGM9dm9pZCAwLGU9ayh7fSxhLnByb3BzKSxnPWEua2V5LGg9YS5yZWYsZj1hLl9vd25lcjtpZihudWxsIT1cbmIpe3ZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZixmPUouY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpO3ZhciBsPXZvaWQgMDthLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMmJihsPWEudHlwZS5kZWZhdWx0UHJvcHMpO2ZvcihjIGluIGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZVtjXT12b2lkIDA9PT1iW2NdJiZ2b2lkIDAhPT1sP2xbY106YltjXSl9Yz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWMpZS5jaGlsZHJlbj1kO2Vsc2UgaWYoMTxjKXtsPUFycmF5KGMpO2Zvcih2YXIgbT0wO208YzttKyspbFttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWx9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmcscmVmOmgscHJvcHM6ZSxfb3duZXI6Zn19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50Ok4sdmVyc2lvbjpcIjE2LjguNlwiLFxudW5zdGFibGVfQ29uY3VycmVudE1vZGU6eCx1bnN0YWJsZV9Qcm9maWxlcjp1LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnREaXNwYXRjaGVyOkksUmVhY3RDdXJyZW50T3duZXI6Sixhc3NpZ246a319LFk9e2RlZmF1bHQ6WH0sWj1ZJiZYfHxZO21vZHVsZS5leHBvcnRzPVouZGVmYXVsdHx8WjtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOC42XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIGJhKGEsYixjLGQsZSxmLGcsaCl7aWYoIWEpe2E9dm9pZCAwO2lmKHZvaWQgMD09PWIpYT1FcnJvcihcIk1pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2Vsc2V7dmFyIGw9W2MsZCxlLGYsZyxoXSxrPTA7YT1FcnJvcihiLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4gbFtrKytdfSkpO2EubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIn1hLmZyYW1lc1RvUG9wPTE7dGhyb3cgYTt9fVxuZnVuY3Rpb24geChhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGM9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGQ9MDtkPGI7ZCsrKWMrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2JhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsYyl9YWE/dm9pZCAwOngoXCIyMjdcIik7ZnVuY3Rpb24gY2EoYSxiLGMsZCxlLGYsZyxoLGwpe3ZhciBrPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGspfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19XG52YXIgZGE9ITEsZWE9bnVsbCxmYT0hMSxoYT1udWxsLGlhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2RhPSEwO2VhPWF9fTtmdW5jdGlvbiBqYShhLGIsYyxkLGUsZixnLGgsbCl7ZGE9ITE7ZWE9bnVsbDtjYS5hcHBseShpYSxhcmd1bWVudHMpfWZ1bmN0aW9uIGthKGEsYixjLGQsZSxmLGcsaCxsKXtqYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoZGEpe2lmKGRhKXt2YXIgaz1lYTtkYT0hMTtlYT1udWxsfWVsc2UgeChcIjE5OFwiKSxrPXZvaWQgMDtmYXx8KGZhPSEwLGhhPWspfX12YXIgbGE9bnVsbCxtYT17fTtcbmZ1bmN0aW9uIG5hKCl7aWYobGEpZm9yKHZhciBhIGluIG1hKXt2YXIgYj1tYVthXSxjPWxhLmluZGV4T2YoYSk7LTE8Yz92b2lkIDA6eChcIjk2XCIsYSk7aWYoIW9hW2NdKXtiLmV4dHJhY3RFdmVudHM/dm9pZCAwOngoXCI5N1wiLGEpO29hW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7cGEuaGFzT3duUHJvcGVydHkoaCk/eChcIjk5XCIsaCk6dm9pZCAwO3BhW2hdPWY7dmFyIGw9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihsKXtmb3IoZSBpbiBsKWwuaGFzT3duUHJvcGVydHkoZSkmJnFhKGxbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyhxYShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2U/dm9pZCAwOngoXCI5OFwiLGQsYSl9fX19XG5mdW5jdGlvbiBxYShhLGIsYyl7cmFbYV0/eChcIjEwMFwiLGEpOnZvaWQgMDtyYVthXT1iO3NhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIG9hPVtdLHBhPXt9LHJhPXt9LHNhPXt9LHRhPW51bGwsdWE9bnVsbCx2YT1udWxsO2Z1bmN0aW9uIHdhKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD12YShjKTtrYShkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfWZ1bmN0aW9uIHhhKGEsYil7bnVsbD09Yj94KFwiMzBcIik6dm9pZCAwO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1cbmZ1bmN0aW9uIHlhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciB6YT1udWxsO2Z1bmN0aW9uIEFhKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKyl3YShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZ3YShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19XG52YXIgQmE9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6ZnVuY3Rpb24oYSl7bGE/eChcIjEwMVwiKTp2b2lkIDA7bGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7bmEoKX0saW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOmZ1bmN0aW9uKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO21hLmhhc093blByb3BlcnR5KGMpJiZtYVtjXT09PWR8fChtYVtjXT94KFwiMTAyXCIsYyk6dm9pZCAwLG1hW2NdPWQsYj0hMCl9YiYmbmEoKX19O1xuZnVuY3Rpb24gQ2EoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD10YShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz94KFwiMjMxXCIsYix0eXBlb2YgYyk6dm9pZCAwO1xucmV0dXJuIGN9ZnVuY3Rpb24gRGEoYSl7bnVsbCE9PWEmJih6YT14YSh6YSxhKSk7YT16YTt6YT1udWxsO2lmKGEmJih5YShhLEFhKSx6YT94KFwiOTVcIik6dm9pZCAwLGZhKSl0aHJvdyBhPWhhLGZhPSExLGhhPW51bGwsYTt9dmFyIEVhPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLEZhPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrRWEsR2E9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitFYTtmdW5jdGlvbiBIYShhKXtpZihhW0ZhXSlyZXR1cm4gYVtGYV07Zm9yKDshYVtGYV07KWlmKGEucGFyZW50Tm9kZSlhPWEucGFyZW50Tm9kZTtlbHNlIHJldHVybiBudWxsO2E9YVtGYV07cmV0dXJuIDU9PT1hLnRhZ3x8Nj09PWEudGFnP2E6bnVsbH1mdW5jdGlvbiBJYShhKXthPWFbRmFdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZz9udWxsOmF9XG5mdW5jdGlvbiBKYShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7eChcIjMzXCIpfWZ1bmN0aW9uIEthKGEpe3JldHVybiBhW0dhXXx8bnVsbH1mdW5jdGlvbiBMYShhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfWZ1bmN0aW9uIE1hKGEsYixjKXtpZihiPUNhKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9XG5mdW5jdGlvbiBOYShhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPUxhKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylNYShjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKU1hKGNbYl0sXCJidWJibGVkXCIsYSl9fWZ1bmN0aW9uIE9hKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPUNhKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz14YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz14YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gUGEoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZPYShhLl90YXJnZXRJbnN0LG51bGwsYSl9XG5mdW5jdGlvbiBRYShhKXt5YShhLE5hKX12YXIgUmE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8IXdpbmRvdy5kb2N1bWVudHx8IXdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtmdW5jdGlvbiBTYShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBUYT17YW5pbWF0aW9uZW5kOlNhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlNhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6U2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6U2EoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxVYT17fSxWYT17fTtcblJhJiYoVmE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgVGEuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgVGEuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgVGEuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgVGEudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBXYShhKXtpZihVYVthXSlyZXR1cm4gVWFbYV07aWYoIVRhW2FdKXJldHVybiBhO3ZhciBiPVRhW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFZhKXJldHVybiBVYVthXT1iW2NdO3JldHVybiBhfVxudmFyIFhhPVdhKFwiYW5pbWF0aW9uZW5kXCIpLFlhPVdhKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLFphPVdhKFwiYW5pbWF0aW9uc3RhcnRcIiksJGE9V2EoXCJ0cmFuc2l0aW9uZW5kXCIpLGFiPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxiYj1udWxsLGNiPW51bGwsZGI9bnVsbDtcbmZ1bmN0aW9uIGViKCl7aWYoZGIpcmV0dXJuIGRiO3ZhciBhLGI9Y2IsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4gYmI/YmIudmFsdWU6YmIudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gZGI9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBmYigpe3JldHVybiEwfWZ1bmN0aW9uIGdiKCl7cmV0dXJuITF9XG5mdW5jdGlvbiB5KGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9mYjpnYjt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWdiO3JldHVybiB0aGlzfVxubih5LnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWZiKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWZiKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PWZifSxpc1BlcnNpc3RlbnQ6Z2IsZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLFxuYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDt0aGlzLm5hdGl2ZUV2ZW50PXRoaXMuX3RhcmdldEluc3Q9dGhpcy5kaXNwYXRjaENvbmZpZz1udWxsO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9Z2I7dGhpcy5fZGlzcGF0Y2hJbnN0YW5jZXM9dGhpcy5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbH19KTt5LkludGVyZmFjZT17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbnkuZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO24oZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPW4oe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7aGIoYyk7cmV0dXJuIGN9O2hiKHkpO2Z1bmN0aW9uIGliKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfWZ1bmN0aW9uIGpiKGEpe2EgaW5zdGFuY2VvZiB0aGlzP3ZvaWQgMDp4KFwiMjc5XCIpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1cbmZ1bmN0aW9uIGhiKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPWliO2EucmVsZWFzZT1qYn12YXIga2I9eS5leHRlbmQoe2RhdGE6bnVsbH0pLGxiPXkuZXh0ZW5kKHtkYXRhOm51bGx9KSxtYj1bOSwxMywyNywzMl0sbmI9UmEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LG9iPW51bGw7UmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKG9iPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgcGI9UmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFvYixxYj1SYSYmKCFuYnx8b2ImJjg8b2ImJjExPj1vYikscmI9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksc2I9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0sdGI9ITE7XG5mdW5jdGlvbiB1YihhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PW1iLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gdmIoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgd2I9ITE7ZnVuY3Rpb24geGIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHZiKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDt0Yj0hMDtyZXR1cm4gcmI7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09cmImJnRiP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIHliKGEsYil7aWYod2IpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IW5iJiZ1YihhLGIpPyhhPWViKCksZGI9Y2I9YmI9bnVsbCx3Yj0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gcWImJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIHpiPXtldmVudFR5cGVzOnNiLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZihuYiliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjplPXNiLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjplPXNiLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6ZT1zYi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2Ugd2I/dWIoYSxjKSYmKGU9c2IuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT1zYi5jb21wb3NpdGlvblN0YXJ0KTtlPyhxYiYmXCJrb1wiIT09Yy5sb2NhbGUmJih3Ynx8ZSE9PXNiLmNvbXBvc2l0aW9uU3RhcnQ/ZT09PXNiLmNvbXBvc2l0aW9uRW5kJiZ3YiYmKGY9ZWIoKSk6KGJiPWQsY2I9XCJ2YWx1ZVwiaW4gYmI/YmIudmFsdWU6YmIudGV4dENvbnRlbnQsd2I9XG4hMCkpLGU9a2IuZ2V0UG9vbGVkKGUsYixjLGQpLGY/ZS5kYXRhPWY6KGY9dmIoYyksbnVsbCE9PWYmJihlLmRhdGE9ZikpLFFhKGUpLGY9ZSk6Zj1udWxsOyhhPXBiP3hiKGEsYyk6eWIoYSxjKSk/KGI9bGIuZ2V0UG9vbGVkKHNiLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxRYShiKSk6Yj1udWxsO3JldHVybiBudWxsPT09Zj9iOm51bGw9PT1iP2Y6W2YsYl19fSxBYj1udWxsLEJiPW51bGwsQ2I9bnVsbDtmdW5jdGlvbiBEYihhKXtpZihhPXVhKGEpKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgQWI/eChcIjI4MFwiKTp2b2lkIDA7dmFyIGI9dGEoYS5zdGF0ZU5vZGUpO0FiKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19ZnVuY3Rpb24gRWIoYSl7QmI/Q2I/Q2IucHVzaChhKTpDYj1bYV06QmI9YX1mdW5jdGlvbiBGYigpe2lmKEJiKXt2YXIgYT1CYixiPUNiO0NiPUJiPW51bGw7RGIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKURiKGJbYV0pfX1cbmZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoYSxiLGMpe3JldHVybiBhKGIsYyl9ZnVuY3Rpb24gSWIoKXt9dmFyIEpiPSExO2Z1bmN0aW9uIEtiKGEsYil7aWYoSmIpcmV0dXJuIGEoYik7SmI9ITA7dHJ5e3JldHVybiBHYihhLGIpfWZpbmFsbHl7aWYoSmI9ITEsbnVsbCE9PUJifHxudWxsIT09Q2IpSWIoKSxGYigpfX12YXIgTGI9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gTWIoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFMYlthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9XG5mdW5jdGlvbiBOYihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9ZnVuY3Rpb24gT2IoYSl7aWYoIVJhKXJldHVybiExO2E9XCJvblwiK2E7dmFyIGI9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifWZ1bmN0aW9uIFBiKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBRYihhKXt2YXIgYj1QYihhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gUmIoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVFiKGEpKX1mdW5jdGlvbiBTYihhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9UGIoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX12YXIgVGI9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7VGIuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyXCIpfHwoVGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcj17Y3VycmVudDpudWxsfSk7XG52YXIgVWI9L14oLiopW1xcXFxcXC9dLyx6PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsVmI9ej9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxXYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsWGI9ej9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsWWI9ej9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsWmI9ej9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsJGI9ej9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksYWM9ej9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxiYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsY2M9ej9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsZGM9ej9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsZWM9ej9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTpcbjYwMTE1LGZjPXo/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsZ2M9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIGhjKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1nYyYmYVtnY118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGljKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgYmM6cmV0dXJuXCJDb25jdXJyZW50TW9kZVwiO2Nhc2UgWGI6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgV2I6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIFpiOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIFliOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgZGM6cmV0dXJuXCJTdXNwZW5zZVwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBhYzpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlICRiOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgY2M6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcblwiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIGVjOnJldHVybiBpYyhhLnR5cGUpO2Nhc2UgZmM6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBpYyhhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBqYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9aWMoYS50eXBlKTtjPW51bGw7ZCYmKGM9aWMoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShVYixcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIGtjPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxsYz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LG1jPXt9LG5jPXt9O1xuZnVuY3Rpb24gb2MoYSl7aWYobGMuY2FsbChuYyxhKSlyZXR1cm4hMDtpZihsYy5jYWxsKG1jLGEpKXJldHVybiExO2lmKGtjLnRlc3QoYSkpcmV0dXJuIG5jW2FdPSEwO21jW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHBjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcWMoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8cGMoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBDKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgRD17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDAsITEsYSxudWxsKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtEW2JdPW5ldyBDKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDIsITEsYSxudWxsKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwzLCEwLGEsbnVsbCl9KTtcbltcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDQsITEsYSxudWxsKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsNiwhMSxhLG51bGwpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTt2YXIgcmM9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBzYyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYyxcbnNjKTtEW2JdPW5ldyBDKGIsMSwhMSxhLG51bGwpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYyxzYyk7RFtiXT1uZXcgQyhiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYyxzYyk7RFtiXT1uZXcgQyhiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuZnVuY3Rpb24gdGMoYSxiLGMsZCl7dmFyIGU9RC5oYXNPd25Qcm9wZXJ0eShiKT9EW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwocWMoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP29jKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiB1YyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gdmMoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG4oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gd2MoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9dWMobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiB4YyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnRjKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiB5YyhhLGIpe3hjKGEsYik7dmFyIGM9dWMoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/emMoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmemMoYSxiLnR5cGUsdWMoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBBYyhhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiB6YyhhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIEJjPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIENjKGEsYixjKXthPXkuZ2V0UG9vbGVkKEJjLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7RWIoYyk7UWEoYSk7cmV0dXJuIGF9dmFyIERjPW51bGwsRWM9bnVsbDtmdW5jdGlvbiBGYyhhKXtEYShhKX1cbmZ1bmN0aW9uIEdjKGEpe3ZhciBiPUphKGEpO2lmKFNiKGIpKXJldHVybiBhfWZ1bmN0aW9uIEhjKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIEljPSExO1JhJiYoSWM9T2IoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gSmMoKXtEYyYmKERjLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEtjKSxFYz1EYz1udWxsKX1mdW5jdGlvbiBLYyhhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmR2MoRWMpJiYoYT1DYyhFYyxhLE5iKGEpKSxLYihGYyxhKSl9ZnVuY3Rpb24gTGMoYSxiLGMpe1wiZm9jdXNcIj09PWE/KEpjKCksRGM9YixFYz1jLERjLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEtjKSk6XCJibHVyXCI9PT1hJiZKYygpfWZ1bmN0aW9uIE1jKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIEdjKEVjKX1cbmZ1bmN0aW9uIE5jKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gR2MoYil9ZnVuY3Rpb24gT2MoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gR2MoYil9XG52YXIgUGM9e2V2ZW50VHlwZXM6QmMsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpJYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/SmEoYik6d2luZG93LGY9dm9pZCAwLGc9dm9pZCAwLGg9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wic2VsZWN0XCI9PT1ofHxcImlucHV0XCI9PT1oJiZcImZpbGVcIj09PWUudHlwZT9mPUhjOk1iKGUpP0ljP2Y9T2M6KGY9TWMsZz1MYyk6KGg9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWgudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGY9TmMpO2lmKGYmJihmPWYoYSxiKSkpcmV0dXJuIENjKGYsYyxkKTtnJiZnKGEsZSxiKTtcImJsdXJcIj09PWEmJihhPWUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmemMoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sUWM9eS5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLFJjPXtBbHQ6XCJhbHRLZXlcIixcbkNvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFNjKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9UmNbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBUYygpe3JldHVybiBTY31cbnZhciBVYz0wLFZjPTAsV2M9ITEsWGM9ITEsWWM9UWMuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlRjLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluIGEpcmV0dXJuIGEubW92ZW1lbnRYO3ZhciBiPVVjO1VjPWEuc2NyZWVuWDtyZXR1cm4gV2M/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblgtYjowOihXYz0hMCwwKX0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRZXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WTtcbnZhciBiPVZjO1ZjPWEuc2NyZWVuWTtyZXR1cm4gWGM/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblktYjowOihYYz0hMCwwKX19KSxaYz1ZYy5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0YW5nZW50aWFsUHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwsdHdpc3Q6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSksJGM9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixcbmRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX19LGFkPXtldmVudFR5cGVzOiRjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZj1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFmJiYhZSlyZXR1cm4gbnVsbDtlPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O2Y/KGY9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP0hhKGIpOm51bGwpOmY9bnVsbDtpZihmPT09YilyZXR1cm4gbnVsbDt2YXIgZz12b2lkIDAsaD12b2lkIDAsbD12b2lkIDAsaz12b2lkIDA7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PWEpZz1ZYyxoPSRjLm1vdXNlTGVhdmUsbD0kYy5tb3VzZUVudGVyLGs9XCJtb3VzZVwiO1xuZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpZz1aYyxoPSRjLnBvaW50ZXJMZWF2ZSxsPSRjLnBvaW50ZXJFbnRlcixrPVwicG9pbnRlclwiO3ZhciBtPW51bGw9PWY/ZTpKYShmKTtlPW51bGw9PWI/ZTpKYShiKTthPWcuZ2V0UG9vbGVkKGgsZixjLGQpO2EudHlwZT1rK1wibGVhdmVcIjthLnRhcmdldD1tO2EucmVsYXRlZFRhcmdldD1lO2M9Zy5nZXRQb29sZWQobCxiLGMsZCk7Yy50eXBlPWsrXCJlbnRlclwiO2MudGFyZ2V0PWU7Yy5yZWxhdGVkVGFyZ2V0PW07ZD1iO2lmKGYmJmQpYTp7Yj1mO2U9ZDtrPTA7Zm9yKGc9YjtnO2c9TGEoZykpaysrO2c9MDtmb3IobD1lO2w7bD1MYShsKSlnKys7Zm9yKDswPGstZzspYj1MYShiKSxrLS07Zm9yKDswPGctazspZT1MYShlKSxnLS07Zm9yKDtrLS07KXtpZihiPT09ZXx8Yj09PWUuYWx0ZXJuYXRlKWJyZWFrIGE7Yj1MYShiKTtlPUxhKGUpfWI9bnVsbH1lbHNlIGI9bnVsbDtlPWI7Zm9yKGI9W107ZiYmZiE9PWU7KXtrPVxuZi5hbHRlcm5hdGU7aWYobnVsbCE9PWsmJms9PT1lKWJyZWFrO2IucHVzaChmKTtmPUxhKGYpfWZvcihmPVtdO2QmJmQhPT1lOyl7az1kLmFsdGVybmF0ZTtpZihudWxsIT09ayYmaz09PWUpYnJlYWs7Zi5wdXNoKGQpO2Q9TGEoZCl9Zm9yKGQ9MDtkPGIubGVuZ3RoO2QrKylPYShiW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihkPWYubGVuZ3RoOzA8ZC0tOylPYShmW2RdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm5bYSxjXX19O2Z1bmN0aW9uIGJkKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgY2Q9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGRkKGEsYil7aWYoYmQoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFjZC5jYWxsKGIsY1tkXSl8fCFiZChhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIGVkKGEpe3ZhciBiPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiLnJldHVybjspaWYoYj1iLnJldHVybiwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIGZkKGEpezIhPT1lZChhKT94KFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIGdkKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPWVkKGEpLDM9PT1iP3goXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm4sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpcmV0dXJuIGZkKGUpLGE7aWYoZz09PWQpcmV0dXJuIGZkKGUpLGI7Zz1nLnNpYmxpbmd9eChcIjE4OFwiKX1pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtnPSExO2Zvcih2YXIgaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31nP1xudm9pZCAwOngoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD94KFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/eChcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBoZChhKXthPWdkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxudmFyIGlkPXkuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxqZD15LmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLGtkPVFjLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7ZnVuY3Rpb24gbGQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgbWQ9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LG5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxvZD1RYy5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9bWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9bGQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP25kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpUYyxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9sZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9sZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHBkPVljLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSxxZD1RYy5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpUY30pLHJkPXkuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHNkPVljLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksdGQ9W1tcImFib3J0XCIsXCJhYm9ydFwiXSxbWGEsXCJhbmltYXRpb25FbmRcIl0sW1lhLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCJdLFtaYSxcImFuaW1hdGlvblN0YXJ0XCJdLFtcImNhbnBsYXlcIixcImNhblBsYXlcIl0sW1wiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCJdLFtcImRyYWdcIixcImRyYWdcIl0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIl0sW1wiZHJhZ2V4aXRcIixcImRyYWdFeGl0XCJdLFtcImRyYWdsZWF2ZVwiLFwiZHJhZ0xlYXZlXCJdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIl0sW1wiZW1wdGllZFwiLFwiZW1wdGllZFwiXSxbXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiXSxcbltcImVuZGVkXCIsXCJlbmRlZFwiXSxbXCJlcnJvclwiLFwiZXJyb3JcIl0sW1wiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCJdLFtcImxvYWRcIixcImxvYWRcIl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiXSxbXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIl0sW1wibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIl0sW1wibW91c2Vtb3ZlXCIsXCJtb3VzZU1vdmVcIl0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCJdLFtcIm1vdXNlb3ZlclwiLFwibW91c2VPdmVyXCJdLFtcInBsYXlpbmdcIixcInBsYXlpbmdcIl0sW1wicG9pbnRlcm1vdmVcIixcInBvaW50ZXJNb3ZlXCJdLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJPdXRcIl0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCJdLFtcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiXSxbXCJzY3JvbGxcIixcInNjcm9sbFwiXSxbXCJzZWVraW5nXCIsXCJzZWVraW5nXCJdLFtcInN0YWxsZWRcIixcInN0YWxsZWRcIl0sXG5bXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCJdLFtcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIl0sW1widG9nZ2xlXCIsXCJ0b2dnbGVcIl0sW1widG91Y2htb3ZlXCIsXCJ0b3VjaE1vdmVcIl0sWyRhLFwidHJhbnNpdGlvbkVuZFwiXSxbXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdLFtcIndoZWVsXCIsXCJ3aGVlbFwiXV0sdWQ9e30sdmQ9e307ZnVuY3Rpb24gd2QoYSxiKXt2YXIgYz1hWzBdO2E9YVsxXTt2YXIgZD1cIm9uXCIrKGFbMF0udG9VcHBlckNhc2UoKSthLnNsaWNlKDEpKTtiPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpkLGNhcHR1cmVkOmQrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbY10saXNJbnRlcmFjdGl2ZTpifTt1ZFthXT1iO3ZkW2NdPWJ9XG5bW1wiYmx1clwiLFwiYmx1clwiXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiXSxbXCJjbGlja1wiLFwiY2xpY2tcIl0sW1wiY2xvc2VcIixcImNsb3NlXCJdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiXSxbXCJjb3B5XCIsXCJjb3B5XCJdLFtcImN1dFwiLFwiY3V0XCJdLFtcImF1eGNsaWNrXCIsXCJhdXhDbGlja1wiXSxbXCJkYmxjbGlja1wiLFwiZG91YmxlQ2xpY2tcIl0sW1wiZHJhZ2VuZFwiLFwiZHJhZ0VuZFwiXSxbXCJkcmFnc3RhcnRcIixcImRyYWdTdGFydFwiXSxbXCJkcm9wXCIsXCJkcm9wXCJdLFtcImZvY3VzXCIsXCJmb2N1c1wiXSxbXCJpbnB1dFwiLFwiaW5wdXRcIl0sW1wiaW52YWxpZFwiLFwiaW52YWxpZFwiXSxbXCJrZXlkb3duXCIsXCJrZXlEb3duXCJdLFtcImtleXByZXNzXCIsXCJrZXlQcmVzc1wiXSxbXCJrZXl1cFwiLFwia2V5VXBcIl0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIl0sW1wibW91c2V1cFwiLFwibW91c2VVcFwiXSxbXCJwYXN0ZVwiLFwicGFzdGVcIl0sW1wicGF1c2VcIixcInBhdXNlXCJdLFtcInBsYXlcIixcInBsYXlcIl0sW1wicG9pbnRlcmNhbmNlbFwiLFwicG9pbnRlckNhbmNlbFwiXSxcbltcInBvaW50ZXJkb3duXCIsXCJwb2ludGVyRG93blwiXSxbXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiXSxbXCJyYXRlY2hhbmdlXCIsXCJyYXRlQ2hhbmdlXCJdLFtcInJlc2V0XCIsXCJyZXNldFwiXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiXSxbXCJzdWJtaXRcIixcInN1Ym1pdFwiXSxbXCJ0b3VjaGNhbmNlbFwiLFwidG91Y2hDYW5jZWxcIl0sW1widG91Y2hlbmRcIixcInRvdWNoRW5kXCJdLFtcInRvdWNoc3RhcnRcIixcInRvdWNoU3RhcnRcIl0sW1widm9sdW1lY2hhbmdlXCIsXCJ2b2x1bWVDaGFuZ2VcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7d2QoYSwhMCl9KTt0ZC5mb3JFYWNoKGZ1bmN0aW9uKGEpe3dkKGEsITEpfSk7XG52YXIgeGQ9e2V2ZW50VHlwZXM6dWQsaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlOmZ1bmN0aW9uKGEpe2E9dmRbYV07cmV0dXJuIHZvaWQgMCE9PWEmJiEwPT09YS5pc0ludGVyYWN0aXZlfSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZkW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09bGQoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPW9kO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1rZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPVljO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9XG5wZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXFkO2JyZWFrO2Nhc2UgWGE6Y2FzZSBZYTpjYXNlIFphOmE9aWQ7YnJlYWs7Y2FzZSAkYTphPXJkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPVFjO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9c2Q7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1qZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPVpjO2JyZWFrO2RlZmF1bHQ6YT15fWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7UWEoYik7cmV0dXJuIGJ9fSx5ZD14ZC5pc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUsXG56ZD1bXTtmdW5jdGlvbiBBZChhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkO2ZvcihkPWM7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKCFkKWJyZWFrO2EuYW5jZXN0b3JzLnB1c2goYyk7Yz1IYShkKX13aGlsZShjKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyl7Yj1hLmFuY2VzdG9yc1tjXTt2YXIgZT1OYihhLm5hdGl2ZUV2ZW50KTtkPWEudG9wTGV2ZWxUeXBlO2Zvcih2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9bnVsbCxoPTA7aDxvYS5sZW5ndGg7aCsrKXt2YXIgbD1vYVtoXTtsJiYobD1sLmV4dHJhY3RFdmVudHMoZCxiLGYsZSkpJiYoZz14YShnLGwpKX1EYShnKX19dmFyIEJkPSEwO1xuZnVuY3Rpb24gRShhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPSh5ZChhKT9DZDpEZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITEpfWZ1bmN0aW9uIEVkKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KHlkKGEpP0NkOkRkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMCl9ZnVuY3Rpb24gQ2QoYSxiKXtIYihEZCxhLGIpfVxuZnVuY3Rpb24gRGQoYSxiKXtpZihCZCl7dmFyIGM9TmIoYik7Yz1IYShjKTtudWxsPT09Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBjLnRhZ3x8Mj09PWVkKGMpfHwoYz1udWxsKTtpZih6ZC5sZW5ndGgpe3ZhciBkPXpkLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1iO2QudGFyZ2V0SW5zdD1jO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX07dHJ5e0tiKEFkLGEpfWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+emQubGVuZ3RoJiZ6ZC5wdXNoKGEpfX19dmFyIEZkPXt9LEdkPTAsSGQ9XCJfcmVhY3RMaXN0ZW5lcnNJRFwiKyhcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIpO1xuZnVuY3Rpb24gSWQoYSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsSGQpfHwoYVtIZF09R2QrKyxGZFthW0hkXV09e30pO3JldHVybiBGZFthW0hkXV19ZnVuY3Rpb24gSmQoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fWZ1bmN0aW9uIEtkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExkKGEsYil7dmFyIGM9S2QoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2QoYyl9fWZ1bmN0aW9uIE1kKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWQoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmQoKXtmb3IodmFyIGE9d2luZG93LGI9SmQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9SmQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2QoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbmZ1bmN0aW9uIFBkKCl7dmFyIGE9TmQoKTtpZihPZChhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYj17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Yj0oYj1hLm93bmVyRG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGM9Yi5nZXRTZWxlY3Rpb24mJmIuZ2V0U2VsZWN0aW9uKCk7aWYoYyYmMCE9PWMucmFuZ2VDb3VudCl7Yj1jLmFuY2hvck5vZGU7dmFyIGQ9Yy5hbmNob3JPZmZzZXQsZT1jLmZvY3VzTm9kZTtjPWMuZm9jdXNPZmZzZXQ7dHJ5e2Iubm9kZVR5cGUsZS5ub2RlVHlwZX1jYXRjaChBKXtiPW51bGw7YnJlYWsgYX12YXIgZj0wLGc9LTEsaD0tMSxsPTAsaz0wLG09YSxwPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgdDs7KXttIT09Ynx8MCE9PWQmJjMhPT1tLm5vZGVUeXBlfHwoZz1mK2QpO20hPT1lfHwwIT09YyYmMyE9PW0ubm9kZVR5cGV8fChoPWYrYyk7Mz09PW0ubm9kZVR5cGUmJihmKz1tLm5vZGVWYWx1ZS5sZW5ndGgpO1xuaWYobnVsbD09PSh0PW0uZmlyc3RDaGlsZCkpYnJlYWs7cD1tO209dH1mb3IoOzspe2lmKG09PT1hKWJyZWFrIGI7cD09PWImJisrbD09PWQmJihnPWYpO3A9PT1lJiYrK2s9PT1jJiYoaD1mKTtpZihudWxsIT09KHQ9bS5uZXh0U2libGluZykpYnJlYWs7bT1wO3A9bS5wYXJlbnROb2RlfW09dH1iPS0xPT09Z3x8LTE9PT1oP251bGw6e3N0YXJ0OmcsZW5kOmh9fWVsc2UgYj1udWxsfWI9Ynx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYj1udWxsO3JldHVybntmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmJ9fVxuZnVuY3Rpb24gUWQoYSl7dmFyIGI9TmQoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZjJiZjLm93bmVyRG9jdW1lbnQmJk1kKGMub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKG51bGwhPT1kJiZPZChjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKGE9KGI9Yy5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJmIuZGVmYXVsdFZpZXd8fHdpbmRvdyxhLmdldFNlbGVjdGlvbil7YT1hLmdldFNlbGVjdGlvbigpO3ZhciBlPWMudGV4dENvbnRlbnQubGVuZ3RoLGY9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2Y6TWF0aC5taW4oZC5lbmQsZSk7IWEuZXh0ZW5kJiZmPmQmJihlPWQsZD1mLGY9ZSk7ZT1MZChjLGYpO3ZhciBnPUxkKGMsXG5kKTtlJiZnJiYoMSE9PWEucmFuZ2VDb3VudHx8YS5hbmNob3JOb2RlIT09ZS5ub2RlfHxhLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxhLmZvY3VzTm9kZSE9PWcubm9kZXx8YS5mb2N1c09mZnNldCE9PWcub2Zmc2V0KSYmKGI9Yi5jcmVhdGVSYW5nZSgpLGIuc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KSxhLnJlbW92ZUFsbFJhbmdlcygpLGY+ZD8oYS5hZGRSYW5nZShiKSxhLmV4dGVuZChnLm5vZGUsZy5vZmZzZXQpKTooYi5zZXRFbmQoZy5ub2RlLGcub2Zmc2V0KSxhLmFkZFJhbmdlKGIpKSl9Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZm9jdXMmJmMuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsYS5lbGVtZW50LnNjcm9sbFRvcD1hLnRvcH19XG52YXIgUmQ9UmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxTZD17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sVGQ9bnVsbCxVZD1udWxsLFZkPW51bGwsV2Q9ITE7XG5mdW5jdGlvbiBYZChhLGIpe3ZhciBjPWIud2luZG93PT09Yj9iLmRvY3VtZW50Ojk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50O2lmKFdkfHxudWxsPT1UZHx8VGQhPT1KZChjKSlyZXR1cm4gbnVsbDtjPVRkO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJk9kKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTooYz0oYy5vd25lckRvY3VtZW50JiZjLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk7cmV0dXJuIFZkJiZkZChWZCxjKT9udWxsOihWZD1jLGE9eS5nZXRQb29sZWQoU2Quc2VsZWN0LFVkLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9VGQsUWEoYSksYSl9XG52YXIgWWQ9e2V2ZW50VHlwZXM6U2QsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9SWQoZSk7Zj1zYS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKyl7dmFyIGg9ZltnXTtpZighZS5oYXNPd25Qcm9wZXJ0eShoKXx8IWVbaF0pe2U9ITE7YnJlYWsgYX19ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP0phKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoTWIoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpVGQ9ZSxVZD1iLFZkPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpWZD1VZD1UZD1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpXZD0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6cmV0dXJuIFdkPSExLFhkKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFJkKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gWGQoYyxkKX1yZXR1cm4gbnVsbH19O0JhLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7dGE9S2E7dWE9SWE7dmE9SmE7QmEuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjp4ZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46YWQsQ2hhbmdlRXZlbnRQbHVnaW46UGMsU2VsZWN0RXZlbnRQbHVnaW46WWQsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjp6Yn0pO2Z1bmN0aW9uIFpkKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifVxuZnVuY3Rpb24gJGQoYSxiKXthPW4oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1aZChiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9ZnVuY3Rpb24gYWUoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK3VjKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBiZShhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/eChcIjkxXCIpOnZvaWQgMDtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBjZShhLGIpe3ZhciBjPWIudmFsdWU7bnVsbD09YyYmKGM9Yi5kZWZhdWx0VmFsdWUsYj1iLmNoaWxkcmVuLG51bGwhPWImJihudWxsIT1jP3goXCI5MlwiKTp2b2lkIDAsQXJyYXkuaXNBcnJheShiKSYmKDE+PWIubGVuZ3RoP3ZvaWQgMDp4KFwiOTNcIiksYj1iWzBdKSxjPWIpLG51bGw9PWMmJihjPVwiXCIpKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTp1YyhjKX19XG5mdW5jdGlvbiBkZShhLGIpe3ZhciBjPXVjKGIudmFsdWUpLGQ9dWMoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBlZShhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgZmU9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gZ2UoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBoZShhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/Z2UoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgaWU9dm9pZCAwLGplPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PWZlLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle2llPWllfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2llLmlubmVySFRNTD1cIjxzdmc+XCIrYitcIjwvc3ZnPlwiO2ZvcihiPWllLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIGtlKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgbGU9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sbWU9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKGxlKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe21lLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7bGVbYl09bGVbYV19KX0pO2Z1bmN0aW9uIG5lKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxsZS5oYXNPd25Qcm9wZXJ0eShhKSYmbGVbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gb2UoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9bmUoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgcGU9bih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHFlKGEsYil7YiYmKHBlW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD94KFwiMTM3XCIsYSxcIlwiKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP3goXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6eChcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/eChcIjYyXCIsXCJcIik6dm9pZCAwKX1cbmZ1bmN0aW9uIHJlKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX1cbmZ1bmN0aW9uIHNlKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPUlkKGEpO2I9c2FbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBlPWJbZF07aWYoIWMuaGFzT3duUHJvcGVydHkoZSl8fCFjW2VdKXtzd2l0Y2goZSl7Y2FzZSBcInNjcm9sbFwiOkVkKFwic2Nyb2xsXCIsYSk7YnJlYWs7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpFZChcImZvY3VzXCIsYSk7RWQoXCJibHVyXCIsYSk7Yy5ibHVyPSEwO2MuZm9jdXM9ITA7YnJlYWs7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbG9zZVwiOk9iKGUpJiZFZChlLGEpO2JyZWFrO2Nhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJyZXNldFwiOmJyZWFrO2RlZmF1bHQ6LTE9PT1hYi5pbmRleE9mKGUpJiZFKGUsYSl9Y1tlXT0hMH19fWZ1bmN0aW9uIHRlKCl7fXZhciB1ZT1udWxsLHZlPW51bGw7XG5mdW5jdGlvbiB3ZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9ZnVuY3Rpb24geGUoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfVxudmFyIHllPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHplPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxBZT1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssQmU9ci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaztcbmZ1bmN0aW9uIENlKGEsYixjLGQsZSl7YVtHYV09ZTtcImlucHV0XCI9PT1jJiZcInJhZGlvXCI9PT1lLnR5cGUmJm51bGwhPWUubmFtZSYmeGMoYSxlKTtyZShjLGQpO2Q9cmUoYyxlKTtmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrPTIpe3ZhciBnPWJbZl0saD1iW2YrMV07XCJzdHlsZVwiPT09Zz9vZShhLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/amUoYSxoKTpcImNoaWxkcmVuXCI9PT1nP2tlKGEsaCk6dGMoYSxnLGgsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOnljKGEsZSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZGUoYSxlKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1hLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZS5tdWx0aXBsZSxjPWUudmFsdWUsbnVsbCE9Yz9hZShhLCEhZS5tdWx0aXBsZSxjLCExKTpiIT09ISFlLm11bHRpcGxlJiYobnVsbCE9ZS5kZWZhdWx0VmFsdWU/YWUoYSwhIWUubXVsdGlwbGUsZS5kZWZhdWx0VmFsdWUsXG4hMCk6YWUoYSwhIWUubXVsdGlwbGUsZS5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fWZ1bmN0aW9uIERlKGEpe2ZvcihhPWEubmV4dFNpYmxpbmc7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gRWUoYSl7Zm9yKGE9YS5maXJzdENoaWxkO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfW5ldyBTZXQ7dmFyIEZlPVtdLEdlPS0xO2Z1bmN0aW9uIEYoYSl7MD5HZXx8KGEuY3VycmVudD1GZVtHZV0sRmVbR2VdPW51bGwsR2UtLSl9ZnVuY3Rpb24gRyhhLGIpe0dlKys7RmVbR2VdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgSGU9e30sSD17Y3VycmVudDpIZX0sST17Y3VycmVudDohMX0sSWU9SGU7XG5mdW5jdGlvbiBKZShhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEhlO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEooYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBLZShhKXtGKEksYSk7RihILGEpfWZ1bmN0aW9uIExlKGEpe0YoSSxhKTtGKEgsYSl9XG5mdW5jdGlvbiBNZShhLGIsYyl7SC5jdXJyZW50IT09SGU/eChcIjE2OFwiKTp2b2lkIDA7RyhILGIsYSk7RyhJLGMsYSl9ZnVuY3Rpb24gTmUoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWUgaW4gYT92b2lkIDA6eChcIjEwOFwiLGljKGIpfHxcIlVua25vd25cIixlKTtyZXR1cm4gbih7fSxjLGQpfWZ1bmN0aW9uIE9lKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8SGU7SWU9SC5jdXJyZW50O0coSCxiLGEpO0coSSxJLmN1cnJlbnQsYSk7cmV0dXJuITB9XG5mdW5jdGlvbiBQZShhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7ZD92b2lkIDA6eChcIjE2OVwiKTtjPyhiPU5lKGEsYixJZSksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1iLEYoSSxhKSxGKEgsYSksRyhILGIsYSkpOkYoSSxhKTtHKEksYyxhKX12YXIgUWU9bnVsbCxSZT1udWxsO2Z1bmN0aW9uIFNlKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19XG5mdW5jdGlvbiBUZShhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtRZT1TZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyUm9vdChjLGEpfSk7UmU9U2UoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclVubW91bnQoYyxhKX0pfWNhdGNoKGQpe31yZXR1cm4hMH1cbmZ1bmN0aW9uIFVlKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5jb250ZXh0RGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lPXRoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIEsoYSxiLGMsZCl7cmV0dXJuIG5ldyBVZShhLGIsYyxkKX1cbmZ1bmN0aW9uIFZlKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9ZnVuY3Rpb24gV2UoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIFZlKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1jYylyZXR1cm4gMTE7aWYoYT09PWVjKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFhlKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9SyhhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLmVmZmVjdFRhZz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtjLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yy5jb250ZXh0RGVwZW5kZW5jaWVzPWEuY29udGV4dERlcGVuZGVuY2llcztjLnNpYmxpbmc9YS5zaWJsaW5nO1xuYy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gWWUoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKVZlKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIFhiOnJldHVybiBaZShjLmNoaWxkcmVuLGUsZixiKTtjYXNlIGJjOnJldHVybiAkZShjLGV8MyxmLGIpO2Nhc2UgWWI6cmV0dXJuICRlKGMsZXwyLGYsYik7Y2FzZSBaYjpyZXR1cm4gYT1LKDEyLGMsYixlfDQpLGEuZWxlbWVudFR5cGU9WmIsYS50eXBlPVpiLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgZGM6cmV0dXJuIGE9SygxMyxjLGIsZSksYS5lbGVtZW50VHlwZT1kYyxhLnR5cGU9ZGMsYS5leHBpcmF0aW9uVGltZT1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlICRiOmc9MTA7YnJlYWsgYTtjYXNlIGFjOmc9OTticmVhayBhO2Nhc2UgY2M6Zz0xMTticmVhayBhO2Nhc2UgZWM6Zz1cbjE0O2JyZWFrIGE7Y2FzZSBmYzpnPTE2O2Q9bnVsbDticmVhayBhfXgoXCIxMzBcIixudWxsPT1hP2E6dHlwZW9mIGEsXCJcIil9Yj1LKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gWmUoYSxiLGMsZCl7YT1LKDcsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiAkZShhLGIsYyxkKXthPUsoOCxhLGQsYik7Yj0wPT09KGImMSk/WWI6YmM7YS5lbGVtZW50VHlwZT1iO2EudHlwZT1iO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBhZihhLGIsYyl7YT1LKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIGJmKGEsYixjKXtiPUsoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9ZnVuY3Rpb24gY2YoYSxiKXthLmRpZEVycm9yPSExO3ZhciBjPWEuZWFybGllc3RQZW5kaW5nVGltZTswPT09Yz9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZT1iOmM8Yj9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YjphLmxhdGVzdFBlbmRpbmdUaW1lPmImJihhLmxhdGVzdFBlbmRpbmdUaW1lPWIpO2RmKGIsYSl9XG5mdW5jdGlvbiBlZihhLGIpe2EuZGlkRXJyb3I9ITE7aWYoMD09PWIpYS5lYXJsaWVzdFBlbmRpbmdUaW1lPTAsYS5sYXRlc3RQZW5kaW5nVGltZT0wLGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RQaW5nZWRUaW1lPTA7ZWxzZXtiPGEubGF0ZXN0UGluZ2VkVGltZSYmKGEubGF0ZXN0UGluZ2VkVGltZT0wKTt2YXIgYz1hLmxhdGVzdFBlbmRpbmdUaW1lOzAhPT1jJiYoYz5iP2EuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lPTA6YS5lYXJsaWVzdFBlbmRpbmdUaW1lPmImJihhLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZSkpO2M9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7MD09PWM/Y2YoYSxiKTpiPGEubGF0ZXN0U3VzcGVuZGVkVGltZT8oYS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFBpbmdlZFRpbWU9MCxjZihhLGIpKTpcbmI+YyYmY2YoYSxiKX1kZigwLGEpfWZ1bmN0aW9uIGZmKGEsYil7YS5kaWRFcnJvcj0hMTthLmxhdGVzdFBpbmdlZFRpbWU+PWImJihhLmxhdGVzdFBpbmdlZFRpbWU9MCk7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lLGQ9YS5sYXRlc3RQZW5kaW5nVGltZTtjPT09Yj9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9ZD09PWI/YS5sYXRlc3RQZW5kaW5nVGltZT0wOmQ6ZD09PWImJihhLmxhdGVzdFBlbmRpbmdUaW1lPWMpO2M9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7ZD1hLmxhdGVzdFN1c3BlbmRlZFRpbWU7MD09PWM/YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9YS5sYXRlc3RTdXNwZW5kZWRUaW1lPWI6YzxiP2EuZWFybGllc3RTdXNwZW5kZWRUaW1lPWI6ZD5iJiYoYS5sYXRlc3RTdXNwZW5kZWRUaW1lPWIpO2RmKGIsYSl9XG5mdW5jdGlvbiBnZihhLGIpe3ZhciBjPWEuZWFybGllc3RQZW5kaW5nVGltZTthPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lO2M+YiYmKGI9Yyk7YT5iJiYoYj1hKTtyZXR1cm4gYn1mdW5jdGlvbiBkZihhLGIpe3ZhciBjPWIuZWFybGllc3RTdXNwZW5kZWRUaW1lLGQ9Yi5sYXRlc3RTdXNwZW5kZWRUaW1lLGU9Yi5lYXJsaWVzdFBlbmRpbmdUaW1lLGY9Yi5sYXRlc3RQaW5nZWRUaW1lO2U9MCE9PWU/ZTpmOzA9PT1lJiYoMD09PWF8fGQ8YSkmJihlPWQpO2E9ZTswIT09YSYmYz5hJiYoYT1jKTtiLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPWU7Yi5leHBpcmF0aW9uVGltZT1hfWZ1bmN0aW9uIEwoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1uKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSl9cmV0dXJuIGJ9XG5mdW5jdGlvbiBoZihhKXt2YXIgYj1hLl9yZXN1bHQ7c3dpdGNoKGEuX3N0YXR1cyl7Y2FzZSAxOnJldHVybiBiO2Nhc2UgMjp0aHJvdyBiO2Nhc2UgMDp0aHJvdyBiO2RlZmF1bHQ6YS5fc3RhdHVzPTA7Yj1hLl9jdG9yO2I9YigpO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSk7c3dpdGNoKGEuX3N0YXR1cyl7Y2FzZSAxOnJldHVybiBhLl9yZXN1bHQ7Y2FzZSAyOnRocm93IGEuX3Jlc3VsdDt9YS5fcmVzdWx0PWI7dGhyb3cgYjt9fXZhciBqZj0obmV3IGFhLkNvbXBvbmVudCkucmVmcztcbmZ1bmN0aW9uIGtmKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpuKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7ZD1hLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYwPT09YS5leHBpcmF0aW9uVGltZSYmKGQuYmFzZVN0YXRlPWMpfVxudmFyIHRmPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09ZWQoYSk6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9bGYoKTtkPW1mKGQsYSk7dmFyIGU9bmYoZCk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO29mKCk7cGYoYSxlKTtxZihhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1sZigpO2Q9bWYoZCxhKTt2YXIgZT1uZihkKTtlLnRhZz1yZjtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7b2YoKTtwZihhLGUpO3FmKGEsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBjPWxmKCk7Yz1tZihjLGEpO3ZhciBkPW5mKGMpO2QudGFnPVxuc2Y7dm9pZCAwIT09YiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO29mKCk7cGYoYSxkKTtxZihhLGMpfX07ZnVuY3Rpb24gdWYoYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hZGQoYyxkKXx8IWRkKGUsZik6ITB9XG5mdW5jdGlvbiB2ZihhLGIsYyl7dmFyIGQ9ITEsZT1IZTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1NKGYpOihlPUooYik/SWU6SC5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/SmUoYSxlKTpIZSk7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPXRmO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHdmKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZ0Zi5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIHhmKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9amY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1NKGYpOihmPUooYik/SWU6SC5jdXJyZW50LGUuY29udGV4dD1KZShhLGYpKTtmPWEudXBkYXRlUXVldWU7bnVsbCE9PWYmJih5ZihhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoa2YoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmdGYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksZj1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1mJiYoeWYoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciB6Zj1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gQWYoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO3ZhciBkPXZvaWQgMDtjJiYoMSE9PWMudGFnP3goXCIzMDlcIik6dm9pZCAwLGQ9Yy5zdGF0ZU5vZGUpO2Q/dm9pZCAwOngoXCIxNDdcIixhKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PWpmJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9XCJzdHJpbmdcIiE9PXR5cGVvZiBhP3goXCIyODRcIik6dm9pZCAwO2MuX293bmVyP3ZvaWQgMDp4KFwiMjkwXCIsYSl9cmV0dXJuIGF9XG5mdW5jdGlvbiBCZihhLGIpe1widGV4dGFyZWFcIiE9PWEudHlwZSYmeChcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpfVxuZnVuY3Rpb24gQ2YoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT1YZShhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPWFmKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj1BZihhLGIsYyksZC5yZXR1cm49YSxkO2Q9WWUoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9QWYoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1iZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1aZShjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcChhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9YWYoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgVmI6cmV0dXJuIGM9WWUoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9QWYoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIFdiOnJldHVybiBiPWJmKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZih6ZihiKXx8XG5oYyhiKSlyZXR1cm4gYj1aZShiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtCZihhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHQoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgVmI6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1YYj9tKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6bChhLGIsYyxkKTpudWxsO2Nhc2UgV2I6cmV0dXJuIGMua2V5PT09ZT9rKGEsYixjLGQpOm51bGx9aWYoemYoYyl8fGhjKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTtCZihhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEEoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1cbmEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBWYjpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09WGI/bShiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTpsKGIsYSxkLGUpO2Nhc2UgV2I6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGsoYixhLGQsZSl9aWYoemYoZCl8fGhjKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTtCZihiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHYoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbT1udWxsLHE9Zyx1PWc9MCxCPW51bGw7bnVsbCE9PXEmJnU8aC5sZW5ndGg7dSsrKXtxLmluZGV4PnU/KEI9cSxxPW51bGwpOkI9cS5zaWJsaW5nO3ZhciB3PXQoZSxxLGhbdV0sayk7aWYobnVsbD09PXcpe251bGw9PT1xJiYocT1CKTticmVha31hJiZcbnEmJm51bGw9PT13LmFsdGVybmF0ZSYmYihlLHEpO2c9Zih3LGcsdSk7bnVsbD09PW0/bD13Om0uc2libGluZz13O209dztxPUJ9aWYodT09PWgubGVuZ3RoKXJldHVybiBjKGUscSksbDtpZihudWxsPT09cSl7Zm9yKDt1PGgubGVuZ3RoO3UrKylpZihxPXAoZSxoW3VdLGspKWc9ZihxLGcsdSksbnVsbD09PW0/bD1xOm0uc2libGluZz1xLG09cTtyZXR1cm4gbH1mb3IocT1kKGUscSk7dTxoLmxlbmd0aDt1KyspaWYoQj1BKHEsZSx1LGhbdV0saykpYSYmbnVsbCE9PUIuYWx0ZXJuYXRlJiZxLmRlbGV0ZShudWxsPT09Qi5rZXk/dTpCLmtleSksZz1mKEIsZyx1KSxudWxsPT09bT9sPUI6bS5zaWJsaW5nPUIsbT1CO2EmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gUihlLGcsaCxrKXt2YXIgbD1oYyhoKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgbD94KFwiMTUwXCIpOnZvaWQgMDtoPWwuY2FsbChoKTtudWxsPT1oP3goXCIxNTFcIik6dm9pZCAwO1xuZm9yKHZhciBtPWw9bnVsbCxxPWcsdT1nPTAsQj1udWxsLHc9aC5uZXh0KCk7bnVsbCE9PXEmJiF3LmRvbmU7dSsrLHc9aC5uZXh0KCkpe3EuaW5kZXg+dT8oQj1xLHE9bnVsbCk6Qj1xLnNpYmxpbmc7dmFyIHY9dChlLHEsdy52YWx1ZSxrKTtpZihudWxsPT09dil7cXx8KHE9Qik7YnJlYWt9YSYmcSYmbnVsbD09PXYuYWx0ZXJuYXRlJiZiKGUscSk7Zz1mKHYsZyx1KTtudWxsPT09bT9sPXY6bS5zaWJsaW5nPXY7bT12O3E9Qn1pZih3LmRvbmUpcmV0dXJuIGMoZSxxKSxsO2lmKG51bGw9PT1xKXtmb3IoOyF3LmRvbmU7dSsrLHc9aC5uZXh0KCkpdz1wKGUsdy52YWx1ZSxrKSxudWxsIT09dyYmKGc9Zih3LGcsdSksbnVsbD09PW0/bD13Om0uc2libGluZz13LG09dyk7cmV0dXJuIGx9Zm9yKHE9ZChlLHEpOyF3LmRvbmU7dSsrLHc9aC5uZXh0KCkpdz1BKHEsZSx1LHcudmFsdWUsayksbnVsbCE9PXcmJihhJiZudWxsIT09dy5hbHRlcm5hdGUmJnEuZGVsZXRlKG51bGw9PT13LmtleT91Olxudy5rZXkpLGc9Zih3LGcsdSksbnVsbD09PW0/bD13Om0uc2libGluZz13LG09dyk7YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09WGImJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgVmI6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKWlmKDc9PT1rLnRhZz9mLnR5cGU9PT1YYjprLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnR5cGU9PT1YYj9mLnByb3BzLmNoaWxkcmVuOmYucHJvcHMsaCk7ZC5yZWY9QWYoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1cbmsuc2libGluZ31mLnR5cGU9PT1YYj8oZD1aZShmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9WWUoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9QWYoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIFdiOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxoKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9YmYoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XG5cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZixoKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPWFmKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKHpmKGYpKXJldHVybiB2KGEsZCxmLGgpO2lmKGhjKGYpKXJldHVybiBSKGEsZCxmLGgpO2wmJkJmKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDA6aD1hLnR5cGUseChcIjE1MlwiLGguZGlzcGxheU5hbWV8fGgubmFtZXx8XCJDb21wb25lbnRcIil9cmV0dXJuIGMoYSxkKX19dmFyIERmPUNmKCEwKSxFZj1DZighMSksRmY9e30sTj17Y3VycmVudDpGZn0sR2Y9e2N1cnJlbnQ6RmZ9LEhmPXtjdXJyZW50OkZmfTtmdW5jdGlvbiBJZihhKXthPT09RmY/eChcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9XG5mdW5jdGlvbiBKZihhLGIpe0coSGYsYixhKTtHKEdmLGEsYSk7RyhOLEZmLGEpO3ZhciBjPWIubm9kZVR5cGU7c3dpdGNoKGMpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOmhlKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpjPTg9PT1jP2IucGFyZW50Tm9kZTpiLGI9Yy5uYW1lc3BhY2VVUkl8fG51bGwsYz1jLnRhZ05hbWUsYj1oZShiLGMpfUYoTixhKTtHKE4sYixhKX1mdW5jdGlvbiBLZihhKXtGKE4sYSk7RihHZixhKTtGKEhmLGEpfWZ1bmN0aW9uIExmKGEpe0lmKEhmLmN1cnJlbnQpO3ZhciBiPUlmKE4uY3VycmVudCk7dmFyIGM9aGUoYixhLnR5cGUpO2IhPT1jJiYoRyhHZixhLGEpLEcoTixjLGEpKX1mdW5jdGlvbiBNZihhKXtHZi5jdXJyZW50PT09YSYmKEYoTixhKSxGKEdmLGEpKX1cbnZhciBOZj0wLE9mPTIsUGY9NCxRZj04LFJmPTE2LFNmPTMyLFRmPTY0LFVmPTEyOCxWZj1UYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLFdmPTAsWGY9bnVsbCxPPW51bGwsUD1udWxsLFlmPW51bGwsUT1udWxsLFpmPW51bGwsJGY9MCxhZz1udWxsLGJnPTAsY2c9ITEsZGc9bnVsbCxlZz0wO2Z1bmN0aW9uIGZnKCl7eChcIjMyMVwiKX1mdW5jdGlvbiBnZyhhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFiZChhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gaGcoYSxiLGMsZCxlLGYpe1dmPWY7WGY9YjtQPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO1ZmLmN1cnJlbnQ9bnVsbD09PVA/aWc6amc7Yj1jKGQsZSk7aWYoY2cpe2RvIGNnPSExLGVnKz0xLFA9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGwsWmY9WWYsYWc9UT1PPW51bGwsVmYuY3VycmVudD1qZyxiPWMoZCxlKTt3aGlsZShjZyk7ZGc9bnVsbDtlZz0wfVZmLmN1cnJlbnQ9a2c7YT1YZjthLm1lbW9pemVkU3RhdGU9WWY7YS5leHBpcmF0aW9uVGltZT0kZjthLnVwZGF0ZVF1ZXVlPWFnO2EuZWZmZWN0VGFnfD1iZzthPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O1dmPTA7WmY9UT1ZZj1QPU89WGY9bnVsbDskZj0wO2FnPW51bGw7Ymc9MDthP3goXCIzMDBcIik6dm9pZCAwO3JldHVybiBifWZ1bmN0aW9uIGxnKCl7VmYuY3VycmVudD1rZztXZj0wO1pmPVE9WWY9UD1PPVhmPW51bGw7JGY9MDthZz1udWxsO2JnPTA7Y2c9ITE7ZGc9bnVsbDtlZz0wfVxuZnVuY3Rpb24gbWcoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLHF1ZXVlOm51bGwsYmFzZVVwZGF0ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVE/WWY9UT1hOlE9US5uZXh0PWE7cmV0dXJuIFF9ZnVuY3Rpb24gbmcoKXtpZihudWxsIT09WmYpUT1aZixaZj1RLm5leHQsTz1QLFA9bnVsbCE9PU8/Ty5uZXh0Om51bGw7ZWxzZXtudWxsPT09UD94KFwiMzEwXCIpOnZvaWQgMDtPPVA7dmFyIGE9e21lbW9pemVkU3RhdGU6Ty5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpPLmJhc2VTdGF0ZSxxdWV1ZTpPLnF1ZXVlLGJhc2VVcGRhdGU6Ty5iYXNlVXBkYXRlLG5leHQ6bnVsbH07UT1udWxsPT09UT9ZZj1hOlEubmV4dD1hO1A9Ty5uZXh0fXJldHVybiBRfWZ1bmN0aW9uIG9nKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gcGcoYSl7dmFyIGI9bmcoKSxjPWIucXVldWU7bnVsbD09PWM/eChcIjMxMVwiKTp2b2lkIDA7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7aWYoMDxlZyl7dmFyIGQ9Yy5kaXNwYXRjaDtpZihudWxsIT09ZGcpe3ZhciBlPWRnLmdldChjKTtpZih2b2lkIDAhPT1lKXtkZy5kZWxldGUoYyk7dmFyIGY9Yi5tZW1vaXplZFN0YXRlO2RvIGY9YShmLGUuYWN0aW9uKSxlPWUubmV4dDt3aGlsZShudWxsIT09ZSk7YmQoZixiLm1lbW9pemVkU3RhdGUpfHwocWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO2IuYmFzZVVwZGF0ZT09PWMubGFzdCYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9ZjtyZXR1cm5bZixkXX19cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxkXX1kPWMubGFzdDt2YXIgZz1iLmJhc2VVcGRhdGU7Zj1iLmJhc2VTdGF0ZTtudWxsIT09Zz8obnVsbCE9PWQmJihkLm5leHQ9bnVsbCksZD1nLm5leHQpOmQ9bnVsbCE9PWQ/ZC5uZXh0Om51bGw7aWYobnVsbCE9PVxuZCl7dmFyIGg9ZT1udWxsLGw9ZCxrPSExO2Rve3ZhciBtPWwuZXhwaXJhdGlvblRpbWU7bTxXZj8oa3x8KGs9ITAsaD1nLGU9ZiksbT4kZiYmKCRmPW0pKTpmPWwuZWFnZXJSZWR1Y2VyPT09YT9sLmVhZ2VyU3RhdGU6YShmLGwuYWN0aW9uKTtnPWw7bD1sLm5leHR9d2hpbGUobnVsbCE9PWwmJmwhPT1kKTtrfHwoaD1nLGU9Zik7YmQoZixiLm1lbW9pemVkU3RhdGUpfHwocWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO2IuYmFzZVVwZGF0ZT1oO2IuYmFzZVN0YXRlPWU7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiByZyhhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07bnVsbD09PWFnPyhhZz17bGFzdEVmZmVjdDpudWxsfSxhZy5sYXN0RWZmZWN0PWEubmV4dD1hKTooYj1hZy5sYXN0RWZmZWN0LG51bGw9PT1iP2FnLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGM9Yi5uZXh0LGIubmV4dD1hLGEubmV4dD1jLGFnLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIHNnKGEsYixjLGQpe3ZhciBlPW1nKCk7Ymd8PWE7ZS5tZW1vaXplZFN0YXRlPXJnKGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gdGcoYSxiLGMsZCl7dmFyIGU9bmcoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZnZyhkLGcuZGVwcykpe3JnKE5mLGMsZixkKTtyZXR1cm59fWJnfD1hO2UubWVtb2l6ZWRTdGF0ZT1yZyhiLGMsZixkKX1mdW5jdGlvbiB1ZyhhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIHZnKCl7fVxuZnVuY3Rpb24gd2coYSxiLGMpezI1PmVnP3ZvaWQgMDp4KFwiMzAxXCIpO3ZhciBkPWEuYWx0ZXJuYXRlO2lmKGE9PT1YZnx8bnVsbCE9PWQmJmQ9PT1YZilpZihjZz0hMCxhPXtleHBpcmF0aW9uVGltZTpXZixhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxudWxsPT09ZGcmJihkZz1uZXcgTWFwKSxjPWRnLmdldChiKSx2b2lkIDA9PT1jKWRnLnNldChiLGEpO2Vsc2V7Zm9yKGI9YztudWxsIT09Yi5uZXh0OyliPWIubmV4dDtiLm5leHQ9YX1lbHNle29mKCk7dmFyIGU9bGYoKTtlPW1mKGUsYSk7dmFyIGY9e2V4cGlyYXRpb25UaW1lOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sZz1iLmxhc3Q7aWYobnVsbD09PWcpZi5uZXh0PWY7ZWxzZXt2YXIgaD1nLm5leHQ7bnVsbCE9PWgmJihmLm5leHQ9aCk7Zy5uZXh0PWZ9Yi5sYXN0PWY7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09XG5kfHwwPT09ZC5leHBpcmF0aW9uVGltZSkmJihkPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZCkpdHJ5e3ZhciBsPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1kKGwsYyk7Zi5lYWdlclJlZHVjZXI9ZDtmLmVhZ2VyU3RhdGU9aztpZihiZChrLGwpKXJldHVybn1jYXRjaChtKXt9ZmluYWxseXt9cWYoYSxlKX19XG52YXIga2c9e3JlYWRDb250ZXh0Ok0sdXNlQ2FsbGJhY2s6ZmcsdXNlQ29udGV4dDpmZyx1c2VFZmZlY3Q6ZmcsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmZyx1c2VMYXlvdXRFZmZlY3Q6ZmcsdXNlTWVtbzpmZyx1c2VSZWR1Y2VyOmZnLHVzZVJlZjpmZyx1c2VTdGF0ZTpmZyx1c2VEZWJ1Z1ZhbHVlOmZnfSxpZz17cmVhZENvbnRleHQ6TSx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe21nKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6TSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gc2coNTE2LFVmfFRmLGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBzZyg0LFBmfFNmLHVnLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gc2coNCxQZnxTZixhLGIpfSxcbnVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1tZygpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1tZygpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtsYXN0Om51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPXdnLmJpbmQobnVsbCxYZixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9bWcoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7dmFyIGI9bWcoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e2xhc3Q6bnVsbCxkaXNwYXRjaDpudWxsLFxubGFzdFJlbmRlcmVkUmVkdWNlcjpvZyxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9d2cuYmluZChudWxsLFhmLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19LHVzZURlYnVnVmFsdWU6dmd9LGpnPXtyZWFkQ29udGV4dDpNLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7dmFyIGM9bmcoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJmdnKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VDb250ZXh0Ok0sdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRnKDUxNixVZnxUZixhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gdGcoNCxQZnxTZix1Zy5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsXG5iKXtyZXR1cm4gdGcoNCxQZnxTZixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9bmcoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJmdnKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOnBnLHVzZVJlZjpmdW5jdGlvbigpe3JldHVybiBuZygpLm1lbW9pemVkU3RhdGV9LHVzZVN0YXRlOmZ1bmN0aW9uKGEpe3JldHVybiBwZyhvZyxhKX0sdXNlRGVidWdWYWx1ZTp2Z30seGc9bnVsbCx5Zz1udWxsLHpnPSExO1xuZnVuY3Rpb24gQWcoYSxiKXt2YXIgYz1LKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gQmcoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIENnKGEpe2lmKHpnKXt2YXIgYj15ZztpZihiKXt2YXIgYz1iO2lmKCFCZyhhLGIpKXtiPURlKGMpO2lmKCFifHwhQmcoYSxiKSl7YS5lZmZlY3RUYWd8PTI7emc9ITE7eGc9YTtyZXR1cm59QWcoeGcsYyl9eGc9YTt5Zz1FZShiKX1lbHNlIGEuZWZmZWN0VGFnfD0yLHpnPSExLHhnPWF9fWZ1bmN0aW9uIERnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTghPT1hLnRhZzspYT1hLnJldHVybjt4Zz1hfWZ1bmN0aW9uIEVnKGEpe2lmKGEhPT14ZylyZXR1cm4hMTtpZighemcpcmV0dXJuIERnKGEpLHpnPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYheGUoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPXlnO2I7KUFnKGEsYiksYj1EZShiKTtEZyhhKTt5Zz14Zz9EZShhLnN0YXRlTm9kZSk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBGZygpe3lnPXhnPW51bGw7emc9ITF9XG52YXIgR2c9VGIuUmVhY3RDdXJyZW50T3duZXIscWc9ITE7ZnVuY3Rpb24gUyhhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP0VmKGIsbnVsbCxjLGQpOkRmKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIEhnKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtJZyhiLGUpO2Q9aGcoYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhcWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSxKZyhhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UyhhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIEtnKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhVmUoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsTGcoYSxiLGcsZCxlLGYpO2E9WWUoYy50eXBlLG51bGwsZCxudWxsLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKGU8ZiYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpkZCxjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiBKZyhhLGIsZik7Yi5lZmZlY3RUYWd8PTE7YT1YZShnLGQsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gTGcoYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmZGQoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmJiYocWc9ITEsZTxmKT9KZyhhLGIsZik6TWcoYSxiLGMsZCxmKX1mdW5jdGlvbiBOZyhhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIE1nKGEsYixjLGQsZSl7dmFyIGY9SihjKT9JZTpILmN1cnJlbnQ7Zj1KZShiLGYpO0lnKGIsZSk7Yz1oZyhhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFxZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLEpnKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtTKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gT2coYSxiLGMsZCxlKXtpZihKKGMpKXt2YXIgZj0hMDtPZShiKX1lbHNlIGY9ITE7SWcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLHZmKGIsYyxkLGUpLHhmKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBsPWcuY29udGV4dCxrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPU0oayk6KGs9SihjKT9JZTpILmN1cnJlbnQsaz1KZShiLGspKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGwhPT1rKSYmd2YoYixnLGQsayk7UGc9ITE7dmFyIHQ9Yi5tZW1vaXplZFN0YXRlO2w9Zy5zdGF0ZT10O3ZhciBBPWIudXBkYXRlUXVldWU7bnVsbCE9PUEmJih5ZihiLEEsZCxnLGUpLGw9Yi5tZW1vaXplZFN0YXRlKTtoIT09ZHx8dCE9PWx8fEkuY3VycmVudHx8UGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoa2YoYixjLG0sZCksbD1iLm1lbW9pemVkU3RhdGUpLChoPVBnfHx1ZihiLGMsaCxkLHQsbCxrKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcbmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1sKSxnLnByb3BzPWQsZy5zdGF0ZT1sLGcuY29udGV4dD1rLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpMKGIudHlwZSxoKSxsPWcuY29udGV4dCxrPWMuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPU0oayk6KGs9SihjKT9JZTpILmN1cnJlbnQsaz1KZShiLGspKSxtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLChwPVwiZnVuY3Rpb25cIj09PVxudHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8bCE9PWspJiZ3ZihiLGcsZCxrKSxQZz0hMSxsPWIubWVtb2l6ZWRTdGF0ZSx0PWcuc3RhdGU9bCxBPWIudXBkYXRlUXVldWUsbnVsbCE9PUEmJih5ZihiLEEsZCxnLGUpLHQ9Yi5tZW1vaXplZFN0YXRlKSxoIT09ZHx8bCE9PXR8fEkuY3VycmVudHx8UGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoa2YoYixjLG0sZCksdD1iLm1lbW9pemVkU3RhdGUpLChtPVBnfHx1ZihiLGMsaCxkLGwsdCxrKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCx0LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsdCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJmw9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJmw9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9XG50KSxnLnByb3BzPWQsZy5zdGF0ZT10LGcuY29udGV4dD1rLGQ9bSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiBRZyhhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBRZyhhLGIsYyxkLGUsZil7TmcoYSxiKTt2YXIgZz0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJlBlKGIsYywhMSksSmcoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7R2cuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9RGYoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1EZihiLG51bGwsaCxmKSk6UyhhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZQZShiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIFJnKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/TWUoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmTWUoYSxiLmNvbnRleHQsITEpO0pmKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIFNnKGEsYixjKXt2YXIgZD1iLm1vZGUsZT1iLnBlbmRpbmdQcm9wcyxmPWIubWVtb2l6ZWRTdGF0ZTtpZigwPT09KGIuZWZmZWN0VGFnJjY0KSl7Zj1udWxsO3ZhciBnPSExfWVsc2UgZj17dGltZWRPdXRBdDpudWxsIT09Zj9mLnRpbWVkT3V0QXQ6MH0sZz0hMCxiLmVmZmVjdFRhZyY9LTY1O2lmKG51bGw9PT1hKWlmKGcpe3ZhciBoPWUuZmFsbGJhY2s7YT1aZShudWxsLGQsMCxudWxsKTswPT09KGIubW9kZSYxKSYmKGEuY2hpbGQ9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQpO2Q9WmUoaCxkLGMsbnVsbCk7YS5zaWJsaW5nPWQ7Yz1hO2MucmV0dXJuPWQucmV0dXJuPWJ9ZWxzZSBjPWQ9RWYoYixudWxsLGUuY2hpbGRyZW4sYyk7ZWxzZSBudWxsIT09YS5tZW1vaXplZFN0YXRlPyhkPWEuY2hpbGQsaD1kLnNpYmxpbmcsZz8oYz1lLmZhbGxiYWNrLGU9WGUoZCxkLnBlbmRpbmdQcm9wcywwKSwwPT09KGIubW9kZSYxKSYmKGc9bnVsbCE9PVxuYi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxnIT09ZC5jaGlsZCYmKGUuY2hpbGQ9ZykpLGQ9ZS5zaWJsaW5nPVhlKGgsYyxoLmV4cGlyYXRpb25UaW1lKSxjPWUsZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsYy5yZXR1cm49ZC5yZXR1cm49Yik6Yz1kPURmKGIsZC5jaGlsZCxlLmNoaWxkcmVuLGMpKTooaD1hLmNoaWxkLGc/KGc9ZS5mYWxsYmFjayxlPVplKG51bGwsZCwwLG51bGwpLGUuY2hpbGQ9aCwwPT09KGIubW9kZSYxKSYmKGUuY2hpbGQ9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQpLGQ9ZS5zaWJsaW5nPVplKGcsZCxjLG51bGwpLGQuZWZmZWN0VGFnfD0yLGM9ZSxlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxjLnJldHVybj1kLnJldHVybj1iKTpkPWM9RGYoYixoLGUuY2hpbGRyZW4sYykpLGIuc3RhdGVOb2RlPWEuc3RhdGVOb2RlO2IubWVtb2l6ZWRTdGF0ZT1mO2IuY2hpbGQ9YztyZXR1cm4gZH1cbmZ1bmN0aW9uIEpnKGEsYixjKXtudWxsIT09YSYmKGIuY29udGV4dERlcGVuZGVuY2llcz1hLmNvbnRleHREZXBlbmRlbmNpZXMpO2lmKGIuY2hpbGRFeHBpcmF0aW9uVGltZTxjKXJldHVybiBudWxsO251bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZD94KFwiMTUzXCIpOnZvaWQgMDtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9WGUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9WGUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gVGcoYSxiLGMpe3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fEkuY3VycmVudClxZz0hMDtlbHNle2lmKGQ8Yyl7cWc9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6UmcoYik7RmcoKTticmVhaztjYXNlIDU6TGYoYik7YnJlYWs7Y2FzZSAxOkooYi50eXBlKSYmT2UoYik7YnJlYWs7Y2FzZSA0OkpmKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpVZyhiLGIubWVtb2l6ZWRQcm9wcy52YWx1ZSk7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtpZigwIT09ZCYmZD49YylyZXR1cm4gU2coYSxiLGMpO2I9SmcoYSxiLGMpO3JldHVybiBudWxsIT09Yj9iLnNpYmxpbmc6bnVsbH19cmV0dXJuIEpnKGEsYixjKX19ZWxzZSBxZz0hMTtiLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1cbmIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7dmFyIGU9SmUoYixILmN1cnJlbnQpO0lnKGIsYyk7ZT1oZyhudWxsLGIsZCxhLGUsYyk7Yi5lZmZlY3RUYWd8PTE7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2xnKCk7aWYoSihkKSl7dmFyIGY9ITA7T2UoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJmtmKGIsZCxnLGEpO2UudXBkYXRlcj10ZjtiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO3hmKGIsZCxhLGMpO2I9UWcobnVsbCxiLGQsITAsZixcbmMpfWVsc2UgYi50YWc9MCxTKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmU9Yi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7Zj1iLnBlbmRpbmdQcm9wczthPWhmKGUpO2IudHlwZT1hO2U9Yi50YWc9V2UoYSk7Zj1MKGEsZik7Zz12b2lkIDA7c3dpdGNoKGUpe2Nhc2UgMDpnPU1nKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxOmc9T2cobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDExOmc9SGcobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDE0Omc9S2cobnVsbCxiLGEsTChhLnR5cGUsZiksZCxjKTticmVhaztkZWZhdWx0OngoXCIzMDZcIixhLFwiXCIpfXJldHVybiBnO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TChkLGUpLE1nKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLFxuZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkwoZCxlKSxPZyhhLGIsZCxlLGMpO2Nhc2UgMzpSZyhiKTtkPWIudXBkYXRlUXVldWU7bnVsbD09PWQ/eChcIjI4MlwiKTp2b2lkIDA7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt5ZihiLGQsYi5wZW5kaW5nUHJvcHMsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKUZnKCksYj1KZyhhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGU9KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmUuaHlkcmF0ZSl5Zz1FZShiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSx4Zz1iLGU9emc9ITA7ZT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD1FZihiLG51bGwsZCxjKSk6KFMoYSxiLGQsYyksRmcoKSk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gTGYoYiksbnVsbD09PWEmJkNnKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxcbmc9ZS5jaGlsZHJlbix4ZShkLGUpP2c9bnVsbDpudWxsIT09ZiYmeGUoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksTmcoYSxiKSwxIT09YyYmYi5tb2RlJjEmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLGI9bnVsbCk6KFMoYSxiLGcsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkNnKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gU2coYSxiLGMpO2Nhc2UgNDpyZXR1cm4gSmYoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9RGYoYixudWxsLGQsYyk6UyhhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkwoZCxlKSxIZyhhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gUyhhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7VWcoYixmKTtpZihudWxsIT09Zyl7dmFyIGg9Zy52YWx1ZTtmPWJkKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MDtpZigwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFJLmN1cnJlbnQpe2I9SmcoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGw9aC5jb250ZXh0RGVwZW5kZW5jaWVzO2lmKG51bGwhPT1sKXtnPWguY2hpbGQ7Zm9yKHZhciBrPWwuZmlyc3Q7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kJiYwIT09XG4oay5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGs9bmYoYyksay50YWc9c2YscGYoaCxrKSk7aC5leHBpcmF0aW9uVGltZTxjJiYoaC5leHBpcmF0aW9uVGltZT1jKTtrPWguYWx0ZXJuYXRlO251bGwhPT1rJiZrLmV4cGlyYXRpb25UaW1lPGMmJihrLmV4cGlyYXRpb25UaW1lPWMpO2s9Yztmb3IodmFyIG09aC5yZXR1cm47bnVsbCE9PW07KXt2YXIgcD1tLmFsdGVybmF0ZTtpZihtLmNoaWxkRXhwaXJhdGlvblRpbWU8ayltLmNoaWxkRXhwaXJhdGlvblRpbWU9ayxudWxsIT09cCYmcC5jaGlsZEV4cGlyYXRpb25UaW1lPGsmJihwLmNoaWxkRXhwaXJhdGlvblRpbWU9ayk7ZWxzZSBpZihudWxsIT09cCYmcC5jaGlsZEV4cGlyYXRpb25UaW1lPGspcC5jaGlsZEV4cGlyYXRpb25UaW1lPWs7ZWxzZSBicmVhazttPW0ucmV0dXJufWwuZXhwaXJhdGlvblRpbWU8YyYmKGwuZXhwaXJhdGlvblRpbWU9Yyk7YnJlYWt9az1rLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9cbm51bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfX1TKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLElnKGIsYyksZT1NKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxTKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1MKGUsYi5wZW5kaW5nUHJvcHMpLGY9TChlLnR5cGUsZiksS2coYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIExnKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PVxuZD9lOkwoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksYi50YWc9MSxKKGQpPyhhPSEwLE9lKGIpKTphPSExLElnKGIsYyksdmYoYixkLGUsYykseGYoYixkLGUsYyksUWcobnVsbCxiLGQsITAsYSxjKX14KFwiMTU2XCIpfXZhciBWZz17Y3VycmVudDpudWxsfSxXZz1udWxsLFhnPW51bGwsWWc9bnVsbDtmdW5jdGlvbiBVZyhhLGIpe3ZhciBjPWEudHlwZS5fY29udGV4dDtHKFZnLGMuX2N1cnJlbnRWYWx1ZSxhKTtjLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBaZyhhKXt2YXIgYj1WZy5jdXJyZW50O0YoVmcsYSk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBJZyhhLGIpe1dnPWE7WWc9WGc9bnVsbDt2YXIgYz1hLmNvbnRleHREZXBlbmRlbmNpZXM7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU+PWImJihxZz0hMCk7YS5jb250ZXh0RGVwZW5kZW5jaWVzPW51bGx9XG5mdW5jdGlvbiBNKGEsYil7aWYoWWchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKVlnPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O251bGw9PT1YZz8obnVsbD09PVdnP3goXCIzMDhcIik6dm9pZCAwLFhnPWIsV2cuY29udGV4dERlcGVuZGVuY2llcz17Zmlyc3Q6YixleHBpcmF0aW9uVGltZTowfSk6WGc9WGcubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyICRnPTAscmY9MSxzZj0yLGFoPTMsUGc9ITE7ZnVuY3Rpb24gYmgoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLGZpcnN0VXBkYXRlOm51bGwsbGFzdFVwZGF0ZTpudWxsLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fVxuZnVuY3Rpb24gY2goYSl7cmV0dXJue2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdFVwZGF0ZTphLmZpcnN0VXBkYXRlLGxhc3RVcGRhdGU6YS5sYXN0VXBkYXRlLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fWZ1bmN0aW9uIG5mKGEpe3JldHVybntleHBpcmF0aW9uVGltZTphLHRhZzokZyxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGwsbmV4dEVmZmVjdDpudWxsfX1mdW5jdGlvbiBkaChhLGIpe251bGw9PT1hLmxhc3RVcGRhdGU/YS5maXJzdFVwZGF0ZT1hLmxhc3RVcGRhdGU9YjooYS5sYXN0VXBkYXRlLm5leHQ9YixhLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBwZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKG51bGw9PT1jKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO3ZhciBlPW51bGw7bnVsbD09PWQmJihkPWEudXBkYXRlUXVldWU9YmgoYS5tZW1vaXplZFN0YXRlKSl9ZWxzZSBkPWEudXBkYXRlUXVldWUsZT1jLnVwZGF0ZVF1ZXVlLG51bGw9PT1kP251bGw9PT1lPyhkPWEudXBkYXRlUXVldWU9YmgoYS5tZW1vaXplZFN0YXRlKSxlPWMudXBkYXRlUXVldWU9YmgoYy5tZW1vaXplZFN0YXRlKSk6ZD1hLnVwZGF0ZVF1ZXVlPWNoKGUpOm51bGw9PT1lJiYoZT1jLnVwZGF0ZVF1ZXVlPWNoKGQpKTtudWxsPT09ZXx8ZD09PWU/ZGgoZCxiKTpudWxsPT09ZC5sYXN0VXBkYXRlfHxudWxsPT09ZS5sYXN0VXBkYXRlPyhkaChkLGIpLGRoKGUsYikpOihkaChkLGIpLGUubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIGVoKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZTtjPW51bGw9PT1jP2EudXBkYXRlUXVldWU9YmgoYS5tZW1vaXplZFN0YXRlKTpmaChhLGMpO251bGw9PT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT9jLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yy5sYXN0Q2FwdHVyZWRVcGRhdGU9YjooYy5sYXN0Q2FwdHVyZWRVcGRhdGUubmV4dD1iLGMubGFzdENhcHR1cmVkVXBkYXRlPWIpfWZ1bmN0aW9uIGZoKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmI9PT1jLnVwZGF0ZVF1ZXVlJiYoYj1hLnVwZGF0ZVF1ZXVlPWNoKGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGdoKGEsYixjLGQsZSxmKXtzd2l0Y2goYy50YWcpe2Nhc2UgcmY6cmV0dXJuIGE9Yy5wYXlsb2FkLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtjYXNlIGFoOmEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0yMDQ5fDY0O2Nhc2UgJGc6YT1jLnBheWxvYWQ7ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7aWYobnVsbD09PWV8fHZvaWQgMD09PWUpYnJlYWs7cmV0dXJuIG4oe30sZCxlKTtjYXNlIHNmOlBnPSEwfXJldHVybiBkfVxuZnVuY3Rpb24geWYoYSxiLGMsZCxlKXtQZz0hMTtiPWZoKGEsYik7Zm9yKHZhciBmPWIuYmFzZVN0YXRlLGc9bnVsbCxoPTAsbD1iLmZpcnN0VXBkYXRlLGs9ZjtudWxsIT09bDspe3ZhciBtPWwuZXhwaXJhdGlvblRpbWU7bTxlPyhudWxsPT09ZyYmKGc9bCxmPWspLGg8bSYmKGg9bSkpOihrPWdoKGEsYixsLGssYyxkKSxudWxsIT09bC5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixsLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0RWZmZWN0P2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWw6KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWwsYi5sYXN0RWZmZWN0PWwpKSk7bD1sLm5leHR9bT1udWxsO2ZvcihsPWIuZmlyc3RDYXB0dXJlZFVwZGF0ZTtudWxsIT09bDspe3ZhciBwPWwuZXhwaXJhdGlvblRpbWU7cDxlPyhudWxsPT09bSYmKG09bCxudWxsPT09ZyYmKGY9aykpLGg8cCYmKGg9cCkpOihrPWdoKGEsYixsLGssYyxkKSxudWxsIT09bC5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD1cbjMyLGwubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RDYXB0dXJlZEVmZmVjdD9iLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bDooYi5sYXN0Q2FwdHVyZWRFZmZlY3QubmV4dEVmZmVjdD1sLGIubGFzdENhcHR1cmVkRWZmZWN0PWwpKSk7bD1sLm5leHR9bnVsbD09PWcmJihiLmxhc3RVcGRhdGU9bnVsbCk7bnVsbD09PW0/Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbDphLmVmZmVjdFRhZ3w9MzI7bnVsbD09PWcmJm51bGw9PT1tJiYoZj1rKTtiLmJhc2VTdGF0ZT1mO2IuZmlyc3RVcGRhdGU9ZztiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9bTthLmV4cGlyYXRpb25UaW1lPWg7YS5tZW1vaXplZFN0YXRlPWt9XG5mdW5jdGlvbiBoaChhLGIsYyl7bnVsbCE9PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSYmKG51bGwhPT1iLmxhc3RVcGRhdGUmJihiLmxhc3RVcGRhdGUubmV4dD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUsYi5sYXN0VXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlKSxiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbCk7aWgoYi5maXJzdEVmZmVjdCxjKTtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO2loKGIuZmlyc3RDYXB0dXJlZEVmZmVjdCxjKTtiLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bnVsbH1mdW5jdGlvbiBpaChhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmNhbGxiYWNrO2lmKG51bGwhPT1jKXthLmNhbGxiYWNrPW51bGw7dmFyIGQ9YjtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz94KFwiMTkxXCIsYyk6dm9pZCAwO2MuY2FsbChkKX1hPWEubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBqaChhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmpjKGIpfX1mdW5jdGlvbiBraChhKXthLmVmZmVjdFRhZ3w9NH12YXIgbGg9dm9pZCAwLG1oPXZvaWQgMCxuaD12b2lkIDAsb2g9dm9pZCAwO2xoPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTttaD1mdW5jdGlvbigpe307XG5uaD1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihmIT09ZCl7dmFyIGc9Yi5zdGF0ZU5vZGU7SWYoTi5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9dmMoZyxmKTtkPXZjKGcsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj0kZChnLGYpO2Q9JGQoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW4oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1iZShnLGYpO2Q9YmUoZyxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGcub25jbGljaz10ZSl9cWUoYyxkKTtnPWM9dm9pZCAwO3ZhciBoPW51bGw7Zm9yKGMgaW4gZilpZighZC5oYXNPd25Qcm9wZXJ0eShjKSYmZi5oYXNPd25Qcm9wZXJ0eShjKSYmbnVsbCE9ZltjXSlpZihcInN0eWxlXCI9PT1cbmMpe3ZhciBsPWZbY107Zm9yKGcgaW4gbClsLmhhc093blByb3BlcnR5KGcpJiYoaHx8KGg9e30pLGhbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWMmJlwiY2hpbGRyZW5cIiE9PWMmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1jJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YyYmXCJhdXRvRm9jdXNcIiE9PWMmJihyYS5oYXNPd25Qcm9wZXJ0eShjKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goYyxudWxsKSk7Zm9yKGMgaW4gZCl7dmFyIGs9ZFtjXTtsPW51bGwhPWY/ZltjXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShjKSYmayE9PWwmJihudWxsIT1rfHxudWxsIT1sKSlpZihcInN0eWxlXCI9PT1jKWlmKGwpe2ZvcihnIGluIGwpIWwuaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChofHwoaD17fSksaFtnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmxbZ10hPT1rW2ddJiYoaHx8XG4oaD17fSksaFtnXT1rW2ddKX1lbHNlIGh8fChhfHwoYT1bXSksYS5wdXNoKGMsaCkpLGg9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Yz8oaz1rP2suX19odG1sOnZvaWQgMCxsPWw/bC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmwhPT1rJiYoYT1hfHxbXSkucHVzaChjLFwiXCIraykpOlwiY2hpbGRyZW5cIj09PWM/bD09PWt8fFwic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoYT1hfHxbXSkucHVzaChjLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiYocmEuaGFzT3duUHJvcGVydHkoYyk/KG51bGwhPWsmJnNlKGUsYyksYXx8bD09PWt8fChhPVtdKSk6KGE9YXx8W10pLnB1c2goYyxrKSl9aCYmKGE9YXx8W10pLnB1c2goXCJzdHlsZVwiLGgpO2U9YTsoYi51cGRhdGVRdWV1ZT1lKSYma2goYil9fTtvaD1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYma2goYil9O1xudmFyIHBoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O2Z1bmN0aW9uIHFoKGEsYil7dmFyIGM9Yi5zb3VyY2UsZD1iLnN0YWNrO251bGw9PT1kJiZudWxsIT09YyYmKGQ9amMoYykpO251bGwhPT1jJiZpYyhjLnR5cGUpO2I9Yi52YWx1ZTtudWxsIT09YSYmMT09PWEudGFnJiZpYyhhLnR5cGUpO3RyeXtjb25zb2xlLmVycm9yKGIpfWNhdGNoKGUpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBlO30pfX1mdW5jdGlvbiByaChhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtzaChhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiB0aChhLGIsYyl7Yz1jLnVwZGF0ZVF1ZXVlO2M9bnVsbCE9PWM/Yy5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWMpe3ZhciBkPWM9Yy5uZXh0O2Rve2lmKChkLnRhZyZhKSE9PU5mKXt2YXIgZT1kLmRlc3Ryb3k7ZC5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1lJiZlKCl9KGQudGFnJmIpIT09TmYmJihlPWQuY3JlYXRlLGQuZGVzdHJveT1lKCkpO2Q9ZC5uZXh0fXdoaWxlKGQhPT1jKX19XG5mdW5jdGlvbiB1aChhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9bmUoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1jLnRhZyYmbnVsbCE9PWMubWVtb2l6ZWRTdGF0ZSl7ZD1jLmNoaWxkLnNpYmxpbmc7ZC5yZXR1cm49YztjPWQ7Y29udGludWV9ZWxzZSBpZihudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxcbmMucmV0dXJuPT09YSlyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIHZoKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBSZSYmUmUoYSk7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YiYmKGI9Yi5sYXN0RWZmZWN0LG51bGwhPT1iKSl7dmFyIGM9Yj1iLm5leHQ7ZG97dmFyIGQ9Yy5kZXN0cm95O2lmKHZvaWQgMCE9PWQpe3ZhciBlPWE7dHJ5e2QoKX1jYXRjaChmKXtzaChlLGYpfX1jPWMubmV4dH13aGlsZShjIT09Yil9YnJlYWs7Y2FzZSAxOnJoKGEpO2I9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtzaChhLGYpfWJyZWFrO2Nhc2UgNTpyaChhKTticmVhaztjYXNlIDQ6d2goYSl9fVxuZnVuY3Rpb24geGgoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiB5aChhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZih4aChiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59eChcIjE2MFwiKTtjPXZvaWQgMH12YXIgZD1iPXZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2Q9ITE7YnJlYWs7Y2FzZSAzOmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OngoXCIxNjFcIil9Yy5lZmZlY3RUYWcmMTYmJihrZShiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8eGgoYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmXG4yKWNvbnRpbnVlIGI7aWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXtpZig1PT09ZS50YWd8fDY9PT1lLnRhZylpZihjKWlmKGQpe3ZhciBmPWIsZz1lLnN0YXRlTm9kZSxoPWM7OD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLGgpOmYuaW5zZXJ0QmVmb3JlKGcsaCl9ZWxzZSBiLmluc2VydEJlZm9yZShlLnN0YXRlTm9kZSxjKTtlbHNlIGQ/KGc9YixoPWUuc3RhdGVOb2RlLDg9PT1nLm5vZGVUeXBlPyhmPWcucGFyZW50Tm9kZSxmLmluc2VydEJlZm9yZShoLGcpKTooZj1nLGYuYXBwZW5kQ2hpbGQoaCkpLGc9Zy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1nJiZ2b2lkIDAhPT1nfHxudWxsIT09Zi5vbmNsaWNrfHwoZi5vbmNsaWNrPXRlKSk6Yi5hcHBlbmRDaGlsZChlLnN0YXRlTm9kZSk7XG5lbHNlIGlmKDQhPT1lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGQucmV0dXJuPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lLnJldHVybnx8ZS5yZXR1cm49PT1hKXJldHVybjtlPWUucmV0dXJufWUuc2libGluZy5yZXR1cm49ZS5yZXR1cm47ZT1lLnNpYmxpbmd9fVxuZnVuY3Rpb24gd2goYSl7Zm9yKHZhciBiPWEsYz0hMSxkPXZvaWQgMCxlPXZvaWQgMDs7KXtpZighYyl7Yz1iLnJldHVybjthOmZvcig7Oyl7bnVsbD09PWM/eChcIjE2MFwiKTp2b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6ZD1jLnN0YXRlTm9kZTtlPSExO2JyZWFrIGE7Y2FzZSAzOmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGE7Y2FzZSA0OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGF9Yz1jLnJldHVybn1jPSEwfWlmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXthOmZvcih2YXIgZj1iLGc9Zjs7KWlmKHZoKGcpLG51bGwhPT1nLmNoaWxkJiY0IT09Zy50YWcpZy5jaGlsZC5yZXR1cm49ZyxnPWcuY2hpbGQ7ZWxzZXtpZihnPT09ZilicmVhaztmb3IoO251bGw9PT1nLnNpYmxpbmc7KXtpZihudWxsPT09Zy5yZXR1cm58fGcucmV0dXJuPT09ZilicmVhayBhO2c9Zy5yZXR1cm59Zy5zaWJsaW5nLnJldHVybj1nLnJldHVybjtnPWcuc2libGluZ31lP1xuKGY9ZCxnPWIuc3RhdGVOb2RlLDg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnKTpmLnJlbW92ZUNoaWxkKGcpKTpkLnJlbW92ZUNoaWxkKGIuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1iLnRhZyl7aWYobnVsbCE9PWIuY2hpbGQpe2Q9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKHZoKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm47Yj1iLnJldHVybjs0PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1cbmZ1bmN0aW9uIHpoKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6dGgoUGYsUWYsYik7YnJlYWs7Y2FzZSAxOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7YT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDt2YXIgZT1iLnR5cGUsZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtudWxsIT09ZiYmQ2UoYyxmLGUsYSxkLGIpfWJyZWFrO2Nhc2UgNjpudWxsPT09Yi5zdGF0ZU5vZGU/eChcIjE2MlwiKTp2b2lkIDA7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wczticmVhaztjYXNlIDM6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmM9Yi5tZW1vaXplZFN0YXRlO2Q9dm9pZCAwO2E9YjtudWxsPT09Yz9kPSExOihkPSEwLGE9Yi5jaGlsZCwwPT09Yy50aW1lZE91dEF0JiYoYy50aW1lZE91dEF0PWxmKCkpKTtudWxsIT09YSYmdWgoYSxkKTtjPVxuYi51cGRhdGVRdWV1ZTtpZihudWxsIT09Yyl7Yi51cGRhdGVRdWV1ZT1udWxsO3ZhciBnPWIuc3RhdGVOb2RlO251bGw9PT1nJiYoZz1iLnN0YXRlTm9kZT1uZXcgcGgpO2MuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYz1BaC5iaW5kKG51bGwsYixhKTtnLmhhcyhhKXx8KGcuYWRkKGEpLGEudGhlbihjLGMpKX0pfWJyZWFrO2Nhc2UgMTc6YnJlYWs7ZGVmYXVsdDp4KFwiMTYzXCIpfX12YXIgQmg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gQ2goYSxiLGMpe2M9bmYoYyk7Yy50YWc9YWg7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe0RoKGQpO3FoKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gRWgoYSxiLGMpe2M9bmYoYyk7Yy50YWc9YWg7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PUZoP0ZoPW5ldyBTZXQoW3RoaXNdKTpGaC5hZGQodGhpcykpO3ZhciBjPWIudmFsdWUsZT1iLnN0YWNrO3FoKGEsYik7dGhpcy5jb21wb25lbnREaWRDYXRjaChjLHtjb21wb25lbnRTdGFjazpudWxsIT09ZT9lOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gR2goYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6SihhLnR5cGUpJiZLZShhKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiYyMDQ4PyhhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGEpOm51bGw7Y2FzZSAzOnJldHVybiBLZihhKSxMZShhKSxiPWEuZWZmZWN0VGFnLDAhPT0oYiY2NCk/eChcIjI4NVwiKTp2b2lkIDAsYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhO2Nhc2UgNTpyZXR1cm4gTWYoYSksbnVsbDtjYXNlIDEzOnJldHVybiBiPWEuZWZmZWN0VGFnLGImMjA0OD8oYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhKTpudWxsO2Nhc2UgMTg6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBLZihhKSxudWxsO2Nhc2UgMTA6cmV0dXJuIFpnKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgSGg9VGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixJaD1UYi5SZWFjdEN1cnJlbnRPd25lcixKaD0xMDczNzQxODIyLEtoPSExLFQ9bnVsbCxMaD1udWxsLFU9MCxNaD0tMSxOaD0hMSxWPW51bGwsT2g9ITEsUGg9bnVsbCxRaD1udWxsLFJoPW51bGwsRmg9bnVsbDtmdW5jdGlvbiBTaCgpe2lmKG51bGwhPT1UKWZvcih2YXIgYT1ULnJldHVybjtudWxsIT09YTspe3ZhciBiPWE7c3dpdGNoKGIudGFnKXtjYXNlIDE6dmFyIGM9Yi50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1jJiZ2b2lkIDAhPT1jJiZLZShiKTticmVhaztjYXNlIDM6S2YoYik7TGUoYik7YnJlYWs7Y2FzZSA1Ok1mKGIpO2JyZWFrO2Nhc2UgNDpLZihiKTticmVhaztjYXNlIDEwOlpnKGIpfWE9YS5yZXR1cm59TGg9bnVsbDtVPTA7TWg9LTE7Tmg9ITE7VD1udWxsfVxuZnVuY3Rpb24gVGgoKXtmb3IoO251bGwhPT1WOyl7dmFyIGE9Vi5lZmZlY3RUYWc7YSYxNiYma2UoVi5zdGF0ZU5vZGUsXCJcIik7aWYoYSYxMjgpe3ZhciBiPVYuYWx0ZXJuYXRlO251bGwhPT1iJiYoYj1iLnJlZixudWxsIT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IobnVsbCk6Yi5jdXJyZW50PW51bGwpKX1zd2l0Y2goYSYxNCl7Y2FzZSAyOnloKFYpO1YuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6eWgoVik7Vi5lZmZlY3RUYWcmPS0zO3poKFYuYWx0ZXJuYXRlLFYpO2JyZWFrO2Nhc2UgNDp6aChWLmFsdGVybmF0ZSxWKTticmVhaztjYXNlIDg6YT1WLHdoKGEpLGEucmV0dXJuPW51bGwsYS5jaGlsZD1udWxsLGEubWVtb2l6ZWRTdGF0ZT1udWxsLGEudXBkYXRlUXVldWU9bnVsbCxhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYS5yZXR1cm49bnVsbCxhLmNoaWxkPW51bGwsYS5tZW1vaXplZFN0YXRlPW51bGwsYS51cGRhdGVRdWV1ZT1udWxsKX1WPVYubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBVaCgpe2Zvcig7bnVsbCE9PVY7KXtpZihWLmVmZmVjdFRhZyYyNTYpYTp7dmFyIGE9Vi5hbHRlcm5hdGUsYj1WO3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aChPZixOZixiKTticmVhayBhO2Nhc2UgMTppZihiLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOkwoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1icmVhayBhO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrIGE7ZGVmYXVsdDp4KFwiMTYzXCIpfX1WPVYubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBWaChhLGIpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYz1WLmVmZmVjdFRhZztpZihjJjM2KXt2YXIgZD1WLmFsdGVybmF0ZSxlPVYsZj1iO3N3aXRjaChlLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aChSZixTZixlKTticmVhaztjYXNlIDE6dmFyIGc9ZS5zdGF0ZU5vZGU7aWYoZS5lZmZlY3RUYWcmNClpZihudWxsPT09ZClnLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgaD1lLmVsZW1lbnRUeXBlPT09ZS50eXBlP2QubWVtb2l6ZWRQcm9wczpMKGUudHlwZSxkLm1lbW9pemVkUHJvcHMpO2cuY29tcG9uZW50RGlkVXBkYXRlKGgsZC5tZW1vaXplZFN0YXRlLGcuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWQ9ZS51cGRhdGVRdWV1ZTtudWxsIT09ZCYmaGgoZSxkLGcsZik7YnJlYWs7Y2FzZSAzOmQ9ZS51cGRhdGVRdWV1ZTtpZihudWxsIT09ZCl7Zz1udWxsO2lmKG51bGwhPT1lLmNoaWxkKXN3aXRjaChlLmNoaWxkLnRhZyl7Y2FzZSA1Omc9XG5lLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Zz1lLmNoaWxkLnN0YXRlTm9kZX1oaChlLGQsZyxmKX1icmVhaztjYXNlIDU6Zj1lLnN0YXRlTm9kZTtudWxsPT09ZCYmZS5lZmZlY3RUYWcmNCYmd2UoZS50eXBlLGUubWVtb2l6ZWRQcm9wcykmJmYuZm9jdXMoKTticmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzpicmVhaztjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6eChcIjE2M1wiKX19YyYxMjgmJihlPVYucmVmLG51bGwhPT1lJiYoZj1WLnN0YXRlTm9kZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9lKGYpOmUuY3VycmVudD1mKSk7YyY1MTImJihQaD1hKTtWPVYubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBXaChhLGIpe1JoPVFoPVBoPW51bGw7dmFyIGM9VztXPSEwO2Rve2lmKGIuZWZmZWN0VGFnJjUxMil7dmFyIGQ9ITEsZT12b2lkIDA7dHJ5e3ZhciBmPWI7dGgoVWYsTmYsZik7dGgoTmYsVGYsZil9Y2F0Y2goZyl7ZD0hMCxlPWd9ZCYmc2goYixlKX1iPWIubmV4dEVmZmVjdH13aGlsZShudWxsIT09Yik7Vz1jO2M9YS5leHBpcmF0aW9uVGltZTswIT09YyYmWGgoYSxjKTtYfHxXfHxZaCgxMDczNzQxODIzLCExKX1mdW5jdGlvbiBvZigpe251bGwhPT1RaCYmQmUoUWgpO251bGwhPT1SaCYmUmgoKX1cbmZ1bmN0aW9uIFpoKGEsYil7T2g9S2g9ITA7YS5jdXJyZW50PT09Yj94KFwiMTc3XCIpOnZvaWQgMDt2YXIgYz1hLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTswPT09Yz94KFwiMjYxXCIpOnZvaWQgMDthLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBkPWIuZXhwaXJhdGlvblRpbWUsZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU7ZWYoYSxlPmQ/ZTpkKTtJaC5jdXJyZW50PW51bGw7ZD12b2lkIDA7MTxiLmVmZmVjdFRhZz9udWxsIT09Yi5sYXN0RWZmZWN0PyhiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iLGQ9Yi5maXJzdEVmZmVjdCk6ZD1iOmQ9Yi5maXJzdEVmZmVjdDt1ZT1CZDt2ZT1QZCgpO0JkPSExO2ZvcihWPWQ7bnVsbCE9PVY7KXtlPSExO3ZhciBmPXZvaWQgMDt0cnl7VWgoKX1jYXRjaChoKXtlPSEwLGY9aH1lJiYobnVsbD09PVY/eChcIjE3OFwiKTp2b2lkIDAsc2goVixmKSxudWxsIT09ViYmKFY9Vi5uZXh0RWZmZWN0KSl9Zm9yKFY9ZDtudWxsIT09Vjspe2U9ITE7XG5mPXZvaWQgMDt0cnl7VGgoKX1jYXRjaChoKXtlPSEwLGY9aH1lJiYobnVsbD09PVY/eChcIjE3OFwiKTp2b2lkIDAsc2goVixmKSxudWxsIT09ViYmKFY9Vi5uZXh0RWZmZWN0KSl9UWQodmUpO3ZlPW51bGw7QmQ9ISF1ZTt1ZT1udWxsO2EuY3VycmVudD1iO2ZvcihWPWQ7bnVsbCE9PVY7KXtlPSExO2Y9dm9pZCAwO3RyeXtWaChhLGMpfWNhdGNoKGgpe2U9ITAsZj1ofWUmJihudWxsPT09Vj94KFwiMTc4XCIpOnZvaWQgMCxzaChWLGYpLG51bGwhPT1WJiYoVj1WLm5leHRFZmZlY3QpKX1pZihudWxsIT09ZCYmbnVsbCE9PVBoKXt2YXIgZz1XaC5iaW5kKG51bGwsYSxkKTtRaD1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGZ1bmN0aW9uKCl7cmV0dXJuIEFlKGcpfSk7Umg9Z31LaD1PaD0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgUWUmJlFlKGIuc3RhdGVOb2RlKTtjPWIuZXhwaXJhdGlvblRpbWU7Yj1iLmNoaWxkRXhwaXJhdGlvblRpbWU7Yj1cbmI+Yz9iOmM7MD09PWImJihGaD1udWxsKTskaChhLGIpfVxuZnVuY3Rpb24gYWkoYSl7Zm9yKDs7KXt2YXIgYj1hLmFsdGVybmF0ZSxjPWEucmV0dXJuLGQ9YS5zaWJsaW5nO2lmKDA9PT0oYS5lZmZlY3RUYWcmMTAyNCkpe1Q9YTthOnt2YXIgZT1iO2I9YTt2YXIgZj1VO3ZhciBnPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgMTY6YnJlYWs7Y2FzZSAxNTpjYXNlIDA6YnJlYWs7Y2FzZSAxOkooYi50eXBlKSYmS2UoYik7YnJlYWs7Y2FzZSAzOktmKGIpO0xlKGIpO2c9Yi5zdGF0ZU5vZGU7Zy5wZW5kaW5nQ29udGV4dCYmKGcuY29udGV4dD1nLnBlbmRpbmdDb250ZXh0LGcucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWV8fG51bGw9PT1lLmNoaWxkKUVnKGIpLGIuZWZmZWN0VGFnJj0tMzttaChiKTticmVhaztjYXNlIDU6TWYoYik7dmFyIGg9SWYoSGYuY3VycmVudCk7Zj1iLnR5cGU7aWYobnVsbCE9PWUmJm51bGwhPWIuc3RhdGVOb2RlKW5oKGUsYixmLGcsaCksZS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD1cbjEyOCk7ZWxzZSBpZihnKXt2YXIgbD1JZihOLmN1cnJlbnQpO2lmKEVnKGIpKXtnPWI7ZT1nLnN0YXRlTm9kZTt2YXIgaz1nLnR5cGUsbT1nLm1lbW9pemVkUHJvcHMscD1oO2VbRmFdPWc7ZVtHYV09bTtmPXZvaWQgMDtoPWs7c3dpdGNoKGgpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6RShcImxvYWRcIixlKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3Ioaz0wO2s8YWIubGVuZ3RoO2srKylFKGFiW2tdLGUpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpFKFwiZXJyb3JcIixlKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpFKFwiZXJyb3JcIixlKTtFKFwibG9hZFwiLGUpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RShcInJlc2V0XCIsZSk7RShcInN1Ym1pdFwiLGUpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RShcInRvZ2dsZVwiLGUpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOndjKGUsbSk7RShcImludmFsaWRcIixlKTtzZShwLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmUuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIW0ubXVsdGlwbGV9O0UoXCJpbnZhbGlkXCIsZSk7c2UocCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmNlKGUsbSksRShcImludmFsaWRcIixlKSxzZShwLFwib25DaGFuZ2VcIil9cWUoaCxtKTtrPW51bGw7Zm9yKGYgaW4gbSltLmhhc093blByb3BlcnR5KGYpJiYobD1tW2ZdLFwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBsP2UudGV4dENvbnRlbnQhPT1sJiYoaz1bXCJjaGlsZHJlblwiLGxdKTpcIm51bWJlclwiPT09dHlwZW9mIGwmJmUudGV4dENvbnRlbnQhPT1cIlwiK2wmJihrPVtcImNoaWxkcmVuXCIsXCJcIitsXSk6cmEuaGFzT3duUHJvcGVydHkoZikmJm51bGwhPWwmJnNlKHAsZikpO3N3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjpSYihlKTtBYyhlLG0sITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlJiKGUpO2VlKGUsbSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBtLm9uQ2xpY2smJlxuKGUub25jbGljaz10ZSl9Zj1rO2cudXBkYXRlUXVldWU9ZjtnPW51bGwhPT1mPyEwOiExO2cmJmtoKGIpfWVsc2V7bT1iO3A9ZjtlPWc7az05PT09aC5ub2RlVHlwZT9oOmgub3duZXJEb2N1bWVudDtsPT09ZmUuaHRtbCYmKGw9Z2UocCkpO2w9PT1mZS5odG1sP1wic2NyaXB0XCI9PT1wPyhlPWsuY3JlYXRlRWxlbWVudChcImRpdlwiKSxlLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGs9ZS5yZW1vdmVDaGlsZChlLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGUuaXM/az1rLmNyZWF0ZUVsZW1lbnQocCx7aXM6ZS5pc30pOihrPWsuY3JlYXRlRWxlbWVudChwKSxcInNlbGVjdFwiPT09cCYmKHA9ayxlLm11bHRpcGxlP3AubXVsdGlwbGU9ITA6ZS5zaXplJiYocC5zaXplPWUuc2l6ZSkpKTprPWsuY3JlYXRlRWxlbWVudE5TKGwscCk7ZT1rO2VbRmFdPW07ZVtHYV09ZztsaChlLGIsITEsITEpO3A9ZTtrPWY7bT1nO3ZhciB0PWgsQT1yZShrLG0pO3N3aXRjaChrKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkUoXCJsb2FkXCIsXG5wKTtoPW07YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGg9MDtoPGFiLmxlbmd0aDtoKyspRShhYltoXSxwKTtoPW07YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkUoXCJlcnJvclwiLHApO2g9bTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpFKFwiZXJyb3JcIixwKTtFKFwibG9hZFwiLHApO2g9bTticmVhaztjYXNlIFwiZm9ybVwiOkUoXCJyZXNldFwiLHApO0UoXCJzdWJtaXRcIixwKTtoPW07YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpFKFwidG9nZ2xlXCIscCk7aD1tO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOndjKHAsbSk7aD12YyhwLG0pO0UoXCJpbnZhbGlkXCIscCk7c2UodCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpoPSRkKHAsbSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnAuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFtLm11bHRpcGxlfTtoPW4oe30sbSx7dmFsdWU6dm9pZCAwfSk7RShcImludmFsaWRcIixwKTtzZSh0LFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Y2UocCxcbm0pO2g9YmUocCxtKTtFKFwiaW52YWxpZFwiLHApO3NlKHQsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0Omg9bX1xZShrLGgpO2w9dm9pZCAwO3ZhciB2PWssUj1wLHU9aDtmb3IobCBpbiB1KWlmKHUuaGFzT3duUHJvcGVydHkobCkpe3ZhciBxPXVbbF07XCJzdHlsZVwiPT09bD9vZShSLHEpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KHE9cT9xLl9faHRtbDp2b2lkIDAsbnVsbCE9cSYmamUoUixxKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiPT09dHlwZW9mIHE/KFwidGV4dGFyZWFcIiE9PXZ8fFwiXCIhPT1xKSYma2UoUixxKTpcIm51bWJlclwiPT09dHlwZW9mIHEmJmtlKFIsXCJcIitxKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYocmEuaGFzT3duUHJvcGVydHkobCk/bnVsbCE9cSYmc2UodCxsKTpudWxsIT1xJiZ0YyhSLGwscSxBKSl9c3dpdGNoKGspe2Nhc2UgXCJpbnB1dFwiOlJiKHApO1xuQWMocCxtLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpSYihwKTtlZShwLG0pO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1tLnZhbHVlJiZwLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIit1YyhtLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmg9cDtoLm11bHRpcGxlPSEhbS5tdWx0aXBsZTtwPW0udmFsdWU7bnVsbCE9cD9hZShoLCEhbS5tdWx0aXBsZSxwLCExKTpudWxsIT1tLmRlZmF1bHRWYWx1ZSYmYWUoaCwhIW0ubXVsdGlwbGUsbS5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGgub25DbGljayYmKHAub25jbGljaz10ZSl9KGc9d2UoZixnKSkmJmtoKGIpO2Iuc3RhdGVOb2RlPWV9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZSBudWxsPT09Yi5zdGF0ZU5vZGU/eChcIjE2NlwiKTp2b2lkIDA7YnJlYWs7Y2FzZSA2OmUmJm51bGwhPWIuc3RhdGVOb2RlP29oKGUsYixlLm1lbW9pemVkUHJvcHMsZyk6KFwic3RyaW5nXCIhPT1cbnR5cGVvZiBnJiYobnVsbD09PWIuc3RhdGVOb2RlP3goXCIxNjZcIik6dm9pZCAwKSxlPUlmKEhmLmN1cnJlbnQpLElmKE4uY3VycmVudCksRWcoYik/KGc9YixmPWcuc3RhdGVOb2RlLGU9Zy5tZW1vaXplZFByb3BzLGZbRmFdPWcsKGc9Zi5ub2RlVmFsdWUhPT1lKSYma2goYikpOihmPWIsZz0oOT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGcpLGdbRmFdPWIsZi5zdGF0ZU5vZGU9ZykpO2JyZWFrO2Nhc2UgMTE6YnJlYWs7Y2FzZSAxMzpnPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSl7Yi5leHBpcmF0aW9uVGltZT1mO1Q9YjticmVhayBhfWc9bnVsbCE9PWc7Zj1udWxsIT09ZSYmbnVsbCE9PWUubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmIWcmJmYmJihlPWUuY2hpbGQuc2libGluZyxudWxsIT09ZSYmKGg9Yi5maXJzdEVmZmVjdCxudWxsIT09aD8oYi5maXJzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1oKTooYi5maXJzdEVmZmVjdD1cbmIubGFzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1udWxsKSxlLmVmZmVjdFRhZz04KSk7aWYoZ3x8ZiliLmVmZmVjdFRhZ3w9NDticmVhaztjYXNlIDc6YnJlYWs7Y2FzZSA4OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSA0OktmKGIpO21oKGIpO2JyZWFrO2Nhc2UgMTA6WmcoYik7YnJlYWs7Y2FzZSA5OmJyZWFrO2Nhc2UgMTQ6YnJlYWs7Y2FzZSAxNzpKKGIudHlwZSkmJktlKGIpO2JyZWFrO2Nhc2UgMTg6YnJlYWs7ZGVmYXVsdDp4KFwiMTU2XCIpfVQ9bnVsbH1iPWE7aWYoMT09PVV8fDEhPT1iLmNoaWxkRXhwaXJhdGlvblRpbWUpe2c9MDtmb3IoZj1iLmNoaWxkO251bGwhPT1mOyllPWYuZXhwaXJhdGlvblRpbWUsaD1mLmNoaWxkRXhwaXJhdGlvblRpbWUsZT5nJiYoZz1lKSxoPmcmJihnPWgpLGY9Zi5zaWJsaW5nO2IuY2hpbGRFeHBpcmF0aW9uVGltZT1nfWlmKG51bGwhPT1UKXJldHVybiBUO251bGwhPT1jJiYwPT09KGMuZWZmZWN0VGFnJjEwMjQpJiYobnVsbD09PWMuZmlyc3RFZmZlY3QmJlxuKGMuZmlyc3RFZmZlY3Q9YS5maXJzdEVmZmVjdCksbnVsbCE9PWEubGFzdEVmZmVjdCYmKG51bGwhPT1jLmxhc3RFZmZlY3QmJihjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxjLmxhc3RFZmZlY3Q9YS5sYXN0RWZmZWN0KSwxPGEuZWZmZWN0VGFnJiYobnVsbCE9PWMubGFzdEVmZmVjdD9jLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hOmMuZmlyc3RFZmZlY3Q9YSxjLmxhc3RFZmZlY3Q9YSkpfWVsc2V7YT1HaChhLFUpO2lmKG51bGwhPT1hKXJldHVybiBhLmVmZmVjdFRhZyY9MTAyMyxhO251bGwhPT1jJiYoYy5maXJzdEVmZmVjdD1jLmxhc3RFZmZlY3Q9bnVsbCxjLmVmZmVjdFRhZ3w9MTAyNCl9aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2UgYnJlYWt9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBiaShhKXt2YXIgYj1UZyhhLmFsdGVybmF0ZSxhLFUpO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09YiYmKGI9YWkoYSkpO0loLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIGNpKGEsYil7S2g/eChcIjI0M1wiKTp2b2lkIDA7b2YoKTtLaD0hMDt2YXIgYz1IaC5jdXJyZW50O0hoLmN1cnJlbnQ9a2c7dmFyIGQ9YS5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjtpZihkIT09VXx8YSE9PUxofHxudWxsPT09VClTaCgpLExoPWEsVT1kLFQ9WGUoTGguY3VycmVudCxudWxsLFUpLGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGU9ITE7ZG97dHJ5e2lmKGIpZm9yKDtudWxsIT09VCYmIWRpKCk7KVQ9YmkoVCk7ZWxzZSBmb3IoO251bGwhPT1UOylUPWJpKFQpfWNhdGNoKHUpe2lmKFlnPVhnPVdnPW51bGwsbGcoKSxudWxsPT09VCllPSEwLERoKHUpO2Vsc2V7bnVsbD09PVQ/eChcIjI3MVwiKTp2b2lkIDA7dmFyIGY9VCxnPWYucmV0dXJuO2lmKG51bGw9PT1nKWU9ITAsRGgodSk7ZWxzZXthOnt2YXIgaD1hLGw9ZyxrPWYsbT11O2c9VTtrLmVmZmVjdFRhZ3w9MTAyNDtrLmZpcnN0RWZmZWN0PWsubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1cbm0mJlwib2JqZWN0XCI9PT10eXBlb2YgbSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIG0udGhlbil7dmFyIHA9bTttPWw7dmFyIHQ9LTEsQT0tMTtkb3tpZigxMz09PW0udGFnKXt2YXIgdj1tLmFsdGVybmF0ZTtpZihudWxsIT09diYmKHY9di5tZW1vaXplZFN0YXRlLG51bGwhPT12KSl7QT0xMCooMTA3Mzc0MTgyMi12LnRpbWVkT3V0QXQpO2JyZWFrfXY9bS5wZW5kaW5nUHJvcHMubWF4RHVyYXRpb247aWYoXCJudW1iZXJcIj09PXR5cGVvZiB2KWlmKDA+PXYpdD0wO2Vsc2UgaWYoLTE9PT10fHx2PHQpdD12fW09bS5yZXR1cm59d2hpbGUobnVsbCE9PW0pO209bDtkb3tpZih2PTEzPT09bS50YWcpdj12b2lkIDA9PT1tLm1lbW9pemVkUHJvcHMuZmFsbGJhY2s/ITE6bnVsbD09PW0ubWVtb2l6ZWRTdGF0ZTtpZih2KXtsPW0udXBkYXRlUXVldWU7bnVsbD09PWw/KGw9bmV3IFNldCxsLmFkZChwKSxtLnVwZGF0ZVF1ZXVlPWwpOmwuYWRkKHApO2lmKDA9PT0obS5tb2RlJjEpKXttLmVmZmVjdFRhZ3w9XG42NDtrLmVmZmVjdFRhZyY9LTE5NTc7MT09PWsudGFnJiYobnVsbD09PWsuYWx0ZXJuYXRlP2sudGFnPTE3OihnPW5mKDEwNzM3NDE4MjMpLGcudGFnPXNmLHBmKGssZykpKTtrLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7YnJlYWsgYX1rPWg7bD1nO3ZhciBSPWsucGluZ0NhY2hlO251bGw9PT1SPyhSPWsucGluZ0NhY2hlPW5ldyBCaCx2PW5ldyBTZXQsUi5zZXQocCx2KSk6KHY9Ui5nZXQocCksdm9pZCAwPT09diYmKHY9bmV3IFNldCxSLnNldChwLHYpKSk7di5oYXMobCl8fCh2LmFkZChsKSxrPWVpLmJpbmQobnVsbCxrLHAsbCkscC50aGVuKGssaykpOy0xPT09dD9oPTEwNzM3NDE4MjM6KC0xPT09QSYmKEE9MTAqKDEwNzM3NDE4MjItZ2YoaCxnKSktNUUzKSxoPUErdCk7MDw9aCYmTWg8aCYmKE1oPWgpO20uZWZmZWN0VGFnfD0yMDQ4O20uZXhwaXJhdGlvblRpbWU9ZzticmVhayBhfW09bS5yZXR1cm59d2hpbGUobnVsbCE9PW0pO209RXJyb3IoKGljKGsudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXG5cIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK2pjKGspKX1OaD0hMDttPWpoKG0sayk7aD1sO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmguZWZmZWN0VGFnfD0yMDQ4O2guZXhwaXJhdGlvblRpbWU9ZztnPUNoKGgsbSxnKTtlaChoLGcpO2JyZWFrIGE7Y2FzZSAxOmlmKHQ9bSxBPWgudHlwZSxrPWguc3RhdGVOb2RlLDA9PT0oaC5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEEuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09ayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09Rmh8fCFGaC5oYXMoaykpKSl7aC5lZmZlY3RUYWd8PTIwNDg7XG5oLmV4cGlyYXRpb25UaW1lPWc7Zz1FaChoLHQsZyk7ZWgoaCxnKTticmVhayBhfX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKX1UPWFpKGYpO2NvbnRpbnVlfX19YnJlYWt9d2hpbGUoMSk7S2g9ITE7SGguY3VycmVudD1jO1lnPVhnPVdnPW51bGw7bGcoKTtpZihlKUxoPW51bGwsYS5maW5pc2hlZFdvcms9bnVsbDtlbHNlIGlmKG51bGwhPT1UKWEuZmluaXNoZWRXb3JrPW51bGw7ZWxzZXtjPWEuY3VycmVudC5hbHRlcm5hdGU7bnVsbD09PWM/eChcIjI4MVwiKTp2b2lkIDA7TGg9bnVsbDtpZihOaCl7ZT1hLmxhdGVzdFBlbmRpbmdUaW1lO2Y9YS5sYXRlc3RTdXNwZW5kZWRUaW1lO2c9YS5sYXRlc3RQaW5nZWRUaW1lO2lmKDAhPT1lJiZlPGR8fDAhPT1mJiZmPGR8fDAhPT1nJiZnPGQpe2ZmKGEsZCk7ZmkoYSxjLGQsYS5leHBpcmF0aW9uVGltZSwtMSk7cmV0dXJufWlmKCFhLmRpZEVycm9yJiZiKXthLmRpZEVycm9yPSEwO2Q9YS5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj1kO1xuYj1hLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7ZmkoYSxjLGQsYiwtMSk7cmV0dXJufX1iJiYtMSE9PU1oPyhmZihhLGQpLGI9MTAqKDEwNzM3NDE4MjItZ2YoYSxkKSksYjxNaCYmKE1oPWIpLGI9MTAqKDEwNzM3NDE4MjItbGYoKSksYj1NaC1iLGZpKGEsYyxkLGEuZXhwaXJhdGlvblRpbWUsMD5iPzA6YikpOihhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1kLGEuZmluaXNoZWRXb3JrPWMpfX1cbmZ1bmN0aW9uIHNoKGEsYil7Zm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7c3dpdGNoKGMudGFnKXtjYXNlIDE6dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PUZofHwhRmguaGFzKGQpKSl7YT1qaChiLGEpO2E9RWgoYyxhLDEwNzM3NDE4MjMpO3BmKGMsYSk7cWYoYywxMDczNzQxODIzKTtyZXR1cm59YnJlYWs7Y2FzZSAzOmE9amgoYixhKTthPUNoKGMsYSwxMDczNzQxODIzKTtwZihjLGEpO3FmKGMsMTA3Mzc0MTgyMyk7cmV0dXJufWM9Yy5yZXR1cm59Mz09PWEudGFnJiYoYz1qaChiLGEpLGM9Q2goYSxjLDEwNzM3NDE4MjMpLHBmKGEsYykscWYoYSwxMDczNzQxODIzKSl9XG5mdW5jdGlvbiBtZihhLGIpe3ZhciBjPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwoKSxkPXZvaWQgMDtpZigwPT09KGIubW9kZSYxKSlkPTEwNzM3NDE4MjM7ZWxzZSBpZihLaCYmIU9oKWQ9VTtlbHNle3N3aXRjaChjKXtjYXNlIHIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk6ZD0xMDczNzQxODIzO2JyZWFrO2Nhc2Ugci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eTpkPTEwNzM3NDE4MjItMTAqKCgoMTA3Mzc0MTgyMi1hKzE1KS8xMHwwKSsxKTticmVhaztjYXNlIHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk6ZD0xMDczNzQxODIyLTI1KigoKDEwNzM3NDE4MjItYSs1MDApLzI1fDApKzEpO2JyZWFrO2Nhc2Ugci51bnN0YWJsZV9Mb3dQcmlvcml0eTpjYXNlIHIudW5zdGFibGVfSWRsZVByaW9yaXR5OmQ9MTticmVhaztkZWZhdWx0OngoXCIzMTNcIil9bnVsbCE9PUxoJiZkPT09VSYmLS1kfWM9PT1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5JiZcbigwPT09Z2l8fGQ8Z2kpJiYoZ2k9ZCk7cmV0dXJuIGR9ZnVuY3Rpb24gZWkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtpZihudWxsIT09TGgmJlU9PT1jKUxoPW51bGw7ZWxzZSBpZihiPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXRlc3RTdXNwZW5kZWRUaW1lLDAhPT1iJiZjPD1iJiZjPj1kKXthLmRpZEVycm9yPSExO2I9YS5sYXRlc3RQaW5nZWRUaW1lO2lmKDA9PT1ifHxiPmMpYS5sYXRlc3RQaW5nZWRUaW1lPWM7ZGYoYyxhKTtjPWEuZXhwaXJhdGlvblRpbWU7MCE9PWMmJlhoKGEsYyl9fWZ1bmN0aW9uIEFoKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9bGYoKTtiPW1mKGIsYSk7YT1oaShhLGIpO251bGwhPT1hJiYoY2YoYSxiKSxiPWEuZXhwaXJhdGlvblRpbWUsMCE9PWImJlhoKGEsYikpfVxuZnVuY3Rpb24gaGkoYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBkPWEucmV0dXJuLGU9bnVsbDtpZihudWxsPT09ZCYmMz09PWEudGFnKWU9YS5zdGF0ZU5vZGU7ZWxzZSBmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtkLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGQuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiYzPT09ZC50YWcpe2U9ZC5zdGF0ZU5vZGU7YnJlYWt9ZD1kLnJldHVybn1yZXR1cm4gZX1cbmZ1bmN0aW9uIHFmKGEsYil7YT1oaShhLGIpO251bGwhPT1hJiYoIUtoJiYwIT09VSYmYj5VJiZTaCgpLGNmKGEsYiksS2gmJiFPaCYmTGg9PT1hfHxYaChhLGEuZXhwaXJhdGlvblRpbWUpLGlpPmppJiYoaWk9MCx4KFwiMTg1XCIpKSl9ZnVuY3Rpb24ga2koYSxiLGMsZCxlKXtyZXR1cm4gci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9dmFyIGxpPW51bGwsWT1udWxsLG1pPTAsbmk9dm9pZCAwLFc9ITEsb2k9bnVsbCxaPTAsZ2k9MCxwaT0hMSxxaT1udWxsLFg9ITEscmk9ITEsc2k9bnVsbCx0aT1yLnVuc3RhYmxlX25vdygpLHVpPTEwNzM3NDE4MjItKHRpLzEwfDApLHZpPXVpLGppPTUwLGlpPTAsd2k9bnVsbDtmdW5jdGlvbiB4aSgpe3VpPTEwNzM3NDE4MjItKChyLnVuc3RhYmxlX25vdygpLXRpKS8xMHwwKX1cbmZ1bmN0aW9uIHlpKGEsYil7aWYoMCE9PW1pKXtpZihiPG1pKXJldHVybjtudWxsIT09bmkmJnIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2sobmkpfW1pPWI7YT1yLnVuc3RhYmxlX25vdygpLXRpO25pPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayh6aSx7dGltZW91dDoxMCooMTA3Mzc0MTgyMi1iKS1hfSl9ZnVuY3Rpb24gZmkoYSxiLGMsZCxlKXthLmV4cGlyYXRpb25UaW1lPWQ7MCE9PWV8fGRpKCk/MDxlJiYoYS50aW1lb3V0SGFuZGxlPXllKEFpLmJpbmQobnVsbCxhLGIsYyksZSkpOihhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jLGEuZmluaXNoZWRXb3JrPWIpfWZ1bmN0aW9uIEFpKGEsYixjKXthLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jO2EuZmluaXNoZWRXb3JrPWI7eGkoKTt2aT11aTtCaShhLGMpfWZ1bmN0aW9uICRoKGEsYil7YS5leHBpcmF0aW9uVGltZT1iO2EuZmluaXNoZWRXb3JrPW51bGx9XG5mdW5jdGlvbiBsZigpe2lmKFcpcmV0dXJuIHZpO0NpKCk7aWYoMD09PVp8fDE9PT1aKXhpKCksdmk9dWk7cmV0dXJuIHZpfWZ1bmN0aW9uIFhoKGEsYil7bnVsbD09PWEubmV4dFNjaGVkdWxlZFJvb3Q/KGEuZXhwaXJhdGlvblRpbWU9YixudWxsPT09WT8obGk9WT1hLGEubmV4dFNjaGVkdWxlZFJvb3Q9YSk6KFk9WS5uZXh0U2NoZWR1bGVkUm9vdD1hLFkubmV4dFNjaGVkdWxlZFJvb3Q9bGkpKTpiPmEuZXhwaXJhdGlvblRpbWUmJihhLmV4cGlyYXRpb25UaW1lPWIpO1d8fChYP3JpJiYob2k9YSxaPTEwNzM3NDE4MjMsRGkoYSwxMDczNzQxODIzLCExKSk6MTA3Mzc0MTgyMz09PWI/WWgoMTA3Mzc0MTgyMywhMSk6eWkoYSxiKSl9XG5mdW5jdGlvbiBDaSgpe3ZhciBhPTAsYj1udWxsO2lmKG51bGwhPT1ZKWZvcih2YXIgYz1ZLGQ9bGk7bnVsbCE9PWQ7KXt2YXIgZT1kLmV4cGlyYXRpb25UaW1lO2lmKDA9PT1lKXtudWxsPT09Y3x8bnVsbD09PVk/eChcIjI0NFwiKTp2b2lkIDA7aWYoZD09PWQubmV4dFNjaGVkdWxlZFJvb3Qpe2xpPVk9ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgaWYoZD09PWxpKWxpPWU9ZC5uZXh0U2NoZWR1bGVkUm9vdCxZLm5leHRTY2hlZHVsZWRSb290PWUsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Vsc2UgaWYoZD09PVkpe1k9YztZLm5leHRTY2hlZHVsZWRSb290PWxpO2QubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGMubmV4dFNjaGVkdWxlZFJvb3Q9ZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7ZT5hJiYoYT1lLGI9ZCk7aWYoZD09PVkpYnJlYWs7aWYoMTA3Mzc0MTgyMz09PVxuYSlicmVhaztjPWQ7ZD1kLm5leHRTY2hlZHVsZWRSb290fX1vaT1iO1o9YX12YXIgRWk9ITE7ZnVuY3Rpb24gZGkoKXtyZXR1cm4gRWk/ITA6ci51bnN0YWJsZV9zaG91bGRZaWVsZCgpP0VpPSEwOiExfWZ1bmN0aW9uIHppKCl7dHJ5e2lmKCFkaSgpJiZudWxsIT09bGkpe3hpKCk7dmFyIGE9bGk7ZG97dmFyIGI9YS5leHBpcmF0aW9uVGltZTswIT09YiYmdWk8PWImJihhLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPXVpKTthPWEubmV4dFNjaGVkdWxlZFJvb3R9d2hpbGUoYSE9PWxpKX1ZaCgwLCEwKX1maW5hbGx5e0VpPSExfX1cbmZ1bmN0aW9uIFloKGEsYil7Q2koKTtpZihiKWZvcih4aSgpLHZpPXVpO251bGwhPT1vaSYmMCE9PVomJmE8PVomJiEoRWkmJnVpPlopOylEaShvaSxaLHVpPlopLENpKCkseGkoKSx2aT11aTtlbHNlIGZvcig7bnVsbCE9PW9pJiYwIT09WiYmYTw9WjspRGkob2ksWiwhMSksQ2koKTtiJiYobWk9MCxuaT1udWxsKTswIT09WiYmeWkob2ksWik7aWk9MDt3aT1udWxsO2lmKG51bGwhPT1zaSlmb3IoYT1zaSxzaT1udWxsLGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKGQpe3BpfHwocGk9ITAscWk9ZCl9fWlmKHBpKXRocm93IGE9cWkscWk9bnVsbCxwaT0hMSxhO31mdW5jdGlvbiBCaShhLGIpe1c/eChcIjI1M1wiKTp2b2lkIDA7b2k9YTtaPWI7RGkoYSxiLCExKTtZaCgxMDczNzQxODIzLCExKX1cbmZ1bmN0aW9uIERpKGEsYixjKXtXP3goXCIyNDVcIik6dm9pZCAwO1c9ITA7aWYoYyl7dmFyIGQ9YS5maW5pc2hlZFdvcms7bnVsbCE9PWQ/RmkoYSxkLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGQ9YS50aW1lb3V0SGFuZGxlLC0xIT09ZCYmKGEudGltZW91dEhhbmRsZT0tMSx6ZShkKSksY2koYSxjKSxkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kJiYoZGkoKT9hLmZpbmlzaGVkV29yaz1kOkZpKGEsZCxiKSkpfWVsc2UgZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZD9GaShhLGQsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1hLnRpbWVvdXRIYW5kbGUsLTEhPT1kJiYoYS50aW1lb3V0SGFuZGxlPS0xLHplKGQpKSxjaShhLGMpLGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQmJkZpKGEsZCxiKSk7Vz0hMX1cbmZ1bmN0aW9uIEZpKGEsYixjKXt2YXIgZD1hLmZpcnN0QmF0Y2g7aWYobnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1jJiYobnVsbD09PXNpP3NpPVtkXTpzaS5wdXNoKGQpLGQuX2RlZmVyKSl7YS5maW5pc2hlZFdvcms9YjthLmV4cGlyYXRpb25UaW1lPTA7cmV0dXJufWEuZmluaXNoZWRXb3JrPW51bGw7YT09PXdpP2lpKys6KHdpPWEsaWk9MCk7ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxmdW5jdGlvbigpe1poKGEsYil9KX1mdW5jdGlvbiBEaChhKXtudWxsPT09b2k/eChcIjI0NlwiKTp2b2lkIDA7b2kuZXhwaXJhdGlvblRpbWU9MDtwaXx8KHBpPSEwLHFpPWEpfWZ1bmN0aW9uIEdpKGEsYil7dmFyIGM9WDtYPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5eyhYPWMpfHxXfHxZaCgxMDczNzQxODIzLCExKX19XG5mdW5jdGlvbiBIaShhLGIpe2lmKFgmJiFyaSl7cmk9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7cmk9ITF9fXJldHVybiBhKGIpfWZ1bmN0aW9uIElpKGEsYixjKXtYfHxXfHwwPT09Z2l8fChZaChnaSwhMSksZ2k9MCk7dmFyIGQ9WDtYPSEwO3RyeXtyZXR1cm4gci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxmdW5jdGlvbigpe3JldHVybiBhKGIsYyl9KX1maW5hbGx5eyhYPWQpfHxXfHxZaCgxMDczNzQxODIzLCExKX19XG5mdW5jdGlvbiBKaShhLGIsYyxkLGUpe3ZhciBmPWIuY3VycmVudDthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6ezI9PT1lZChjKSYmMT09PWMudGFnP3ZvaWQgMDp4KFwiMTcwXCIpO3ZhciBnPWM7ZG97c3dpdGNoKGcudGFnKXtjYXNlIDM6Zz1nLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEooZy50eXBlKSl7Zz1nLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1nPWcucmV0dXJufXdoaWxlKG51bGwhPT1nKTt4KFwiMTcxXCIpO2c9dm9pZCAwfWlmKDE9PT1jLnRhZyl7dmFyIGg9Yy50eXBlO2lmKEooaCkpe2M9TmUoYyxoLGcpO2JyZWFrIGF9fWM9Z31lbHNlIGM9SGU7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1lO2U9bmYoZCk7ZS5wYXlsb2FkPXtlbGVtZW50OmF9O2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO1xub2YoKTtwZihmLGUpO3FmKGYsZCk7cmV0dXJuIGR9ZnVuY3Rpb24gS2koYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9bGYoKTtlPW1mKGYsZSk7cmV0dXJuIEppKGEsYixjLGUsZCl9ZnVuY3Rpb24gTGkoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBNaShhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOldiLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuQWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjp5YyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9S2EoZCk7ZT92b2lkIDA6eChcIjkwXCIpO1NiKGQpO3ljKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpkZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmYWUoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtcbmZ1bmN0aW9uIE5pKGEpe3ZhciBiPTEwNzM3NDE4MjItMjUqKCgoMTA3Mzc0MTgyMi1sZigpKzUwMCkvMjV8MCkrMSk7Yj49SmgmJihiPUpoLTEpO3RoaXMuX2V4cGlyYXRpb25UaW1lPUpoPWI7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1OaS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDp4KFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcgT2k7SmkoYSxiLG51bGwsYyxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xuTmkucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tcGxldGUpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuTmkucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxiPWEuZmlyc3RCYXRjaDt0aGlzLl9kZWZlciYmbnVsbCE9PWI/dm9pZCAwOngoXCIyNTFcIik7aWYodGhpcy5faGFzQ2hpbGRyZW4pe3ZhciBjPXRoaXMuX2V4cGlyYXRpb25UaW1lO2lmKGIhPT10aGlzKXt0aGlzLl9oYXNDaGlsZHJlbiYmKGM9dGhpcy5fZXhwaXJhdGlvblRpbWU9Yi5fZXhwaXJhdGlvblRpbWUsdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pKTtmb3IodmFyIGQ9bnVsbCxlPWI7ZSE9PXRoaXM7KWQ9ZSxlPWUuX25leHQ7bnVsbD09PWQ/eChcIjI1MVwiKTp2b2lkIDA7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtCaShhLGMpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09YiYmYi5faGFzQ2hpbGRyZW4mJmIucmVuZGVyKGIuX2NoaWxkcmVuKX1lbHNlIHRoaXMuX25leHQ9XG5udWxsLHRoaXMuX2RlZmVyPSExfTtOaS5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gT2koKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1PaS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuT2kucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/eChcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07XG5mdW5jdGlvbiBQaShhLGIsYyl7Yj1LKDMsbnVsbCxudWxsLGI/MzowKTthPXtjdXJyZW50OmIsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLHBpbmdDYWNoZTpudWxsLGVhcmxpZXN0UGVuZGluZ1RpbWU6MCxsYXRlc3RQZW5kaW5nVGltZTowLGVhcmxpZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RQaW5nZWRUaW1lOjAsZGlkRXJyb3I6ITEscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsdGltZW91dEhhbmRsZTotMSxjb250ZXh0Om51bGwscGVuZGluZ0NvbnRleHQ6bnVsbCxoeWRyYXRlOmMsbmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT246MCxleHBpcmF0aW9uVGltZTowLGZpcnN0QmF0Y2g6bnVsbCxuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTt0aGlzLl9pbnRlcm5hbFJvb3Q9Yi5zdGF0ZU5vZGU9YX1cblBpLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgT2k7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO0tpKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07UGkucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IE9pO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTtLaShudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O1BpLnByb3RvdHlwZS5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuX2ludGVybmFsUm9vdCxlPW5ldyBPaTtjPXZvaWQgMD09PWM/bnVsbDpjO251bGwhPT1jJiZlLnRoZW4oYyk7S2koYixkLGEsZS5fb25Db21taXQpO3JldHVybiBlfTtcblBpLnByb3RvdHlwZS5jcmVhdGVCYXRjaD1mdW5jdGlvbigpe3ZhciBhPW5ldyBOaSh0aGlzKSxiPWEuX2V4cGlyYXRpb25UaW1lLGM9dGhpcy5faW50ZXJuYWxSb290LGQ9Yy5maXJzdEJhdGNoO2lmKG51bGw9PT1kKWMuZmlyc3RCYXRjaD1hLGEuX25leHQ9bnVsbDtlbHNle2ZvcihjPW51bGw7bnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1iOyljPWQsZD1kLl9uZXh0O2EuX25leHQ9ZDtudWxsIT09YyYmKGMuX25leHQ9YSl9cmV0dXJuIGF9O2Z1bmN0aW9uIFFpKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1HYj1HaTtIYj1JaTtJYj1mdW5jdGlvbigpe1d8fDA9PT1naXx8KFloKGdpLCExKSxnaT0wKX07XG5mdW5jdGlvbiBSaShhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IFBpKGEsITEsYil9XG5mdW5jdGlvbiBTaShhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9TGkoZi5faW50ZXJuYWxSb290KTtnLmNhbGwoYSl9fW51bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1SaShjLGQpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1MaShmLl9pbnRlcm5hbFJvb3QpO2guY2FsbChhKX19SGkoZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIExpKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiBUaShhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO1FpKGIpP3ZvaWQgMDp4KFwiMjAwXCIpO3JldHVybiBNaShhLGIsbnVsbCxjKX1cbnZhciBWaT17Y3JlYXRlUG9ydGFsOlRpLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZvaWQgMD09PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/eChcIjE4OFwiKTp4KFwiMjY4XCIsT2JqZWN0LmtleXMoYSkpKTthPWhkKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7UWkoYik/dm9pZCAwOngoXCIyMDBcIik7cmV0dXJuIFNpKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe1FpKGIpP3ZvaWQgMDp4KFwiMjAwXCIpO3JldHVybiBTaShudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7UWkoYyk/dm9pZCAwOngoXCIyMDBcIik7bnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyP1xueChcIjM4XCIpOnZvaWQgMDtyZXR1cm4gU2koYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7UWkoYSk/dm9pZCAwOngoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhIaShmdW5jdGlvbigpe1NpKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIFRpLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpHaSx1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXM6SWksZmx1c2hTeW5jOmZ1bmN0aW9uKGEsYil7Vz94KFwiMTg3XCIpOnZvaWQgMDt2YXIgYz1YO1g9ITA7dHJ5e3JldHVybiBraShhLGIpfWZpbmFsbHl7WD1jLFloKDEwNzM3NDE4MjMsITEpfX0sdW5zdGFibGVfY3JlYXRlUm9vdDpVaSx1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9XG5YO1g9ITA7dHJ5e2tpKGEpfWZpbmFsbHl7KFg9Yil8fFd8fFloKDEwNzM3NDE4MjMsITEpfX0sX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50czpbSWEsSmEsS2EsQmEuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lLHBhLFFhLGZ1bmN0aW9uKGEpe3lhKGEsUGEpfSxFYixGYixEZCxEYV19fTtmdW5jdGlvbiBVaShhLGIpe1FpKGEpP3ZvaWQgMDp4KFwiMjk5XCIsXCJ1bnN0YWJsZV9jcmVhdGVSb290XCIpO3JldHVybiBuZXcgUGkoYSwhMCxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9XG4oZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gVGUobih7fSxhLHtvdmVycmlkZVByb3BzOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6VGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWhkKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9fSkpfSkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOkhhLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuOC42XCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIFdpPXtkZWZhdWx0OlZpfSxYaT1XaSYmVml8fFdpO21vZHVsZS5leHBvcnRzPVhpLmRlZmF1bHR8fFhpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xMy42XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGQ9bnVsbCxlPSExLGc9MyxrPS0xLGw9LTEsbT0hMSxuPSExO2Z1bmN0aW9uIHAoKXtpZighbSl7dmFyIGE9ZC5leHBpcmF0aW9uVGltZTtuP3EoKTpuPSEwO3IodCxhKX19XG5mdW5jdGlvbiB1KCl7dmFyIGE9ZCxiPWQubmV4dDtpZihkPT09YilkPW51bGw7ZWxzZXt2YXIgYz1kLnByZXZpb3VzO2Q9Yy5uZXh0PWI7Yi5wcmV2aW91cz1jfWEubmV4dD1hLnByZXZpb3VzPW51bGw7Yz1hLmNhbGxiYWNrO2I9YS5leHBpcmF0aW9uVGltZTthPWEucHJpb3JpdHlMZXZlbDt2YXIgZj1nLFE9bDtnPWE7bD1iO3RyeXt2YXIgaD1jKCl9ZmluYWxseXtnPWYsbD1RfWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoKWlmKGg9e2NhbGxiYWNrOmgscHJpb3JpdHlMZXZlbDphLGV4cGlyYXRpb25UaW1lOmIsbmV4dDpudWxsLHByZXZpb3VzOm51bGx9LG51bGw9PT1kKWQ9aC5uZXh0PWgucHJldmlvdXM9aDtlbHNle2M9bnVsbDthPWQ7ZG97aWYoYS5leHBpcmF0aW9uVGltZT49Yil7Yz1hO2JyZWFrfWE9YS5uZXh0fXdoaWxlKGEhPT1kKTtudWxsPT09Yz9jPWQ6Yz09PWQmJihkPWgscCgpKTtiPWMucHJldmlvdXM7Yi5uZXh0PWMucHJldmlvdXM9aDtoLm5leHQ9YztoLnByZXZpb3VzPVxuYn19ZnVuY3Rpb24gdigpe2lmKC0xPT09ayYmbnVsbCE9PWQmJjE9PT1kLnByaW9yaXR5TGV2ZWwpe209ITA7dHJ5e2RvIHUoKTt3aGlsZShudWxsIT09ZCYmMT09PWQucHJpb3JpdHlMZXZlbCl9ZmluYWxseXttPSExLG51bGwhPT1kP3AoKTpuPSExfX19ZnVuY3Rpb24gdChhKXttPSEwO3ZhciBiPWU7ZT1hO3RyeXtpZihhKWZvcig7bnVsbCE9PWQ7KXt2YXIgYz1leHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKGQuZXhwaXJhdGlvblRpbWU8PWMpe2RvIHUoKTt3aGlsZShudWxsIT09ZCYmZC5leHBpcmF0aW9uVGltZTw9Yyl9ZWxzZSBicmVha31lbHNlIGlmKG51bGwhPT1kKXtkbyB1KCk7d2hpbGUobnVsbCE9PWQmJiF3KCkpfX1maW5hbGx5e209ITEsZT1iLG51bGwhPT1kP3AoKTpuPSExLHYoKX19XG52YXIgeD1EYXRlLHk9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsej1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lP3JlcXVlc3RBbmltYXRpb25GcmFtZTp2b2lkIDAsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2FuY2VsQW5pbWF0aW9uRnJhbWU/Y2FuY2VsQW5pbWF0aW9uRnJhbWU6dm9pZCAwLEMsRDtmdW5jdGlvbiBFKGEpe0M9QShmdW5jdGlvbihiKXt6KEQpO2EoYil9KTtEPXkoZnVuY3Rpb24oKXtCKEMpO2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LDEwMCl9XG5pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgRj1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBGLm5vdygpfX1lbHNlIGV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCl9O3ZhciByLHEsdyxHPW51bGw7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3c/Rz13aW5kb3c6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBnbG9iYWwmJihHPWdsb2JhbCk7XG5pZihHJiZHLl9zY2hlZE1vY2spe3ZhciBIPUcuX3NjaGVkTW9jaztyPUhbMF07cT1IWzFdO3c9SFsyXTtleHBvcnRzLnVuc3RhYmxlX25vdz1IWzNdfWVsc2UgaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIEk9bnVsbCxKPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1JKXRyeXtJKGEpfWZpbmFsbHl7ST1udWxsfX07cj1mdW5jdGlvbihhKXtudWxsIT09ST9zZXRUaW1lb3V0KHIsMCxhKTooST1hLHNldFRpbWVvdXQoSiwwLCExKSl9O3E9ZnVuY3Rpb24oKXtJPW51bGx9O3c9ZnVuY3Rpb24oKXtyZXR1cm4hMX19ZWxzZXtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUmJihcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSxcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBCJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIikpO3ZhciBLPW51bGwsTD0hMSxNPS0xLE49ITEsTz0hMSxQPTAsUj0zMyxTPTMzO3c9ZnVuY3Rpb24oKXtyZXR1cm4gUDw9ZXhwb3J0cy51bnN0YWJsZV9ub3coKX07dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe0w9ITE7dmFyIGE9SyxiPU07Sz1udWxsO009LTE7dmFyIGM9ZXhwb3J0cy51bnN0YWJsZV9ub3coKSxmPSExO2lmKDA+PVAtYylpZigtMSE9PWImJmI8PWMpZj0hMDtlbHNle058fChOPSEwLEUoVikpO0s9YTtNPWI7cmV0dXJufWlmKG51bGwhPT1hKXtPPSEwO3RyeXthKGYpfWZpbmFsbHl7Tz0hMX19fTtcbnZhciBWPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1LKXtFKFYpO3ZhciBiPWEtUCtTO2I8UyYmUjxTPyg4PmImJihiPTgpLFM9YjxSP1I6Yik6Uj1iO1A9YStTO0x8fChMPSEwLFUucG9zdE1lc3NhZ2Uodm9pZCAwKSl9ZWxzZSBOPSExfTtyPWZ1bmN0aW9uKGEsYil7Sz1hO009YjtPfHwwPmI/VS5wb3N0TWVzc2FnZSh2b2lkIDApOk58fChOPSEwLEUoVikpfTtxPWZ1bmN0aW9uKCl7Sz1udWxsO0w9ITE7TT0tMX19ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7XG5leHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPWcsZj1rO2c9YTtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtnPWMsaz1mLHYoKX19O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goZyl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9Z312YXIgYz1nLGY9aztnPWI7az1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7Zz1jLGs9Zix2KCl9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3ZhciBjPS0xIT09az9rOmV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQpYj1jK2IudGltZW91dDtlbHNlIHN3aXRjaChnKXtjYXNlIDE6Yj1jKy0xO2JyZWFrO2Nhc2UgMjpiPWMrMjUwO2JyZWFrO2Nhc2UgNTpiPWMrMTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6Yj1jKzFFNDticmVhaztkZWZhdWx0OmI9Yys1RTN9YT17Y2FsbGJhY2s6YSxwcmlvcml0eUxldmVsOmcsZXhwaXJhdGlvblRpbWU6YixuZXh0Om51bGwscHJldmlvdXM6bnVsbH07aWYobnVsbD09PWQpZD1hLm5leHQ9YS5wcmV2aW91cz1hLHAoKTtlbHNle2M9bnVsbDt2YXIgZj1kO2Rve2lmKGYuZXhwaXJhdGlvblRpbWU+Yil7Yz1mO2JyZWFrfWY9Zi5uZXh0fXdoaWxlKGYhPT1kKTtudWxsPT09Yz9jPWQ6Yz09PWQmJihkPWEscCgpKTtcbmI9Yy5wcmV2aW91cztiLm5leHQ9Yy5wcmV2aW91cz1hO2EubmV4dD1jO2EucHJldmlvdXM9Yn1yZXR1cm4gYX07ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1hLm5leHQ7aWYobnVsbCE9PWIpe2lmKGI9PT1hKWQ9bnVsbDtlbHNle2E9PT1kJiYoZD1iKTt2YXIgYz1hLnByZXZpb3VzO2MubmV4dD1iO2IucHJldmlvdXM9Y31hLm5leHQ9YS5wcmV2aW91cz1udWxsfX07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9ZztyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1nLGY9aztnPWI7az1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtnPWMsaz1mLHYoKX19fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIGd9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiFlJiYobnVsbCE9PWQmJmQuZXhwaXJhdGlvblRpbWU8bHx8dygpKX07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe251bGwhPT1kJiZwKCl9O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gZH07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjZcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO1xudmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxyPWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTY7ZnVuY3Rpb24gdChhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIHI6Y2FzZSBxOmNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIHYoYSl7cmV0dXJuIHQoYSk9PT1tfWV4cG9ydHMudHlwZU9mPXQ7ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO1xuZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT1yO2V4cG9ydHMuTWVtbz1xO2V4cG9ydHMuUG9ydGFsPWQ7ZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PXF8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW4pfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpfHx0KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPXY7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWt9O1xuZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09cn07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1xfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1mfTtcbmV4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PXB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIFJlYWN0UmVkdXhDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmV4cG9ydCBkZWZhdWx0IFJlYWN0UmVkdXhDb250ZXh0OyIsIi8vIERlZmF1bHQgdG8gYSBkdW1teSBcImJhdGNoXCIgaW1wbGVtZW50YXRpb24gdGhhdCBqdXN0IHJ1bnMgdGhlIGNhbGxiYWNrXG5mdW5jdGlvbiBkZWZhdWx0Tm9vcEJhdGNoKGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKCk7XG59XG5cbnZhciBiYXRjaCA9IGRlZmF1bHROb29wQmF0Y2g7IC8vIEFsbG93IGluamVjdGluZyBhbm90aGVyIGJhdGNoaW5nIGZ1bmN0aW9uIGxhdGVyXG5cbmV4cG9ydCB2YXIgc2V0QmF0Y2ggPSBmdW5jdGlvbiBzZXRCYXRjaChuZXdCYXRjaCkge1xuICByZXR1cm4gYmF0Y2ggPSBuZXdCYXRjaDtcbn07IC8vIFN1cHBseSBhIGdldHRlciBqdXN0IHRvIHNraXAgZGVhbGluZyB3aXRoIEVTTSBiaW5kaW5nc1xuXG5leHBvcnQgdmFyIGdldEJhdGNoID0gZnVuY3Rpb24gZ2V0QmF0Y2goKSB7XG4gIHJldHVybiBiYXRjaDtcbn07IiwiaW1wb3J0IHsgZ2V0QmF0Y2ggfSBmcm9tICcuL2JhdGNoJzsgLy8gZW5jYXBzdWxhdGVzIHRoZSBzdWJzY3JpcHRpb24gbG9naWMgZm9yIGNvbm5lY3RpbmcgYSBjb21wb25lbnQgdG8gdGhlIHJlZHV4IHN0b3JlLCBhc1xuLy8gd2VsbCBhcyBuZXN0aW5nIHN1YnNjcmlwdGlvbnMgb2YgZGVzY2VuZGFudCBjb21wb25lbnRzLCBzbyB0aGF0IHdlIGNhbiBlbnN1cmUgdGhlXG4vLyBhbmNlc3RvciBjb21wb25lbnRzIHJlLXJlbmRlciBiZWZvcmUgZGVzY2VuZGFudHNcblxudmFyIENMRUFSRUQgPSBudWxsO1xudmFyIG51bGxMaXN0ZW5lcnMgPSB7XG4gIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge31cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpIHtcbiAgdmFyIGJhdGNoID0gZ2V0QmF0Y2goKTsgLy8gdGhlIGN1cnJlbnQvbmV4dCBwYXR0ZXJuIGlzIGNvcGllZCBmcm9tIHJlZHV4J3MgY3JlYXRlU3RvcmUgY29kZS5cbiAgLy8gVE9ETzogcmVmYWN0b3IrZXhwb3NlIHRoYXQgY29kZSB0byBiZSByZXVzYWJsZSBoZXJlP1xuXG4gIHZhciBjdXJyZW50ID0gW107XG4gIHZhciBuZXh0ID0gW107XG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgbmV4dCA9IENMRUFSRUQ7XG4gICAgICBjdXJyZW50ID0gQ0xFQVJFRDtcbiAgICB9LFxuICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnQgPSBuZXh0O1xuICAgICAgYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxpc3RlbmVyc1tpXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgIG5leHQucHVzaChsaXN0ZW5lcik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICghaXNTdWJzY3JpYmVkIHx8IGN1cnJlbnQgPT09IENMRUFSRUQpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgICBuZXh0LnNwbGljZShuZXh0LmluZGV4T2YobGlzdGVuZXIpLCAxKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG52YXIgU3Vic2NyaXB0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIpIHtcbiAgICB0aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgdGhpcy5wYXJlbnRTdWIgPSBwYXJlbnRTdWI7XG4gICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlciA9IHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlci5iaW5kKHRoaXMpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN1YnNjcmlwdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFkZE5lc3RlZFN1YiA9IGZ1bmN0aW9uIGFkZE5lc3RlZFN1YihsaXN0ZW5lcikge1xuICAgIHRoaXMudHJ5U3Vic2NyaWJlKCk7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXJzLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gIH07XG5cbiAgX3Byb3RvLm5vdGlmeU5lc3RlZFN1YnMgPSBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLm5vdGlmeSgpO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVDaGFuZ2VXcmFwcGVyID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlV3JhcHBlcigpIHtcbiAgICBpZiAodGhpcy5vblN0YXRlQ2hhbmdlKSB7XG4gICAgICB0aGlzLm9uU3RhdGVDaGFuZ2UoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLnVuc3Vic2NyaWJlKTtcbiAgfTtcblxuICBfcHJvdG8udHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IHRoaXMucGFyZW50U3ViID8gdGhpcy5wYXJlbnRTdWIuYWRkTmVzdGVkU3ViKHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlcikgOiB0aGlzLnN0b3JlLnN1YnNjcmliZSh0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnRyeVVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgdGhpcy5saXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKTtcblxuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuXG52YXIgUHJvdmlkZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFByb3ZpZGVyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgdmFyIHN0b3JlID0gcHJvcHMuc3RvcmU7XG4gICAgX3RoaXMubm90aWZ5U3Vic2NyaWJlcnMgPSBfdGhpcy5ub3RpZnlTdWJzY3JpYmVycy5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBfdGhpcy5ub3RpZnlTdWJzY3JpYmVycztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgfTtcbiAgICBfdGhpcy5wcmV2aW91c1N0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7XG4gICAgdGhpcy5zdGF0ZS5zdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG5cbiAgICBpZiAodGhpcy5wcmV2aW91c1N0YXRlICE9PSB0aGlzLnByb3BzLnN0b3JlLmdldFN0YXRlKCkpIHtcbiAgICAgIHRoaXMuc3RhdGUuc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5zdWJzY3JpYmUpIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLnN0YXRlLnN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc3RvcmUgIT09IHByZXZQcm9wcy5zdG9yZSkge1xuICAgICAgdGhpcy5zdGF0ZS5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHRoaXMucHJvcHMuc3RvcmUpO1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSB0aGlzLm5vdGlmeVN1YnNjcmliZXJzO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHN0b3JlOiB0aGlzLnByb3BzLnN0b3JlLFxuICAgICAgICBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5ub3RpZnlTdWJzY3JpYmVycyA9IGZ1bmN0aW9uIG5vdGlmeVN1YnNjcmliZXJzKCkge1xuICAgIHRoaXMuc3RhdGUuc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBDb250ZXh0ID0gdGhpcy5wcm9wcy5jb250ZXh0IHx8IFJlYWN0UmVkdXhDb250ZXh0O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB0aGlzLnN0YXRlXG4gICAgfSwgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gIH07XG5cbiAgcmV0dXJuIFByb3ZpZGVyO1xufShDb21wb25lbnQpO1xuXG5Qcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gIHN0b3JlOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBnZXRTdGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICB9KSxcbiAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnlcbn07XG5leHBvcnQgZGVmYXVsdCBQcm92aWRlcjsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCwgdXNlUmVmLCB1c2VSZWR1Y2VyIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlLCBpc0NvbnRleHRDb25zdW1lciB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JzsgLy8gRGVmaW5lIHNvbWUgY29uc3RhbnQgYXJyYXlzIGp1c3QgdG8gYXZvaWQgcmUtY3JlYXRpbmcgdGhlc2VcblxudmFyIEVNUFRZX0FSUkFZID0gW107XG52YXIgTk9fU1VCU0NSSVBUSU9OX0FSUkFZID0gW251bGwsIG51bGxdO1xuXG52YXIgc3RyaW5naWZ5Q29tcG9uZW50ID0gZnVuY3Rpb24gc3RyaW5naWZ5Q29tcG9uZW50KENvbXApIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoQ29tcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBTdHJpbmcoQ29tcCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIHZhciB1cGRhdGVDb3VudCA9IHN0YXRlWzFdO1xuICByZXR1cm4gW2FjdGlvbi5wYXlsb2FkLCB1cGRhdGVDb3VudCArIDFdO1xufVxuXG52YXIgaW5pdFN0YXRlVXBkYXRlcyA9IGZ1bmN0aW9uIGluaXRTdGF0ZVVwZGF0ZXMoKSB7XG4gIHJldHVybiBbbnVsbCwgMF07XG59OyAvLyBSZWFjdCBjdXJyZW50bHkgdGhyb3dzIGEgd2FybmluZyB3aGVuIHVzaW5nIHVzZUxheW91dEVmZmVjdCBvbiB0aGUgc2VydmVyLlxuLy8gVG8gZ2V0IGFyb3VuZCBpdCwgd2UgY2FuIGNvbmRpdGlvbmFsbHkgdXNlRWZmZWN0IG9uIHRoZSBzZXJ2ZXIgKG5vLW9wKSBhbmRcbi8vIHVzZUxheW91dEVmZmVjdCBpbiB0aGUgYnJvd3Nlci4gV2UgbmVlZCB1c2VMYXlvdXRFZmZlY3QgYmVjYXVzZSB3ZSB3YW50XG4vLyBgY29ubmVjdGAgdG8gcGVyZm9ybSBzeW5jIHVwZGF0ZXMgdG8gYSByZWYgdG8gc2F2ZSB0aGUgbGF0ZXN0IHByb3BzIGFmdGVyXG4vLyBhIHJlbmRlciBpcyBhY3R1YWxseSBjb21taXR0ZWQgdG8gdGhlIERPTS5cblxuXG52YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25uZWN0QWR2YW5jZWQoXG4vKlxuICBzZWxlY3RvckZhY3RvcnkgaXMgYSBmdW5jIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIHJldHVybmluZyB0aGUgc2VsZWN0b3IgZnVuY3Rpb24gdXNlZCB0b1xuICBjb21wdXRlIG5ldyBwcm9wcyBmcm9tIHN0YXRlLCBwcm9wcywgYW5kIGRpc3BhdGNoLiBGb3IgZXhhbXBsZTpcbiAgICAgZXhwb3J0IGRlZmF1bHQgY29ubmVjdEFkdmFuY2VkKChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKHN0YXRlLCBwcm9wcykgPT4gKHtcbiAgICAgIHRoaW5nOiBzdGF0ZS50aGluZ3NbcHJvcHMudGhpbmdJZF0sXG4gICAgICBzYXZlVGhpbmc6IGZpZWxkcyA9PiBkaXNwYXRjaChhY3Rpb25DcmVhdG9ycy5zYXZlVGhpbmcocHJvcHMudGhpbmdJZCwgZmllbGRzKSksXG4gICAgfSkpKFlvdXJDb21wb25lbnQpXG4gICBBY2Nlc3MgdG8gZGlzcGF0Y2ggaXMgcHJvdmlkZWQgdG8gdGhlIGZhY3Rvcnkgc28gc2VsZWN0b3JGYWN0b3JpZXMgY2FuIGJpbmQgYWN0aW9uQ3JlYXRvcnNcbiAgb3V0c2lkZSBvZiB0aGVpciBzZWxlY3RvciBhcyBhbiBvcHRpbWl6YXRpb24uIE9wdGlvbnMgcGFzc2VkIHRvIGNvbm5lY3RBZHZhbmNlZCBhcmUgcGFzc2VkIHRvXG4gIHRoZSBzZWxlY3RvckZhY3RvcnksIGFsb25nIHdpdGggZGlzcGxheU5hbWUgYW5kIFdyYXBwZWRDb21wb25lbnQsIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXG4gICBOb3RlIHRoYXQgc2VsZWN0b3JGYWN0b3J5IGlzIHJlc3BvbnNpYmxlIGZvciBhbGwgY2FjaGluZy9tZW1vaXphdGlvbiBvZiBpbmJvdW5kIGFuZCBvdXRib3VuZFxuICBwcm9wcy4gRG8gbm90IHVzZSBjb25uZWN0QWR2YW5jZWQgZGlyZWN0bHkgd2l0aG91dCBtZW1vaXppbmcgcmVzdWx0cyBiZXR3ZWVuIGNhbGxzIHRvIHlvdXJcbiAgc2VsZWN0b3IsIG90aGVyd2lzZSB0aGUgQ29ubmVjdCBjb21wb25lbnQgd2lsbCByZS1yZW5kZXIgb24gZXZlcnkgc3RhdGUgb3IgcHJvcHMgY2hhbmdlLlxuKi9cbnNlbGVjdG9yRmFjdG9yeSwgLy8gb3B0aW9ucyBvYmplY3Q6XG5fcmVmKSB7XG4gIGlmIChfcmVmID09PSB2b2lkIDApIHtcbiAgICBfcmVmID0ge307XG4gIH1cblxuICB2YXIgX3JlZjIgPSBfcmVmLFxuICAgICAgX3JlZjIkZ2V0RGlzcGxheU5hbWUgPSBfcmVmMi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZjIkZ2V0RGlzcGxheU5hbWUgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIFwiQ29ubmVjdEFkdmFuY2VkKFwiICsgbmFtZSArIFwiKVwiO1xuICB9IDogX3JlZjIkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmMiRtZXRob2ROYW1lID0gX3JlZjIubWV0aG9kTmFtZSxcbiAgICAgIG1ldGhvZE5hbWUgPSBfcmVmMiRtZXRob2ROYW1lID09PSB2b2lkIDAgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYyJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmMiRyZW5kZXJDb3VudFByb3AgPSBfcmVmMi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmMiRyZW5kZXJDb3VudFByb3AgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYyJHJlbmRlckNvdW50UHJvcCxcbiAgICAgIF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9IF9yZWYyLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYyJHNob3VsZEhhbmRsZVN0YSxcbiAgICAgIF9yZWYyJHN0b3JlS2V5ID0gX3JlZjIuc3RvcmVLZXksXG4gICAgICBzdG9yZUtleSA9IF9yZWYyJHN0b3JlS2V5ID09PSB2b2lkIDAgPyAnc3RvcmUnIDogX3JlZjIkc3RvcmVLZXksXG4gICAgICBfcmVmMiR3aXRoUmVmID0gX3JlZjIud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmMiR3aXRoUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJHdpdGhSZWYsXG4gICAgICBfcmVmMiRmb3J3YXJkUmVmID0gX3JlZjIuZm9yd2FyZFJlZixcbiAgICAgIGZvcndhcmRSZWYgPSBfcmVmMiRmb3J3YXJkUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGZvcndhcmRSZWYsXG4gICAgICBfcmVmMiRjb250ZXh0ID0gX3JlZjIuY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBfcmVmMiRjb250ZXh0ID09PSB2b2lkIDAgPyBSZWFjdFJlZHV4Q29udGV4dCA6IF9yZWYyJGNvbnRleHQsXG4gICAgICBjb25uZWN0T3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJnZXREaXNwbGF5TmFtZVwiLCBcIm1ldGhvZE5hbWVcIiwgXCJyZW5kZXJDb3VudFByb3BcIiwgXCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXNcIiwgXCJzdG9yZUtleVwiLCBcIndpdGhSZWZcIiwgXCJmb3J3YXJkUmVmXCIsIFwiY29udGV4dFwiXSk7XG5cbiAgaW52YXJpYW50KHJlbmRlckNvdW50UHJvcCA9PT0gdW5kZWZpbmVkLCBcInJlbmRlckNvdW50UHJvcCBpcyByZW1vdmVkLiByZW5kZXIgY291bnRpbmcgaXMgYnVpbHQgaW50byB0aGUgbGF0ZXN0IFJlYWN0IERldiBUb29scyBwcm9maWxpbmcgZXh0ZW5zaW9uXCIpO1xuICBpbnZhcmlhbnQoIXdpdGhSZWYsICd3aXRoUmVmIGlzIHJlbW92ZWQuIFRvIGFjY2VzcyB0aGUgd3JhcHBlZCBpbnN0YW5jZSwgdXNlIGEgcmVmIG9uIHRoZSBjb25uZWN0ZWQgY29tcG9uZW50Jyk7XG4gIHZhciBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlID0gJ1RvIHVzZSBhIGN1c3RvbSBSZWR1eCBzdG9yZSBmb3Igc3BlY2lmaWMgY29tcG9uZW50cywgY3JlYXRlIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgd2l0aCAnICsgXCJSZWFjdC5jcmVhdGVDb250ZXh0KCksIGFuZCBwYXNzIHRoZSBjb250ZXh0IG9iamVjdCB0byBSZWFjdCBSZWR1eCdzIFByb3ZpZGVyIGFuZCBzcGVjaWZpYyBjb21wb25lbnRzXCIgKyAnIGxpa2U6IDxQcm92aWRlciBjb250ZXh0PXtNeUNvbnRleHR9PjxDb25uZWN0ZWRDb21wb25lbnQgY29udGV4dD17TXlDb250ZXh0fSAvPjwvUHJvdmlkZXI+LiAnICsgJ1lvdSBtYXkgYWxzbyBwYXNzIGEge2NvbnRleHQgOiBNeUNvbnRleHR9IG9wdGlvbiB0byBjb25uZWN0JztcbiAgaW52YXJpYW50KHN0b3JlS2V5ID09PSAnc3RvcmUnLCAnc3RvcmVLZXkgaGFzIGJlZW4gcmVtb3ZlZCBhbmQgZG9lcyBub3QgZG8gYW55dGhpbmcuICcgKyBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlKTtcbiAgdmFyIENvbnRleHQgPSBjb250ZXh0O1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcFdpdGhDb25uZWN0KFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaW52YXJpYW50KGlzVmFsaWRFbGVtZW50VHlwZShXcmFwcGVkQ29tcG9uZW50KSwgXCJZb3UgbXVzdCBwYXNzIGEgY29tcG9uZW50IHRvIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSBcIiArIChtZXRob2ROYW1lICsgXCIuIEluc3RlYWQgcmVjZWl2ZWQgXCIgKyBzdHJpbmdpZnlDb21wb25lbnQoV3JhcHBlZENvbXBvbmVudCkpKTtcbiAgICB9XG5cbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudE5hbWUgPSBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZSh3cmFwcGVkQ29tcG9uZW50TmFtZSk7XG5cbiAgICB2YXIgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25uZWN0T3B0aW9ucywge1xuICAgICAgZ2V0RGlzcGxheU5hbWU6IGdldERpc3BsYXlOYW1lLFxuICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcbiAgICAgIHJlbmRlckNvdW50UHJvcDogcmVuZGVyQ291bnRQcm9wLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzdG9yZUtleTogc3RvcmVLZXksXG4gICAgICBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUsXG4gICAgICB3cmFwcGVkQ29tcG9uZW50TmFtZTogd3JhcHBlZENvbXBvbmVudE5hbWUsXG4gICAgICBXcmFwcGVkQ29tcG9uZW50OiBXcmFwcGVkQ29tcG9uZW50XG4gICAgfSk7XG5cbiAgICB2YXIgcHVyZSA9IGNvbm5lY3RPcHRpb25zLnB1cmU7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVDaGlsZFNlbGVjdG9yKHN0b3JlKSB7XG4gICAgICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KHN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICB9IC8vIElmIHdlIGFyZW4ndCBydW5uaW5nIGluIFwicHVyZVwiIG1vZGUsIHdlIGRvbid0IHdhbnQgdG8gbWVtb2l6ZSB2YWx1ZXMuXG4gICAgLy8gVG8gYXZvaWQgY29uZGl0aW9uYWxseSBjYWxsaW5nIGhvb2tzLCB3ZSBmYWxsIGJhY2sgdG8gYSB0aW55IHdyYXBwZXJcbiAgICAvLyB0aGF0IGp1c3QgZXhlY3V0ZXMgdGhlIGdpdmVuIGNhbGxiYWNrIGltbWVkaWF0ZWx5LlxuXG5cbiAgICB2YXIgdXNlUHVyZU9ubHlNZW1vID0gcHVyZSA/IHVzZU1lbW8gOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBDb25uZWN0RnVuY3Rpb24ocHJvcHMpIHtcbiAgICAgIHZhciBfdXNlTWVtbyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBEaXN0aW5ndWlzaCBiZXR3ZWVuIGFjdHVhbCBcImRhdGFcIiBwcm9wcyB0aGF0IHdlcmUgcGFzc2VkIHRvIHRoZSB3cmFwcGVyIGNvbXBvbmVudCxcbiAgICAgICAgLy8gYW5kIHZhbHVlcyBuZWVkZWQgdG8gY29udHJvbCBiZWhhdmlvciAoZm9yd2FyZGVkIHJlZnMsIGFsdGVybmF0ZSBjb250ZXh0IGluc3RhbmNlcykuXG4gICAgICAgIC8vIFRvIG1haW50YWluIHRoZSB3cmFwcGVyUHJvcHMgb2JqZWN0IHJlZmVyZW5jZSwgbWVtb2l6ZSB0aGlzIGRlc3RydWN0dXJpbmcuXG4gICAgICAgIHZhciBmb3J3YXJkZWRSZWYgPSBwcm9wcy5mb3J3YXJkZWRSZWYsXG4gICAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wiZm9yd2FyZGVkUmVmXCJdKTtcblxuICAgICAgICByZXR1cm4gW3Byb3BzLmNvbnRleHQsIGZvcndhcmRlZFJlZiwgd3JhcHBlclByb3BzXTtcbiAgICAgIH0sIFtwcm9wc10pLFxuICAgICAgICAgIHByb3BzQ29udGV4dCA9IF91c2VNZW1vWzBdLFxuICAgICAgICAgIGZvcndhcmRlZFJlZiA9IF91c2VNZW1vWzFdLFxuICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF91c2VNZW1vWzJdO1xuXG4gICAgICB2YXIgQ29udGV4dFRvVXNlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFVzZXJzIG1heSBvcHRpb25hbGx5IHBhc3MgaW4gYSBjdXN0b20gY29udGV4dCBpbnN0YW5jZSB0byB1c2UgaW5zdGVhZCBvZiBvdXIgUmVhY3RSZWR1eENvbnRleHQuXG4gICAgICAgIC8vIE1lbW9pemUgdGhlIGNoZWNrIHRoYXQgZGV0ZXJtaW5lcyB3aGljaCBjb250ZXh0IGluc3RhbmNlIHdlIHNob3VsZCB1c2UuXG4gICAgICAgIHJldHVybiBwcm9wc0NvbnRleHQgJiYgcHJvcHNDb250ZXh0LkNvbnN1bWVyICYmIGlzQ29udGV4dENvbnN1bWVyKFJlYWN0LmNyZWF0ZUVsZW1lbnQocHJvcHNDb250ZXh0LkNvbnN1bWVyLCBudWxsKSkgPyBwcm9wc0NvbnRleHQgOiBDb250ZXh0O1xuICAgICAgfSwgW3Byb3BzQ29udGV4dCwgQ29udGV4dF0pOyAvLyBSZXRyaWV2ZSB0aGUgc3RvcmUgYW5kIGFuY2VzdG9yIHN1YnNjcmlwdGlvbiB2aWEgY29udGV4dCwgaWYgYXZhaWxhYmxlXG5cbiAgICAgIHZhciBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KENvbnRleHRUb1VzZSk7IC8vIFRoZSBzdG9yZSBfbXVzdF8gZXhpc3QgYXMgZWl0aGVyIGEgcHJvcCBvciBpbiBjb250ZXh0XG5cbiAgICAgIHZhciBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPSBCb29sZWFuKHByb3BzLnN0b3JlKTtcbiAgICAgIHZhciBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCA9IEJvb2xlYW4oY29udGV4dFZhbHVlKSAmJiBCb29sZWFuKGNvbnRleHRWYWx1ZS5zdG9yZSk7XG4gICAgICBpbnZhcmlhbnQoZGlkU3RvcmVDb21lRnJvbVByb3BzIHx8IGRpZFN0b3JlQ29tZUZyb21Db250ZXh0LCBcIkNvdWxkIG5vdCBmaW5kIFxcXCJzdG9yZVxcXCIgaW4gdGhlIGNvbnRleHQgb2YgXCIgKyAoXCJcXFwiXCIgKyBkaXNwbGF5TmFtZSArIFwiXFxcIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgXCIpICsgXCJvciBwYXNzIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgcHJvdmlkZXIgdG8gPFByb3ZpZGVyPiBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgXCIgKyAoXCJSZWFjdCBjb250ZXh0IGNvbnN1bWVyIHRvIFwiICsgZGlzcGxheU5hbWUgKyBcIiBpbiBjb25uZWN0IG9wdGlvbnMuXCIpKTtcbiAgICAgIHZhciBzdG9yZSA9IHByb3BzLnN0b3JlIHx8IGNvbnRleHRWYWx1ZS5zdG9yZTtcbiAgICAgIHZhciBjaGlsZFByb3BzU2VsZWN0b3IgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVGhlIGNoaWxkIHByb3BzIHNlbGVjdG9yIG5lZWRzIHRoZSBzdG9yZSByZWZlcmVuY2UgYXMgYW4gaW5wdXQuXG4gICAgICAgIC8vIFJlLWNyZWF0ZSB0aGlzIHNlbGVjdG9yIHdoZW5ldmVyIHRoZSBzdG9yZSBjaGFuZ2VzLlxuICAgICAgICByZXR1cm4gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSk7XG4gICAgICB9LCBbc3RvcmVdKTtcblxuICAgICAgdmFyIF91c2VNZW1vMiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuIE5PX1NVQlNDUklQVElPTl9BUlJBWTsgLy8gVGhpcyBTdWJzY3JpcHRpb24ncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cblxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzID8gbnVsbCA6IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb24pOyAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AsIHdoZXJlIGBzdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBUaGlzIGNhblxuICAgICAgICAvLyBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVyc1xuICAgICAgICAvLyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlICBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuXG4gICAgICAgIHZhciBub3RpZnlOZXN0ZWRTdWJzID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZChzdWJzY3JpcHRpb24pO1xuICAgICAgICByZXR1cm4gW3N1YnNjcmlwdGlvbiwgbm90aWZ5TmVzdGVkU3Vic107XG4gICAgICB9LCBbc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlXSksXG4gICAgICAgICAgc3Vic2NyaXB0aW9uID0gX3VzZU1lbW8yWzBdLFxuICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMgPSBfdXNlTWVtbzJbMV07IC8vIERldGVybWluZSB3aGF0IHtzdG9yZSwgc3Vic2NyaXB0aW9ufSB2YWx1ZSBzaG91bGQgYmUgcHV0IGludG8gbmVzdGVkIGNvbnRleHQsIGlmIG5lY2Vzc2FyeSxcbiAgICAgIC8vIGFuZCBtZW1vaXplIHRoYXQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgY29udGV4dCB1cGRhdGVzLlxuXG5cbiAgICAgIHZhciBvdmVycmlkZGVuQ29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChkaWRTdG9yZUNvbWVGcm9tUHJvcHMpIHtcbiAgICAgICAgICAvLyBUaGlzIGNvbXBvbmVudCBpcyBkaXJlY3RseSBzdWJzY3JpYmVkIHRvIGEgc3RvcmUgZnJvbSBwcm9wcy5cbiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IGRlc2NlbmRhbnRzIHJlYWRpbmcgZnJvbSB0aGlzIHN0b3JlIC0gcGFzcyBkb3duIHdoYXRldmVyXG4gICAgICAgICAgLy8gdGhlIGV4aXN0aW5nIGNvbnRleHQgdmFsdWUgaXMgZnJvbSB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IuXG4gICAgICAgICAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIHB1dCB0aGlzIGNvbXBvbmVudCdzIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBpbnRvIGNvbnRleHQsIHNvIHRoYXRcbiAgICAgICAgLy8gY29ubmVjdGVkIGRlc2NlbmRhbnRzIHdvbid0IHVwZGF0ZSB1bnRpbCBhZnRlciB0aGlzIGNvbXBvbmVudCBpcyBkb25lXG5cblxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHRWYWx1ZSwge1xuICAgICAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSwgW2RpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlLCBzdWJzY3JpcHRpb25dKTsgLy8gV2UgbmVlZCB0byBmb3JjZSB0aGlzIHdyYXBwZXIgY29tcG9uZW50IHRvIHJlLXJlbmRlciB3aGVuZXZlciBhIFJlZHV4IHN0b3JlIHVwZGF0ZVxuICAgICAgLy8gY2F1c2VzIGEgY2hhbmdlIHRvIHRoZSBjYWxjdWxhdGVkIGNoaWxkIGNvbXBvbmVudCBwcm9wcyAob3Igd2UgY2F1Z2h0IGFuIGVycm9yIGluIG1hcFN0YXRlKVxuXG4gICAgICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlciwgRU1QVFlfQVJSQVksIGluaXRTdGF0ZVVwZGF0ZXMpLFxuICAgICAgICAgIF91c2VSZWR1Y2VyJCA9IF91c2VSZWR1Y2VyWzBdLFxuICAgICAgICAgIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgPSBfdXNlUmVkdWNlciRbMF0sXG4gICAgICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCA9IF91c2VSZWR1Y2VyWzFdOyAvLyBQcm9wYWdhdGUgYW55IG1hcFN0YXRlL21hcERpc3BhdGNoIGVycm9ycyB1cHdhcmRzXG5cblxuICAgICAgaWYgKHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgJiYgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcikge1xuICAgICAgICB0aHJvdyBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yO1xuICAgICAgfSAvLyBTZXQgdXAgcmVmcyB0byBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIHRoZSBzdWJzY3JpcHRpb24gZWZmZWN0IGFuZCB0aGUgcmVuZGVyIGxvZ2ljXG5cblxuICAgICAgdmFyIGxhc3RDaGlsZFByb3BzID0gdXNlUmVmKCk7XG4gICAgICB2YXIgbGFzdFdyYXBwZXJQcm9wcyA9IHVzZVJlZih3cmFwcGVyUHJvcHMpO1xuICAgICAgdmFyIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUgPSB1c2VSZWYoKTtcbiAgICAgIHZhciByZW5kZXJJc1NjaGVkdWxlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICB2YXIgYWN0dWFsQ2hpbGRQcm9wcyA9IHVzZVB1cmVPbmx5TWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRyaWNreSBsb2dpYyBoZXJlOlxuICAgICAgICAvLyAtIFRoaXMgcmVuZGVyIG1heSBoYXZlIGJlZW4gdHJpZ2dlcmVkIGJ5IGEgUmVkdXggc3RvcmUgdXBkYXRlIHRoYXQgcHJvZHVjZWQgbmV3IGNoaWxkIHByb3BzXG4gICAgICAgIC8vIC0gSG93ZXZlciwgd2UgbWF5IGhhdmUgZ290dGVuIG5ldyB3cmFwcGVyIHByb3BzIGFmdGVyIHRoYXRcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBuZXcgY2hpbGQgcHJvcHMsIGFuZCB0aGUgc2FtZSB3cmFwcGVyIHByb3BzLCB3ZSBrbm93IHdlIHNob3VsZCB1c2UgdGhlIG5ldyBjaGlsZCBwcm9wcyBhcy1pcy5cbiAgICAgICAgLy8gQnV0LCBpZiB3ZSBoYXZlIG5ldyB3cmFwcGVyIHByb3BzLCB0aG9zZSBtaWdodCBjaGFuZ2UgdGhlIGNoaWxkIHByb3BzLCBzbyB3ZSBoYXZlIHRvIHJlY2FsY3VsYXRlIHRoaW5ncy5cbiAgICAgICAgLy8gU28sIHdlJ2xsIHVzZSB0aGUgY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGUgb25seSBpZiB0aGUgd3JhcHBlciBwcm9wcyBhcmUgdGhlIHNhbWUgYXMgbGFzdCB0aW1lLlxuICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ICYmIHdyYXBwZXJQcm9wcyA9PT0gbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudDtcbiAgICAgICAgfSAvLyBUT0RPIFdlJ3JlIHJlYWRpbmcgdGhlIHN0b3JlIGRpcmVjdGx5IGluIHJlbmRlcigpIGhlcmUuIEJhZCBpZGVhP1xuICAgICAgICAvLyBUaGlzIHdpbGwgbGlrZWx5IGNhdXNlIEJhZCBUaGluZ3MgKFRNKSB0byBoYXBwZW4gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgZG8gdGhpcyBiZWNhdXNlIG9uIHJlbmRlcnMgX25vdF8gY2F1c2VkIGJ5IHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdGhlIGxhdGVzdCBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlLlxuXG5cbiAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpO1xuICAgICAgfSwgW3N0b3JlLCBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LCB3cmFwcGVyUHJvcHNdKTsgLy8gV2UgbmVlZCB0aGlzIHRvIGV4ZWN1dGUgc3luY2hyb25vdXNseSBldmVyeSB0aW1lIHdlIHJlLXJlbmRlci4gSG93ZXZlciwgUmVhY3Qgd2FybnNcbiAgICAgIC8vIGFib3V0IHVzZUxheW91dEVmZmVjdCBpbiBTU1IsIHNvIHdlIHRyeSB0byBkZXRlY3QgZW52aXJvbm1lbnQgYW5kIGZhbGwgYmFjayB0b1xuICAgICAgLy8ganVzdCB1c2VFZmZlY3QgaW5zdGVhZCB0byBhdm9pZCB0aGUgd2FybmluZywgc2luY2UgbmVpdGhlciB3aWxsIHJ1biBhbnl3YXkuXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBXZSB3YW50IHRvIGNhcHR1cmUgdGhlIHdyYXBwZXIgcHJvcHMgYW5kIGNoaWxkIHByb3BzIHdlIHVzZWQgZm9yIGxhdGVyIGNvbXBhcmlzb25zXG4gICAgICAgIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCA9IHdyYXBwZXJQcm9wcztcbiAgICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IGFjdHVhbENoaWxkUHJvcHM7XG4gICAgICAgIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSBmYWxzZTsgLy8gSWYgdGhlIHJlbmRlciB3YXMgZnJvbSBhIHN0b3JlIHVwZGF0ZSwgY2xlYXIgb3V0IHRoYXQgcmVmZXJlbmNlIGFuZCBjYXNjYWRlIHRoZSBzdWJzY3JpYmVyIHVwZGF0ZVxuXG4gICAgICAgIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQpIHtcbiAgICAgICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7IC8vIE91ciByZS1zdWJzY3JpYmUgbG9naWMgb25seSBydW5zIHdoZW4gdGhlIHN0b3JlL3N1YnNjcmlwdGlvbiBzZXR1cCBjaGFuZ2VzXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBJZiB3ZSdyZSBub3Qgc3Vic2NyaWJlZCB0byB0aGUgc3RvcmUsIG5vdGhpbmcgdG8gZG8gaGVyZVxuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuOyAvLyBDYXB0dXJlIHZhbHVlcyBmb3IgY2hlY2tpbmcgaWYgYW5kIHdoZW4gdGhpcyBjb21wb25lbnQgdW5tb3VudHNcblxuICAgICAgICB2YXIgZGlkVW5zdWJzY3JpYmUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGxhc3RUaHJvd25FcnJvciA9IG51bGw7IC8vIFdlJ2xsIHJ1biB0aGlzIGNhbGxiYWNrIGV2ZXJ5IHRpbWUgYSBzdG9yZSBzdWJzY3JpcHRpb24gdXBkYXRlIHByb3BhZ2F0ZXMgdG8gdGhpcyBjb21wb25lbnRcblxuICAgICAgICB2YXIgY2hlY2tGb3JVcGRhdGVzID0gZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgICAgICAgIGlmIChkaWRVbnN1YnNjcmliZSkge1xuICAgICAgICAgICAgLy8gRG9uJ3QgcnVuIHN0YWxlIGxpc3RlbmVycy5cbiAgICAgICAgICAgIC8vIFJlZHV4IGRvZXNuJ3QgZ3VhcmFudGVlIHVuc3Vic2NyaXB0aW9ucyBoYXBwZW4gdW50aWwgbmV4dCBkaXNwYXRjaC5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgbGF0ZXN0U3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAgICAgdmFyIG5ld0NoaWxkUHJvcHMsIGVycm9yO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEFjdHVhbGx5IHJ1biB0aGUgc2VsZWN0b3Igd2l0aCB0aGUgbW9zdCByZWNlbnQgc3RvcmUgc3RhdGUgYW5kIHdyYXBwZXIgcHJvcHNcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB3aGF0IHRoZSBjaGlsZCBwcm9wcyBzaG91bGQgYmVcbiAgICAgICAgICAgIG5ld0NoaWxkUHJvcHMgPSBjaGlsZFByb3BzU2VsZWN0b3IobGF0ZXN0U3RvcmVTdGF0ZSwgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvciA9IGU7XG4gICAgICAgICAgICBsYXN0VGhyb3duRXJyb3IgPSBlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIGxhc3RUaHJvd25FcnJvciA9IG51bGw7XG4gICAgICAgICAgfSAvLyBJZiB0aGUgY2hpbGQgcHJvcHMgaGF2ZW4ndCBjaGFuZ2VkLCBub3RoaW5nIHRvIGRvIGhlcmUgLSBjYXNjYWRlIHRoZSBzdWJzY3JpcHRpb24gdXBkYXRlXG5cblxuICAgICAgICAgIGlmIChuZXdDaGlsZFByb3BzID09PSBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgICBpZiAoIXJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgbm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBTYXZlIHJlZmVyZW5jZXMgdG8gdGhlIG5ldyBjaGlsZCBwcm9wcy4gIE5vdGUgdGhhdCB3ZSB0cmFjayB0aGUgXCJjaGlsZCBwcm9wcyBmcm9tIHN0b3JlIHVwZGF0ZVwiXG4gICAgICAgICAgICAvLyBhcyBhIHJlZiBpbnN0ZWFkIG9mIGEgdXNlU3RhdGUvdXNlUmVkdWNlciBiZWNhdXNlIHdlIG5lZWQgYSB3YXkgdG8gZGV0ZXJtaW5lIGlmIHRoYXQgdmFsdWUgaGFzXG4gICAgICAgICAgICAvLyBiZWVuIHByb2Nlc3NlZC4gIElmIHRoaXMgd2VudCBpbnRvIHVzZVN0YXRlL3VzZVJlZHVjZXIsIHdlIGNvdWxkbid0IGNsZWFyIG91dCB0aGUgdmFsdWUgd2l0aG91dFxuICAgICAgICAgICAgLy8gZm9yY2luZyBhbm90aGVyIHJlLXJlbmRlciwgd2hpY2ggd2UgZG9uJ3Qgd2FudC5cbiAgICAgICAgICAgIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgICAgICAgIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSB0cnVlOyAvLyBJZiB0aGUgY2hpbGQgcHJvcHMgX2RpZF8gY2hhbmdlIChvciB3ZSBjYXVnaHQgYW4gZXJyb3IpLCB0aGlzIHdyYXBwZXIgY29tcG9uZW50IG5lZWRzIHRvIHJlLXJlbmRlclxuXG4gICAgICAgICAgICBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoKHtcbiAgICAgICAgICAgICAgdHlwZTogJ1NUT1JFX1VQREFURUQnLFxuICAgICAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgbGF0ZXN0U3RvcmVTdGF0ZTogbGF0ZXN0U3RvcmVTdGF0ZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9OyAvLyBBY3R1YWxseSBzdWJzY3JpYmUgdG8gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yIChvciBzdG9yZSlcblxuXG4gICAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICAgICAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7IC8vIFB1bGwgZGF0YSBmcm9tIHRoZSBzdG9yZSBhZnRlciBmaXJzdCByZW5kZXIgaW4gY2FzZSB0aGUgc3RvcmUgaGFzXG4gICAgICAgIC8vIGNoYW5nZWQgc2luY2Ugd2UgYmVnYW4uXG5cbiAgICAgICAgY2hlY2tGb3JVcGRhdGVzKCk7XG5cbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlV3JhcHBlciA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlV3JhcHBlcigpIHtcbiAgICAgICAgICBkaWRVbnN1YnNjcmliZSA9IHRydWU7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG5cbiAgICAgICAgICBpZiAobGFzdFRocm93bkVycm9yKSB7XG4gICAgICAgICAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgd2UgY2F1Z2h0IGFuIGVycm9yIGR1ZSB0byBhIGJhZCBtYXBTdGF0ZSBmdW5jdGlvbiwgYnV0IHRoZVxuICAgICAgICAgICAgLy8gcGFyZW50IHJlLXJlbmRlcmVkIHdpdGhvdXQgdGhpcyBjb21wb25lbnQgYW5kIHdlJ3JlIGFib3V0IHRvIHVubW91bnQuXG4gICAgICAgICAgICAvLyBUaGlzIHNob3VsZG4ndCBoYXBwZW4gYXMgbG9uZyBhcyB3ZSBkbyB0b3AtZG93biBzdWJzY3JpcHRpb25zIGNvcnJlY3RseSwgYnV0XG4gICAgICAgICAgICAvLyBpZiB3ZSBldmVyIGRvIHRob3NlIHdyb25nLCB0aGlzIHRocm93IHdpbGwgc3VyZmFjZSB0aGUgZXJyb3IgaW4gb3VyIHRlc3RzLlxuICAgICAgICAgICAgLy8gSW4gdGhhdCBjYXNlLCB0aHJvdyB0aGUgZXJyb3IgZnJvbSBoZXJlIHNvIGl0IGRvZXNuJ3QgZ2V0IGxvc3QuXG4gICAgICAgICAgICB0aHJvdyBsYXN0VGhyb3duRXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB1bnN1YnNjcmliZVdyYXBwZXI7XG4gICAgICB9LCBbc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yXSk7IC8vIE5vdyB0aGF0IGFsbCB0aGF0J3MgZG9uZSwgd2UgY2FuIGZpbmFsbHkgdHJ5IHRvIGFjdHVhbGx5IHJlbmRlciB0aGUgY2hpbGQgY29tcG9uZW50LlxuICAgICAgLy8gV2UgbWVtb2l6ZSB0aGUgZWxlbWVudHMgZm9yIHRoZSByZW5kZXJlZCBjaGlsZCBjb21wb25lbnQgYXMgYW4gb3B0aW1pemF0aW9uLlxuXG4gICAgICB2YXIgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50ID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIF9leHRlbmRzKHt9LCBhY3R1YWxDaGlsZFByb3BzLCB7XG4gICAgICAgICAgcmVmOiBmb3J3YXJkZWRSZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSwgW2ZvcndhcmRlZFJlZiwgV3JhcHBlZENvbXBvbmVudCwgYWN0dWFsQ2hpbGRQcm9wc10pOyAvLyBJZiBSZWFjdCBzZWVzIHRoZSBleGFjdCBzYW1lIGVsZW1lbnQgcmVmZXJlbmNlIGFzIGxhc3QgdGltZSwgaXQgYmFpbHMgb3V0IG9mIHJlLXJlbmRlcmluZ1xuICAgICAgLy8gdGhhdCBjaGlsZCwgc2FtZSBhcyBpZiBpdCB3YXMgd3JhcHBlZCBpbiBSZWFjdC5tZW1vKCkgb3IgcmV0dXJuZWQgZmFsc2UgZnJvbSBzaG91bGRDb21wb25lbnRVcGRhdGUuXG5cbiAgICAgIHZhciByZW5kZXJlZENoaWxkID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCBpcyBzdWJzY3JpYmVkIHRvIHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdG8gcGFzcyBpdHMgb3duXG4gICAgICAgICAgLy8gc3Vic2NyaXB0aW9uIGluc3RhbmNlIGRvd24gdG8gb3VyIGRlc2NlbmRhbnRzLiBUaGF0IG1lYW5zIHJlbmRlcmluZyB0aGUgc2FtZVxuICAgICAgICAgIC8vIENvbnRleHQgaW5zdGFuY2UsIGFuZCBwdXR0aW5nIGEgZGlmZmVyZW50IHZhbHVlIGludG8gdGhlIGNvbnRleHQuXG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dFRvVXNlLlByb3ZpZGVyLCB7XG4gICAgICAgICAgICB2YWx1ZTogb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZVxuICAgICAgICAgIH0sIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgfSwgW0NvbnRleHRUb1VzZSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50LCBvdmVycmlkZGVuQ29udGV4dFZhbHVlXSk7XG4gICAgICByZXR1cm4gcmVuZGVyZWRDaGlsZDtcbiAgICB9IC8vIElmIHdlJ3JlIGluIFwicHVyZVwiIG1vZGUsIGVuc3VyZSBvdXIgd3JhcHBlciBjb21wb25lbnQgb25seSByZS1yZW5kZXJzIHdoZW4gaW5jb21pbmcgcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuXG5cbiAgICB2YXIgQ29ubmVjdCA9IHB1cmUgPyBSZWFjdC5tZW1vKENvbm5lY3RGdW5jdGlvbikgOiBDb25uZWN0RnVuY3Rpb247XG4gICAgQ29ubmVjdC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICBDb25uZWN0LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG5cbiAgICBpZiAoZm9yd2FyZFJlZikge1xuICAgICAgdmFyIGZvcndhcmRlZCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gZm9yd2FyZENvbm5lY3RSZWYocHJvcHMsIHJlZikge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb25uZWN0LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICBmb3J3YXJkZWRSZWY6IHJlZlxuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICAgIGZvcndhcmRlZC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgICAgZm9yd2FyZGVkLldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgcmV0dXJuIGhvaXN0U3RhdGljcyhmb3J3YXJkZWQsIFdyYXBwZWRDb21wb25lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwidmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd24uY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKiBUaGUgb25seSB3YXkgdG8gY2hhbmdlIHRoZSBkYXRhIGluIHRoZSBzdG9yZSBpcyB0byBjYWxsIGBkaXNwYXRjaCgpYCBvbiBpdC5cbiAqXG4gKiBUaGVyZSBzaG91bGQgb25seSBiZSBhIHNpbmdsZSBzdG9yZSBpbiB5b3VyIGFwcC4gVG8gc3BlY2lmeSBob3cgZGlmZmVyZW50XG4gKiBwYXJ0cyBvZiB0aGUgc3RhdGUgdHJlZSByZXNwb25kIHRvIGFjdGlvbnMsIHlvdSBtYXkgY29tYmluZSBzZXZlcmFsIHJlZHVjZXJzXG4gKiBpbnRvIGEgc2luZ2xlIHJlZHVjZXIgZnVuY3Rpb24gYnkgdXNpbmcgYGNvbWJpbmVSZWR1Y2Vyc2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSB0cmVlLCBnaXZlblxuICogdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGFjdGlvbiB0byBoYW5kbGUuXG4gKlxuICogQHBhcmFtIHthbnl9IFtwcmVsb2FkZWRTdGF0ZV0gVGhlIGluaXRpYWwgc3RhdGUuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBoeWRyYXRlIHRoZSBzdGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdW5pdmVyc2FsIGFwcHMsIG9yIHRvIHJlc3RvcmUgYVxuICogcHJldmlvdXNseSBzZXJpYWxpemVkIHVzZXIgc2Vzc2lvbi5cbiAqIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2Vyc2AgdG8gcHJvZHVjZSB0aGUgcm9vdCByZWR1Y2VyIGZ1bmN0aW9uLCB0aGlzIG11c3QgYmVcbiAqIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBjb21iaW5lUmVkdWNlcnNgIGtleXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2VuaGFuY2VyXSBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBlbmhhbmNlIHRoZSBzdG9yZSB3aXRoIHRoaXJkLXBhcnR5IGNhcGFiaWxpdGllcyBzdWNoIGFzIG1pZGRsZXdhcmUsXG4gKiB0aW1lIHRyYXZlbCwgcGVyc2lzdGVuY2UsIGV0Yy4gVGhlIG9ubHkgc3RvcmUgZW5oYW5jZXIgdGhhdCBzaGlwcyB3aXRoIFJlZHV4XG4gKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICpcbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBSZWR1eCBzdG9yZSB0aGF0IGxldHMgeW91IHJlYWQgdGhlIHN0YXRlLCBkaXNwYXRjaCBhY3Rpb25zXG4gKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGFyZ3VtZW50c1szXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlKGxpc3RlbmVyKSBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyO1xuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0VcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAodHlwZW9mIG9ic2VydmVyICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfSAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cblxuXG4gIGRpc3BhdGNoKHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gIH0pO1xuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgXCJhY3Rpb24gXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgfHwgJ2FuIGFjdGlvbic7XG4gIHJldHVybiBcIkdpdmVuIFwiICsgYWN0aW9uRGVzY3JpcHRpb24gKyBcIiwgcmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCI7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyBcIlxcXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgXCIgKyAoXCJrZXlzOiBcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBcIlVuZXhwZWN0ZWQgXCIgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArIFwiIFwiICsgKFwiXFxcIlwiICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIgZm91bmQgaW4gXCIgKyBhcmd1bWVudE5hbWUgKyBcIi4gXCIpICsgXCJFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6IFwiICsgKFwiXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlIFwiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiIG9yIG90aGVyIGFjdGlvbnMgaW4gXFxcInJlZHV4LypcXFwiIFwiKSArIFwibmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgXCIgKyBcImN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIFwiICsgXCJpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgXCIgKyBcImFjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLlwiKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZyhcIk5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7XG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yO1xuXG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG5cbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9rZXkgPSBmaW5hbFJlZHVjZXJLZXlzW19pXTtcbiAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1tfa2V5XTtcbiAgICAgIHZhciBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVbX2tleV07XG4gICAgICB2YXIgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuXG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCBcIiArIChhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBhY3Rpb25DcmVhdG9ycykgKyBcIi4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFjdGlvbkNyZWF0b3JzKTtcbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gICAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuXG5mdW5jdGlvbiBhcHBseU1pZGRsZXdhcmUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtaWRkbGV3YXJlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuXG4gICAgICB2YXIgX2Rpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuIFwiICsgXCJPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guXCIpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdG9yZSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIuICcgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBzZXR0aW5nIG1vZGUgdG8gcHJvZHVjdGlvbiBpbiB3ZWJwYWNrIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmNlcHRzL21vZGUvKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21iaW5lUmVkdWNlcnMsIGJpbmRBY3Rpb25DcmVhdG9ycywgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlLCBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzIH07XG4iLCJpbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZ2V0Q29uc3RhbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRDb25zdGFudFNlbGVjdG9yKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnN0YW50ID0gZ2V0Q29uc3RhbnQoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gICAgZnVuY3Rpb24gY29uc3RhbnRTZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiBjb25zdGFudDtcbiAgICB9XG5cbiAgICBjb25zdGFudFNlbGVjdG9yLmRlcGVuZHNPbk93blByb3BzID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnN0YW50U2VsZWN0b3I7XG4gIH07XG59IC8vIGRlcGVuZHNPbk93blByb3BzIGlzIHVzZWQgYnkgY3JlYXRlTWFwVG9Qcm9wc1Byb3h5IHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHBhc3MgcHJvcHMgYXMgYXJnc1xuLy8gdG8gdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgd3JhcHBlZC4gSXQgaXMgYWxzbyB1c2VkIGJ5IG1ha2VQdXJlUHJvcHNTZWxlY3RvciB0byBkZXRlcm1pbmVcbi8vIHdoZXRoZXIgbWFwVG9Qcm9wcyBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuLy9cbi8vIEEgbGVuZ3RoIG9mIG9uZSBzaWduYWxzIHRoYXQgbWFwVG9Qcm9wcyBkb2VzIG5vdCBkZXBlbmQgb24gcHJvcHMgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudC5cbi8vIEEgbGVuZ3RoIG9mIHplcm8gaXMgYXNzdW1lZCB0byBtZWFuIG1hcFRvUHJvcHMgaXMgZ2V0dGluZyBhcmdzIHZpYSBhcmd1bWVudHMgb3IgLi4uYXJncyBhbmRcbi8vIHRoZXJlZm9yZSBub3QgcmVwb3J0aW5nIGl0cyBsZW5ndGggYWNjdXJhdGVseS4uXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSBudWxsICYmIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IHVuZGVmaW5lZCA/IEJvb2xlYW4obWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgOiBtYXBUb1Byb3BzLmxlbmd0aCAhPT0gMTtcbn0gLy8gVXNlZCBieSB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiBhbmQgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sXG4vLyB0aGlzIGZ1bmN0aW9uIHdyYXBzIG1hcFRvUHJvcHMgaW4gYSBwcm94eSBmdW5jdGlvbiB3aGljaCBkb2VzIHNldmVyYWwgdGhpbmdzOlxuLy9cbi8vICAqIERldGVjdHMgd2hldGhlciB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyBjYWxsZWQgZGVwZW5kcyBvbiBwcm9wcywgd2hpY2hcbi8vICAgIGlzIHVzZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHRvIGRlY2lkZSBpZiBpdCBzaG91bGQgcmVpbnZva2Ugb24gcHJvcHMgY2hhbmdlcy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCBoYW5kbGVzIG1hcFRvUHJvcHMgaWYgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uLCBhbmQgdHJlYXRzIHRoYXRcbi8vICAgIG5ldyBmdW5jdGlvbiBhcyB0aGUgdHJ1ZSBtYXBUb1Byb3BzIGZvciBzdWJzZXF1ZW50IGNhbGxzLlxuLy9cbi8vICAqIE9uIGZpcnN0IGNhbGwsIHZlcmlmaWVzIHRoZSBmaXJzdCByZXN1bHQgaXMgYSBwbGFpbiBvYmplY3QsIGluIG9yZGVyIHRvIHdhcm5cbi8vICAgIHRoZSBkZXZlbG9wZXIgdGhhdCB0aGVpciBtYXBUb1Byb3BzIGZ1bmN0aW9uIGlzIG5vdCByZXR1cm5pbmcgYSB2YWxpZCByZXN1bHQuXG4vL1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFRvUHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZTtcblxuICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gpO1xuICAgIH07IC8vIGFsbG93IGRldGVjdEZhY3RvcnlBbmRWZXJpZnkgdG8gZ2V0IG93blByb3BzXG5cblxuICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gdHJ1ZTtcblxuICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBmdW5jdGlvbiBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBtYXBUb1Byb3BzO1xuICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKTtcbiAgICAgIHZhciBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBwcm9wcztcbiAgICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhwcm9wcyk7XG4gICAgICAgIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChwcm9wcywgZGlzcGxheU5hbWUsIG1ldGhvZE5hbWUpO1xuICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG59IiwiaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24obWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcERpc3BhdGNoVG9Qcm9wcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwRGlzcGF0Y2hUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcGF0Y2g6IGRpc3BhdGNoXG4gICAgfTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0KG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gbWFwRGlzcGF0Y2hUb1Byb3BzICYmIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdvYmplY3QnID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKG1hcERpc3BhdGNoVG9Qcm9wcywgZGlzcGF0Y2gpO1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZywgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0XTsiLCJpbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbihtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZyhtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBTdGF0ZVRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nXTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvd25Qcm9wcywgc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgICBwdXJlID0gX3JlZi5wdXJlLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZi5hcmVNZXJnZWRQcm9wc0VxdWFsO1xuICAgIHZhciBoYXNSdW5PbmNlID0gZmFsc2U7XG4gICAgdmFyIG1lcmdlZFByb3BzO1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZVByb3BzUHJveHkoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgICAgIHZhciBuZXh0TWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgICAgaWYgKGhhc1J1bk9uY2UpIHtcbiAgICAgICAgaWYgKCFwdXJlIHx8ICFhcmVNZXJnZWRQcm9wc0VxdWFsKG5leHRNZXJnZWRQcm9wcywgbWVyZ2VkUHJvcHMpKSBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc1J1bk9uY2UgPSB0cnVlO1xuICAgICAgICBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuICFtZXJnZVByb3BzID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWVyZ2VQcm9wcztcbiAgfSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24sIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkXTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCB2ZXJpZnlTdWJzZWxlY3RvcnMgZnJvbSAnLi92ZXJpZnlTdWJzZWxlY3RvcnMnO1xuZXhwb3J0IGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMobWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyksIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpLCBvd25Qcm9wcyk7XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBfcmVmKSB7XG4gIHZhciBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYuYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZi5hcmVTdGF0ZVByb3BzRXF1YWw7XG4gIHZhciBoYXNSdW5BdExlYXN0T25jZSA9IGZhbHNlO1xuICB2YXIgc3RhdGU7XG4gIHZhciBvd25Qcm9wcztcbiAgdmFyIHN0YXRlUHJvcHM7XG4gIHZhciBkaXNwYXRjaFByb3BzO1xuICB2YXIgbWVyZ2VkUHJvcHM7XG5cbiAgZnVuY3Rpb24gaGFuZGxlRmlyc3RDYWxsKGZpcnN0U3RhdGUsIGZpcnN0T3duUHJvcHMpIHtcbiAgICBzdGF0ZSA9IGZpcnN0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBmaXJzdE93blByb3BzO1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICBoYXNSdW5BdExlYXN0T25jZSA9IHRydWU7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHMoKSB7XG4gICAgaWYgKG1hcFN0YXRlVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1N0YXRlKCkge1xuICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcbiAgICBpZiAoc3RhdGVQcm9wc0NoYW5nZWQpIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgdmFyIHByb3BzQ2hhbmdlZCA9ICFhcmVPd25Qcm9wc0VxdWFsKG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwobmV4dFN0YXRlLCBzdGF0ZSk7XG4gICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBuZXh0T3duUHJvcHM7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCAmJiBzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCk7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzKCk7XG4gICAgaWYgKHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1N0YXRlKCk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn0gLy8gVE9ETzogQWRkIG1vcmUgY29tbWVudHNcbi8vIElmIHB1cmUgaXMgdHJ1ZSwgdGhlIHNlbGVjdG9yIHJldHVybmVkIGJ5IHNlbGVjdG9yRmFjdG9yeSB3aWxsIG1lbW9pemUgaXRzIHJlc3VsdHMsXG4vLyBhbGxvd2luZyBjb25uZWN0QWR2YW5jZWQncyBzaG91bGRDb21wb25lbnRVcGRhdGUgdG8gcmV0dXJuIGZhbHNlIGlmIGZpbmFsXG4vLyBwcm9wcyBoYXZlIG5vdCBjaGFuZ2VkLiBJZiBmYWxzZSwgdGhlIHNlbGVjdG9yIHdpbGwgYWx3YXlzIHJldHVybiBhIG5ld1xuLy8gb2JqZWN0IGFuZCBzaG91bGRDb21wb25lbnRVcGRhdGUgd2lsbCBhbHdheXMgcmV0dXJuIHRydWUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkoZGlzcGF0Y2gsIF9yZWYyKSB7XG4gIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gX3JlZjIuaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBfcmVmMi5pbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHMgPSBfcmVmMi5pbml0TWVyZ2VQcm9wcyxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiaW5pdE1hcFN0YXRlVG9Qcm9wc1wiLCBcImluaXRNYXBEaXNwYXRjaFRvUHJvcHNcIiwgXCJpbml0TWVyZ2VQcm9wc1wiXSk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG4gIHJldHVybiBzZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5Jztcbi8qXG4gIGNvbm5lY3QgaXMgYSBmYWNhZGUgb3ZlciBjb25uZWN0QWR2YW5jZWQuIEl0IHR1cm5zIGl0cyBhcmdzIGludG8gYSBjb21wYXRpYmxlXG4gIHNlbGVjdG9yRmFjdG9yeSwgd2hpY2ggaGFzIHRoZSBzaWduYXR1cmU6XG5cbiAgICAoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgPT4gbmV4dEZpbmFsUHJvcHNcbiAgXG4gIGNvbm5lY3QgcGFzc2VzIGl0cyBhcmdzIHRvIGNvbm5lY3RBZHZhbmNlZCBhcyBvcHRpb25zLCB3aGljaCB3aWxsIGluIHR1cm4gcGFzcyB0aGVtIHRvXG4gIHNlbGVjdG9yRmFjdG9yeSBlYWNoIHRpbWUgYSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSBpcyBpbnN0YW50aWF0ZWQgb3IgaG90IHJlbG9hZGVkLlxuXG4gIHNlbGVjdG9yRmFjdG9yeSByZXR1cm5zIGEgZmluYWwgcHJvcHMgc2VsZWN0b3IgZnJvbSBpdHMgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCBtZXJnZVByb3BzLFxuICBtZXJnZVByb3BzRmFjdG9yaWVzLCBhbmQgcHVyZSBhcmdzLlxuXG4gIFRoZSByZXN1bHRpbmcgZmluYWwgcHJvcHMgc2VsZWN0b3IgaXMgY2FsbGVkIGJ5IHRoZSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSB3aGVuZXZlclxuICBpdCByZWNlaXZlcyBuZXcgcHJvcHMgb3Igc3RvcmUgc3RhdGUuXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2goYXJnLCBmYWN0b3JpZXMsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IGZhY3Rvcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZXN1bHQgPSBmYWN0b3JpZXNbaV0oYXJnKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWUgb2YgdHlwZSBcIiArIHR5cGVvZiBhcmcgKyBcIiBmb3IgXCIgKyBuYW1lICsgXCIgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCBcIiArIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWUgKyBcIi5cIik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59IC8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0KF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBfcmVmJGNvbm5lY3RIT0MgPSBfcmVmLmNvbm5lY3RIT0MsXG4gICAgICBjb25uZWN0SE9DID0gX3JlZiRjb25uZWN0SE9DID09PSB2b2lkIDAgPyBjb25uZWN0QWR2YW5jZWQgOiBfcmVmJGNvbm5lY3RIT0MsXG4gICAgICBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPSBfcmVmLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwU3RhdGVUb1Byb3BzRixcbiAgICAgIF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9IF9yZWYubWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBEaXNwYXRjaFRvUHJvID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBEaXNwYXRjaFRvUHJvLFxuICAgICAgX3JlZiRtZXJnZVByb3BzRmFjdG9yID0gX3JlZi5tZXJnZVByb3BzRmFjdG9yaWVzLFxuICAgICAgbWVyZ2VQcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9PT0gdm9pZCAwID8gZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1lcmdlUHJvcHNGYWN0b3IsXG4gICAgICBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYuc2VsZWN0b3JGYWN0b3J5LFxuICAgICAgc2VsZWN0b3JGYWN0b3J5ID0gX3JlZiRzZWxlY3RvckZhY3RvcnkgPT09IHZvaWQgMCA/IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgOiBfcmVmJHNlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgX3JlZjIpIHtcbiAgICBpZiAoX3JlZjIgPT09IHZvaWQgMCkge1xuICAgICAgX3JlZjIgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjMgPSBfcmVmMixcbiAgICAgICAgX3JlZjMkcHVyZSA9IF9yZWYzLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMyRwdXJlID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjMkcHVyZSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMy5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9PT0gdm9pZCAwID8gc3RyaWN0RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjMkYXJlT3duUHJvcHNFcXVhID0gX3JlZjMuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU93blByb3BzRXF1YSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMy5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMy5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYzLCBbXCJwdXJlXCIsIFwiYXJlU3RhdGVzRXF1YWxcIiwgXCJhcmVPd25Qcm9wc0VxdWFsXCIsIFwiYXJlU3RhdGVQcm9wc0VxdWFsXCIsIFwiYXJlTWVyZ2VkUHJvcHNFcXVhbFwiXSk7XG5cbiAgICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hdGNoKG1hcFN0YXRlVG9Qcm9wcywgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXRjaChtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWVyZ2VQcm9wcyA9IG1hdGNoKG1lcmdlUHJvcHMsIG1lcmdlUHJvcHNGYWN0b3JpZXMsICdtZXJnZVByb3BzJyk7XG4gICAgcmV0dXJuIGNvbm5lY3RIT0Moc2VsZWN0b3JGYWN0b3J5LCBfZXh0ZW5kcyh7XG4gICAgICAvLyB1c2VkIGluIGVycm9yIG1lc3NhZ2VzXG4gICAgICBtZXRob2ROYW1lOiAnY29ubmVjdCcsXG4gICAgICAvLyB1c2VkIHRvIGNvbXB1dGUgQ29ubmVjdCdzIGRpc3BsYXlOYW1lIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50J3MgZGlzcGxheU5hbWUuXG4gICAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gXCJDb25uZWN0KFwiICsgbmFtZSArIFwiKVwiO1xuICAgICAgfSxcbiAgICAgIC8vIGlmIG1hcFN0YXRlVG9Qcm9wcyBpcyBmYWxzeSwgdGhlIENvbm5lY3QgY29tcG9uZW50IGRvZXNuJ3Qgc3Vic2NyaWJlIHRvIHN0b3JlIHN0YXRlIGNoYW5nZXNcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpLFxuICAgICAgLy8gcGFzc2VkIHRocm91Z2ggdG8gc2VsZWN0b3JGYWN0b3J5XG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzOiBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wczogaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzOiBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIHB1cmU6IHB1cmUsXG4gICAgICBhcmVTdGF0ZXNFcXVhbDogYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsOiBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsOiBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsOiBhcmVNZXJnZWRQcm9wc0VxdWFsXG4gICAgfSwgZXh0cmFPcHRpb25zKSk7XG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb25uZWN0KCk7IiwiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0Jztcbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGAuIFRoaXMgaXMgYSBsb3ctbGV2ZWxcbiAqIGhvb2sgdGhhdCB5b3Ugc2hvdWxkIHVzdWFsbHkgbm90IG5lZWQgdG8gY2FsbCBkaXJlY3RseS5cbiAqXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGBcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbiAqIGltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuICpcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKHsgdmFsdWUgfSkgPT4ge1xuICogICBjb25zdCB7IHN0b3JlIH0gPSB1c2VSZWR1eENvbnRleHQoKVxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cbiAqIH1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVkdXhDb250ZXh0KCkge1xuICB2YXIgY29udGV4dFZhbHVlID0gdXNlQ29udGV4dChSZWFjdFJlZHV4Q29udGV4dCk7XG4gIGludmFyaWFudChjb250ZXh0VmFsdWUsICdjb3VsZCBub3QgZmluZCByZWFjdC1yZWR1eCBjb250ZXh0IHZhbHVlOyBwbGVhc2UgZW5zdXJlIHRoZSBjb21wb25lbnQgaXMgd3JhcHBlZCBpbiBhIDxQcm92aWRlcj4nKTtcbiAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbn0iLCJpbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJy4vdXNlU3RvcmUnO1xuLyoqXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBgZGlzcGF0Y2hgIGZ1bmN0aW9uLiBOb3RlIHRoYXQgaW4gbW9zdCBjYXNlcyB3aGVyZSB5b3VcbiAqIG1pZ2h0IHdhbnQgdG8gdXNlIHRoaXMgaG9vayBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgYHVzZUFjdGlvbnNgIGluc3RlYWQgdG8gYmluZFxuICogYWN0aW9uIGNyZWF0b3JzIHRvIHRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHthbnl8ZnVuY3Rpb259IHJlZHV4IHN0b3JlJ3MgYGRpc3BhdGNoYCBmdW5jdGlvblxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyB1c2VSZWR1eERpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnXG4gKlxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoeyB2YWx1ZSB9KSA9PiB7XG4gKiAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxuICogICBjb25zdCBpbmNyZWFzZUNvdW50ZXIgPSB1c2VDYWxsYmFjaygoKSA9PiBkaXNwYXRjaCh7IHR5cGU6ICdpbmNyZWFzZS1jb3VudGVyJyB9KSwgW10pXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdj5cbiAqICAgICAgIDxzcGFuPnt2YWx1ZX08L3NwYW4+XG4gKiAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2luY3JlYXNlQ291bnRlcn0+SW5jcmVhc2UgY291bnRlcjwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApXG4gKiB9XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZURpc3BhdGNoKCkge1xuICB2YXIgc3RvcmUgPSB1c2VTdG9yZSgpO1xuICByZXR1cm4gc3RvcmUuZGlzcGF0Y2g7XG59IiwiaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuLyoqXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgcmVkdXggc3RvcmVcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbiAqIGltcG9ydCB7IHVzZVN0b3JlIH0gZnJvbSAncmVhY3QtcmVkdXgnXG4gKlxuICogZXhwb3J0IGNvbnN0IEV4YW1wbGVDb21wb25lbnQgPSAoKSA9PiB7XG4gKiAgIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUoKVxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cbiAqIH1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlU3RvcmUoKSB7XG4gIHZhciBfdXNlUmVkdXhDb250ZXh0ID0gdXNlUmVkdXhDb250ZXh0KCksXG4gICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmU7XG5cbiAgcmV0dXJuIHN0b3JlO1xufSIsImltcG9ydCB7IHVzZVJlZHVjZXIsIHVzZVJlZiwgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCB0byBlbnN1cmUgdGhlIHN0b3JlXG4vLyBzdWJzY3JpcHRpb24gY2FsbGJhY2sgYWx3YXlzIGhhcyB0aGUgc2VsZWN0b3IgZnJvbSB0aGUgbGF0ZXN0IHJlbmRlciBjb21taXRcbi8vIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBoYXBwZW4gYmV0d2VlbiByZW5kZXIgYW5kIHRoZSBlZmZlY3QsXG4vLyB3aGljaCBtYXkgY2F1c2UgbWlzc2VkIHVwZGF0ZXM7IHdlIGFsc28gbXVzdCBlbnN1cmUgdGhlIHN0b3JlIHN1YnNjcmlwdGlvblxuLy8gaXMgY3JlYXRlZCBzeW5jaHJvbm91c2x5LCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IG9jY3VyIGJlZm9yZSB0aGVcbi8vIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGFuZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgbWF5IGJlIG9ic2VydmVkXG5cbnZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7XG5cbnZhciByZWZFcXVhbGl0eSA9IGZ1bmN0aW9uIHJlZkVxdWFsaXR5KGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59O1xuLyoqXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZSdzIHN0YXRlLiBUaGlzIGhvb2sgdGFrZXMgYSBzZWxlY3RvciBmdW5jdGlvblxuICogYXMgYW4gYXJndW1lbnQuIFRoZSBzZWxlY3RvciBpcyBjYWxsZWQgd2l0aCB0aGUgc3RvcmUgc3RhdGUuXG4gKlxuICogVGhpcyBob29rIHRha2VzIGFuIG9wdGlvbmFsIGVxdWFsaXR5IGNvbXBhcmlzb24gZnVuY3Rpb24gYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXJcbiAqIHRoYXQgYWxsb3dzIHlvdSB0byBjdXN0b21pemUgdGhlIHdheSB0aGUgc2VsZWN0ZWQgc3RhdGUgaXMgY29tcGFyZWQgdG8gZGV0ZXJtaW5lXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2VsZWN0b3IgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XG4gKlxuICogQHJldHVybnMge2FueX0gdGhlIHNlbGVjdGVkIHN0YXRlXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuICpcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBjb3VudGVyID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuY291bnRlcilcbiAqICAgcmV0dXJuIDxkaXY+e2NvdW50ZXJ9PC9kaXY+XG4gKiB9XG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gdXNlU2VsZWN0b3Ioc2VsZWN0b3IsIGVxdWFsaXR5Rm4pIHtcbiAgaWYgKGVxdWFsaXR5Rm4gPT09IHZvaWQgMCkge1xuICAgIGVxdWFsaXR5Rm4gPSByZWZFcXVhbGl0eTtcbiAgfVxuXG4gIGludmFyaWFudChzZWxlY3RvciwgXCJZb3UgbXVzdCBwYXNzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JzXCIpO1xuXG4gIHZhciBfdXNlUmVkdXhDb250ZXh0ID0gdXNlUmVkdXhDb250ZXh0KCksXG4gICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmUsXG4gICAgICBjb250ZXh0U3ViID0gX3VzZVJlZHV4Q29udGV4dC5zdWJzY3JpcHRpb247XG5cbiAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBzICsgMTtcbiAgfSwgMCksXG4gICAgICBmb3JjZVJlbmRlciA9IF91c2VSZWR1Y2VyWzFdO1xuXG4gIHZhciBzdWJzY3JpcHRpb24gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSwgY29udGV4dFN1Yik7XG4gIH0sIFtzdG9yZSwgY29udGV4dFN1Yl0pO1xuICB2YXIgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0b3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdGVkU3RhdGUgPSB1c2VSZWYoKTtcbiAgdmFyIHNlbGVjdGVkU3RhdGU7XG5cbiAgdHJ5IHtcbiAgICBpZiAoc2VsZWN0b3IgIT09IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgfHwgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBzZWxlY3RlZFN0YXRlID0gc2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQ7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICB2YXIgZXJyb3JNZXNzYWdlID0gXCJBbiBlcnJvciBvY2N1cmVkIHdoaWxlIHNlbGVjdGluZyB0aGUgc3RvcmUgc3RhdGU6IFwiICsgZXJyLm1lc3NhZ2UgKyBcIi5cIjtcblxuICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIGVycm9yTWVzc2FnZSArPSBcIlxcblRoZSBlcnJvciBtYXkgYmUgY29ycmVsYXRlZCB3aXRoIHRoaXMgcHJldmlvdXMgZXJyb3I6XFxuXCIgKyBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQuc3RhY2sgKyBcIlxcblxcbk9yaWdpbmFsIHN0YWNrIHRyYWNlOlwiO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICB9XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgbGF0ZXN0U2VsZWN0b3IuY3VycmVudCA9IHNlbGVjdG9yO1xuICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IHNlbGVjdGVkU3RhdGU7XG4gICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICB9KTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG5ld1NlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50KHN0b3JlLmdldFN0YXRlKCkpO1xuXG4gICAgICAgIGlmIChlcXVhbGl0eUZuKG5ld1NlbGVjdGVkU3RhdGUsIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBuZXdTZWxlY3RlZFN0YXRlO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIHdlIGlnbm9yZSBhbGwgZXJyb3JzIGhlcmUsIHNpbmNlIHdoZW4gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpcyByZS1yZW5kZXJlZCwgdGhlIHNlbGVjdG9ycyBhcmUgY2FsbGVkIGFnYWluLCBhbmRcbiAgICAgICAgLy8gd2lsbCB0aHJvdyBhZ2FpbiwgaWYgbmVpdGhlciBwcm9wcyBub3Igc3RvcmUgc3RhdGVcbiAgICAgICAgLy8gY2hhbmdlZFxuICAgICAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSBlcnI7XG4gICAgICB9XG5cbiAgICAgIGZvcmNlUmVuZGVyKHt9KTtcbiAgICB9XG5cbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgY2hlY2tGb3JVcGRhdGVzKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbc3RvcmUsIHN1YnNjcmlwdGlvbl0pO1xuICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbn0iLCJmdW5jdGlvbiBjcmVhdGVUaHVua01pZGRsZXdhcmUoZXh0cmFBcmd1bWVudCkge1xuICByZXR1cm4gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLFxuICAgICAgICBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBhY3Rpb24oZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYUFyZ3VtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59XG5cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpO1xudGh1bmsud2l0aEV4dHJhQXJndW1lbnQgPSBjcmVhdGVUaHVua01pZGRsZXdhcmU7XG5cbmV4cG9ydCBkZWZhdWx0IHRodW5rOyIsImltcG9ydCBQcm92aWRlciBmcm9tICcuL2NvbXBvbmVudHMvUHJvdmlkZXInO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IGNvbm5lY3QgZnJvbSAnLi9jb25uZWN0L2Nvbm5lY3QnO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tICcuL2hvb2tzL3VzZURpc3BhdGNoJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAnLi9ob29rcy91c2VTZWxlY3Rvcic7XG5pbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJy4vaG9va3MvdXNlU3RvcmUnO1xuaW1wb3J0IHsgc2V0QmF0Y2ggfSBmcm9tICcuL3V0aWxzL2JhdGNoJztcbmltcG9ydCB7IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIGFzIGJhdGNoIH0gZnJvbSAnLi91dGlscy9yZWFjdEJhdGNoZWRVcGRhdGVzJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi91dGlscy9zaGFsbG93RXF1YWwnO1xuc2V0QmF0Y2goYmF0Y2gpO1xuZXhwb3J0IHsgUHJvdmlkZXIsIGNvbm5lY3RBZHZhbmNlZCwgUmVhY3RSZWR1eENvbnRleHQsIGNvbm5lY3QsIGJhdGNoLCB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IsIHVzZVN0b3JlLCBzaGFsbG93RXF1YWwgfTsiLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tIFwicmVkdXhcIjtcblxuZnVuY3Rpb24gZ3JlZXRpbmdSZWR1Y2VyKGdyZWV0aW5ncyA9IFtdLCBhY3Rpb24pIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgXCJTRVRfR1JFRVRJTkdTXCI6XG4gICAgICBncmVldGluZ3MgPSBbLi4uYWN0aW9uLmdyZWV0aW5nc107XG4gICAgICByZXR1cm4gZ3JlZXRpbmdzO1xuICAgIGRlZmF1bHQ6XG4gIH1cbiAgcmV0dXJuIGdyZWV0aW5ncztcbn1cblxuZnVuY3Rpb24gbW9kZVJlZHVjZXIobW9kZSA9IFwiTU9ERV9NQVNURVJcIiwgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFwiU0VUX01PREVcIjpcbiAgICAgIHJldHVybiBhY3Rpb24ubW9kZTtcbiAgICBkZWZhdWx0OlxuICB9XG5cbiAgcmV0dXJuIG1vZGU7XG59XG5cbmNvbnN0IGFwcFJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMoe1xuICBncmVldGluZ3M6IGdyZWV0aW5nUmVkdWNlcixcbiAgbW9kZTogbW9kZVJlZHVjZXJcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBhcHBSZWR1Y2VyO1xuIiwiaW1wb3J0IHsgY3JlYXRlU3RvcmUsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZSB9IGZyb20gXCJyZWR1eFwiO1xuaW1wb3J0IHRodW5rIGZyb20gXCJyZWR1eC10aHVua1wiO1xuXG5pbXBvcnQgZ3JlZXRpbmdBcHAgZnJvbSBcIi4vcmVkdWNlcnNcIjtcblxuY29uc3QgY29tcG9zZUVuaGFuY2VycyA9IHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gfHwgY29tcG9zZTtcblxuY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShncmVldGluZ0FwcCwgY29tcG9zZUVuaGFuY2VycyhhcHBseU1pZGRsZXdhcmUodGh1bmspKSk7XG5leHBvcnQgZGVmYXVsdCBzdG9yZTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZnVuY3Rpb24gR3JlZXRpbmdNYXN0ZXIocHJvcHMpIHtcbiAgY29uc3QgeyBncmVldGluZ3MsIG9uQWRkIH0gPSBwcm9wcztcbiAgY29uc3QgYm9keSA9IGdyZWV0aW5ncy5tYXAoZ3JlZXRpbmcgPT4gKFxuICAgIDx0ciBrZXk9e2dyZWV0aW5nLmlkfT5cbiAgICAgIDx0ZD57Z3JlZXRpbmcubmFtZX08L3RkPlxuICAgICAgPHRkPntncmVldGluZy5ncmVldGluZ308L3RkPlxuICAgIDwvdHI+XG4gICkpO1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8dGFibGU+XG4gICAgICAgIDx0aGVhZD5cbiAgICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGg+TmFtZTwvdGg+XG4gICAgICAgICAgICA8dGg+R3JlZXRpbmc8L3RoPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgIDwvdGhlYWQ+XG4gICAgICAgIDx0Ym9keT57Ym9keX08L3Rib2R5PlxuICAgICAgPC90YWJsZT5cbiAgICAgIDxidXR0b24gb25DbGljaz17b25BZGR9PkFkZDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgR3JlZXRpbmdNYXN0ZXI7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbi8qKlxuICogQXVmZ2FiZW46XG4gKiAxLiBQbGFjZWhvbGRlciB2b3JiZWxlZ2VuLCBkYXZvbiBkYXMgJ25hbWUnIEF0dHJpYnV0ZSBhYmxlaXRlblxuICogMi4gaW5pdGlhbCBWYWx1ZSB2b3JiZWxlZ2VuIG1pdCBcIlwiLCBmYWxscyBuaWNodCBnZXNldHp0XG4gKiAzLiBTZXR6ZW4gZGVzIFdlcnRlcyB1bmQgYXVmIFZlcsOkbmRlcnVuZ2VuIHJlYWdpZXJlblxuICogNC4gVm9uIGF1w59lbiAncmVzZXQtYmFyJyBzZWluXG4gKlxuICovXG5mdW5jdGlvbiB1c2VJbnB1dChwbGFjZWhvbGRlciwgaW5pdGlhbFZhbHVlKSB7XG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gUmVhY3QudXNlU3RhdGUoaW5pdGlhbFZhbHVlIHx8IFwiXCIpO1xuXG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHNldFZhbHVlKFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtcbiAgICB7XG4gICAgICBwbGFjZWhvbGRlcixcbiAgICAgIG5hbWU6IHBsYWNlaG9sZGVyLnRvTG93ZXJDYXNlKCksXG4gICAgICBvbkNoYW5nZTogZXZlbnQgPT4gc2V0VmFsdWUoZXZlbnQudGFyZ2V0LnZhbHVlKSxcbiAgICAgIHZhbHVlXG4gICAgfSxcbiAgICByZXNldFxuICBdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBHcmVldGluZ0RldGFpbChwcm9wcykge1xuICBjb25zdCBbbmFtZUlucHV0LCByZXNldE5hbWVdID0gdXNlSW5wdXQoXCJOYW1lXCIsIHByb3BzLmluaXRpYWxOYW1lKTtcbiAgY29uc3QgW2dyZWV0aW5nSW5wdXQsIHJlc2V0R3JlZXRpbmddID0gdXNlSW5wdXQoXCJHcmVldGluZ1wiLCBwcm9wcy5pbml0aWFsR3JlZXRpbmcpO1xuXG4gIGNvbnN0IGlucHV0UmVmID0gUmVhY3QudXNlUmVmKCk7XG5cbiAgY29uc3Qgc2F2ZURpc2FibGVkID0gIShuYW1lSW5wdXQudmFsdWUgJiYgZ3JlZXRpbmdJbnB1dC52YWx1ZSk7XG5cbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgcmVzZXROYW1lKCk7XG4gICAgcmVzZXRHcmVldGluZygpO1xuXG4gICAgaW5wdXRSZWYuY3VycmVudC5mb2N1cygpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2F2ZSgpIHtcbiAgICBwcm9wcy5vblNhdmUoe1xuICAgICAgbmFtZTogbmFtZUlucHV0LnZhbHVlLFxuICAgICAgZ3JlZXRpbmc6IGdyZWV0aW5nSW5wdXQudmFsdWVcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxpbnB1dCB7Li4ubmFtZUlucHV0fSByZWY9e2lucHV0UmVmfSAvPlxuICAgICAgPGlucHV0IHsuLi5ncmVldGluZ0lucHV0fSAvPlxuXG4gICAgICA8YnV0dG9uIG9uQ2xpY2s9e3Jlc2V0fT5DbGVhcjwvYnV0dG9uPlxuICAgICAgPGJ1dHRvbiBkaXNhYmxlZD17c2F2ZURpc2FibGVkfSBvbkNsaWNrPXtzYXZlfT5cbiAgICAgICAgU2F2ZVxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gc2V0R3JlZXRpbmdzKG5ld0dyZWV0aW5ncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiU0VUX0dSRUVUSU5HU1wiLFxuICAgIGdyZWV0aW5nczogZ3JlZXRpbmdzXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRHcmVldGluZyhuZXdHcmVldGluZykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiQUREX0dSRUVUSU5HXCIsXG4gICAgZ3JlZXRpbmc6IG5ld0dyZWV0aW5nXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvcGVuRGV0YWlsVmlldygpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIlNFVF9NT0RFXCIsXG4gICAgbW9kZTogXCJNT0RFX0RFVEFJTFwiXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvcGVuTWFzdGVyVmlldygpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIlNFVF9NT0RFXCIsXG4gICAgbW9kZTogXCJNT0RFX01BU1RFUlwiXG4gIH07XG59XG5cbmNvbnN0IEJBQ0tFTkRfVVJMID0gXCJodHRwOi8vbG9jYWxob3N0OjcwMDAvZ3JlZXRpbmdzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkR3JlZXRpbmdzRnJvbVNlcnZlcigpIHtcbiAgcmV0dXJuIGFzeW5jIGRpc3BhdGNoID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChCQUNLRU5EX1VSTCk7XG4gICAgICBjb25zdCBncmVldGluZ3MgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IFwiU0VUX0dSRUVUSU5HU1wiLFxuICAgICAgICBncmVldGluZ3M6IGdyZWV0aW5nc1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTG9hZGluZyBHcmVldGluZ3MgZmFpbGVkXCIsIGVycik7XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IFwiU0VUX0dSRUVUSU5HU19GQUlMRURcIixcbiAgICAgICAgZXJyXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBHcmVldGluZ01hc3RlciBmcm9tIFwiLi9HcmVldGluZ01hc3RlclwiO1xuaW1wb3J0IEdyZWV0aW5nRGV0YWlsIGZyb20gXCIuL0dyZWV0aW5nRGV0YWlsXCI7XG5cbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSBcIi4vYWN0aW9uc1wiO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5cbmNvbnN0IEJBQ0tFTkRfVVJMID0gXCJodHRwOi8vbG9jYWxob3N0OjcwMDAvZ3JlZXRpbmdzXCI7XG5jb25zdCBNT0RFX01BU1RFUiA9IFwiTU9ERV9NQVNURVJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gR3JlZXRpbmdDb250cm9sbGVyKCkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IG1vZGUgPSB1c2VTZWxlY3RvcihzdG9yZSA9PiBzdG9yZS5tb2RlKTtcbiAgY29uc3QgZ3JlZXRpbmdzID0gdXNlU2VsZWN0b3Ioc3RvcmUgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiUkVEVVggU1RPUkVcIiwgc3RvcmUpO1xuICAgIHJldHVybiBzdG9yZS5ncmVldGluZ3M7XG4gIH0pO1xuXG4gIGNvbnNvbGUubG9nKFwiZ3JlZXRpbmdzRnJvbVJlZHV4XCIsIGdyZWV0aW5ncyk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBkaXNwYXRjaChhY3Rpb25zLmxvYWRHcmVldGluZ3NGcm9tU2VydmVyKCkpO1xuICB9LCBbXSk7XG5cbiAgYXN5bmMgZnVuY3Rpb24gYWRkR3JlZXRpbmcoZ3JlZXRpbmdUb0JlQWRkZWQpIHtcbiAgICBsZXQgbmV3R3JlZXRpbmc7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goQkFDS0VORF9VUkwsIHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZ3JlZXRpbmdUb0JlQWRkZWQpXG4gICAgICB9KTtcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHN0YXR1cyBjb2RlOiBcIiArIHJlc3BvbnNlLnN0YXR1cyk7XG4gICAgICB9XG4gICAgICBuZXdHcmVldGluZyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJMT0FESU5HIEdSRUVUSU5HUyBGQUlMRUQ6XCIsIGVycik7XG4gICAgfVxuICAgIGRpc3BhdGNoKGFjdGlvbnMuYWRkR3JlZXRpbmcobmV3R3JlZXRpbmcpKTtcbiAgICBkaXNwYXRjaChhY3Rpb25zLm9wZW5NYXN0ZXJWaWV3KCkpO1xuICB9XG5cbiAgaWYgKG1vZGUgPT09IE1PREVfTUFTVEVSKVxuICAgIHJldHVybiAoXG4gICAgICA8R3JlZXRpbmdNYXN0ZXJcbiAgICAgICAgZ3JlZXRpbmdzPXtncmVldGluZ3N9XG4gICAgICAgIG9uQWRkPXsoKSA9PiB7XG4gICAgICAgICAgZGlzcGF0Y2goYWN0aW9ucy5vcGVuRGV0YWlsVmlldygpKTtcbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgKTtcblxuICByZXR1cm4gPEdyZWV0aW5nRGV0YWlsIG9uU2F2ZT17YWRkR3JlZXRpbmd9IC8+O1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFcnJvckhhbmRsZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0geyBoYXNFcnJvcjogZmFsc2UgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4geyBlcnJvcjogZXJyb3IudG9TdHJpbmcoKSB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGluZm8pIHtcbiAgICBjb25zb2xlLmVycm9yKFwidXVwcy4uLiB3ZSBjYXVnaHQgYW4gZXJyb3JcIiwgZXJyb3IsIGluZm8pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLmVycm9yKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxoMT5BbiBlcnJvciBvY2N1cmVkITwvaDE+XG4gICAgICAgICAgPHByZT57dGhpcy5zdGF0ZS5lcnJvcn08L3ByZT5cbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHRoaXMuc2V0U3RhdGUoeyBlcnJvcjogbnVsbCB9KX0+VHJ5IGFnYWluPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcblxuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCBzdG9yZSBmcm9tIFwiLi9zdG9yZVwiO1xuXG5pbXBvcnQgR3JlZXRpbmdDb250cm9sbGVyIGZyb20gXCIuL0dyZWV0aW5nQ29udHJvbGxlclwiO1xuaW1wb3J0IEVycm9ySGFuZGxlciBmcm9tIFwiLi9FcnJvckhhbmRsZXJcIjtcblxuY29uc3QgbW91bnROb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtb3VudFwiKTtcblJlYWN0RE9NLnJlbmRlcihcbiAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgPEVycm9ySGFuZGxlcj5cbiAgICAgIDxHcmVldGluZ0NvbnRyb2xsZXIgLz5cbiAgICA8L0Vycm9ySGFuZGxlcj5cbiAgPC9Qcm92aWRlcj4sXG4gIG1vdW50Tm9kZVxuKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=